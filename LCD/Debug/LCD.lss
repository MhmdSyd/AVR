
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000024c2  00002556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00002556  2**0
                  ALLOC
  3 .stab         00002178  00000000  00000000  00002558  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000112b  00000000  00000000  000046d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000057fb  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000580c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000080  00000000  00000000  00005848  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000005c6  00000000  00000000  000058c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000537  00000000  00000000  00005e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000243  00000000  00000000  000063c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000020d  00000000  00000000  00006608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 36       	cpi	r26, 0x64	; 100
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <main>
      74:	0c 94 5f 12 	jmp	0x24be	; 0x24be <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LCD_sendCommand>:
 *******************************************************************************/

/*
 * Function responsible for Send Order to LCD
 */
void LCD_sendCommand(uint8 command) {
      7c:	0f 93       	push	r16
      7e:	1f 93       	push	r17
      80:	cf 93       	push	r28
      82:	df 93       	push	r29
      84:	cd b7       	in	r28, 0x3d	; 61
      86:	de b7       	in	r29, 0x3e	; 62
      88:	cd 5c       	subi	r28, 0xCD	; 205
      8a:	d1 09       	sbc	r29, r1
      8c:	0f b6       	in	r0, 0x3f	; 63
      8e:	f8 94       	cli
      90:	de bf       	out	0x3e, r29	; 62
      92:	0f be       	out	0x3f, r0	; 63
      94:	cd bf       	out	0x3d, r28	; 61
      96:	9e 01       	movw	r18, r28
      98:	2b 5a       	subi	r18, 0xAB	; 171
      9a:	3f 4f       	sbci	r19, 0xFF	; 255
      9c:	d9 01       	movw	r26, r18
      9e:	8c 93       	st	X, r24
	RS = CLEAR; /* tell LCD that data which will send now is command */
      a0:	82 e3       	ldi	r24, 0x32	; 50
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	fc 01       	movw	r30, r24
      a6:	20 81       	ld	r18, Z
      a8:	2f 7e       	andi	r18, 0xEF	; 239
      aa:	dc 01       	movw	r26, r24
      ac:	2c 93       	st	X, r18
	RW = CLEAR; /* select write Mode on LCD */
      ae:	82 e3       	ldi	r24, 0x32	; 50
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	fc 01       	movw	r30, r24
      b4:	20 81       	ld	r18, Z
      b6:	2f 7d       	andi	r18, 0xDF	; 223
      b8:	dc 01       	movw	r26, r24
      ba:	2c 93       	st	X, r18
      bc:	9e 01       	movw	r18, r28
      be:	29 5b       	subi	r18, 0xB9	; 185
      c0:	3f 4f       	sbci	r19, 0xFF	; 255
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	a0 e8       	ldi	r26, 0x80	; 128
      c8:	bf e3       	ldi	r27, 0x3F	; 63
      ca:	f9 01       	movw	r30, r18
      cc:	80 83       	st	Z, r24
      ce:	91 83       	std	Z+1, r25	; 0x01
      d0:	a2 83       	std	Z+2, r26	; 0x02
      d2:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      d4:	8e 01       	movw	r16, r28
      d6:	05 5b       	subi	r16, 0xB5	; 181
      d8:	1f 4f       	sbci	r17, 0xFF	; 255
      da:	ce 01       	movw	r24, r28
      dc:	89 5b       	subi	r24, 0xB9	; 185
      de:	9f 4f       	sbci	r25, 0xFF	; 255
      e0:	20 e0       	ldi	r18, 0x00	; 0
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	4a e7       	ldi	r20, 0x7A	; 122
      e6:	53 e4       	ldi	r21, 0x43	; 67
      e8:	dc 01       	movw	r26, r24
      ea:	6d 91       	ld	r22, X+
      ec:	7d 91       	ld	r23, X+
      ee:	8d 91       	ld	r24, X+
      f0:	9c 91       	ld	r25, X
      f2:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
      f6:	e2 96       	adiw	r28, 0x32	; 50
      f8:	6c af       	std	Y+60, r22	; 0x3c
      fa:	7d af       	std	Y+61, r23	; 0x3d
      fc:	8e af       	std	Y+62, r24	; 0x3e
      fe:	9f af       	std	Y+63, r25	; 0x3f
     100:	e2 97       	sbiw	r28, 0x32	; 50
     102:	e2 96       	adiw	r28, 0x32	; 50
     104:	2c ad       	ldd	r18, Y+60	; 0x3c
     106:	3d ad       	ldd	r19, Y+61	; 0x3d
     108:	4e ad       	ldd	r20, Y+62	; 0x3e
     10a:	5f ad       	ldd	r21, Y+63	; 0x3f
     10c:	e2 97       	sbiw	r28, 0x32	; 50
     10e:	d8 01       	movw	r26, r16
     110:	2d 93       	st	X+, r18
     112:	3d 93       	st	X+, r19
     114:	4d 93       	st	X+, r20
     116:	5c 93       	st	X, r21
     118:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
     11a:	ce 01       	movw	r24, r28
     11c:	85 5b       	subi	r24, 0xB5	; 181
     11e:	9f 4f       	sbci	r25, 0xFF	; 255
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e8       	ldi	r20, 0x80	; 128
     126:	5f e3       	ldi	r21, 0x3F	; 63
     128:	fc 01       	movw	r30, r24
     12a:	60 81       	ld	r22, Z
     12c:	71 81       	ldd	r23, Z+1	; 0x01
     12e:	82 81       	ldd	r24, Z+2	; 0x02
     130:	93 81       	ldd	r25, Z+3	; 0x03
     132:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     136:	88 23       	and	r24, r24
     138:	4c f4       	brge	.+18     	; 0x14c <LCD_sendCommand+0xd0>
		__ticks = 1;
     13a:	ce 01       	movw	r24, r28
     13c:	81 5b       	subi	r24, 0xB1	; 177
     13e:	9f 4f       	sbci	r25, 0xFF	; 255
     140:	21 e0       	ldi	r18, 0x01	; 1
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	dc 01       	movw	r26, r24
     146:	2d 93       	st	X+, r18
     148:	3c 93       	st	X, r19
     14a:	92 c0       	rjmp	.+292    	; 0x270 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     14c:	ce 01       	movw	r24, r28
     14e:	85 5b       	subi	r24, 0xB5	; 181
     150:	9f 4f       	sbci	r25, 0xFF	; 255
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	3f ef       	ldi	r19, 0xFF	; 255
     156:	4f e7       	ldi	r20, 0x7F	; 127
     158:	57 e4       	ldi	r21, 0x47	; 71
     15a:	fc 01       	movw	r30, r24
     15c:	60 81       	ld	r22, Z
     15e:	71 81       	ldd	r23, Z+1	; 0x01
     160:	82 81       	ldd	r24, Z+2	; 0x02
     162:	93 81       	ldd	r25, Z+3	; 0x03
     164:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     168:	18 16       	cp	r1, r24
     16a:	0c f0       	brlt	.+2      	; 0x16e <LCD_sendCommand+0xf2>
     16c:	67 c0       	rjmp	.+206    	; 0x23c <LCD_sendCommand+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     16e:	ce 01       	movw	r24, r28
     170:	89 5b       	subi	r24, 0xB9	; 185
     172:	9f 4f       	sbci	r25, 0xFF	; 255
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	40 e2       	ldi	r20, 0x20	; 32
     17a:	51 e4       	ldi	r21, 0x41	; 65
     17c:	dc 01       	movw	r26, r24
     17e:	6d 91       	ld	r22, X+
     180:	7d 91       	ld	r23, X+
     182:	8d 91       	ld	r24, X+
     184:	9c 91       	ld	r25, X
     186:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     18a:	e6 96       	adiw	r28, 0x36	; 54
     18c:	6c af       	std	Y+60, r22	; 0x3c
     18e:	7d af       	std	Y+61, r23	; 0x3d
     190:	8e af       	std	Y+62, r24	; 0x3e
     192:	9f af       	std	Y+63, r25	; 0x3f
     194:	e6 97       	sbiw	r28, 0x36	; 54
     196:	e6 96       	adiw	r28, 0x36	; 54
     198:	2c ad       	ldd	r18, Y+60	; 0x3c
     19a:	3d ad       	ldd	r19, Y+61	; 0x3d
     19c:	4e ad       	ldd	r20, Y+62	; 0x3e
     19e:	5f ad       	ldd	r21, Y+63	; 0x3f
     1a0:	e6 97       	sbiw	r28, 0x36	; 54
     1a2:	ae 96       	adiw	r28, 0x2e	; 46
     1a4:	2c af       	std	Y+60, r18	; 0x3c
     1a6:	3d af       	std	Y+61, r19	; 0x3d
     1a8:	4e af       	std	Y+62, r20	; 0x3e
     1aa:	5f af       	std	Y+63, r21	; 0x3f
     1ac:	ae 97       	sbiw	r28, 0x2e	; 46
     1ae:	8e 01       	movw	r16, r28
     1b0:	01 5b       	subi	r16, 0xB1	; 177
     1b2:	1f 4f       	sbci	r17, 0xFF	; 255
     1b4:	ae 96       	adiw	r28, 0x2e	; 46
     1b6:	6c ad       	ldd	r22, Y+60	; 0x3c
     1b8:	7d ad       	ldd	r23, Y+61	; 0x3d
     1ba:	8e ad       	ldd	r24, Y+62	; 0x3e
     1bc:	9f ad       	ldd	r25, Y+63	; 0x3f
     1be:	ae 97       	sbiw	r28, 0x2e	; 46
     1c0:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     1c4:	ea 96       	adiw	r28, 0x3a	; 58
     1c6:	6c af       	std	Y+60, r22	; 0x3c
     1c8:	7d af       	std	Y+61, r23	; 0x3d
     1ca:	8e af       	std	Y+62, r24	; 0x3e
     1cc:	9f af       	std	Y+63, r25	; 0x3f
     1ce:	ea 97       	sbiw	r28, 0x3a	; 58
     1d0:	e8 96       	adiw	r28, 0x38	; 56
     1d2:	ee ad       	ldd	r30, Y+62	; 0x3e
     1d4:	ff ad       	ldd	r31, Y+63	; 0x3f
     1d6:	e8 97       	sbiw	r28, 0x38	; 56
     1d8:	d8 01       	movw	r26, r16
     1da:	ed 93       	st	X+, r30
     1dc:	fc 93       	st	X, r31
		while(__ticks)
     1de:	25 c0       	rjmp	.+74     	; 0x22a <LCD_sendCommand+0x1ae>
     1e0:	ce 01       	movw	r24, r28
     1e2:	8f 5a       	subi	r24, 0xAF	; 175
     1e4:	9f 4f       	sbci	r25, 0xFF	; 255
     1e6:	29 e1       	ldi	r18, 0x19	; 25
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	dc 01       	movw	r26, r24
     1ec:	2d 93       	st	X+, r18
     1ee:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f0:	ce 01       	movw	r24, r28
     1f2:	8f 5a       	subi	r24, 0xAF	; 175
     1f4:	9f 4f       	sbci	r25, 0xFF	; 255
     1f6:	fc 01       	movw	r30, r24
     1f8:	80 81       	ld	r24, Z
     1fa:	91 81       	ldd	r25, Z+1	; 0x01
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_sendCommand+0x180>
     200:	9e 01       	movw	r18, r28
     202:	2f 5a       	subi	r18, 0xAF	; 175
     204:	3f 4f       	sbci	r19, 0xFF	; 255
     206:	d9 01       	movw	r26, r18
     208:	8d 93       	st	X+, r24
     20a:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     20c:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20e:	ce 01       	movw	r24, r28
     210:	81 5b       	subi	r24, 0xB1	; 177
     212:	9f 4f       	sbci	r25, 0xFF	; 255
     214:	9e 01       	movw	r18, r28
     216:	21 5b       	subi	r18, 0xB1	; 177
     218:	3f 4f       	sbci	r19, 0xFF	; 255
     21a:	f9 01       	movw	r30, r18
     21c:	20 81       	ld	r18, Z
     21e:	31 81       	ldd	r19, Z+1	; 0x01
     220:	21 50       	subi	r18, 0x01	; 1
     222:	31 09       	sbc	r19, r1
     224:	dc 01       	movw	r26, r24
     226:	2d 93       	st	X+, r18
     228:	3c 93       	st	X, r19
		while(__ticks)
     22a:	ce 01       	movw	r24, r28
     22c:	81 5b       	subi	r24, 0xB1	; 177
     22e:	9f 4f       	sbci	r25, 0xFF	; 255
     230:	fc 01       	movw	r30, r24
     232:	80 81       	ld	r24, Z
     234:	91 81       	ldd	r25, Z+1	; 0x01
     236:	89 2b       	or	r24, r25
     238:	99 f6       	brne	.-90     	; 0x1e0 <LCD_sendCommand+0x164>
		}
		return;
     23a:	35 c0       	rjmp	.+106    	; 0x2a6 <LCD_sendCommand+0x22a>
	}
	else
		__ticks = (uint16_t)__tmp;
     23c:	8e 01       	movw	r16, r28
     23e:	01 5b       	subi	r16, 0xB1	; 177
     240:	1f 4f       	sbci	r17, 0xFF	; 255
     242:	ce 01       	movw	r24, r28
     244:	85 5b       	subi	r24, 0xB5	; 181
     246:	9f 4f       	sbci	r25, 0xFF	; 255
     248:	dc 01       	movw	r26, r24
     24a:	6d 91       	ld	r22, X+
     24c:	7d 91       	ld	r23, X+
     24e:	8d 91       	ld	r24, X+
     250:	9c 91       	ld	r25, X
     252:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     256:	ee 96       	adiw	r28, 0x3e	; 62
     258:	6c af       	std	Y+60, r22	; 0x3c
     25a:	7d af       	std	Y+61, r23	; 0x3d
     25c:	8e af       	std	Y+62, r24	; 0x3e
     25e:	9f af       	std	Y+63, r25	; 0x3f
     260:	ee 97       	sbiw	r28, 0x3e	; 62
     262:	ec 96       	adiw	r28, 0x3c	; 60
     264:	2e ad       	ldd	r18, Y+62	; 0x3e
     266:	3f ad       	ldd	r19, Y+63	; 0x3f
     268:	ec 97       	sbiw	r28, 0x3c	; 60
     26a:	f8 01       	movw	r30, r16
     26c:	31 83       	std	Z+1, r19	; 0x01
     26e:	20 83       	st	Z, r18
     270:	ce 01       	movw	r24, r28
     272:	8d 5a       	subi	r24, 0xAD	; 173
     274:	9f 4f       	sbci	r25, 0xFF	; 255
     276:	9e 01       	movw	r18, r28
     278:	21 5b       	subi	r18, 0xB1	; 177
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	d9 01       	movw	r26, r18
     27e:	2d 91       	ld	r18, X+
     280:	3c 91       	ld	r19, X
     282:	fc 01       	movw	r30, r24
     284:	31 83       	std	Z+1, r19	; 0x01
     286:	20 83       	st	Z, r18
	__asm__ volatile (
     288:	ce 01       	movw	r24, r28
     28a:	8d 5a       	subi	r24, 0xAD	; 173
     28c:	9f 4f       	sbci	r25, 0xFF	; 255
     28e:	dc 01       	movw	r26, r24
     290:	8d 91       	ld	r24, X+
     292:	9c 91       	ld	r25, X
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <LCD_sendCommand+0x218>
     298:	9e 01       	movw	r18, r28
     29a:	2d 5a       	subi	r18, 0xAD	; 173
     29c:	3f 4f       	sbci	r19, 0xFF	; 255
     29e:	f9 01       	movw	r30, r18
     2a0:	91 83       	std	Z+1, r25	; 0x01
     2a2:	80 83       	st	Z, r24
}
     2a4:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
     2a6:	82 e3       	ldi	r24, 0x32	; 50
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	dc 01       	movw	r26, r24
     2ac:	2c 91       	ld	r18, X
     2ae:	20 64       	ori	r18, 0x40	; 64
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	a0 e8       	ldi	r26, 0x80	; 128
     2ba:	bf e3       	ldi	r27, 0x3F	; 63
     2bc:	89 af       	std	Y+57, r24	; 0x39
     2be:	9a af       	std	Y+58, r25	; 0x3a
     2c0:	ab af       	std	Y+59, r26	; 0x3b
     2c2:	bc af       	std	Y+60, r27	; 0x3c
	__tmp = ((F_CPU) / 4e3) * __ms;
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	4a e7       	ldi	r20, 0x7A	; 122
     2ca:	53 e4       	ldi	r21, 0x43	; 67
     2cc:	69 ad       	ldd	r22, Y+57	; 0x39
     2ce:	7a ad       	ldd	r23, Y+58	; 0x3a
     2d0:	8b ad       	ldd	r24, Y+59	; 0x3b
     2d2:	9c ad       	ldd	r25, Y+60	; 0x3c
     2d4:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     2d8:	c2 58       	subi	r28, 0x82	; 130
     2da:	df 4f       	sbci	r29, 0xFF	; 255
     2dc:	68 83       	st	Y, r22
     2de:	79 83       	std	Y+1, r23	; 0x01
     2e0:	8a 83       	std	Y+2, r24	; 0x02
     2e2:	9b 83       	std	Y+3, r25	; 0x03
     2e4:	ce 57       	subi	r28, 0x7E	; 126
     2e6:	d0 40       	sbci	r29, 0x00	; 0
     2e8:	ce 01       	movw	r24, r28
     2ea:	cd 96       	adiw	r24, 0x3d	; 61
     2ec:	c2 58       	subi	r28, 0x82	; 130
     2ee:	df 4f       	sbci	r29, 0xFF	; 255
     2f0:	28 81       	ld	r18, Y
     2f2:	39 81       	ldd	r19, Y+1	; 0x01
     2f4:	4a 81       	ldd	r20, Y+2	; 0x02
     2f6:	5b 81       	ldd	r21, Y+3	; 0x03
     2f8:	ce 57       	subi	r28, 0x7E	; 126
     2fa:	d0 40       	sbci	r29, 0x00	; 0
     2fc:	dc 01       	movw	r26, r24
     2fe:	2d 93       	st	X+, r18
     300:	3d 93       	st	X+, r19
     302:	4d 93       	st	X+, r20
     304:	5c 93       	st	X, r21
     306:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	40 e8       	ldi	r20, 0x80	; 128
     30e:	5f e3       	ldi	r21, 0x3F	; 63
     310:	ce 01       	movw	r24, r28
     312:	cd 96       	adiw	r24, 0x3d	; 61
     314:	fc 01       	movw	r30, r24
     316:	60 81       	ld	r22, Z
     318:	71 81       	ldd	r23, Z+1	; 0x01
     31a:	82 81       	ldd	r24, Z+2	; 0x02
     31c:	93 81       	ldd	r25, Z+3	; 0x03
     31e:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     322:	88 23       	and	r24, r24
     324:	4c f4       	brge	.+18     	; 0x338 <LCD_sendCommand+0x2bc>
		__ticks = 1;
     326:	ce 01       	movw	r24, r28
     328:	8f 5b       	subi	r24, 0xBF	; 191
     32a:	9f 4f       	sbci	r25, 0xFF	; 255
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	dc 01       	movw	r26, r24
     332:	2d 93       	st	X+, r18
     334:	3c 93       	st	X, r19
     336:	98 c0       	rjmp	.+304    	; 0x468 <__stack+0x9>
	else if (__tmp > 65535)
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	3f ef       	ldi	r19, 0xFF	; 255
     33c:	4f e7       	ldi	r20, 0x7F	; 127
     33e:	57 e4       	ldi	r21, 0x47	; 71
     340:	ce 01       	movw	r24, r28
     342:	cd 96       	adiw	r24, 0x3d	; 61
     344:	fc 01       	movw	r30, r24
     346:	60 81       	ld	r22, Z
     348:	71 81       	ldd	r23, Z+1	; 0x01
     34a:	82 81       	ldd	r24, Z+2	; 0x02
     34c:	93 81       	ldd	r25, Z+3	; 0x03
     34e:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     352:	18 16       	cp	r1, r24
     354:	0c f0       	brlt	.+2      	; 0x358 <LCD_sendCommand+0x2dc>
     356:	6b c0       	rjmp	.+214    	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e2       	ldi	r20, 0x20	; 32
     35e:	51 e4       	ldi	r21, 0x41	; 65
     360:	69 ad       	ldd	r22, Y+57	; 0x39
     362:	7a ad       	ldd	r23, Y+58	; 0x3a
     364:	8b ad       	ldd	r24, Y+59	; 0x3b
     366:	9c ad       	ldd	r25, Y+60	; 0x3c
     368:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     36c:	ce 57       	subi	r28, 0x7E	; 126
     36e:	df 4f       	sbci	r29, 0xFF	; 255
     370:	68 83       	st	Y, r22
     372:	79 83       	std	Y+1, r23	; 0x01
     374:	8a 83       	std	Y+2, r24	; 0x02
     376:	9b 83       	std	Y+3, r25	; 0x03
     378:	c2 58       	subi	r28, 0x82	; 130
     37a:	d0 40       	sbci	r29, 0x00	; 0
     37c:	ce 57       	subi	r28, 0x7E	; 126
     37e:	df 4f       	sbci	r29, 0xFF	; 255
     380:	28 81       	ld	r18, Y
     382:	39 81       	ldd	r19, Y+1	; 0x01
     384:	4a 81       	ldd	r20, Y+2	; 0x02
     386:	5b 81       	ldd	r21, Y+3	; 0x03
     388:	c2 58       	subi	r28, 0x82	; 130
     38a:	d0 40       	sbci	r29, 0x00	; 0
     38c:	aa 96       	adiw	r28, 0x2a	; 42
     38e:	2c af       	std	Y+60, r18	; 0x3c
     390:	3d af       	std	Y+61, r19	; 0x3d
     392:	4e af       	std	Y+62, r20	; 0x3e
     394:	5f af       	std	Y+63, r21	; 0x3f
     396:	aa 97       	sbiw	r28, 0x2a	; 42
     398:	8e 01       	movw	r16, r28
     39a:	0f 5b       	subi	r16, 0xBF	; 191
     39c:	1f 4f       	sbci	r17, 0xFF	; 255
     39e:	aa 96       	adiw	r28, 0x2a	; 42
     3a0:	6c ad       	ldd	r22, Y+60	; 0x3c
     3a2:	7d ad       	ldd	r23, Y+61	; 0x3d
     3a4:	8e ad       	ldd	r24, Y+62	; 0x3e
     3a6:	9f ad       	ldd	r25, Y+63	; 0x3f
     3a8:	aa 97       	sbiw	r28, 0x2a	; 42
     3aa:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     3ae:	ca 57       	subi	r28, 0x7A	; 122
     3b0:	df 4f       	sbci	r29, 0xFF	; 255
     3b2:	68 83       	st	Y, r22
     3b4:	79 83       	std	Y+1, r23	; 0x01
     3b6:	8a 83       	std	Y+2, r24	; 0x02
     3b8:	9b 83       	std	Y+3, r25	; 0x03
     3ba:	c6 58       	subi	r28, 0x86	; 134
     3bc:	d0 40       	sbci	r29, 0x00	; 0
     3be:	ca 57       	subi	r28, 0x7A	; 122
     3c0:	df 4f       	sbci	r29, 0xFF	; 255
     3c2:	e8 81       	ld	r30, Y
     3c4:	f9 81       	ldd	r31, Y+1	; 0x01
     3c6:	c6 58       	subi	r28, 0x86	; 134
     3c8:	d0 40       	sbci	r29, 0x00	; 0
     3ca:	d8 01       	movw	r26, r16
     3cc:	ed 93       	st	X+, r30
     3ce:	fc 93       	st	X, r31
		while(__ticks)
     3d0:	25 c0       	rjmp	.+74     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
     3d2:	ce 01       	movw	r24, r28
     3d4:	8d 5b       	subi	r24, 0xBD	; 189
     3d6:	9f 4f       	sbci	r25, 0xFF	; 255
     3d8:	29 e1       	ldi	r18, 0x19	; 25
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	dc 01       	movw	r26, r24
     3de:	2d 93       	st	X+, r18
     3e0:	3c 93       	st	X, r19
	__asm__ volatile (
     3e2:	ce 01       	movw	r24, r28
     3e4:	8d 5b       	subi	r24, 0xBD	; 189
     3e6:	9f 4f       	sbci	r25, 0xFF	; 255
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_sendCommand+0x372>
     3f2:	9e 01       	movw	r18, r28
     3f4:	2d 5b       	subi	r18, 0xBD	; 189
     3f6:	3f 4f       	sbci	r19, 0xFF	; 255
     3f8:	d9 01       	movw	r26, r18
     3fa:	8d 93       	st	X+, r24
     3fc:	9c 93       	st	X, r25
}
     3fe:	00 00       	nop
			__ticks --;
     400:	ce 01       	movw	r24, r28
     402:	8f 5b       	subi	r24, 0xBF	; 191
     404:	9f 4f       	sbci	r25, 0xFF	; 255
     406:	9e 01       	movw	r18, r28
     408:	2f 5b       	subi	r18, 0xBF	; 191
     40a:	3f 4f       	sbci	r19, 0xFF	; 255
     40c:	f9 01       	movw	r30, r18
     40e:	20 81       	ld	r18, Z
     410:	31 81       	ldd	r19, Z+1	; 0x01
     412:	21 50       	subi	r18, 0x01	; 1
     414:	31 09       	sbc	r19, r1
     416:	dc 01       	movw	r26, r24
     418:	2d 93       	st	X+, r18
     41a:	3c 93       	st	X, r19
		while(__ticks)
     41c:	ce 01       	movw	r24, r28
     41e:	8f 5b       	subi	r24, 0xBF	; 191
     420:	9f 4f       	sbci	r25, 0xFF	; 255
     422:	fc 01       	movw	r30, r24
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	89 2b       	or	r24, r25
     42a:	99 f6       	brne	.-90     	; 0x3d2 <LCD_sendCommand+0x356>
		return;
     42c:	38 c0       	rjmp	.+112    	; 0x49e <__stack+0x3f>
		__ticks = (uint16_t)__tmp;
     42e:	8e 01       	movw	r16, r28
     430:	0f 5b       	subi	r16, 0xBF	; 191
     432:	1f 4f       	sbci	r17, 0xFF	; 255
     434:	ce 01       	movw	r24, r28
     436:	cd 96       	adiw	r24, 0x3d	; 61
     438:	dc 01       	movw	r26, r24
     43a:	6d 91       	ld	r22, X+
     43c:	7d 91       	ld	r23, X+
     43e:	8d 91       	ld	r24, X+
     440:	9c 91       	ld	r25, X
     442:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     446:	c6 57       	subi	r28, 0x76	; 118
     448:	df 4f       	sbci	r29, 0xFF	; 255
     44a:	68 83       	st	Y, r22
     44c:	79 83       	std	Y+1, r23	; 0x01
     44e:	8a 83       	std	Y+2, r24	; 0x02
     450:	9b 83       	std	Y+3, r25	; 0x03
     452:	ca 58       	subi	r28, 0x8A	; 138
     454:	d0 40       	sbci	r29, 0x00	; 0
     456:	c6 57       	subi	r28, 0x76	; 118
     458:	df 4f       	sbci	r29, 0xFF	; 255
     45a:	28 81       	ld	r18, Y
     45c:	39 81       	ldd	r19, Y+1	; 0x01
     45e:	ca 58       	subi	r28, 0x8A	; 138
     460:	d0 40       	sbci	r29, 0x00	; 0
     462:	f8 01       	movw	r30, r16
     464:	31 83       	std	Z+1, r19	; 0x01
     466:	20 83       	st	Z, r18
     468:	ce 01       	movw	r24, r28
     46a:	8b 5b       	subi	r24, 0xBB	; 187
     46c:	9f 4f       	sbci	r25, 0xFF	; 255
     46e:	9e 01       	movw	r18, r28
     470:	2f 5b       	subi	r18, 0xBF	; 191
     472:	3f 4f       	sbci	r19, 0xFF	; 255
     474:	d9 01       	movw	r26, r18
     476:	2d 91       	ld	r18, X+
     478:	3c 91       	ld	r19, X
     47a:	fc 01       	movw	r30, r24
     47c:	31 83       	std	Z+1, r19	; 0x01
     47e:	20 83       	st	Z, r18
	__asm__ volatile (
     480:	ce 01       	movw	r24, r28
     482:	8b 5b       	subi	r24, 0xBB	; 187
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	dc 01       	movw	r26, r24
     488:	8d 91       	ld	r24, X+
     48a:	9c 91       	ld	r25, X
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <__stack+0x2d>
     490:	9e 01       	movw	r18, r28
     492:	2b 5b       	subi	r18, 0xBB	; 187
     494:	3f 4f       	sbci	r19, 0xFF	; 255
     496:	f9 01       	movw	r30, r18
     498:	91 83       	std	Z+1, r25	; 0x01
     49a:	80 83       	st	Z, r24
}
     49c:	00 00       	nop
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required command to the data bus D4 --> D7 */
	DATA_OUT=( command  & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT=( (command >>4 ) & 0x0F ) | ( DATA_OUT & 0xF0 );
     49e:	ce 01       	movw	r24, r28
     4a0:	8b 5a       	subi	r24, 0xAB	; 171
     4a2:	9f 4f       	sbci	r25, 0xFF	; 255
     4a4:	dc 01       	movw	r26, r24
     4a6:	8c 91       	ld	r24, X
     4a8:	82 95       	swap	r24
     4aa:	8f 70       	andi	r24, 0x0F	; 15
     4ac:	28 2f       	mov	r18, r24
     4ae:	85 e3       	ldi	r24, 0x35	; 53
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	80 7f       	andi	r24, 0xF0	; 240
     4b8:	28 2b       	or	r18, r24
     4ba:	85 e3       	ldi	r24, 0x35	; 53
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	dc 01       	movw	r26, r24
     4c0:	2c 93       	st	X, r18
#endif

	E = CLEAR;	 /* close Enable to prevent data share between LCD and AVR */
     4c2:	82 e3       	ldi	r24, 0x32	; 50
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 81       	ld	r18, Z
     4ca:	2f 7b       	andi	r18, 0xBF	; 191
     4cc:	dc 01       	movw	r26, r24
     4ce:	2c 93       	st	X, r18
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	a0 e8       	ldi	r26, 0x80	; 128
     4d6:	bf e3       	ldi	r27, 0x3F	; 63
     4d8:	8b a7       	std	Y+43, r24	; 0x2b
     4da:	9c a7       	std	Y+44, r25	; 0x2c
     4dc:	ad a7       	std	Y+45, r26	; 0x2d
     4de:	be a7       	std	Y+46, r27	; 0x2e
	__tmp = ((F_CPU) / 4e3) * __ms;
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	4a e7       	ldi	r20, 0x7A	; 122
     4e6:	53 e4       	ldi	r21, 0x43	; 67
     4e8:	6b a5       	ldd	r22, Y+43	; 0x2b
     4ea:	7c a5       	ldd	r23, Y+44	; 0x2c
     4ec:	8d a5       	ldd	r24, Y+45	; 0x2d
     4ee:	9e a5       	ldd	r25, Y+46	; 0x2e
     4f0:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     4f4:	c2 57       	subi	r28, 0x72	; 114
     4f6:	df 4f       	sbci	r29, 0xFF	; 255
     4f8:	68 83       	st	Y, r22
     4fa:	79 83       	std	Y+1, r23	; 0x01
     4fc:	8a 83       	std	Y+2, r24	; 0x02
     4fe:	9b 83       	std	Y+3, r25	; 0x03
     500:	ce 58       	subi	r28, 0x8E	; 142
     502:	d0 40       	sbci	r29, 0x00	; 0
     504:	c2 57       	subi	r28, 0x72	; 114
     506:	df 4f       	sbci	r29, 0xFF	; 255
     508:	28 81       	ld	r18, Y
     50a:	39 81       	ldd	r19, Y+1	; 0x01
     50c:	4a 81       	ldd	r20, Y+2	; 0x02
     50e:	5b 81       	ldd	r21, Y+3	; 0x03
     510:	ce 58       	subi	r28, 0x8E	; 142
     512:	d0 40       	sbci	r29, 0x00	; 0
     514:	2f a7       	std	Y+47, r18	; 0x2f
     516:	38 ab       	std	Y+48, r19	; 0x30
     518:	49 ab       	std	Y+49, r20	; 0x31
     51a:	5a ab       	std	Y+50, r21	; 0x32
	if (__tmp < 1.0)
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e8       	ldi	r20, 0x80	; 128
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	6f a5       	ldd	r22, Y+47	; 0x2f
     526:	78 a9       	ldd	r23, Y+48	; 0x30
     528:	89 a9       	ldd	r24, Y+49	; 0x31
     52a:	9a a9       	ldd	r25, Y+50	; 0x32
     52c:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     530:	88 23       	and	r24, r24
     532:	2c f4       	brge	.+10     	; 0x53e <__stack+0xdf>
		__ticks = 1;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	9c ab       	std	Y+52, r25	; 0x34
     53a:	8b ab       	std	Y+51, r24	; 0x33
     53c:	71 c0       	rjmp	.+226    	; 0x620 <__stack+0x1c1>
	else if (__tmp > 65535)
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	3f ef       	ldi	r19, 0xFF	; 255
     542:	4f e7       	ldi	r20, 0x7F	; 127
     544:	57 e4       	ldi	r21, 0x47	; 71
     546:	6f a5       	ldd	r22, Y+47	; 0x2f
     548:	78 a9       	ldd	r23, Y+48	; 0x30
     54a:	89 a9       	ldd	r24, Y+49	; 0x31
     54c:	9a a9       	ldd	r25, Y+50	; 0x32
     54e:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     552:	18 16       	cp	r1, r24
     554:	0c f0       	brlt	.+2      	; 0x558 <__stack+0xf9>
     556:	4e c0       	rjmp	.+156    	; 0x5f4 <__stack+0x195>
		__ticks = (uint16_t) (__ms * 10.0);
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 e2       	ldi	r20, 0x20	; 32
     55e:	51 e4       	ldi	r21, 0x41	; 65
     560:	6b a5       	ldd	r22, Y+43	; 0x2b
     562:	7c a5       	ldd	r23, Y+44	; 0x2c
     564:	8d a5       	ldd	r24, Y+45	; 0x2d
     566:	9e a5       	ldd	r25, Y+46	; 0x2e
     568:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     56c:	ce 56       	subi	r28, 0x6E	; 110
     56e:	df 4f       	sbci	r29, 0xFF	; 255
     570:	68 83       	st	Y, r22
     572:	79 83       	std	Y+1, r23	; 0x01
     574:	8a 83       	std	Y+2, r24	; 0x02
     576:	9b 83       	std	Y+3, r25	; 0x03
     578:	c2 59       	subi	r28, 0x92	; 146
     57a:	d0 40       	sbci	r29, 0x00	; 0
     57c:	ce 56       	subi	r28, 0x6E	; 110
     57e:	df 4f       	sbci	r29, 0xFF	; 255
     580:	88 81       	ld	r24, Y
     582:	99 81       	ldd	r25, Y+1	; 0x01
     584:	aa 81       	ldd	r26, Y+2	; 0x02
     586:	bb 81       	ldd	r27, Y+3	; 0x03
     588:	c2 59       	subi	r28, 0x92	; 146
     58a:	d0 40       	sbci	r29, 0x00	; 0
     58c:	a6 96       	adiw	r28, 0x26	; 38
     58e:	8c af       	std	Y+60, r24	; 0x3c
     590:	9d af       	std	Y+61, r25	; 0x3d
     592:	ae af       	std	Y+62, r26	; 0x3e
     594:	bf af       	std	Y+63, r27	; 0x3f
     596:	a6 97       	sbiw	r28, 0x26	; 38
     598:	a6 96       	adiw	r28, 0x26	; 38
     59a:	6c ad       	ldd	r22, Y+60	; 0x3c
     59c:	7d ad       	ldd	r23, Y+61	; 0x3d
     59e:	8e ad       	ldd	r24, Y+62	; 0x3e
     5a0:	9f ad       	ldd	r25, Y+63	; 0x3f
     5a2:	a6 97       	sbiw	r28, 0x26	; 38
     5a4:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     5a8:	ca 56       	subi	r28, 0x6A	; 106
     5aa:	df 4f       	sbci	r29, 0xFF	; 255
     5ac:	68 83       	st	Y, r22
     5ae:	79 83       	std	Y+1, r23	; 0x01
     5b0:	8a 83       	std	Y+2, r24	; 0x02
     5b2:	9b 83       	std	Y+3, r25	; 0x03
     5b4:	c6 59       	subi	r28, 0x96	; 150
     5b6:	d0 40       	sbci	r29, 0x00	; 0
     5b8:	ca 56       	subi	r28, 0x6A	; 106
     5ba:	df 4f       	sbci	r29, 0xFF	; 255
     5bc:	a8 81       	ld	r26, Y
     5be:	b9 81       	ldd	r27, Y+1	; 0x01
     5c0:	c6 59       	subi	r28, 0x96	; 150
     5c2:	d0 40       	sbci	r29, 0x00	; 0
     5c4:	bc ab       	std	Y+52, r27	; 0x34
     5c6:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
     5c8:	10 c0       	rjmp	.+32     	; 0x5ea <__stack+0x18b>
     5ca:	89 e1       	ldi	r24, 0x19	; 25
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	9e ab       	std	Y+54, r25	; 0x36
     5d0:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
     5d2:	8d a9       	ldd	r24, Y+53	; 0x35
     5d4:	9e a9       	ldd	r25, Y+54	; 0x36
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <__stack+0x177>
     5da:	9e ab       	std	Y+54, r25	; 0x36
     5dc:	8d ab       	std	Y+53, r24	; 0x35
}
     5de:	00 00       	nop
			__ticks --;
     5e0:	8b a9       	ldd	r24, Y+51	; 0x33
     5e2:	9c a9       	ldd	r25, Y+52	; 0x34
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	9c ab       	std	Y+52, r25	; 0x34
     5e8:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
     5ea:	8b a9       	ldd	r24, Y+51	; 0x33
     5ec:	9c a9       	ldd	r25, Y+52	; 0x34
     5ee:	89 2b       	or	r24, r25
     5f0:	61 f7       	brne	.-40     	; 0x5ca <__stack+0x16b>
		return;
     5f2:	21 c0       	rjmp	.+66     	; 0x636 <__stack+0x1d7>
		__ticks = (uint16_t)__tmp;
     5f4:	6f a5       	ldd	r22, Y+47	; 0x2f
     5f6:	78 a9       	ldd	r23, Y+48	; 0x30
     5f8:	89 a9       	ldd	r24, Y+49	; 0x31
     5fa:	9a a9       	ldd	r25, Y+50	; 0x32
     5fc:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     600:	c6 56       	subi	r28, 0x66	; 102
     602:	df 4f       	sbci	r29, 0xFF	; 255
     604:	68 83       	st	Y, r22
     606:	79 83       	std	Y+1, r23	; 0x01
     608:	8a 83       	std	Y+2, r24	; 0x02
     60a:	9b 83       	std	Y+3, r25	; 0x03
     60c:	ca 59       	subi	r28, 0x9A	; 154
     60e:	d0 40       	sbci	r29, 0x00	; 0
     610:	c6 56       	subi	r28, 0x66	; 102
     612:	df 4f       	sbci	r29, 0xFF	; 255
     614:	e8 81       	ld	r30, Y
     616:	f9 81       	ldd	r31, Y+1	; 0x01
     618:	ca 59       	subi	r28, 0x9A	; 154
     61a:	d0 40       	sbci	r29, 0x00	; 0
     61c:	fc ab       	std	Y+52, r31	; 0x34
     61e:	eb ab       	std	Y+51, r30	; 0x33
     620:	8b a9       	ldd	r24, Y+51	; 0x33
     622:	9c a9       	ldd	r25, Y+52	; 0x34
     624:	98 af       	std	Y+56, r25	; 0x38
     626:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
     628:	8f a9       	ldd	r24, Y+55	; 0x37
     62a:	98 ad       	ldd	r25, Y+56	; 0x38
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <__stack+0x1cd>
     630:	98 af       	std	Y+56, r25	; 0x38
     632:	8f ab       	std	Y+55, r24	; 0x37
}
     634:	00 00       	nop
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	E = SET;		/* open Enable again to send last 4 bits of command */
     636:	82 e3       	ldi	r24, 0x32	; 50
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	dc 01       	movw	r26, r24
     63c:	2c 91       	ld	r18, X
     63e:	20 64       	ori	r18, 0x40	; 64
     640:	fc 01       	movw	r30, r24
     642:	20 83       	st	Z, r18
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	a0 e8       	ldi	r26, 0x80	; 128
     64a:	bf e3       	ldi	r27, 0x3F	; 63
     64c:	8d 8f       	std	Y+29, r24	; 0x1d
     64e:	9e 8f       	std	Y+30, r25	; 0x1e
     650:	af 8f       	std	Y+31, r26	; 0x1f
     652:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	4a e7       	ldi	r20, 0x7A	; 122
     65a:	53 e4       	ldi	r21, 0x43	; 67
     65c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     65e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     660:	8f 8d       	ldd	r24, Y+31	; 0x1f
     662:	98 a1       	ldd	r25, Y+32	; 0x20
     664:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     668:	c2 56       	subi	r28, 0x62	; 98
     66a:	df 4f       	sbci	r29, 0xFF	; 255
     66c:	68 83       	st	Y, r22
     66e:	79 83       	std	Y+1, r23	; 0x01
     670:	8a 83       	std	Y+2, r24	; 0x02
     672:	9b 83       	std	Y+3, r25	; 0x03
     674:	ce 59       	subi	r28, 0x9E	; 158
     676:	d0 40       	sbci	r29, 0x00	; 0
     678:	c2 56       	subi	r28, 0x62	; 98
     67a:	df 4f       	sbci	r29, 0xFF	; 255
     67c:	28 81       	ld	r18, Y
     67e:	39 81       	ldd	r19, Y+1	; 0x01
     680:	4a 81       	ldd	r20, Y+2	; 0x02
     682:	5b 81       	ldd	r21, Y+3	; 0x03
     684:	ce 59       	subi	r28, 0x9E	; 158
     686:	d0 40       	sbci	r29, 0x00	; 0
     688:	29 a3       	std	Y+33, r18	; 0x21
     68a:	3a a3       	std	Y+34, r19	; 0x22
     68c:	4b a3       	std	Y+35, r20	; 0x23
     68e:	5c a3       	std	Y+36, r21	; 0x24
	if (__tmp < 1.0)
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	40 e8       	ldi	r20, 0x80	; 128
     696:	5f e3       	ldi	r21, 0x3F	; 63
     698:	69 a1       	ldd	r22, Y+33	; 0x21
     69a:	7a a1       	ldd	r23, Y+34	; 0x22
     69c:	8b a1       	ldd	r24, Y+35	; 0x23
     69e:	9c a1       	ldd	r25, Y+36	; 0x24
     6a0:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     6a4:	88 23       	and	r24, r24
     6a6:	2c f4       	brge	.+10     	; 0x6b2 <__stack+0x253>
		__ticks = 1;
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	9e a3       	std	Y+38, r25	; 0x26
     6ae:	8d a3       	std	Y+37, r24	; 0x25
     6b0:	71 c0       	rjmp	.+226    	; 0x794 <__stack+0x335>
	else if (__tmp > 65535)
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	3f ef       	ldi	r19, 0xFF	; 255
     6b6:	4f e7       	ldi	r20, 0x7F	; 127
     6b8:	57 e4       	ldi	r21, 0x47	; 71
     6ba:	69 a1       	ldd	r22, Y+33	; 0x21
     6bc:	7a a1       	ldd	r23, Y+34	; 0x22
     6be:	8b a1       	ldd	r24, Y+35	; 0x23
     6c0:	9c a1       	ldd	r25, Y+36	; 0x24
     6c2:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     6c6:	18 16       	cp	r1, r24
     6c8:	0c f0       	brlt	.+2      	; 0x6cc <__stack+0x26d>
     6ca:	4e c0       	rjmp	.+156    	; 0x768 <__stack+0x309>
		__ticks = (uint16_t) (__ms * 10.0);
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e2       	ldi	r20, 0x20	; 32
     6d2:	51 e4       	ldi	r21, 0x41	; 65
     6d4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6d6:	7e 8d       	ldd	r23, Y+30	; 0x1e
     6d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6da:	98 a1       	ldd	r25, Y+32	; 0x20
     6dc:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     6e0:	ce 55       	subi	r28, 0x5E	; 94
     6e2:	df 4f       	sbci	r29, 0xFF	; 255
     6e4:	68 83       	st	Y, r22
     6e6:	79 83       	std	Y+1, r23	; 0x01
     6e8:	8a 83       	std	Y+2, r24	; 0x02
     6ea:	9b 83       	std	Y+3, r25	; 0x03
     6ec:	c2 5a       	subi	r28, 0xA2	; 162
     6ee:	d0 40       	sbci	r29, 0x00	; 0
     6f0:	ce 55       	subi	r28, 0x5E	; 94
     6f2:	df 4f       	sbci	r29, 0xFF	; 255
     6f4:	88 81       	ld	r24, Y
     6f6:	99 81       	ldd	r25, Y+1	; 0x01
     6f8:	aa 81       	ldd	r26, Y+2	; 0x02
     6fa:	bb 81       	ldd	r27, Y+3	; 0x03
     6fc:	c2 5a       	subi	r28, 0xA2	; 162
     6fe:	d0 40       	sbci	r29, 0x00	; 0
     700:	a2 96       	adiw	r28, 0x22	; 34
     702:	8c af       	std	Y+60, r24	; 0x3c
     704:	9d af       	std	Y+61, r25	; 0x3d
     706:	ae af       	std	Y+62, r26	; 0x3e
     708:	bf af       	std	Y+63, r27	; 0x3f
     70a:	a2 97       	sbiw	r28, 0x22	; 34
     70c:	a2 96       	adiw	r28, 0x22	; 34
     70e:	6c ad       	ldd	r22, Y+60	; 0x3c
     710:	7d ad       	ldd	r23, Y+61	; 0x3d
     712:	8e ad       	ldd	r24, Y+62	; 0x3e
     714:	9f ad       	ldd	r25, Y+63	; 0x3f
     716:	a2 97       	sbiw	r28, 0x22	; 34
     718:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     71c:	ca 55       	subi	r28, 0x5A	; 90
     71e:	df 4f       	sbci	r29, 0xFF	; 255
     720:	68 83       	st	Y, r22
     722:	79 83       	std	Y+1, r23	; 0x01
     724:	8a 83       	std	Y+2, r24	; 0x02
     726:	9b 83       	std	Y+3, r25	; 0x03
     728:	c6 5a       	subi	r28, 0xA6	; 166
     72a:	d0 40       	sbci	r29, 0x00	; 0
     72c:	ca 55       	subi	r28, 0x5A	; 90
     72e:	df 4f       	sbci	r29, 0xFF	; 255
     730:	a8 81       	ld	r26, Y
     732:	b9 81       	ldd	r27, Y+1	; 0x01
     734:	c6 5a       	subi	r28, 0xA6	; 166
     736:	d0 40       	sbci	r29, 0x00	; 0
     738:	be a3       	std	Y+38, r27	; 0x26
     73a:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
     73c:	10 c0       	rjmp	.+32     	; 0x75e <__stack+0x2ff>
     73e:	89 e1       	ldi	r24, 0x19	; 25
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	98 a7       	std	Y+40, r25	; 0x28
     744:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
     746:	8f a1       	ldd	r24, Y+39	; 0x27
     748:	98 a5       	ldd	r25, Y+40	; 0x28
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <__stack+0x2eb>
     74e:	98 a7       	std	Y+40, r25	; 0x28
     750:	8f a3       	std	Y+39, r24	; 0x27
}
     752:	00 00       	nop
			__ticks --;
     754:	8d a1       	ldd	r24, Y+37	; 0x25
     756:	9e a1       	ldd	r25, Y+38	; 0x26
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	9e a3       	std	Y+38, r25	; 0x26
     75c:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
     75e:	8d a1       	ldd	r24, Y+37	; 0x25
     760:	9e a1       	ldd	r25, Y+38	; 0x26
     762:	89 2b       	or	r24, r25
     764:	61 f7       	brne	.-40     	; 0x73e <__stack+0x2df>
		return;
     766:	21 c0       	rjmp	.+66     	; 0x7aa <__stack+0x34b>
		__ticks = (uint16_t)__tmp;
     768:	69 a1       	ldd	r22, Y+33	; 0x21
     76a:	7a a1       	ldd	r23, Y+34	; 0x22
     76c:	8b a1       	ldd	r24, Y+35	; 0x23
     76e:	9c a1       	ldd	r25, Y+36	; 0x24
     770:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     774:	c6 55       	subi	r28, 0x56	; 86
     776:	df 4f       	sbci	r29, 0xFF	; 255
     778:	68 83       	st	Y, r22
     77a:	79 83       	std	Y+1, r23	; 0x01
     77c:	8a 83       	std	Y+2, r24	; 0x02
     77e:	9b 83       	std	Y+3, r25	; 0x03
     780:	ca 5a       	subi	r28, 0xAA	; 170
     782:	d0 40       	sbci	r29, 0x00	; 0
     784:	c6 55       	subi	r28, 0x56	; 86
     786:	df 4f       	sbci	r29, 0xFF	; 255
     788:	e8 81       	ld	r30, Y
     78a:	f9 81       	ldd	r31, Y+1	; 0x01
     78c:	ca 5a       	subi	r28, 0xAA	; 170
     78e:	d0 40       	sbci	r29, 0x00	; 0
     790:	fe a3       	std	Y+38, r31	; 0x26
     792:	ed a3       	std	Y+37, r30	; 0x25
     794:	8d a1       	ldd	r24, Y+37	; 0x25
     796:	9e a1       	ldd	r25, Y+38	; 0x26
     798:	9a a7       	std	Y+42, r25	; 0x2a
     79a:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
     79c:	89 a5       	ldd	r24, Y+41	; 0x29
     79e:	9a a5       	ldd	r25, Y+42	; 0x2a
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <__stack+0x341>
     7a4:	9a a7       	std	Y+42, r25	; 0x2a
     7a6:	89 a7       	std	Y+41, r24	; 0x29
}
     7a8:	00 00       	nop
	/* send the Least 4 bits of the required command to the data bus D0 --> D3 */
	DATA_OUT=( (command << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif

#ifdef LOWER_MODE_BITS
	DATA_OUT=( (command ) & 0x0F ) | ( DATA_OUT & 0xF0 );
     7aa:	ce 01       	movw	r24, r28
     7ac:	8b 5a       	subi	r24, 0xAB	; 171
     7ae:	9f 4f       	sbci	r25, 0xFF	; 255
     7b0:	dc 01       	movw	r26, r24
     7b2:	8c 91       	ld	r24, X
     7b4:	28 2f       	mov	r18, r24
     7b6:	2f 70       	andi	r18, 0x0F	; 15
     7b8:	85 e3       	ldi	r24, 0x35	; 53
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	fc 01       	movw	r30, r24
     7be:	80 81       	ld	r24, Z
     7c0:	80 7f       	andi	r24, 0xF0	; 240
     7c2:	28 2b       	or	r18, r24
     7c4:	85 e3       	ldi	r24, 0x35	; 53
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	dc 01       	movw	r26, r24
     7ca:	2c 93       	st	X, r18
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	a0 e8       	ldi	r26, 0x80	; 128
     7d2:	bf e3       	ldi	r27, 0x3F	; 63
     7d4:	8f 87       	std	Y+15, r24	; 0x0f
     7d6:	98 8b       	std	Y+16, r25	; 0x10
     7d8:	a9 8b       	std	Y+17, r26	; 0x11
     7da:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	4a e7       	ldi	r20, 0x7A	; 122
     7e2:	53 e4       	ldi	r21, 0x43	; 67
     7e4:	6f 85       	ldd	r22, Y+15	; 0x0f
     7e6:	78 89       	ldd	r23, Y+16	; 0x10
     7e8:	89 89       	ldd	r24, Y+17	; 0x11
     7ea:	9a 89       	ldd	r25, Y+18	; 0x12
     7ec:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     7f0:	c2 55       	subi	r28, 0x52	; 82
     7f2:	df 4f       	sbci	r29, 0xFF	; 255
     7f4:	68 83       	st	Y, r22
     7f6:	79 83       	std	Y+1, r23	; 0x01
     7f8:	8a 83       	std	Y+2, r24	; 0x02
     7fa:	9b 83       	std	Y+3, r25	; 0x03
     7fc:	ce 5a       	subi	r28, 0xAE	; 174
     7fe:	d0 40       	sbci	r29, 0x00	; 0
     800:	c2 55       	subi	r28, 0x52	; 82
     802:	df 4f       	sbci	r29, 0xFF	; 255
     804:	28 81       	ld	r18, Y
     806:	39 81       	ldd	r19, Y+1	; 0x01
     808:	4a 81       	ldd	r20, Y+2	; 0x02
     80a:	5b 81       	ldd	r21, Y+3	; 0x03
     80c:	ce 5a       	subi	r28, 0xAE	; 174
     80e:	d0 40       	sbci	r29, 0x00	; 0
     810:	2b 8b       	std	Y+19, r18	; 0x13
     812:	3c 8b       	std	Y+20, r19	; 0x14
     814:	4d 8b       	std	Y+21, r20	; 0x15
     816:	5e 8b       	std	Y+22, r21	; 0x16
	if (__tmp < 1.0)
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 e8       	ldi	r20, 0x80	; 128
     81e:	5f e3       	ldi	r21, 0x3F	; 63
     820:	6b 89       	ldd	r22, Y+19	; 0x13
     822:	7c 89       	ldd	r23, Y+20	; 0x14
     824:	8d 89       	ldd	r24, Y+21	; 0x15
     826:	9e 89       	ldd	r25, Y+22	; 0x16
     828:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     82c:	88 23       	and	r24, r24
     82e:	2c f4       	brge	.+10     	; 0x83a <__stack+0x3db>
		__ticks = 1;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	98 8f       	std	Y+24, r25	; 0x18
     836:	8f 8b       	std	Y+23, r24	; 0x17
     838:	71 c0       	rjmp	.+226    	; 0x91c <__stack+0x4bd>
	else if (__tmp > 65535)
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	3f ef       	ldi	r19, 0xFF	; 255
     83e:	4f e7       	ldi	r20, 0x7F	; 127
     840:	57 e4       	ldi	r21, 0x47	; 71
     842:	6b 89       	ldd	r22, Y+19	; 0x13
     844:	7c 89       	ldd	r23, Y+20	; 0x14
     846:	8d 89       	ldd	r24, Y+21	; 0x15
     848:	9e 89       	ldd	r25, Y+22	; 0x16
     84a:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	0c f0       	brlt	.+2      	; 0x854 <__stack+0x3f5>
     852:	4e c0       	rjmp	.+156    	; 0x8f0 <__stack+0x491>
		__ticks = (uint16_t) (__ms * 10.0);
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e2       	ldi	r20, 0x20	; 32
     85a:	51 e4       	ldi	r21, 0x41	; 65
     85c:	6f 85       	ldd	r22, Y+15	; 0x0f
     85e:	78 89       	ldd	r23, Y+16	; 0x10
     860:	89 89       	ldd	r24, Y+17	; 0x11
     862:	9a 89       	ldd	r25, Y+18	; 0x12
     864:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     868:	ce 54       	subi	r28, 0x4E	; 78
     86a:	df 4f       	sbci	r29, 0xFF	; 255
     86c:	68 83       	st	Y, r22
     86e:	79 83       	std	Y+1, r23	; 0x01
     870:	8a 83       	std	Y+2, r24	; 0x02
     872:	9b 83       	std	Y+3, r25	; 0x03
     874:	c2 5b       	subi	r28, 0xB2	; 178
     876:	d0 40       	sbci	r29, 0x00	; 0
     878:	ce 54       	subi	r28, 0x4E	; 78
     87a:	df 4f       	sbci	r29, 0xFF	; 255
     87c:	88 81       	ld	r24, Y
     87e:	99 81       	ldd	r25, Y+1	; 0x01
     880:	aa 81       	ldd	r26, Y+2	; 0x02
     882:	bb 81       	ldd	r27, Y+3	; 0x03
     884:	c2 5b       	subi	r28, 0xB2	; 178
     886:	d0 40       	sbci	r29, 0x00	; 0
     888:	6e 96       	adiw	r28, 0x1e	; 30
     88a:	8c af       	std	Y+60, r24	; 0x3c
     88c:	9d af       	std	Y+61, r25	; 0x3d
     88e:	ae af       	std	Y+62, r26	; 0x3e
     890:	bf af       	std	Y+63, r27	; 0x3f
     892:	6e 97       	sbiw	r28, 0x1e	; 30
     894:	6e 96       	adiw	r28, 0x1e	; 30
     896:	6c ad       	ldd	r22, Y+60	; 0x3c
     898:	7d ad       	ldd	r23, Y+61	; 0x3d
     89a:	8e ad       	ldd	r24, Y+62	; 0x3e
     89c:	9f ad       	ldd	r25, Y+63	; 0x3f
     89e:	6e 97       	sbiw	r28, 0x1e	; 30
     8a0:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     8a4:	ca 54       	subi	r28, 0x4A	; 74
     8a6:	df 4f       	sbci	r29, 0xFF	; 255
     8a8:	68 83       	st	Y, r22
     8aa:	79 83       	std	Y+1, r23	; 0x01
     8ac:	8a 83       	std	Y+2, r24	; 0x02
     8ae:	9b 83       	std	Y+3, r25	; 0x03
     8b0:	c6 5b       	subi	r28, 0xB6	; 182
     8b2:	d0 40       	sbci	r29, 0x00	; 0
     8b4:	ca 54       	subi	r28, 0x4A	; 74
     8b6:	df 4f       	sbci	r29, 0xFF	; 255
     8b8:	a8 81       	ld	r26, Y
     8ba:	b9 81       	ldd	r27, Y+1	; 0x01
     8bc:	c6 5b       	subi	r28, 0xB6	; 182
     8be:	d0 40       	sbci	r29, 0x00	; 0
     8c0:	b8 8f       	std	Y+24, r27	; 0x18
     8c2:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     8c4:	10 c0       	rjmp	.+32     	; 0x8e6 <__stack+0x487>
     8c6:	89 e1       	ldi	r24, 0x19	; 25
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	9a 8f       	std	Y+26, r25	; 0x1a
     8cc:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
     8ce:	89 8d       	ldd	r24, Y+25	; 0x19
     8d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <__stack+0x473>
     8d6:	9a 8f       	std	Y+26, r25	; 0x1a
     8d8:	89 8f       	std	Y+25, r24	; 0x19
}
     8da:	00 00       	nop
			__ticks --;
     8dc:	8f 89       	ldd	r24, Y+23	; 0x17
     8de:	98 8d       	ldd	r25, Y+24	; 0x18
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	98 8f       	std	Y+24, r25	; 0x18
     8e4:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
     8e6:	8f 89       	ldd	r24, Y+23	; 0x17
     8e8:	98 8d       	ldd	r25, Y+24	; 0x18
     8ea:	89 2b       	or	r24, r25
     8ec:	61 f7       	brne	.-40     	; 0x8c6 <__stack+0x467>
		return;
     8ee:	21 c0       	rjmp	.+66     	; 0x932 <__stack+0x4d3>
		__ticks = (uint16_t)__tmp;
     8f0:	6b 89       	ldd	r22, Y+19	; 0x13
     8f2:	7c 89       	ldd	r23, Y+20	; 0x14
     8f4:	8d 89       	ldd	r24, Y+21	; 0x15
     8f6:	9e 89       	ldd	r25, Y+22	; 0x16
     8f8:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     8fc:	c6 54       	subi	r28, 0x46	; 70
     8fe:	df 4f       	sbci	r29, 0xFF	; 255
     900:	68 83       	st	Y, r22
     902:	79 83       	std	Y+1, r23	; 0x01
     904:	8a 83       	std	Y+2, r24	; 0x02
     906:	9b 83       	std	Y+3, r25	; 0x03
     908:	ca 5b       	subi	r28, 0xBA	; 186
     90a:	d0 40       	sbci	r29, 0x00	; 0
     90c:	c6 54       	subi	r28, 0x46	; 70
     90e:	df 4f       	sbci	r29, 0xFF	; 255
     910:	e8 81       	ld	r30, Y
     912:	f9 81       	ldd	r31, Y+1	; 0x01
     914:	ca 5b       	subi	r28, 0xBA	; 186
     916:	d0 40       	sbci	r29, 0x00	; 0
     918:	f8 8f       	std	Y+24, r31	; 0x18
     91a:	ef 8b       	std	Y+23, r30	; 0x17
     91c:	8f 89       	ldd	r24, Y+23	; 0x17
     91e:	98 8d       	ldd	r25, Y+24	; 0x18
     920:	9c 8f       	std	Y+28, r25	; 0x1c
     922:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
     924:	8b 8d       	ldd	r24, Y+27	; 0x1b
     926:	9c 8d       	ldd	r25, Y+28	; 0x1c
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <__stack+0x4c9>
     92c:	9c 8f       	std	Y+28, r25	; 0x1c
     92e:	8b 8f       	std	Y+27, r24	; 0x1b
}
     930:	00 00       	nop
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
     932:	82 e3       	ldi	r24, 0x32	; 50
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	dc 01       	movw	r26, r24
     938:	2c 91       	ld	r18, X
     93a:	2f 7b       	andi	r18, 0xBF	; 191
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	a0 e8       	ldi	r26, 0x80	; 128
     946:	bf e3       	ldi	r27, 0x3F	; 63
     948:	89 83       	std	Y+1, r24	; 0x01
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	ab 83       	std	Y+3, r26	; 0x03
     94e:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	4a e7       	ldi	r20, 0x7A	; 122
     956:	53 e4       	ldi	r21, 0x43	; 67
     958:	69 81       	ldd	r22, Y+1	; 0x01
     95a:	7a 81       	ldd	r23, Y+2	; 0x02
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	9c 81       	ldd	r25, Y+4	; 0x04
     960:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     964:	c2 54       	subi	r28, 0x42	; 66
     966:	df 4f       	sbci	r29, 0xFF	; 255
     968:	68 83       	st	Y, r22
     96a:	79 83       	std	Y+1, r23	; 0x01
     96c:	8a 83       	std	Y+2, r24	; 0x02
     96e:	9b 83       	std	Y+3, r25	; 0x03
     970:	ce 5b       	subi	r28, 0xBE	; 190
     972:	d0 40       	sbci	r29, 0x00	; 0
     974:	c2 54       	subi	r28, 0x42	; 66
     976:	df 4f       	sbci	r29, 0xFF	; 255
     978:	28 81       	ld	r18, Y
     97a:	39 81       	ldd	r19, Y+1	; 0x01
     97c:	4a 81       	ldd	r20, Y+2	; 0x02
     97e:	5b 81       	ldd	r21, Y+3	; 0x03
     980:	ce 5b       	subi	r28, 0xBE	; 190
     982:	d0 40       	sbci	r29, 0x00	; 0
     984:	2d 83       	std	Y+5, r18	; 0x05
     986:	3e 83       	std	Y+6, r19	; 0x06
     988:	4f 83       	std	Y+7, r20	; 0x07
     98a:	58 87       	std	Y+8, r21	; 0x08
	if (__tmp < 1.0)
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e8       	ldi	r20, 0x80	; 128
     992:	5f e3       	ldi	r21, 0x3F	; 63
     994:	6d 81       	ldd	r22, Y+5	; 0x05
     996:	7e 81       	ldd	r23, Y+6	; 0x06
     998:	8f 81       	ldd	r24, Y+7	; 0x07
     99a:	98 85       	ldd	r25, Y+8	; 0x08
     99c:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     9a0:	88 23       	and	r24, r24
     9a2:	2c f4       	brge	.+10     	; 0x9ae <__stack+0x54f>
		__ticks = 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	9a 87       	std	Y+10, r25	; 0x0a
     9aa:	89 87       	std	Y+9, r24	; 0x09
     9ac:	71 c0       	rjmp	.+226    	; 0xa90 <__stack+0x631>
	else if (__tmp > 65535)
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	3f ef       	ldi	r19, 0xFF	; 255
     9b2:	4f e7       	ldi	r20, 0x7F	; 127
     9b4:	57 e4       	ldi	r21, 0x47	; 71
     9b6:	6d 81       	ldd	r22, Y+5	; 0x05
     9b8:	7e 81       	ldd	r23, Y+6	; 0x06
     9ba:	8f 81       	ldd	r24, Y+7	; 0x07
     9bc:	98 85       	ldd	r25, Y+8	; 0x08
     9be:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     9c2:	18 16       	cp	r1, r24
     9c4:	0c f0       	brlt	.+2      	; 0x9c8 <__stack+0x569>
     9c6:	4e c0       	rjmp	.+156    	; 0xa64 <__stack+0x605>
		__ticks = (uint16_t) (__ms * 10.0);
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e2       	ldi	r20, 0x20	; 32
     9ce:	51 e4       	ldi	r21, 0x41	; 65
     9d0:	69 81       	ldd	r22, Y+1	; 0x01
     9d2:	7a 81       	ldd	r23, Y+2	; 0x02
     9d4:	8b 81       	ldd	r24, Y+3	; 0x03
     9d6:	9c 81       	ldd	r25, Y+4	; 0x04
     9d8:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     9dc:	ce 53       	subi	r28, 0x3E	; 62
     9de:	df 4f       	sbci	r29, 0xFF	; 255
     9e0:	68 83       	st	Y, r22
     9e2:	79 83       	std	Y+1, r23	; 0x01
     9e4:	8a 83       	std	Y+2, r24	; 0x02
     9e6:	9b 83       	std	Y+3, r25	; 0x03
     9e8:	c2 5c       	subi	r28, 0xC2	; 194
     9ea:	d0 40       	sbci	r29, 0x00	; 0
     9ec:	ce 53       	subi	r28, 0x3E	; 62
     9ee:	df 4f       	sbci	r29, 0xFF	; 255
     9f0:	88 81       	ld	r24, Y
     9f2:	99 81       	ldd	r25, Y+1	; 0x01
     9f4:	aa 81       	ldd	r26, Y+2	; 0x02
     9f6:	bb 81       	ldd	r27, Y+3	; 0x03
     9f8:	c2 5c       	subi	r28, 0xC2	; 194
     9fa:	d0 40       	sbci	r29, 0x00	; 0
     9fc:	6a 96       	adiw	r28, 0x1a	; 26
     9fe:	8c af       	std	Y+60, r24	; 0x3c
     a00:	9d af       	std	Y+61, r25	; 0x3d
     a02:	ae af       	std	Y+62, r26	; 0x3e
     a04:	bf af       	std	Y+63, r27	; 0x3f
     a06:	6a 97       	sbiw	r28, 0x1a	; 26
     a08:	6a 96       	adiw	r28, 0x1a	; 26
     a0a:	6c ad       	ldd	r22, Y+60	; 0x3c
     a0c:	7d ad       	ldd	r23, Y+61	; 0x3d
     a0e:	8e ad       	ldd	r24, Y+62	; 0x3e
     a10:	9f ad       	ldd	r25, Y+63	; 0x3f
     a12:	6a 97       	sbiw	r28, 0x1a	; 26
     a14:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     a18:	ca 53       	subi	r28, 0x3A	; 58
     a1a:	df 4f       	sbci	r29, 0xFF	; 255
     a1c:	68 83       	st	Y, r22
     a1e:	79 83       	std	Y+1, r23	; 0x01
     a20:	8a 83       	std	Y+2, r24	; 0x02
     a22:	9b 83       	std	Y+3, r25	; 0x03
     a24:	c6 5c       	subi	r28, 0xC6	; 198
     a26:	d0 40       	sbci	r29, 0x00	; 0
     a28:	ca 53       	subi	r28, 0x3A	; 58
     a2a:	df 4f       	sbci	r29, 0xFF	; 255
     a2c:	a8 81       	ld	r26, Y
     a2e:	b9 81       	ldd	r27, Y+1	; 0x01
     a30:	c6 5c       	subi	r28, 0xC6	; 198
     a32:	d0 40       	sbci	r29, 0x00	; 0
     a34:	ba 87       	std	Y+10, r27	; 0x0a
     a36:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     a38:	10 c0       	rjmp	.+32     	; 0xa5a <__stack+0x5fb>
     a3a:	89 e1       	ldi	r24, 0x19	; 25
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	9c 87       	std	Y+12, r25	; 0x0c
     a40:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
     a42:	8b 85       	ldd	r24, Y+11	; 0x0b
     a44:	9c 85       	ldd	r25, Y+12	; 0x0c
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <__stack+0x5e7>
     a4a:	9c 87       	std	Y+12, r25	; 0x0c
     a4c:	8b 87       	std	Y+11, r24	; 0x0b
}
     a4e:	00 00       	nop
			__ticks --;
     a50:	89 85       	ldd	r24, Y+9	; 0x09
     a52:	9a 85       	ldd	r25, Y+10	; 0x0a
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	9a 87       	std	Y+10, r25	; 0x0a
     a58:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     a5a:	89 85       	ldd	r24, Y+9	; 0x09
     a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a5e:	89 2b       	or	r24, r25
     a60:	61 f7       	brne	.-40     	; 0xa3a <__stack+0x5db>
		return;
     a62:	21 c0       	rjmp	.+66     	; 0xaa6 <__stack+0x647>
		__ticks = (uint16_t)__tmp;
     a64:	6d 81       	ldd	r22, Y+5	; 0x05
     a66:	7e 81       	ldd	r23, Y+6	; 0x06
     a68:	8f 81       	ldd	r24, Y+7	; 0x07
     a6a:	98 85       	ldd	r25, Y+8	; 0x08
     a6c:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     a70:	c6 53       	subi	r28, 0x36	; 54
     a72:	df 4f       	sbci	r29, 0xFF	; 255
     a74:	68 83       	st	Y, r22
     a76:	79 83       	std	Y+1, r23	; 0x01
     a78:	8a 83       	std	Y+2, r24	; 0x02
     a7a:	9b 83       	std	Y+3, r25	; 0x03
     a7c:	ca 5c       	subi	r28, 0xCA	; 202
     a7e:	d0 40       	sbci	r29, 0x00	; 0
     a80:	c6 53       	subi	r28, 0x36	; 54
     a82:	df 4f       	sbci	r29, 0xFF	; 255
     a84:	e8 81       	ld	r30, Y
     a86:	f9 81       	ldd	r31, Y+1	; 0x01
     a88:	ca 5c       	subi	r28, 0xCA	; 202
     a8a:	d0 40       	sbci	r29, 0x00	; 0
     a8c:	fa 87       	std	Y+10, r31	; 0x0a
     a8e:	e9 87       	std	Y+9, r30	; 0x09
     a90:	89 85       	ldd	r24, Y+9	; 0x09
     a92:	9a 85       	ldd	r25, Y+10	; 0x0a
     a94:	9e 87       	std	Y+14, r25	; 0x0e
     a96:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
     a98:	8d 85       	ldd	r24, Y+13	; 0x0d
     a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <__stack+0x63d>
     aa0:	9e 87       	std	Y+14, r25	; 0x0e
     aa2:	8d 87       	std	Y+13, r24	; 0x0d
}
     aa4:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
     aa6:	00 00       	nop
}
     aa8:	c3 53       	subi	r28, 0x33	; 51
     aaa:	df 4f       	sbci	r29, 0xFF	; 255
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <LCD_displayCharacter>:

/*
 * Function responsible for Display only One character on LCD
 */
void LCD_displayCharacter(uint8 data) {
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	cd 5c       	subi	r28, 0xCD	; 205
     ace:	d1 09       	sbc	r29, r1
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	9e 01       	movw	r18, r28
     adc:	2b 5a       	subi	r18, 0xAB	; 171
     ade:	3f 4f       	sbci	r19, 0xFF	; 255
     ae0:	d9 01       	movw	r26, r18
     ae2:	8c 93       	st	X, r24
	RS = SET; /* tell LCD that data which will send now is DATA */
     ae4:	82 e3       	ldi	r24, 0x32	; 50
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	fc 01       	movw	r30, r24
     aea:	20 81       	ld	r18, Z
     aec:	20 61       	ori	r18, 0x10	; 16
     aee:	dc 01       	movw	r26, r24
     af0:	2c 93       	st	X, r18
	RW = CLEAR; /* select write Mode on LCD */
     af2:	82 e3       	ldi	r24, 0x32	; 50
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	fc 01       	movw	r30, r24
     af8:	20 81       	ld	r18, Z
     afa:	2f 7d       	andi	r18, 0xDF	; 223
     afc:	dc 01       	movw	r26, r24
     afe:	2c 93       	st	X, r18
     b00:	9e 01       	movw	r18, r28
     b02:	29 5b       	subi	r18, 0xB9	; 185
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	a0 e8       	ldi	r26, 0x80	; 128
     b0c:	bf e3       	ldi	r27, 0x3F	; 63
     b0e:	f9 01       	movw	r30, r18
     b10:	80 83       	st	Z, r24
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	a2 83       	std	Z+2, r26	; 0x02
     b16:	b3 83       	std	Z+3, r27	; 0x03
	__tmp = ((F_CPU) / 4e3) * __ms;
     b18:	8e 01       	movw	r16, r28
     b1a:	05 5b       	subi	r16, 0xB5	; 181
     b1c:	1f 4f       	sbci	r17, 0xFF	; 255
     b1e:	ce 01       	movw	r24, r28
     b20:	89 5b       	subi	r24, 0xB9	; 185
     b22:	9f 4f       	sbci	r25, 0xFF	; 255
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	4a e7       	ldi	r20, 0x7A	; 122
     b2a:	53 e4       	ldi	r21, 0x43	; 67
     b2c:	dc 01       	movw	r26, r24
     b2e:	6d 91       	ld	r22, X+
     b30:	7d 91       	ld	r23, X+
     b32:	8d 91       	ld	r24, X+
     b34:	9c 91       	ld	r25, X
     b36:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     b3a:	e2 96       	adiw	r28, 0x32	; 50
     b3c:	6c af       	std	Y+60, r22	; 0x3c
     b3e:	7d af       	std	Y+61, r23	; 0x3d
     b40:	8e af       	std	Y+62, r24	; 0x3e
     b42:	9f af       	std	Y+63, r25	; 0x3f
     b44:	e2 97       	sbiw	r28, 0x32	; 50
     b46:	e2 96       	adiw	r28, 0x32	; 50
     b48:	2c ad       	ldd	r18, Y+60	; 0x3c
     b4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     b4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     b4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     b50:	e2 97       	sbiw	r28, 0x32	; 50
     b52:	d8 01       	movw	r26, r16
     b54:	2d 93       	st	X+, r18
     b56:	3d 93       	st	X+, r19
     b58:	4d 93       	st	X+, r20
     b5a:	5c 93       	st	X, r21
     b5c:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
     b5e:	ce 01       	movw	r24, r28
     b60:	85 5b       	subi	r24, 0xB5	; 181
     b62:	9f 4f       	sbci	r25, 0xFF	; 255
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e8       	ldi	r20, 0x80	; 128
     b6a:	5f e3       	ldi	r21, 0x3F	; 63
     b6c:	fc 01       	movw	r30, r24
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     b7a:	88 23       	and	r24, r24
     b7c:	4c f4       	brge	.+18     	; 0xb90 <LCD_displayCharacter+0xd0>
		__ticks = 1;
     b7e:	ce 01       	movw	r24, r28
     b80:	81 5b       	subi	r24, 0xB1	; 177
     b82:	9f 4f       	sbci	r25, 0xFF	; 255
     b84:	21 e0       	ldi	r18, 0x01	; 1
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	dc 01       	movw	r26, r24
     b8a:	2d 93       	st	X+, r18
     b8c:	3c 93       	st	X, r19
     b8e:	92 c0       	rjmp	.+292    	; 0xcb4 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
     b90:	ce 01       	movw	r24, r28
     b92:	85 5b       	subi	r24, 0xB5	; 181
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	fc 01       	movw	r30, r24
     ba0:	60 81       	ld	r22, Z
     ba2:	71 81       	ldd	r23, Z+1	; 0x01
     ba4:	82 81       	ldd	r24, Z+2	; 0x02
     ba6:	93 81       	ldd	r25, Z+3	; 0x03
     ba8:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     bac:	18 16       	cp	r1, r24
     bae:	0c f0       	brlt	.+2      	; 0xbb2 <LCD_displayCharacter+0xf2>
     bb0:	67 c0       	rjmp	.+206    	; 0xc80 <LCD_displayCharacter+0x1c0>
		__ticks = (uint16_t) (__ms * 10.0);
     bb2:	ce 01       	movw	r24, r28
     bb4:	89 5b       	subi	r24, 0xB9	; 185
     bb6:	9f 4f       	sbci	r25, 0xFF	; 255
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e2       	ldi	r20, 0x20	; 32
     bbe:	51 e4       	ldi	r21, 0x41	; 65
     bc0:	dc 01       	movw	r26, r24
     bc2:	6d 91       	ld	r22, X+
     bc4:	7d 91       	ld	r23, X+
     bc6:	8d 91       	ld	r24, X+
     bc8:	9c 91       	ld	r25, X
     bca:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     bce:	e6 96       	adiw	r28, 0x36	; 54
     bd0:	6c af       	std	Y+60, r22	; 0x3c
     bd2:	7d af       	std	Y+61, r23	; 0x3d
     bd4:	8e af       	std	Y+62, r24	; 0x3e
     bd6:	9f af       	std	Y+63, r25	; 0x3f
     bd8:	e6 97       	sbiw	r28, 0x36	; 54
     bda:	e6 96       	adiw	r28, 0x36	; 54
     bdc:	2c ad       	ldd	r18, Y+60	; 0x3c
     bde:	3d ad       	ldd	r19, Y+61	; 0x3d
     be0:	4e ad       	ldd	r20, Y+62	; 0x3e
     be2:	5f ad       	ldd	r21, Y+63	; 0x3f
     be4:	e6 97       	sbiw	r28, 0x36	; 54
     be6:	ae 96       	adiw	r28, 0x2e	; 46
     be8:	2c af       	std	Y+60, r18	; 0x3c
     bea:	3d af       	std	Y+61, r19	; 0x3d
     bec:	4e af       	std	Y+62, r20	; 0x3e
     bee:	5f af       	std	Y+63, r21	; 0x3f
     bf0:	ae 97       	sbiw	r28, 0x2e	; 46
     bf2:	8e 01       	movw	r16, r28
     bf4:	01 5b       	subi	r16, 0xB1	; 177
     bf6:	1f 4f       	sbci	r17, 0xFF	; 255
     bf8:	ae 96       	adiw	r28, 0x2e	; 46
     bfa:	6c ad       	ldd	r22, Y+60	; 0x3c
     bfc:	7d ad       	ldd	r23, Y+61	; 0x3d
     bfe:	8e ad       	ldd	r24, Y+62	; 0x3e
     c00:	9f ad       	ldd	r25, Y+63	; 0x3f
     c02:	ae 97       	sbiw	r28, 0x2e	; 46
     c04:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     c08:	ea 96       	adiw	r28, 0x3a	; 58
     c0a:	6c af       	std	Y+60, r22	; 0x3c
     c0c:	7d af       	std	Y+61, r23	; 0x3d
     c0e:	8e af       	std	Y+62, r24	; 0x3e
     c10:	9f af       	std	Y+63, r25	; 0x3f
     c12:	ea 97       	sbiw	r28, 0x3a	; 58
     c14:	e8 96       	adiw	r28, 0x38	; 56
     c16:	ee ad       	ldd	r30, Y+62	; 0x3e
     c18:	ff ad       	ldd	r31, Y+63	; 0x3f
     c1a:	e8 97       	sbiw	r28, 0x38	; 56
     c1c:	d8 01       	movw	r26, r16
     c1e:	ed 93       	st	X+, r30
     c20:	fc 93       	st	X, r31
		while(__ticks)
     c22:	25 c0       	rjmp	.+74     	; 0xc6e <LCD_displayCharacter+0x1ae>
     c24:	ce 01       	movw	r24, r28
     c26:	8f 5a       	subi	r24, 0xAF	; 175
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	29 e1       	ldi	r18, 0x19	; 25
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	dc 01       	movw	r26, r24
     c30:	2d 93       	st	X+, r18
     c32:	3c 93       	st	X, r19
	__asm__ volatile (
     c34:	ce 01       	movw	r24, r28
     c36:	8f 5a       	subi	r24, 0xAF	; 175
     c38:	9f 4f       	sbci	r25, 0xFF	; 255
     c3a:	fc 01       	movw	r30, r24
     c3c:	80 81       	ld	r24, Z
     c3e:	91 81       	ldd	r25, Z+1	; 0x01
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <LCD_displayCharacter+0x180>
     c44:	9e 01       	movw	r18, r28
     c46:	2f 5a       	subi	r18, 0xAF	; 175
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	d9 01       	movw	r26, r18
     c4c:	8d 93       	st	X+, r24
     c4e:	9c 93       	st	X, r25
}
     c50:	00 00       	nop
			__ticks --;
     c52:	ce 01       	movw	r24, r28
     c54:	81 5b       	subi	r24, 0xB1	; 177
     c56:	9f 4f       	sbci	r25, 0xFF	; 255
     c58:	9e 01       	movw	r18, r28
     c5a:	21 5b       	subi	r18, 0xB1	; 177
     c5c:	3f 4f       	sbci	r19, 0xFF	; 255
     c5e:	f9 01       	movw	r30, r18
     c60:	20 81       	ld	r18, Z
     c62:	31 81       	ldd	r19, Z+1	; 0x01
     c64:	21 50       	subi	r18, 0x01	; 1
     c66:	31 09       	sbc	r19, r1
     c68:	dc 01       	movw	r26, r24
     c6a:	2d 93       	st	X+, r18
     c6c:	3c 93       	st	X, r19
		while(__ticks)
     c6e:	ce 01       	movw	r24, r28
     c70:	81 5b       	subi	r24, 0xB1	; 177
     c72:	9f 4f       	sbci	r25, 0xFF	; 255
     c74:	fc 01       	movw	r30, r24
     c76:	80 81       	ld	r24, Z
     c78:	91 81       	ldd	r25, Z+1	; 0x01
     c7a:	89 2b       	or	r24, r25
     c7c:	99 f6       	brne	.-90     	; 0xc24 <LCD_displayCharacter+0x164>
		return;
     c7e:	35 c0       	rjmp	.+106    	; 0xcea <LCD_displayCharacter+0x22a>
		__ticks = (uint16_t)__tmp;
     c80:	8e 01       	movw	r16, r28
     c82:	01 5b       	subi	r16, 0xB1	; 177
     c84:	1f 4f       	sbci	r17, 0xFF	; 255
     c86:	ce 01       	movw	r24, r28
     c88:	85 5b       	subi	r24, 0xB5	; 181
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	dc 01       	movw	r26, r24
     c8e:	6d 91       	ld	r22, X+
     c90:	7d 91       	ld	r23, X+
     c92:	8d 91       	ld	r24, X+
     c94:	9c 91       	ld	r25, X
     c96:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     c9a:	ee 96       	adiw	r28, 0x3e	; 62
     c9c:	6c af       	std	Y+60, r22	; 0x3c
     c9e:	7d af       	std	Y+61, r23	; 0x3d
     ca0:	8e af       	std	Y+62, r24	; 0x3e
     ca2:	9f af       	std	Y+63, r25	; 0x3f
     ca4:	ee 97       	sbiw	r28, 0x3e	; 62
     ca6:	ec 96       	adiw	r28, 0x3c	; 60
     ca8:	2e ad       	ldd	r18, Y+62	; 0x3e
     caa:	3f ad       	ldd	r19, Y+63	; 0x3f
     cac:	ec 97       	sbiw	r28, 0x3c	; 60
     cae:	f8 01       	movw	r30, r16
     cb0:	31 83       	std	Z+1, r19	; 0x01
     cb2:	20 83       	st	Z, r18
     cb4:	ce 01       	movw	r24, r28
     cb6:	8d 5a       	subi	r24, 0xAD	; 173
     cb8:	9f 4f       	sbci	r25, 0xFF	; 255
     cba:	9e 01       	movw	r18, r28
     cbc:	21 5b       	subi	r18, 0xB1	; 177
     cbe:	3f 4f       	sbci	r19, 0xFF	; 255
     cc0:	d9 01       	movw	r26, r18
     cc2:	2d 91       	ld	r18, X+
     cc4:	3c 91       	ld	r19, X
     cc6:	fc 01       	movw	r30, r24
     cc8:	31 83       	std	Z+1, r19	; 0x01
     cca:	20 83       	st	Z, r18
	__asm__ volatile (
     ccc:	ce 01       	movw	r24, r28
     cce:	8d 5a       	subi	r24, 0xAD	; 173
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	dc 01       	movw	r26, r24
     cd4:	8d 91       	ld	r24, X+
     cd6:	9c 91       	ld	r25, X
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <LCD_displayCharacter+0x218>
     cdc:	9e 01       	movw	r18, r28
     cde:	2d 5a       	subi	r18, 0xAD	; 173
     ce0:	3f 4f       	sbci	r19, 0xFF	; 255
     ce2:	f9 01       	movw	r30, r18
     ce4:	91 83       	std	Z+1, r25	; 0x01
     ce6:	80 83       	st	Z, r24
}
     ce8:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
     cea:	82 e3       	ldi	r24, 0x32	; 50
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	dc 01       	movw	r26, r24
     cf0:	2c 91       	ld	r18, X
     cf2:	20 64       	ori	r18, 0x40	; 64
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	a0 e8       	ldi	r26, 0x80	; 128
     cfe:	bf e3       	ldi	r27, 0x3F	; 63
     d00:	89 af       	std	Y+57, r24	; 0x39
     d02:	9a af       	std	Y+58, r25	; 0x3a
     d04:	ab af       	std	Y+59, r26	; 0x3b
     d06:	bc af       	std	Y+60, r27	; 0x3c
	__tmp = ((F_CPU) / 4e3) * __ms;
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	4a e7       	ldi	r20, 0x7A	; 122
     d0e:	53 e4       	ldi	r21, 0x43	; 67
     d10:	69 ad       	ldd	r22, Y+57	; 0x39
     d12:	7a ad       	ldd	r23, Y+58	; 0x3a
     d14:	8b ad       	ldd	r24, Y+59	; 0x3b
     d16:	9c ad       	ldd	r25, Y+60	; 0x3c
     d18:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     d1c:	c2 58       	subi	r28, 0x82	; 130
     d1e:	df 4f       	sbci	r29, 0xFF	; 255
     d20:	68 83       	st	Y, r22
     d22:	79 83       	std	Y+1, r23	; 0x01
     d24:	8a 83       	std	Y+2, r24	; 0x02
     d26:	9b 83       	std	Y+3, r25	; 0x03
     d28:	ce 57       	subi	r28, 0x7E	; 126
     d2a:	d0 40       	sbci	r29, 0x00	; 0
     d2c:	ce 01       	movw	r24, r28
     d2e:	cd 96       	adiw	r24, 0x3d	; 61
     d30:	c2 58       	subi	r28, 0x82	; 130
     d32:	df 4f       	sbci	r29, 0xFF	; 255
     d34:	28 81       	ld	r18, Y
     d36:	39 81       	ldd	r19, Y+1	; 0x01
     d38:	4a 81       	ldd	r20, Y+2	; 0x02
     d3a:	5b 81       	ldd	r21, Y+3	; 0x03
     d3c:	ce 57       	subi	r28, 0x7E	; 126
     d3e:	d0 40       	sbci	r29, 0x00	; 0
     d40:	dc 01       	movw	r26, r24
     d42:	2d 93       	st	X+, r18
     d44:	3d 93       	st	X+, r19
     d46:	4d 93       	st	X+, r20
     d48:	5c 93       	st	X, r21
     d4a:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e8       	ldi	r20, 0x80	; 128
     d52:	5f e3       	ldi	r21, 0x3F	; 63
     d54:	ce 01       	movw	r24, r28
     d56:	cd 96       	adiw	r24, 0x3d	; 61
     d58:	fc 01       	movw	r30, r24
     d5a:	60 81       	ld	r22, Z
     d5c:	71 81       	ldd	r23, Z+1	; 0x01
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	93 81       	ldd	r25, Z+3	; 0x03
     d62:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     d66:	88 23       	and	r24, r24
     d68:	4c f4       	brge	.+18     	; 0xd7c <LCD_displayCharacter+0x2bc>
		__ticks = 1;
     d6a:	ce 01       	movw	r24, r28
     d6c:	8f 5b       	subi	r24, 0xBF	; 191
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	21 e0       	ldi	r18, 0x01	; 1
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	dc 01       	movw	r26, r24
     d76:	2d 93       	st	X+, r18
     d78:	3c 93       	st	X, r19
     d7a:	98 c0       	rjmp	.+304    	; 0xeac <LCD_displayCharacter+0x3ec>
	else if (__tmp > 65535)
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	3f ef       	ldi	r19, 0xFF	; 255
     d80:	4f e7       	ldi	r20, 0x7F	; 127
     d82:	57 e4       	ldi	r21, 0x47	; 71
     d84:	ce 01       	movw	r24, r28
     d86:	cd 96       	adiw	r24, 0x3d	; 61
     d88:	fc 01       	movw	r30, r24
     d8a:	60 81       	ld	r22, Z
     d8c:	71 81       	ldd	r23, Z+1	; 0x01
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     d96:	18 16       	cp	r1, r24
     d98:	0c f0       	brlt	.+2      	; 0xd9c <LCD_displayCharacter+0x2dc>
     d9a:	6b c0       	rjmp	.+214    	; 0xe72 <LCD_displayCharacter+0x3b2>
		__ticks = (uint16_t) (__ms * 10.0);
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e2       	ldi	r20, 0x20	; 32
     da2:	51 e4       	ldi	r21, 0x41	; 65
     da4:	69 ad       	ldd	r22, Y+57	; 0x39
     da6:	7a ad       	ldd	r23, Y+58	; 0x3a
     da8:	8b ad       	ldd	r24, Y+59	; 0x3b
     daa:	9c ad       	ldd	r25, Y+60	; 0x3c
     dac:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     db0:	ce 57       	subi	r28, 0x7E	; 126
     db2:	df 4f       	sbci	r29, 0xFF	; 255
     db4:	68 83       	st	Y, r22
     db6:	79 83       	std	Y+1, r23	; 0x01
     db8:	8a 83       	std	Y+2, r24	; 0x02
     dba:	9b 83       	std	Y+3, r25	; 0x03
     dbc:	c2 58       	subi	r28, 0x82	; 130
     dbe:	d0 40       	sbci	r29, 0x00	; 0
     dc0:	ce 57       	subi	r28, 0x7E	; 126
     dc2:	df 4f       	sbci	r29, 0xFF	; 255
     dc4:	28 81       	ld	r18, Y
     dc6:	39 81       	ldd	r19, Y+1	; 0x01
     dc8:	4a 81       	ldd	r20, Y+2	; 0x02
     dca:	5b 81       	ldd	r21, Y+3	; 0x03
     dcc:	c2 58       	subi	r28, 0x82	; 130
     dce:	d0 40       	sbci	r29, 0x00	; 0
     dd0:	aa 96       	adiw	r28, 0x2a	; 42
     dd2:	2c af       	std	Y+60, r18	; 0x3c
     dd4:	3d af       	std	Y+61, r19	; 0x3d
     dd6:	4e af       	std	Y+62, r20	; 0x3e
     dd8:	5f af       	std	Y+63, r21	; 0x3f
     dda:	aa 97       	sbiw	r28, 0x2a	; 42
     ddc:	8e 01       	movw	r16, r28
     dde:	0f 5b       	subi	r16, 0xBF	; 191
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	aa 96       	adiw	r28, 0x2a	; 42
     de4:	6c ad       	ldd	r22, Y+60	; 0x3c
     de6:	7d ad       	ldd	r23, Y+61	; 0x3d
     de8:	8e ad       	ldd	r24, Y+62	; 0x3e
     dea:	9f ad       	ldd	r25, Y+63	; 0x3f
     dec:	aa 97       	sbiw	r28, 0x2a	; 42
     dee:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     df2:	ca 57       	subi	r28, 0x7A	; 122
     df4:	df 4f       	sbci	r29, 0xFF	; 255
     df6:	68 83       	st	Y, r22
     df8:	79 83       	std	Y+1, r23	; 0x01
     dfa:	8a 83       	std	Y+2, r24	; 0x02
     dfc:	9b 83       	std	Y+3, r25	; 0x03
     dfe:	c6 58       	subi	r28, 0x86	; 134
     e00:	d0 40       	sbci	r29, 0x00	; 0
     e02:	ca 57       	subi	r28, 0x7A	; 122
     e04:	df 4f       	sbci	r29, 0xFF	; 255
     e06:	e8 81       	ld	r30, Y
     e08:	f9 81       	ldd	r31, Y+1	; 0x01
     e0a:	c6 58       	subi	r28, 0x86	; 134
     e0c:	d0 40       	sbci	r29, 0x00	; 0
     e0e:	d8 01       	movw	r26, r16
     e10:	ed 93       	st	X+, r30
     e12:	fc 93       	st	X, r31
		while(__ticks)
     e14:	25 c0       	rjmp	.+74     	; 0xe60 <LCD_displayCharacter+0x3a0>
     e16:	ce 01       	movw	r24, r28
     e18:	8d 5b       	subi	r24, 0xBD	; 189
     e1a:	9f 4f       	sbci	r25, 0xFF	; 255
     e1c:	29 e1       	ldi	r18, 0x19	; 25
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	dc 01       	movw	r26, r24
     e22:	2d 93       	st	X+, r18
     e24:	3c 93       	st	X, r19
	__asm__ volatile (
     e26:	ce 01       	movw	r24, r28
     e28:	8d 5b       	subi	r24, 0xBD	; 189
     e2a:	9f 4f       	sbci	r25, 0xFF	; 255
     e2c:	fc 01       	movw	r30, r24
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <LCD_displayCharacter+0x372>
     e36:	9e 01       	movw	r18, r28
     e38:	2d 5b       	subi	r18, 0xBD	; 189
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	d9 01       	movw	r26, r18
     e3e:	8d 93       	st	X+, r24
     e40:	9c 93       	st	X, r25
}
     e42:	00 00       	nop
			__ticks --;
     e44:	ce 01       	movw	r24, r28
     e46:	8f 5b       	subi	r24, 0xBF	; 191
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	9e 01       	movw	r18, r28
     e4c:	2f 5b       	subi	r18, 0xBF	; 191
     e4e:	3f 4f       	sbci	r19, 0xFF	; 255
     e50:	f9 01       	movw	r30, r18
     e52:	20 81       	ld	r18, Z
     e54:	31 81       	ldd	r19, Z+1	; 0x01
     e56:	21 50       	subi	r18, 0x01	; 1
     e58:	31 09       	sbc	r19, r1
     e5a:	dc 01       	movw	r26, r24
     e5c:	2d 93       	st	X+, r18
     e5e:	3c 93       	st	X, r19
		while(__ticks)
     e60:	ce 01       	movw	r24, r28
     e62:	8f 5b       	subi	r24, 0xBF	; 191
     e64:	9f 4f       	sbci	r25, 0xFF	; 255
     e66:	fc 01       	movw	r30, r24
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	89 2b       	or	r24, r25
     e6e:	99 f6       	brne	.-90     	; 0xe16 <LCD_displayCharacter+0x356>
		return;
     e70:	38 c0       	rjmp	.+112    	; 0xee2 <LCD_displayCharacter+0x422>
		__ticks = (uint16_t)__tmp;
     e72:	8e 01       	movw	r16, r28
     e74:	0f 5b       	subi	r16, 0xBF	; 191
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	ce 01       	movw	r24, r28
     e7a:	cd 96       	adiw	r24, 0x3d	; 61
     e7c:	dc 01       	movw	r26, r24
     e7e:	6d 91       	ld	r22, X+
     e80:	7d 91       	ld	r23, X+
     e82:	8d 91       	ld	r24, X+
     e84:	9c 91       	ld	r25, X
     e86:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     e8a:	c6 57       	subi	r28, 0x76	; 118
     e8c:	df 4f       	sbci	r29, 0xFF	; 255
     e8e:	68 83       	st	Y, r22
     e90:	79 83       	std	Y+1, r23	; 0x01
     e92:	8a 83       	std	Y+2, r24	; 0x02
     e94:	9b 83       	std	Y+3, r25	; 0x03
     e96:	ca 58       	subi	r28, 0x8A	; 138
     e98:	d0 40       	sbci	r29, 0x00	; 0
     e9a:	c6 57       	subi	r28, 0x76	; 118
     e9c:	df 4f       	sbci	r29, 0xFF	; 255
     e9e:	28 81       	ld	r18, Y
     ea0:	39 81       	ldd	r19, Y+1	; 0x01
     ea2:	ca 58       	subi	r28, 0x8A	; 138
     ea4:	d0 40       	sbci	r29, 0x00	; 0
     ea6:	f8 01       	movw	r30, r16
     ea8:	31 83       	std	Z+1, r19	; 0x01
     eaa:	20 83       	st	Z, r18
     eac:	ce 01       	movw	r24, r28
     eae:	8b 5b       	subi	r24, 0xBB	; 187
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	9e 01       	movw	r18, r28
     eb4:	2f 5b       	subi	r18, 0xBF	; 191
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	d9 01       	movw	r26, r18
     eba:	2d 91       	ld	r18, X+
     ebc:	3c 91       	ld	r19, X
     ebe:	fc 01       	movw	r30, r24
     ec0:	31 83       	std	Z+1, r19	; 0x01
     ec2:	20 83       	st	Z, r18
	__asm__ volatile (
     ec4:	ce 01       	movw	r24, r28
     ec6:	8b 5b       	subi	r24, 0xBB	; 187
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	dc 01       	movw	r26, r24
     ecc:	8d 91       	ld	r24, X+
     ece:	9c 91       	ld	r25, X
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <LCD_displayCharacter+0x410>
     ed4:	9e 01       	movw	r18, r28
     ed6:	2b 5b       	subi	r18, 0xBB	; 187
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	f9 01       	movw	r30, r18
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
}
     ee0:	00 00       	nop
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( data  & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT=( (data >>4 ) & 0x0F ) | ( DATA_OUT & 0xF0 );
     ee2:	ce 01       	movw	r24, r28
     ee4:	8b 5a       	subi	r24, 0xAB	; 171
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	dc 01       	movw	r26, r24
     eea:	8c 91       	ld	r24, X
     eec:	82 95       	swap	r24
     eee:	8f 70       	andi	r24, 0x0F	; 15
     ef0:	28 2f       	mov	r18, r24
     ef2:	85 e3       	ldi	r24, 0x35	; 53
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	fc 01       	movw	r30, r24
     ef8:	80 81       	ld	r24, Z
     efa:	80 7f       	andi	r24, 0xF0	; 240
     efc:	28 2b       	or	r18, r24
     efe:	85 e3       	ldi	r24, 0x35	; 53
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	dc 01       	movw	r26, r24
     f04:	2c 93       	st	X, r18
#endif

	E = CLEAR;	 /* close Enable to prevent data share between LCD and AVR */
     f06:	82 e3       	ldi	r24, 0x32	; 50
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 81       	ld	r18, Z
     f0e:	2f 7b       	andi	r18, 0xBF	; 191
     f10:	dc 01       	movw	r26, r24
     f12:	2c 93       	st	X, r18
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	a0 e8       	ldi	r26, 0x80	; 128
     f1a:	bf e3       	ldi	r27, 0x3F	; 63
     f1c:	8b a7       	std	Y+43, r24	; 0x2b
     f1e:	9c a7       	std	Y+44, r25	; 0x2c
     f20:	ad a7       	std	Y+45, r26	; 0x2d
     f22:	be a7       	std	Y+46, r27	; 0x2e
	__tmp = ((F_CPU) / 4e3) * __ms;
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	4a e7       	ldi	r20, 0x7A	; 122
     f2a:	53 e4       	ldi	r21, 0x43	; 67
     f2c:	6b a5       	ldd	r22, Y+43	; 0x2b
     f2e:	7c a5       	ldd	r23, Y+44	; 0x2c
     f30:	8d a5       	ldd	r24, Y+45	; 0x2d
     f32:	9e a5       	ldd	r25, Y+46	; 0x2e
     f34:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     f38:	c2 57       	subi	r28, 0x72	; 114
     f3a:	df 4f       	sbci	r29, 0xFF	; 255
     f3c:	68 83       	st	Y, r22
     f3e:	79 83       	std	Y+1, r23	; 0x01
     f40:	8a 83       	std	Y+2, r24	; 0x02
     f42:	9b 83       	std	Y+3, r25	; 0x03
     f44:	ce 58       	subi	r28, 0x8E	; 142
     f46:	d0 40       	sbci	r29, 0x00	; 0
     f48:	c2 57       	subi	r28, 0x72	; 114
     f4a:	df 4f       	sbci	r29, 0xFF	; 255
     f4c:	28 81       	ld	r18, Y
     f4e:	39 81       	ldd	r19, Y+1	; 0x01
     f50:	4a 81       	ldd	r20, Y+2	; 0x02
     f52:	5b 81       	ldd	r21, Y+3	; 0x03
     f54:	ce 58       	subi	r28, 0x8E	; 142
     f56:	d0 40       	sbci	r29, 0x00	; 0
     f58:	2f a7       	std	Y+47, r18	; 0x2f
     f5a:	38 ab       	std	Y+48, r19	; 0x30
     f5c:	49 ab       	std	Y+49, r20	; 0x31
     f5e:	5a ab       	std	Y+50, r21	; 0x32
	if (__tmp < 1.0)
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	5f e3       	ldi	r21, 0x3F	; 63
     f68:	6f a5       	ldd	r22, Y+47	; 0x2f
     f6a:	78 a9       	ldd	r23, Y+48	; 0x30
     f6c:	89 a9       	ldd	r24, Y+49	; 0x31
     f6e:	9a a9       	ldd	r25, Y+50	; 0x32
     f70:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     f74:	88 23       	and	r24, r24
     f76:	2c f4       	brge	.+10     	; 0xf82 <LCD_displayCharacter+0x4c2>
		__ticks = 1;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9c ab       	std	Y+52, r25	; 0x34
     f7e:	8b ab       	std	Y+51, r24	; 0x33
     f80:	71 c0       	rjmp	.+226    	; 0x1064 <LCD_displayCharacter+0x5a4>
	else if (__tmp > 65535)
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	4f e7       	ldi	r20, 0x7F	; 127
     f88:	57 e4       	ldi	r21, 0x47	; 71
     f8a:	6f a5       	ldd	r22, Y+47	; 0x2f
     f8c:	78 a9       	ldd	r23, Y+48	; 0x30
     f8e:	89 a9       	ldd	r24, Y+49	; 0x31
     f90:	9a a9       	ldd	r25, Y+50	; 0x32
     f92:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
     f96:	18 16       	cp	r1, r24
     f98:	0c f0       	brlt	.+2      	; 0xf9c <LCD_displayCharacter+0x4dc>
     f9a:	4e c0       	rjmp	.+156    	; 0x1038 <LCD_displayCharacter+0x578>
		__ticks = (uint16_t) (__ms * 10.0);
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e2       	ldi	r20, 0x20	; 32
     fa2:	51 e4       	ldi	r21, 0x41	; 65
     fa4:	6b a5       	ldd	r22, Y+43	; 0x2b
     fa6:	7c a5       	ldd	r23, Y+44	; 0x2c
     fa8:	8d a5       	ldd	r24, Y+45	; 0x2d
     faa:	9e a5       	ldd	r25, Y+46	; 0x2e
     fac:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
     fb0:	ce 56       	subi	r28, 0x6E	; 110
     fb2:	df 4f       	sbci	r29, 0xFF	; 255
     fb4:	68 83       	st	Y, r22
     fb6:	79 83       	std	Y+1, r23	; 0x01
     fb8:	8a 83       	std	Y+2, r24	; 0x02
     fba:	9b 83       	std	Y+3, r25	; 0x03
     fbc:	c2 59       	subi	r28, 0x92	; 146
     fbe:	d0 40       	sbci	r29, 0x00	; 0
     fc0:	ce 56       	subi	r28, 0x6E	; 110
     fc2:	df 4f       	sbci	r29, 0xFF	; 255
     fc4:	88 81       	ld	r24, Y
     fc6:	99 81       	ldd	r25, Y+1	; 0x01
     fc8:	aa 81       	ldd	r26, Y+2	; 0x02
     fca:	bb 81       	ldd	r27, Y+3	; 0x03
     fcc:	c2 59       	subi	r28, 0x92	; 146
     fce:	d0 40       	sbci	r29, 0x00	; 0
     fd0:	a6 96       	adiw	r28, 0x26	; 38
     fd2:	8c af       	std	Y+60, r24	; 0x3c
     fd4:	9d af       	std	Y+61, r25	; 0x3d
     fd6:	ae af       	std	Y+62, r26	; 0x3e
     fd8:	bf af       	std	Y+63, r27	; 0x3f
     fda:	a6 97       	sbiw	r28, 0x26	; 38
     fdc:	a6 96       	adiw	r28, 0x26	; 38
     fde:	6c ad       	ldd	r22, Y+60	; 0x3c
     fe0:	7d ad       	ldd	r23, Y+61	; 0x3d
     fe2:	8e ad       	ldd	r24, Y+62	; 0x3e
     fe4:	9f ad       	ldd	r25, Y+63	; 0x3f
     fe6:	a6 97       	sbiw	r28, 0x26	; 38
     fe8:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     fec:	ca 56       	subi	r28, 0x6A	; 106
     fee:	df 4f       	sbci	r29, 0xFF	; 255
     ff0:	68 83       	st	Y, r22
     ff2:	79 83       	std	Y+1, r23	; 0x01
     ff4:	8a 83       	std	Y+2, r24	; 0x02
     ff6:	9b 83       	std	Y+3, r25	; 0x03
     ff8:	c6 59       	subi	r28, 0x96	; 150
     ffa:	d0 40       	sbci	r29, 0x00	; 0
     ffc:	ca 56       	subi	r28, 0x6A	; 106
     ffe:	df 4f       	sbci	r29, 0xFF	; 255
    1000:	a8 81       	ld	r26, Y
    1002:	b9 81       	ldd	r27, Y+1	; 0x01
    1004:	c6 59       	subi	r28, 0x96	; 150
    1006:	d0 40       	sbci	r29, 0x00	; 0
    1008:	bc ab       	std	Y+52, r27	; 0x34
    100a:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
    100c:	10 c0       	rjmp	.+32     	; 0x102e <LCD_displayCharacter+0x56e>
    100e:	89 e1       	ldi	r24, 0x19	; 25
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9e ab       	std	Y+54, r25	; 0x36
    1014:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
    1016:	8d a9       	ldd	r24, Y+53	; 0x35
    1018:	9e a9       	ldd	r25, Y+54	; 0x36
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <LCD_displayCharacter+0x55a>
    101e:	9e ab       	std	Y+54, r25	; 0x36
    1020:	8d ab       	std	Y+53, r24	; 0x35
}
    1022:	00 00       	nop
			__ticks --;
    1024:	8b a9       	ldd	r24, Y+51	; 0x33
    1026:	9c a9       	ldd	r25, Y+52	; 0x34
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	9c ab       	std	Y+52, r25	; 0x34
    102c:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
    102e:	8b a9       	ldd	r24, Y+51	; 0x33
    1030:	9c a9       	ldd	r25, Y+52	; 0x34
    1032:	89 2b       	or	r24, r25
    1034:	61 f7       	brne	.-40     	; 0x100e <LCD_displayCharacter+0x54e>
		return;
    1036:	21 c0       	rjmp	.+66     	; 0x107a <LCD_displayCharacter+0x5ba>
		__ticks = (uint16_t)__tmp;
    1038:	6f a5       	ldd	r22, Y+47	; 0x2f
    103a:	78 a9       	ldd	r23, Y+48	; 0x30
    103c:	89 a9       	ldd	r24, Y+49	; 0x31
    103e:	9a a9       	ldd	r25, Y+50	; 0x32
    1040:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    1044:	c6 56       	subi	r28, 0x66	; 102
    1046:	df 4f       	sbci	r29, 0xFF	; 255
    1048:	68 83       	st	Y, r22
    104a:	79 83       	std	Y+1, r23	; 0x01
    104c:	8a 83       	std	Y+2, r24	; 0x02
    104e:	9b 83       	std	Y+3, r25	; 0x03
    1050:	ca 59       	subi	r28, 0x9A	; 154
    1052:	d0 40       	sbci	r29, 0x00	; 0
    1054:	c6 56       	subi	r28, 0x66	; 102
    1056:	df 4f       	sbci	r29, 0xFF	; 255
    1058:	e8 81       	ld	r30, Y
    105a:	f9 81       	ldd	r31, Y+1	; 0x01
    105c:	ca 59       	subi	r28, 0x9A	; 154
    105e:	d0 40       	sbci	r29, 0x00	; 0
    1060:	fc ab       	std	Y+52, r31	; 0x34
    1062:	eb ab       	std	Y+51, r30	; 0x33
    1064:	8b a9       	ldd	r24, Y+51	; 0x33
    1066:	9c a9       	ldd	r25, Y+52	; 0x34
    1068:	98 af       	std	Y+56, r25	; 0x38
    106a:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
    106c:	8f a9       	ldd	r24, Y+55	; 0x37
    106e:	98 ad       	ldd	r25, Y+56	; 0x38
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <LCD_displayCharacter+0x5b0>
    1074:	98 af       	std	Y+56, r25	; 0x38
    1076:	8f ab       	std	Y+55, r24	; 0x37
}
    1078:	00 00       	nop
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	E = SET;		/* open Enable again to send last 4 bits of DATA */
    107a:	82 e3       	ldi	r24, 0x32	; 50
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	dc 01       	movw	r26, r24
    1080:	2c 91       	ld	r18, X
    1082:	20 64       	ori	r18, 0x40	; 64
    1084:	fc 01       	movw	r30, r24
    1086:	20 83       	st	Z, r18
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a0 e8       	ldi	r26, 0x80	; 128
    108e:	bf e3       	ldi	r27, 0x3F	; 63
    1090:	8d 8f       	std	Y+29, r24	; 0x1d
    1092:	9e 8f       	std	Y+30, r25	; 0x1e
    1094:	af 8f       	std	Y+31, r26	; 0x1f
    1096:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	4a e7       	ldi	r20, 0x7A	; 122
    109e:	53 e4       	ldi	r21, 0x43	; 67
    10a0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    10a2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    10a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10a6:	98 a1       	ldd	r25, Y+32	; 0x20
    10a8:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    10ac:	c2 56       	subi	r28, 0x62	; 98
    10ae:	df 4f       	sbci	r29, 0xFF	; 255
    10b0:	68 83       	st	Y, r22
    10b2:	79 83       	std	Y+1, r23	; 0x01
    10b4:	8a 83       	std	Y+2, r24	; 0x02
    10b6:	9b 83       	std	Y+3, r25	; 0x03
    10b8:	ce 59       	subi	r28, 0x9E	; 158
    10ba:	d0 40       	sbci	r29, 0x00	; 0
    10bc:	c2 56       	subi	r28, 0x62	; 98
    10be:	df 4f       	sbci	r29, 0xFF	; 255
    10c0:	28 81       	ld	r18, Y
    10c2:	39 81       	ldd	r19, Y+1	; 0x01
    10c4:	4a 81       	ldd	r20, Y+2	; 0x02
    10c6:	5b 81       	ldd	r21, Y+3	; 0x03
    10c8:	ce 59       	subi	r28, 0x9E	; 158
    10ca:	d0 40       	sbci	r29, 0x00	; 0
    10cc:	29 a3       	std	Y+33, r18	; 0x21
    10ce:	3a a3       	std	Y+34, r19	; 0x22
    10d0:	4b a3       	std	Y+35, r20	; 0x23
    10d2:	5c a3       	std	Y+36, r21	; 0x24
	if (__tmp < 1.0)
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e8       	ldi	r20, 0x80	; 128
    10da:	5f e3       	ldi	r21, 0x3F	; 63
    10dc:	69 a1       	ldd	r22, Y+33	; 0x21
    10de:	7a a1       	ldd	r23, Y+34	; 0x22
    10e0:	8b a1       	ldd	r24, Y+35	; 0x23
    10e2:	9c a1       	ldd	r25, Y+36	; 0x24
    10e4:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    10e8:	88 23       	and	r24, r24
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <LCD_displayCharacter+0x636>
		__ticks = 1;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9e a3       	std	Y+38, r25	; 0x26
    10f2:	8d a3       	std	Y+37, r24	; 0x25
    10f4:	71 c0       	rjmp	.+226    	; 0x11d8 <LCD_displayCharacter+0x718>
	else if (__tmp > 65535)
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	3f ef       	ldi	r19, 0xFF	; 255
    10fa:	4f e7       	ldi	r20, 0x7F	; 127
    10fc:	57 e4       	ldi	r21, 0x47	; 71
    10fe:	69 a1       	ldd	r22, Y+33	; 0x21
    1100:	7a a1       	ldd	r23, Y+34	; 0x22
    1102:	8b a1       	ldd	r24, Y+35	; 0x23
    1104:	9c a1       	ldd	r25, Y+36	; 0x24
    1106:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
    110a:	18 16       	cp	r1, r24
    110c:	0c f0       	brlt	.+2      	; 0x1110 <LCD_displayCharacter+0x650>
    110e:	4e c0       	rjmp	.+156    	; 0x11ac <LCD_displayCharacter+0x6ec>
		__ticks = (uint16_t) (__ms * 10.0);
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e2       	ldi	r20, 0x20	; 32
    1116:	51 e4       	ldi	r21, 0x41	; 65
    1118:	6d 8d       	ldd	r22, Y+29	; 0x1d
    111a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    111c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    111e:	98 a1       	ldd	r25, Y+32	; 0x20
    1120:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1124:	ce 55       	subi	r28, 0x5E	; 94
    1126:	df 4f       	sbci	r29, 0xFF	; 255
    1128:	68 83       	st	Y, r22
    112a:	79 83       	std	Y+1, r23	; 0x01
    112c:	8a 83       	std	Y+2, r24	; 0x02
    112e:	9b 83       	std	Y+3, r25	; 0x03
    1130:	c2 5a       	subi	r28, 0xA2	; 162
    1132:	d0 40       	sbci	r29, 0x00	; 0
    1134:	ce 55       	subi	r28, 0x5E	; 94
    1136:	df 4f       	sbci	r29, 0xFF	; 255
    1138:	88 81       	ld	r24, Y
    113a:	99 81       	ldd	r25, Y+1	; 0x01
    113c:	aa 81       	ldd	r26, Y+2	; 0x02
    113e:	bb 81       	ldd	r27, Y+3	; 0x03
    1140:	c2 5a       	subi	r28, 0xA2	; 162
    1142:	d0 40       	sbci	r29, 0x00	; 0
    1144:	a2 96       	adiw	r28, 0x22	; 34
    1146:	8c af       	std	Y+60, r24	; 0x3c
    1148:	9d af       	std	Y+61, r25	; 0x3d
    114a:	ae af       	std	Y+62, r26	; 0x3e
    114c:	bf af       	std	Y+63, r27	; 0x3f
    114e:	a2 97       	sbiw	r28, 0x22	; 34
    1150:	a2 96       	adiw	r28, 0x22	; 34
    1152:	6c ad       	ldd	r22, Y+60	; 0x3c
    1154:	7d ad       	ldd	r23, Y+61	; 0x3d
    1156:	8e ad       	ldd	r24, Y+62	; 0x3e
    1158:	9f ad       	ldd	r25, Y+63	; 0x3f
    115a:	a2 97       	sbiw	r28, 0x22	; 34
    115c:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    1160:	ca 55       	subi	r28, 0x5A	; 90
    1162:	df 4f       	sbci	r29, 0xFF	; 255
    1164:	68 83       	st	Y, r22
    1166:	79 83       	std	Y+1, r23	; 0x01
    1168:	8a 83       	std	Y+2, r24	; 0x02
    116a:	9b 83       	std	Y+3, r25	; 0x03
    116c:	c6 5a       	subi	r28, 0xA6	; 166
    116e:	d0 40       	sbci	r29, 0x00	; 0
    1170:	ca 55       	subi	r28, 0x5A	; 90
    1172:	df 4f       	sbci	r29, 0xFF	; 255
    1174:	a8 81       	ld	r26, Y
    1176:	b9 81       	ldd	r27, Y+1	; 0x01
    1178:	c6 5a       	subi	r28, 0xA6	; 166
    117a:	d0 40       	sbci	r29, 0x00	; 0
    117c:	be a3       	std	Y+38, r27	; 0x26
    117e:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
    1180:	10 c0       	rjmp	.+32     	; 0x11a2 <LCD_displayCharacter+0x6e2>
    1182:	89 e1       	ldi	r24, 0x19	; 25
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	98 a7       	std	Y+40, r25	; 0x28
    1188:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
    118a:	8f a1       	ldd	r24, Y+39	; 0x27
    118c:	98 a5       	ldd	r25, Y+40	; 0x28
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <LCD_displayCharacter+0x6ce>
    1192:	98 a7       	std	Y+40, r25	; 0x28
    1194:	8f a3       	std	Y+39, r24	; 0x27
}
    1196:	00 00       	nop
			__ticks --;
    1198:	8d a1       	ldd	r24, Y+37	; 0x25
    119a:	9e a1       	ldd	r25, Y+38	; 0x26
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	9e a3       	std	Y+38, r25	; 0x26
    11a0:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
    11a2:	8d a1       	ldd	r24, Y+37	; 0x25
    11a4:	9e a1       	ldd	r25, Y+38	; 0x26
    11a6:	89 2b       	or	r24, r25
    11a8:	61 f7       	brne	.-40     	; 0x1182 <LCD_displayCharacter+0x6c2>
		return;
    11aa:	21 c0       	rjmp	.+66     	; 0x11ee <LCD_displayCharacter+0x72e>
		__ticks = (uint16_t)__tmp;
    11ac:	69 a1       	ldd	r22, Y+33	; 0x21
    11ae:	7a a1       	ldd	r23, Y+34	; 0x22
    11b0:	8b a1       	ldd	r24, Y+35	; 0x23
    11b2:	9c a1       	ldd	r25, Y+36	; 0x24
    11b4:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    11b8:	c6 55       	subi	r28, 0x56	; 86
    11ba:	df 4f       	sbci	r29, 0xFF	; 255
    11bc:	68 83       	st	Y, r22
    11be:	79 83       	std	Y+1, r23	; 0x01
    11c0:	8a 83       	std	Y+2, r24	; 0x02
    11c2:	9b 83       	std	Y+3, r25	; 0x03
    11c4:	ca 5a       	subi	r28, 0xAA	; 170
    11c6:	d0 40       	sbci	r29, 0x00	; 0
    11c8:	c6 55       	subi	r28, 0x56	; 86
    11ca:	df 4f       	sbci	r29, 0xFF	; 255
    11cc:	e8 81       	ld	r30, Y
    11ce:	f9 81       	ldd	r31, Y+1	; 0x01
    11d0:	ca 5a       	subi	r28, 0xAA	; 170
    11d2:	d0 40       	sbci	r29, 0x00	; 0
    11d4:	fe a3       	std	Y+38, r31	; 0x26
    11d6:	ed a3       	std	Y+37, r30	; 0x25
    11d8:	8d a1       	ldd	r24, Y+37	; 0x25
    11da:	9e a1       	ldd	r25, Y+38	; 0x26
    11dc:	9a a7       	std	Y+42, r25	; 0x2a
    11de:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
    11e0:	89 a5       	ldd	r24, Y+41	; 0x29
    11e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <LCD_displayCharacter+0x724>
    11e8:	9a a7       	std	Y+42, r25	; 0x2a
    11ea:	89 a7       	std	Y+41, r24	; 0x29
}
    11ec:	00 00       	nop
	/* send the Least 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( (data << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif

#ifdef LOWER_MODE_BITS
	DATA_OUT=( (data ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    11ee:	ce 01       	movw	r24, r28
    11f0:	8b 5a       	subi	r24, 0xAB	; 171
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	dc 01       	movw	r26, r24
    11f6:	8c 91       	ld	r24, X
    11f8:	28 2f       	mov	r18, r24
    11fa:	2f 70       	andi	r18, 0x0F	; 15
    11fc:	85 e3       	ldi	r24, 0x35	; 53
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	fc 01       	movw	r30, r24
    1202:	80 81       	ld	r24, Z
    1204:	80 7f       	andi	r24, 0xF0	; 240
    1206:	28 2b       	or	r18, r24
    1208:	85 e3       	ldi	r24, 0x35	; 53
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	dc 01       	movw	r26, r24
    120e:	2c 93       	st	X, r18
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a0 e8       	ldi	r26, 0x80	; 128
    1216:	bf e3       	ldi	r27, 0x3F	; 63
    1218:	8f 87       	std	Y+15, r24	; 0x0f
    121a:	98 8b       	std	Y+16, r25	; 0x10
    121c:	a9 8b       	std	Y+17, r26	; 0x11
    121e:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	4a e7       	ldi	r20, 0x7A	; 122
    1226:	53 e4       	ldi	r21, 0x43	; 67
    1228:	6f 85       	ldd	r22, Y+15	; 0x0f
    122a:	78 89       	ldd	r23, Y+16	; 0x10
    122c:	89 89       	ldd	r24, Y+17	; 0x11
    122e:	9a 89       	ldd	r25, Y+18	; 0x12
    1230:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1234:	c2 55       	subi	r28, 0x52	; 82
    1236:	df 4f       	sbci	r29, 0xFF	; 255
    1238:	68 83       	st	Y, r22
    123a:	79 83       	std	Y+1, r23	; 0x01
    123c:	8a 83       	std	Y+2, r24	; 0x02
    123e:	9b 83       	std	Y+3, r25	; 0x03
    1240:	ce 5a       	subi	r28, 0xAE	; 174
    1242:	d0 40       	sbci	r29, 0x00	; 0
    1244:	c2 55       	subi	r28, 0x52	; 82
    1246:	df 4f       	sbci	r29, 0xFF	; 255
    1248:	28 81       	ld	r18, Y
    124a:	39 81       	ldd	r19, Y+1	; 0x01
    124c:	4a 81       	ldd	r20, Y+2	; 0x02
    124e:	5b 81       	ldd	r21, Y+3	; 0x03
    1250:	ce 5a       	subi	r28, 0xAE	; 174
    1252:	d0 40       	sbci	r29, 0x00	; 0
    1254:	2b 8b       	std	Y+19, r18	; 0x13
    1256:	3c 8b       	std	Y+20, r19	; 0x14
    1258:	4d 8b       	std	Y+21, r20	; 0x15
    125a:	5e 8b       	std	Y+22, r21	; 0x16
	if (__tmp < 1.0)
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e8       	ldi	r20, 0x80	; 128
    1262:	5f e3       	ldi	r21, 0x3F	; 63
    1264:	6b 89       	ldd	r22, Y+19	; 0x13
    1266:	7c 89       	ldd	r23, Y+20	; 0x14
    1268:	8d 89       	ldd	r24, Y+21	; 0x15
    126a:	9e 89       	ldd	r25, Y+22	; 0x16
    126c:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1270:	88 23       	and	r24, r24
    1272:	2c f4       	brge	.+10     	; 0x127e <LCD_displayCharacter+0x7be>
		__ticks = 1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	98 8f       	std	Y+24, r25	; 0x18
    127a:	8f 8b       	std	Y+23, r24	; 0x17
    127c:	71 c0       	rjmp	.+226    	; 0x1360 <LCD_displayCharacter+0x8a0>
	else if (__tmp > 65535)
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	3f ef       	ldi	r19, 0xFF	; 255
    1282:	4f e7       	ldi	r20, 0x7F	; 127
    1284:	57 e4       	ldi	r21, 0x47	; 71
    1286:	6b 89       	ldd	r22, Y+19	; 0x13
    1288:	7c 89       	ldd	r23, Y+20	; 0x14
    128a:	8d 89       	ldd	r24, Y+21	; 0x15
    128c:	9e 89       	ldd	r25, Y+22	; 0x16
    128e:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
    1292:	18 16       	cp	r1, r24
    1294:	0c f0       	brlt	.+2      	; 0x1298 <LCD_displayCharacter+0x7d8>
    1296:	4e c0       	rjmp	.+156    	; 0x1334 <LCD_displayCharacter+0x874>
		__ticks = (uint16_t) (__ms * 10.0);
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e2       	ldi	r20, 0x20	; 32
    129e:	51 e4       	ldi	r21, 0x41	; 65
    12a0:	6f 85       	ldd	r22, Y+15	; 0x0f
    12a2:	78 89       	ldd	r23, Y+16	; 0x10
    12a4:	89 89       	ldd	r24, Y+17	; 0x11
    12a6:	9a 89       	ldd	r25, Y+18	; 0x12
    12a8:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    12ac:	ce 54       	subi	r28, 0x4E	; 78
    12ae:	df 4f       	sbci	r29, 0xFF	; 255
    12b0:	68 83       	st	Y, r22
    12b2:	79 83       	std	Y+1, r23	; 0x01
    12b4:	8a 83       	std	Y+2, r24	; 0x02
    12b6:	9b 83       	std	Y+3, r25	; 0x03
    12b8:	c2 5b       	subi	r28, 0xB2	; 178
    12ba:	d0 40       	sbci	r29, 0x00	; 0
    12bc:	ce 54       	subi	r28, 0x4E	; 78
    12be:	df 4f       	sbci	r29, 0xFF	; 255
    12c0:	88 81       	ld	r24, Y
    12c2:	99 81       	ldd	r25, Y+1	; 0x01
    12c4:	aa 81       	ldd	r26, Y+2	; 0x02
    12c6:	bb 81       	ldd	r27, Y+3	; 0x03
    12c8:	c2 5b       	subi	r28, 0xB2	; 178
    12ca:	d0 40       	sbci	r29, 0x00	; 0
    12cc:	6e 96       	adiw	r28, 0x1e	; 30
    12ce:	8c af       	std	Y+60, r24	; 0x3c
    12d0:	9d af       	std	Y+61, r25	; 0x3d
    12d2:	ae af       	std	Y+62, r26	; 0x3e
    12d4:	bf af       	std	Y+63, r27	; 0x3f
    12d6:	6e 97       	sbiw	r28, 0x1e	; 30
    12d8:	6e 96       	adiw	r28, 0x1e	; 30
    12da:	6c ad       	ldd	r22, Y+60	; 0x3c
    12dc:	7d ad       	ldd	r23, Y+61	; 0x3d
    12de:	8e ad       	ldd	r24, Y+62	; 0x3e
    12e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    12e2:	6e 97       	sbiw	r28, 0x1e	; 30
    12e4:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    12e8:	ca 54       	subi	r28, 0x4A	; 74
    12ea:	df 4f       	sbci	r29, 0xFF	; 255
    12ec:	68 83       	st	Y, r22
    12ee:	79 83       	std	Y+1, r23	; 0x01
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	9b 83       	std	Y+3, r25	; 0x03
    12f4:	c6 5b       	subi	r28, 0xB6	; 182
    12f6:	d0 40       	sbci	r29, 0x00	; 0
    12f8:	ca 54       	subi	r28, 0x4A	; 74
    12fa:	df 4f       	sbci	r29, 0xFF	; 255
    12fc:	a8 81       	ld	r26, Y
    12fe:	b9 81       	ldd	r27, Y+1	; 0x01
    1300:	c6 5b       	subi	r28, 0xB6	; 182
    1302:	d0 40       	sbci	r29, 0x00	; 0
    1304:	b8 8f       	std	Y+24, r27	; 0x18
    1306:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
    1308:	10 c0       	rjmp	.+32     	; 0x132a <LCD_displayCharacter+0x86a>
    130a:	89 e1       	ldi	r24, 0x19	; 25
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9a 8f       	std	Y+26, r25	; 0x1a
    1310:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
    1312:	89 8d       	ldd	r24, Y+25	; 0x19
    1314:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <LCD_displayCharacter+0x856>
    131a:	9a 8f       	std	Y+26, r25	; 0x1a
    131c:	89 8f       	std	Y+25, r24	; 0x19
}
    131e:	00 00       	nop
			__ticks --;
    1320:	8f 89       	ldd	r24, Y+23	; 0x17
    1322:	98 8d       	ldd	r25, Y+24	; 0x18
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	98 8f       	std	Y+24, r25	; 0x18
    1328:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
    132a:	8f 89       	ldd	r24, Y+23	; 0x17
    132c:	98 8d       	ldd	r25, Y+24	; 0x18
    132e:	89 2b       	or	r24, r25
    1330:	61 f7       	brne	.-40     	; 0x130a <LCD_displayCharacter+0x84a>
		return;
    1332:	21 c0       	rjmp	.+66     	; 0x1376 <LCD_displayCharacter+0x8b6>
		__ticks = (uint16_t)__tmp;
    1334:	6b 89       	ldd	r22, Y+19	; 0x13
    1336:	7c 89       	ldd	r23, Y+20	; 0x14
    1338:	8d 89       	ldd	r24, Y+21	; 0x15
    133a:	9e 89       	ldd	r25, Y+22	; 0x16
    133c:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    1340:	c6 54       	subi	r28, 0x46	; 70
    1342:	df 4f       	sbci	r29, 0xFF	; 255
    1344:	68 83       	st	Y, r22
    1346:	79 83       	std	Y+1, r23	; 0x01
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	9b 83       	std	Y+3, r25	; 0x03
    134c:	ca 5b       	subi	r28, 0xBA	; 186
    134e:	d0 40       	sbci	r29, 0x00	; 0
    1350:	c6 54       	subi	r28, 0x46	; 70
    1352:	df 4f       	sbci	r29, 0xFF	; 255
    1354:	e8 81       	ld	r30, Y
    1356:	f9 81       	ldd	r31, Y+1	; 0x01
    1358:	ca 5b       	subi	r28, 0xBA	; 186
    135a:	d0 40       	sbci	r29, 0x00	; 0
    135c:	f8 8f       	std	Y+24, r31	; 0x18
    135e:	ef 8b       	std	Y+23, r30	; 0x17
    1360:	8f 89       	ldd	r24, Y+23	; 0x17
    1362:	98 8d       	ldd	r25, Y+24	; 0x18
    1364:	9c 8f       	std	Y+28, r25	; 0x1c
    1366:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
    1368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    136a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <LCD_displayCharacter+0x8ac>
    1370:	9c 8f       	std	Y+28, r25	; 0x1c
    1372:	8b 8f       	std	Y+27, r24	; 0x1b
}
    1374:	00 00       	nop
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    1376:	82 e3       	ldi	r24, 0x32	; 50
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	dc 01       	movw	r26, r24
    137c:	2c 91       	ld	r18, X
    137e:	2f 7b       	andi	r18, 0xBF	; 191
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 e8       	ldi	r26, 0x80	; 128
    138a:	bf e3       	ldi	r27, 0x3F	; 63
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	ab 83       	std	Y+3, r26	; 0x03
    1392:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	4a e7       	ldi	r20, 0x7A	; 122
    139a:	53 e4       	ldi	r21, 0x43	; 67
    139c:	69 81       	ldd	r22, Y+1	; 0x01
    139e:	7a 81       	ldd	r23, Y+2	; 0x02
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    13a8:	c2 54       	subi	r28, 0x42	; 66
    13aa:	df 4f       	sbci	r29, 0xFF	; 255
    13ac:	68 83       	st	Y, r22
    13ae:	79 83       	std	Y+1, r23	; 0x01
    13b0:	8a 83       	std	Y+2, r24	; 0x02
    13b2:	9b 83       	std	Y+3, r25	; 0x03
    13b4:	ce 5b       	subi	r28, 0xBE	; 190
    13b6:	d0 40       	sbci	r29, 0x00	; 0
    13b8:	c2 54       	subi	r28, 0x42	; 66
    13ba:	df 4f       	sbci	r29, 0xFF	; 255
    13bc:	28 81       	ld	r18, Y
    13be:	39 81       	ldd	r19, Y+1	; 0x01
    13c0:	4a 81       	ldd	r20, Y+2	; 0x02
    13c2:	5b 81       	ldd	r21, Y+3	; 0x03
    13c4:	ce 5b       	subi	r28, 0xBE	; 190
    13c6:	d0 40       	sbci	r29, 0x00	; 0
    13c8:	2d 83       	std	Y+5, r18	; 0x05
    13ca:	3e 83       	std	Y+6, r19	; 0x06
    13cc:	4f 83       	std	Y+7, r20	; 0x07
    13ce:	58 87       	std	Y+8, r21	; 0x08
	if (__tmp < 1.0)
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	6d 81       	ldd	r22, Y+5	; 0x05
    13da:	7e 81       	ldd	r23, Y+6	; 0x06
    13dc:	8f 81       	ldd	r24, Y+7	; 0x07
    13de:	98 85       	ldd	r25, Y+8	; 0x08
    13e0:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    13e4:	88 23       	and	r24, r24
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <LCD_displayCharacter+0x932>
		__ticks = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9a 87       	std	Y+10, r25	; 0x0a
    13ee:	89 87       	std	Y+9, r24	; 0x09
    13f0:	71 c0       	rjmp	.+226    	; 0x14d4 <LCD_displayCharacter+0xa14>
	else if (__tmp > 65535)
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	6d 81       	ldd	r22, Y+5	; 0x05
    13fc:	7e 81       	ldd	r23, Y+6	; 0x06
    13fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1400:	98 85       	ldd	r25, Y+8	; 0x08
    1402:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
    1406:	18 16       	cp	r1, r24
    1408:	0c f0       	brlt	.+2      	; 0x140c <LCD_displayCharacter+0x94c>
    140a:	4e c0       	rjmp	.+156    	; 0x14a8 <LCD_displayCharacter+0x9e8>
		__ticks = (uint16_t) (__ms * 10.0);
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	69 81       	ldd	r22, Y+1	; 0x01
    1416:	7a 81       	ldd	r23, Y+2	; 0x02
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1420:	ce 53       	subi	r28, 0x3E	; 62
    1422:	df 4f       	sbci	r29, 0xFF	; 255
    1424:	68 83       	st	Y, r22
    1426:	79 83       	std	Y+1, r23	; 0x01
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	9b 83       	std	Y+3, r25	; 0x03
    142c:	c2 5c       	subi	r28, 0xC2	; 194
    142e:	d0 40       	sbci	r29, 0x00	; 0
    1430:	ce 53       	subi	r28, 0x3E	; 62
    1432:	df 4f       	sbci	r29, 0xFF	; 255
    1434:	88 81       	ld	r24, Y
    1436:	99 81       	ldd	r25, Y+1	; 0x01
    1438:	aa 81       	ldd	r26, Y+2	; 0x02
    143a:	bb 81       	ldd	r27, Y+3	; 0x03
    143c:	c2 5c       	subi	r28, 0xC2	; 194
    143e:	d0 40       	sbci	r29, 0x00	; 0
    1440:	6a 96       	adiw	r28, 0x1a	; 26
    1442:	8c af       	std	Y+60, r24	; 0x3c
    1444:	9d af       	std	Y+61, r25	; 0x3d
    1446:	ae af       	std	Y+62, r26	; 0x3e
    1448:	bf af       	std	Y+63, r27	; 0x3f
    144a:	6a 97       	sbiw	r28, 0x1a	; 26
    144c:	6a 96       	adiw	r28, 0x1a	; 26
    144e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1450:	7d ad       	ldd	r23, Y+61	; 0x3d
    1452:	8e ad       	ldd	r24, Y+62	; 0x3e
    1454:	9f ad       	ldd	r25, Y+63	; 0x3f
    1456:	6a 97       	sbiw	r28, 0x1a	; 26
    1458:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    145c:	ca 53       	subi	r28, 0x3A	; 58
    145e:	df 4f       	sbci	r29, 0xFF	; 255
    1460:	68 83       	st	Y, r22
    1462:	79 83       	std	Y+1, r23	; 0x01
    1464:	8a 83       	std	Y+2, r24	; 0x02
    1466:	9b 83       	std	Y+3, r25	; 0x03
    1468:	c6 5c       	subi	r28, 0xC6	; 198
    146a:	d0 40       	sbci	r29, 0x00	; 0
    146c:	ca 53       	subi	r28, 0x3A	; 58
    146e:	df 4f       	sbci	r29, 0xFF	; 255
    1470:	a8 81       	ld	r26, Y
    1472:	b9 81       	ldd	r27, Y+1	; 0x01
    1474:	c6 5c       	subi	r28, 0xC6	; 198
    1476:	d0 40       	sbci	r29, 0x00	; 0
    1478:	ba 87       	std	Y+10, r27	; 0x0a
    147a:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    147c:	10 c0       	rjmp	.+32     	; 0x149e <LCD_displayCharacter+0x9de>
    147e:	89 e1       	ldi	r24, 0x19	; 25
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9c 87       	std	Y+12, r25	; 0x0c
    1484:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    1486:	8b 85       	ldd	r24, Y+11	; 0x0b
    1488:	9c 85       	ldd	r25, Y+12	; 0x0c
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	f1 f7       	brne	.-4      	; 0x148a <LCD_displayCharacter+0x9ca>
    148e:	9c 87       	std	Y+12, r25	; 0x0c
    1490:	8b 87       	std	Y+11, r24	; 0x0b
}
    1492:	00 00       	nop
			__ticks --;
    1494:	89 85       	ldd	r24, Y+9	; 0x09
    1496:	9a 85       	ldd	r25, Y+10	; 0x0a
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	9a 87       	std	Y+10, r25	; 0x0a
    149c:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    149e:	89 85       	ldd	r24, Y+9	; 0x09
    14a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a2:	89 2b       	or	r24, r25
    14a4:	61 f7       	brne	.-40     	; 0x147e <LCD_displayCharacter+0x9be>
		return;
    14a6:	21 c0       	rjmp	.+66     	; 0x14ea <LCD_displayCharacter+0xa2a>
		__ticks = (uint16_t)__tmp;
    14a8:	6d 81       	ldd	r22, Y+5	; 0x05
    14aa:	7e 81       	ldd	r23, Y+6	; 0x06
    14ac:	8f 81       	ldd	r24, Y+7	; 0x07
    14ae:	98 85       	ldd	r25, Y+8	; 0x08
    14b0:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    14b4:	c6 53       	subi	r28, 0x36	; 54
    14b6:	df 4f       	sbci	r29, 0xFF	; 255
    14b8:	68 83       	st	Y, r22
    14ba:	79 83       	std	Y+1, r23	; 0x01
    14bc:	8a 83       	std	Y+2, r24	; 0x02
    14be:	9b 83       	std	Y+3, r25	; 0x03
    14c0:	ca 5c       	subi	r28, 0xCA	; 202
    14c2:	d0 40       	sbci	r29, 0x00	; 0
    14c4:	c6 53       	subi	r28, 0x36	; 54
    14c6:	df 4f       	sbci	r29, 0xFF	; 255
    14c8:	e8 81       	ld	r30, Y
    14ca:	f9 81       	ldd	r31, Y+1	; 0x01
    14cc:	ca 5c       	subi	r28, 0xCA	; 202
    14ce:	d0 40       	sbci	r29, 0x00	; 0
    14d0:	fa 87       	std	Y+10, r31	; 0x0a
    14d2:	e9 87       	std	Y+9, r30	; 0x09
    14d4:	89 85       	ldd	r24, Y+9	; 0x09
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	9e 87       	std	Y+14, r25	; 0x0e
    14da:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    14dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14de:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <LCD_displayCharacter+0xa20>
    14e4:	9e 87       	std	Y+14, r25	; 0x0e
    14e6:	8d 87       	std	Y+13, r24	; 0x0d
}
    14e8:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
    14ea:	00 00       	nop
}
    14ec:	c3 53       	subi	r28, 0x33	; 51
    14ee:	df 4f       	sbci	r29, 0xFF	; 255
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	08 95       	ret

00001504 <LCD_displayString>:

/*
 * Function responsible for Display more One character on LCD
 */
void LCD_displayString(const sint8 *Str) {
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	00 d0       	rcall	.+0      	; 0x150a <LCD_displayString+0x6>
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
	while (*Str != '\0') {
    1512:	0b c0       	rjmp	.+22     	; 0x152a <LCD_displayString+0x26>
		LCD_displayCharacter(*Str);
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	fc 01       	movw	r30, r24
    151a:	80 81       	ld	r24, Z
    151c:	0e 94 60 05 	call	0xac0	; 0xac0 <LCD_displayCharacter>
		Str++;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
	while (*Str != '\0') {
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	9a 81       	ldd	r25, Y+2	; 0x02
    152e:	fc 01       	movw	r30, r24
    1530:	80 81       	ld	r24, Z
    1532:	88 23       	and	r24, r24
    1534:	79 f7       	brne	.-34     	; 0x1514 <LCD_displayString+0x10>
	 LCD_displayCharacter(Str[i]);
	 i++;
	 }
	 ************************************************************/

	return;
    1536:	00 00       	nop

}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <LCD_init>:

/*
 * Function responsible to initialize LCD pins and mode .... etc .
 */
void LCD_init(void) {
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	a2 97       	sbiw	r28, 0x22	; 34
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
	RS_DIR = 1; /* select RS pin output pin */
    1556:	81 e3       	ldi	r24, 0x31	; 49
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	dc 01       	movw	r26, r24
    155c:	2c 91       	ld	r18, X
    155e:	20 61       	ori	r18, 0x10	; 16
    1560:	fc 01       	movw	r30, r24
    1562:	20 83       	st	Z, r18
	RW_DIR = 1; /* select RW pin output pin */
    1564:	81 e3       	ldi	r24, 0x31	; 49
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	dc 01       	movw	r26, r24
    156a:	2c 91       	ld	r18, X
    156c:	20 62       	ori	r18, 0x20	; 32
    156e:	fc 01       	movw	r30, r24
    1570:	20 83       	st	Z, r18
	E_DIR = 1; /* select Enable pin output pin */
    1572:	81 e3       	ldi	r24, 0x31	; 49
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	dc 01       	movw	r26, r24
    1578:	2c 91       	ld	r18, X
    157a:	20 64       	ori	r18, 0x40	; 64
    157c:	fc 01       	movw	r30, r24
    157e:	20 83       	st	Z, r18
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

#if (DATA_MODE == 4)
	/* LCD Configuration Mode of number of DATA line = 4 lines */
	LCD_sendCommand(FOUR_BITS_MODE); /* initialize LCD in 4-bit mode */
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    1586:	88 e2       	ldi	r24, 0x28	; 40
    1588:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_sendCommand>
#ifdef UPPER_MODE_BITS
	DATA_DIR |= 0xF0; /* select highest 4 bits as a output pins */
#endif

#ifdef LOWER_MODE_BITS
	DATA_DIR |= 0x0F;	/* select first 4 bits as a output pins */
    158c:	84 e3       	ldi	r24, 0x34	; 52
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	dc 01       	movw	r26, r24
    1592:	2c 91       	ld	r18, X
    1594:	84 e3       	ldi	r24, 0x34	; 52
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	2f 60       	ori	r18, 0x0F	; 15
    159a:	fc 01       	movw	r30, r24
    159c:	20 83       	st	Z, r18
#endif
#endif
	LCD_sendCommand(CURSOR_OFF); /* hide cursor from LCD */
    159e:	8c e0       	ldi	r24, 0x0C	; 12
    15a0:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_sendCommand>
	LCD_sendCommand(AUTO_INCREMENT); /* hide cursor from LCD */
    15a4:	86 e0       	ldi	r24, 0x06	; 6
    15a6:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_sendCommand>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a0 e0       	ldi	r26, 0x00	; 0
    15b6:	b0 e4       	ldi	r27, 0x40	; 64
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	9a 83       	std	Y+2, r25	; 0x02
    15bc:	ab 83       	std	Y+3, r26	; 0x03
    15be:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	4a e7       	ldi	r20, 0x7A	; 122
    15c6:	53 e4       	ldi	r21, 0x43	; 67
    15c8:	69 81       	ldd	r22, Y+1	; 0x01
    15ca:	7a 81       	ldd	r23, Y+2	; 0x02
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    15d4:	6b 8b       	std	Y+19, r22	; 0x13
    15d6:	7c 8b       	std	Y+20, r23	; 0x14
    15d8:	8d 8b       	std	Y+21, r24	; 0x15
    15da:	9e 8b       	std	Y+22, r25	; 0x16
    15dc:	8b 89       	ldd	r24, Y+19	; 0x13
    15de:	9c 89       	ldd	r25, Y+20	; 0x14
    15e0:	ad 89       	ldd	r26, Y+21	; 0x15
    15e2:	be 89       	ldd	r27, Y+22	; 0x16
    15e4:	8d 83       	std	Y+5, r24	; 0x05
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	af 83       	std	Y+7, r26	; 0x07
    15ea:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	6d 81       	ldd	r22, Y+5	; 0x05
    15f6:	7e 81       	ldd	r23, Y+6	; 0x06
    15f8:	8f 81       	ldd	r24, Y+7	; 0x07
    15fa:	98 85       	ldd	r25, Y+8	; 0x08
    15fc:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1600:	88 23       	and	r24, r24
    1602:	2c f4       	brge	.+10     	; 0x160e <LCD_init+0xcc>
		__ticks = 1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9a 87       	std	Y+10, r25	; 0x0a
    160a:	89 87       	std	Y+9, r24	; 0x09
    160c:	54 c0       	rjmp	.+168    	; 0x16b6 <LCD_init+0x174>
	else if (__tmp > 65535)
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	57 e4       	ldi	r21, 0x47	; 71
    1616:	6d 81       	ldd	r22, Y+5	; 0x05
    1618:	7e 81       	ldd	r23, Y+6	; 0x06
    161a:	8f 81       	ldd	r24, Y+7	; 0x07
    161c:	98 85       	ldd	r25, Y+8	; 0x08
    161e:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
    1622:	18 16       	cp	r1, r24
    1624:	d4 f5       	brge	.+116    	; 0x169a <LCD_init+0x158>
		__ticks = (uint16_t) (__ms * 10.0);
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	69 81       	ldd	r22, Y+1	; 0x01
    1630:	7a 81       	ldd	r23, Y+2	; 0x02
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    163a:	6f 8b       	std	Y+23, r22	; 0x17
    163c:	78 8f       	std	Y+24, r23	; 0x18
    163e:	89 8f       	std	Y+25, r24	; 0x19
    1640:	9a 8f       	std	Y+26, r25	; 0x1a
    1642:	8f 89       	ldd	r24, Y+23	; 0x17
    1644:	98 8d       	ldd	r25, Y+24	; 0x18
    1646:	a9 8d       	ldd	r26, Y+25	; 0x19
    1648:	ba 8d       	ldd	r27, Y+26	; 0x1a
    164a:	8f 87       	std	Y+15, r24	; 0x0f
    164c:	98 8b       	std	Y+16, r25	; 0x10
    164e:	a9 8b       	std	Y+17, r26	; 0x11
    1650:	ba 8b       	std	Y+18, r27	; 0x12
    1652:	6f 85       	ldd	r22, Y+15	; 0x0f
    1654:	78 89       	ldd	r23, Y+16	; 0x10
    1656:	89 89       	ldd	r24, Y+17	; 0x11
    1658:	9a 89       	ldd	r25, Y+18	; 0x12
    165a:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    165e:	6b 8f       	std	Y+27, r22	; 0x1b
    1660:	7c 8f       	std	Y+28, r23	; 0x1c
    1662:	8d 8f       	std	Y+29, r24	; 0x1d
    1664:	9e 8f       	std	Y+30, r25	; 0x1e
    1666:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1668:	bc 8d       	ldd	r27, Y+28	; 0x1c
    166a:	ba 87       	std	Y+10, r27	; 0x0a
    166c:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    166e:	10 c0       	rjmp	.+32     	; 0x1690 <LCD_init+0x14e>
    1670:	89 e1       	ldi	r24, 0x19	; 25
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9c 87       	std	Y+12, r25	; 0x0c
    1676:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    1678:	8b 85       	ldd	r24, Y+11	; 0x0b
    167a:	9c 85       	ldd	r25, Y+12	; 0x0c
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <LCD_init+0x13a>
    1680:	9c 87       	std	Y+12, r25	; 0x0c
    1682:	8b 87       	std	Y+11, r24	; 0x0b
}
    1684:	00 00       	nop
			__ticks --;
    1686:	89 85       	ldd	r24, Y+9	; 0x09
    1688:	9a 85       	ldd	r25, Y+10	; 0x0a
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	9a 87       	std	Y+10, r25	; 0x0a
    168e:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	89 2b       	or	r24, r25
    1696:	61 f7       	brne	.-40     	; 0x1670 <LCD_init+0x12e>
		return;
    1698:	19 c0       	rjmp	.+50     	; 0x16cc <LCD_init+0x18a>
		__ticks = (uint16_t)__tmp;
    169a:	6d 81       	ldd	r22, Y+5	; 0x05
    169c:	7e 81       	ldd	r23, Y+6	; 0x06
    169e:	8f 81       	ldd	r24, Y+7	; 0x07
    16a0:	98 85       	ldd	r25, Y+8	; 0x08
    16a2:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    16a6:	6f 8f       	std	Y+31, r22	; 0x1f
    16a8:	78 a3       	std	Y+32, r23	; 0x20
    16aa:	89 a3       	std	Y+33, r24	; 0x21
    16ac:	9a a3       	std	Y+34, r25	; 0x22
    16ae:	ef 8d       	ldd	r30, Y+31	; 0x1f
    16b0:	f8 a1       	ldd	r31, Y+32	; 0x20
    16b2:	fa 87       	std	Y+10, r31	; 0x0a
    16b4:	e9 87       	std	Y+9, r30	; 0x09
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	9e 87       	std	Y+14, r25	; 0x0e
    16bc:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    16be:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <LCD_init+0x180>
    16c6:	9e 87       	std	Y+14, r25	; 0x0e
    16c8:	8d 87       	std	Y+13, r24	; 0x0d
}
    16ca:	00 00       	nop
	_delay_ms(2);
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    16cc:	80 e8       	ldi	r24, 0x80	; 128
    16ce:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_sendCommand>
	return;
    16d2:	00 00       	nop
}
    16d4:	a2 96       	adiw	r28, 0x22	; 34
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <LCD_clearScreen>:

/*
 * Function responsible to send clear command to LCD
 */
void LCD_clearScreen(void) {
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_sendCommand>
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    16f4:	80 e8       	ldi	r24, 0x80	; 128
    16f6:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_sendCommand>
	return;
    16fa:	00 00       	nop
}
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	08 95       	ret

00001702 <LCD_displayStringRowColumn>:

/*
 * Function responsible for Display more One character on LCD & select place on screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const sint8 *Str) {
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	00 d0       	rcall	.+0      	; 0x1708 <LCD_displayStringRowColumn+0x6>
    1708:	00 d0       	rcall	.+0      	; 0x170a <LCD_displayStringRowColumn+0x8>
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	6a 83       	std	Y+2, r22	; 0x02
    1712:	5c 83       	std	Y+4, r21	; 0x04
    1714:	4b 83       	std	Y+3, r20	; 0x03
	/* call LCD_goToRowColumn function to select cursor location */
	LCD_goToRowColumn(row, col);
    1716:	6a 81       	ldd	r22, Y+2	; 0x02
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_goToRowColumn>
	/* call LCD_displayString function to display string on LCD */
	LCD_displayString(Str);
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_displayString>
	return;
    1726:	00 00       	nop
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	08 95       	ret

00001736 <LCD_goToRowColumn>:

/*
 * Function responsible to select place on screen
 */
void LCD_goToRowColumn(uint8 row, uint8 col) {
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	00 d0       	rcall	.+0      	; 0x173c <LCD_goToRowColumn+0x6>
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	8a 83       	std	Y+2, r24	; 0x02
    1744:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch (row) {
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	83 30       	cpi	r24, 0x03	; 3
    174e:	91 05       	cpc	r25, r1
    1750:	d1 f0       	breq	.+52     	; 0x1786 <LCD_goToRowColumn+0x50>
    1752:	84 30       	cpi	r24, 0x04	; 4
    1754:	91 05       	cpc	r25, r1
    1756:	dc f4       	brge	.+54     	; 0x178e <LCD_goToRowColumn+0x58>
    1758:	82 30       	cpi	r24, 0x02	; 2
    175a:	91 05       	cpc	r25, r1
    175c:	81 f0       	breq	.+32     	; 0x177e <LCD_goToRowColumn+0x48>
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	91 05       	cpc	r25, r1
    1762:	ac f4       	brge	.+42     	; 0x178e <LCD_goToRowColumn+0x58>
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	19 f0       	breq	.+6      	; 0x176e <LCD_goToRowColumn+0x38>
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	29 f0       	breq	.+10     	; 0x1776 <LCD_goToRowColumn+0x40>
    176c:	10 c0       	rjmp	.+32     	; 0x178e <LCD_goToRowColumn+0x58>
	case 0:
		address =0x80 | col; /* first address in first line in LCD = 0x00 */
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	80 68       	ori	r24, 0x80	; 128
    1772:	89 83       	std	Y+1, r24	; 0x01
		break;
    1774:	0c c0       	rjmp	.+24     	; 0x178e <LCD_goToRowColumn+0x58>
	case 1:
		address = col | 0xC0; /* first address in second line in LCD = 0x40 */
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	80 6c       	ori	r24, 0xC0	; 192
    177a:	89 83       	std	Y+1, r24	; 0x01
		break;
    177c:	08 c0       	rjmp	.+16     	; 0x178e <LCD_goToRowColumn+0x58>
	case 2:
		address = col | 0x10; /* first address in 3th line in LCD = 0x10 */
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	80 61       	ori	r24, 0x10	; 16
    1782:	89 83       	std	Y+1, r24	; 0x01
		break;
    1784:	04 c0       	rjmp	.+8      	; 0x178e <LCD_goToRowColumn+0x58>
	case 3:
		address = col | 0x50; /* first address in 4th line in LCD = 0x50 */
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	80 65       	ori	r24, 0x50	; 80
    178a:	89 83       	std	Y+1, r24	; 0x01
		break;
    178c:	00 00       	nop
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0x80+Address */
	LCD_sendCommand(address | CURSOR_HOME_LOCATION);
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	80 68       	ori	r24, 0x80	; 128
    1792:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_sendCommand>
}
    1796:	00 00       	nop
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <LCD_intgerToString>:

/*
 * Function that transform number to string and display to LCD
 */
void LCD_intgerToString(sint32 data) {
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	a0 97       	sbiw	r28, 0x20	; 32
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	69 8f       	std	Y+25, r22	; 0x19
    17ba:	7a 8f       	std	Y+26, r23	; 0x1a
    17bc:	8b 8f       	std	Y+27, r24	; 0x1b
    17be:	9c 8f       	std	Y+28, r25	; 0x1c
	char buff[24]; /* String to hold the ASCII result */
	ltoa(data, buff, 10); /* 10 for decimal */
    17c0:	89 8d       	ldd	r24, Y+25	; 0x19
    17c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17c4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    17c6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    17c8:	8d 8f       	std	Y+29, r24	; 0x1d
    17ca:	9e 8f       	std	Y+30, r25	; 0x1e
    17cc:	af 8f       	std	Y+31, r26	; 0x1f
    17ce:	b8 a3       	std	Y+32, r27	; 0x20
    17d0:	2a e0       	ldi	r18, 0x0A	; 10
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	ce 01       	movw	r24, r28
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	ac 01       	movw	r20, r24
    17da:	6d 8d       	ldd	r22, Y+29	; 0x1d
    17dc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    17de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17e0:	98 a1       	ldd	r25, Y+32	; 0x20
    17e2:	0e 94 13 12 	call	0x2426	; 0x2426 <ltoa>
	LCD_displayString(buff);
    17e6:	ce 01       	movw	r24, r28
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_displayString>

}
    17ee:	00 00       	nop
    17f0:	a0 96       	adiw	r28, 0x20	; 32
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <LCD_floatToString>:

void LCD_floatToString(float32 data) {
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	c4 54       	subi	r28, 0x44	; 68
    180c:	d1 09       	sbc	r29, r1
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	69 8f       	std	Y+25, r22	; 0x19
    181a:	7a 8f       	std	Y+26, r23	; 0x1a
    181c:	8b 8f       	std	Y+27, r24	; 0x1b
    181e:	9c 8f       	std	Y+28, r25	; 0x1c
	y=data*1000;
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	4a e7       	ldi	r20, 0x7A	; 122
    1826:	54 e4       	ldi	r21, 0x44	; 68
    1828:	69 8d       	ldd	r22, Y+25	; 0x19
    182a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    182c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    182e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1830:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1834:	69 af       	std	Y+57, r22	; 0x39
    1836:	7a af       	std	Y+58, r23	; 0x3a
    1838:	8b af       	std	Y+59, r24	; 0x3b
    183a:	9c af       	std	Y+60, r25	; 0x3c
    183c:	89 ad       	ldd	r24, Y+57	; 0x39
    183e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1840:	ab ad       	ldd	r26, Y+59	; 0x3b
    1842:	bc ad       	ldd	r27, Y+60	; 0x3c
    1844:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
    1848:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
    184c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
    1850:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
	y=y-((sint32)data*1000);
    1854:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
    1858:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
    185c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <_edata+0x2>
    1860:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <_edata+0x3>
    1864:	2d 8f       	std	Y+29, r18	; 0x1d
    1866:	3e 8f       	std	Y+30, r19	; 0x1e
    1868:	4f 8f       	std	Y+31, r20	; 0x1f
    186a:	58 a3       	std	Y+32, r21	; 0x20
    186c:	69 8d       	ldd	r22, Y+25	; 0x19
    186e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1874:	0e 94 b9 10 	call	0x2172	; 0x2172 <__fixsfsi>
    1878:	69 a3       	std	Y+33, r22	; 0x21
    187a:	7a a3       	std	Y+34, r23	; 0x22
    187c:	8b a3       	std	Y+35, r24	; 0x23
    187e:	9c a3       	std	Y+36, r25	; 0x24
    1880:	88 ee       	ldi	r24, 0xE8	; 232
    1882:	93 e0       	ldi	r25, 0x03	; 3
    1884:	dc 01       	movw	r26, r24
    1886:	29 a1       	ldd	r18, Y+33	; 0x21
    1888:	3a a1       	ldd	r19, Y+34	; 0x22
    188a:	4b a1       	ldd	r20, Y+35	; 0x23
    188c:	5c a1       	ldd	r21, Y+36	; 0x24
    188e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__muluhisi3>
    1892:	6d a3       	std	Y+37, r22	; 0x25
    1894:	7e a3       	std	Y+38, r23	; 0x26
    1896:	8f a3       	std	Y+39, r24	; 0x27
    1898:	98 a7       	std	Y+40, r25	; 0x28
    189a:	6d a1       	ldd	r22, Y+37	; 0x25
    189c:	7e a1       	ldd	r23, Y+38	; 0x26
    189e:	8f a1       	ldd	r24, Y+39	; 0x27
    18a0:	98 a5       	ldd	r25, Y+40	; 0x28
    18a2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__floatsisf>
    18a6:	69 a7       	std	Y+41, r22	; 0x29
    18a8:	7a a7       	std	Y+42, r23	; 0x2a
    18aa:	8b a7       	std	Y+43, r24	; 0x2b
    18ac:	9c a7       	std	Y+44, r25	; 0x2c
    18ae:	29 a5       	ldd	r18, Y+41	; 0x29
    18b0:	3a a5       	ldd	r19, Y+42	; 0x2a
    18b2:	4b a5       	ldd	r20, Y+43	; 0x2b
    18b4:	5c a5       	ldd	r21, Y+44	; 0x2c
    18b6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    18b8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    18ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18bc:	98 a1       	ldd	r25, Y+32	; 0x20
    18be:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__subsf3>
    18c2:	21 96       	adiw	r28, 0x01	; 1
    18c4:	6c af       	std	Y+60, r22	; 0x3c
    18c6:	7d af       	std	Y+61, r23	; 0x3d
    18c8:	8e af       	std	Y+62, r24	; 0x3e
    18ca:	9f af       	std	Y+63, r25	; 0x3f
    18cc:	21 97       	sbiw	r28, 0x01	; 1
    18ce:	21 96       	adiw	r28, 0x01	; 1
    18d0:	8c ad       	ldd	r24, Y+60	; 0x3c
    18d2:	9d ad       	ldd	r25, Y+61	; 0x3d
    18d4:	ae ad       	ldd	r26, Y+62	; 0x3e
    18d6:	bf ad       	ldd	r27, Y+63	; 0x3f
    18d8:	21 97       	sbiw	r28, 0x01	; 1
    18da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
    18de:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
    18e2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
    18e6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
	char buff[24]; /* String to hold the ASCII result */
	ltoa((sint32)data, buff, 10); /* 10 for decimal */
    18ea:	69 8d       	ldd	r22, Y+25	; 0x19
    18ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f2:	0e 94 b9 10 	call	0x2172	; 0x2172 <__fixsfsi>
    18f6:	6d a7       	std	Y+45, r22	; 0x2d
    18f8:	7e a7       	std	Y+46, r23	; 0x2e
    18fa:	8f a7       	std	Y+47, r24	; 0x2f
    18fc:	98 ab       	std	Y+48, r25	; 0x30
    18fe:	2a e0       	ldi	r18, 0x0A	; 10
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	ce 01       	movw	r24, r28
    1904:	01 96       	adiw	r24, 0x01	; 1
    1906:	ac 01       	movw	r20, r24
    1908:	6d a5       	ldd	r22, Y+45	; 0x2d
    190a:	7e a5       	ldd	r23, Y+46	; 0x2e
    190c:	8f a5       	ldd	r24, Y+47	; 0x2f
    190e:	98 a9       	ldd	r25, Y+48	; 0x30
    1910:	0e 94 13 12 	call	0x2426	; 0x2426 <ltoa>
	LCD_displayString(buff);
    1914:	ce 01       	movw	r24, r28
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_displayString>
	LCD_displayCharacter('.');
    191c:	8e e2       	ldi	r24, 0x2E	; 46
    191e:	0e 94 60 05 	call	0xac0	; 0xac0 <LCD_displayCharacter>
	ltoa((sint32)(abs(y)), buff, 10); /* 10 for decimal */
    1922:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    1926:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
    192a:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
    192e:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
    1932:	89 ab       	std	Y+49, r24	; 0x31
    1934:	9a ab       	std	Y+50, r25	; 0x32
    1936:	ab ab       	std	Y+51, r26	; 0x33
    1938:	bc ab       	std	Y+52, r27	; 0x34
    193a:	69 a9       	ldd	r22, Y+49	; 0x31
    193c:	7a a9       	ldd	r23, Y+50	; 0x32
    193e:	8b a9       	ldd	r24, Y+51	; 0x33
    1940:	9c a9       	ldd	r25, Y+52	; 0x34
    1942:	0e 94 b9 10 	call	0x2172	; 0x2172 <__fixsfsi>
    1946:	25 96       	adiw	r28, 0x05	; 5
    1948:	6c af       	std	Y+60, r22	; 0x3c
    194a:	7d af       	std	Y+61, r23	; 0x3d
    194c:	8e af       	std	Y+62, r24	; 0x3e
    194e:	9f af       	std	Y+63, r25	; 0x3f
    1950:	25 97       	sbiw	r28, 0x05	; 5
    1952:	23 96       	adiw	r28, 0x03	; 3
    1954:	8e ad       	ldd	r24, Y+62	; 0x3e
    1956:	9f ad       	ldd	r25, Y+63	; 0x3f
    1958:	23 97       	sbiw	r28, 0x03	; 3
    195a:	99 23       	and	r25, r25
    195c:	1c f4       	brge	.+6      	; 0x1964 <LCD_floatToString+0x162>
    195e:	91 95       	neg	r25
    1960:	81 95       	neg	r24
    1962:	91 09       	sbc	r25, r1
    1964:	9c 01       	movw	r18, r24
    1966:	99 0f       	add	r25, r25
    1968:	44 0b       	sbc	r20, r20
    196a:	55 0b       	sbc	r21, r21
    196c:	2d ab       	std	Y+53, r18	; 0x35
    196e:	3e ab       	std	Y+54, r19	; 0x36
    1970:	4f ab       	std	Y+55, r20	; 0x37
    1972:	58 af       	std	Y+56, r21	; 0x38
    1974:	2a e0       	ldi	r18, 0x0A	; 10
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	ce 01       	movw	r24, r28
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	ac 01       	movw	r20, r24
    197e:	6d a9       	ldd	r22, Y+53	; 0x35
    1980:	7e a9       	ldd	r23, Y+54	; 0x36
    1982:	8f a9       	ldd	r24, Y+55	; 0x37
    1984:	98 ad       	ldd	r25, Y+56	; 0x38
    1986:	0e 94 13 12 	call	0x2426	; 0x2426 <ltoa>
	LCD_displayString(buff);
    198a:	ce 01       	movw	r24, r28
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_displayString>
}
    1992:	00 00       	nop
    1994:	cc 5b       	subi	r28, 0xBC	; 188
    1996:	df 4f       	sbci	r29, 0xFF	; 255
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	08 95       	ret

000019a8 <LCD_creatCustomChar>:

/*
* Function that Create Custom Character in CGRAM
*/
void LCD_creatCustomChar(unsigned char loc, unsigned char *msg) {
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <LCD_creatCustomChar+0x6>
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <LCD_creatCustomChar+0x8>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	8a 83       	std	Y+2, r24	; 0x02
    19b6:	7c 83       	std	Y+4, r23	; 0x04
    19b8:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char i;
	if (loc < 8) {
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	88 30       	cpi	r24, 0x08	; 8
    19be:	d0 f4       	brcc	.+52     	; 0x19f4 <LCD_creatCustomChar+0x4c>
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	88 0f       	add	r24, r24
    19c4:	88 0f       	add	r24, r24
    19c6:	88 0f       	add	r24, r24
    19c8:	80 64       	ori	r24, 0x40	; 64
    19ca:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_sendCommand>
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    19ce:	19 82       	std	Y+1, r1	; 0x01
    19d0:	0e c0       	rjmp	.+28     	; 0x19ee <LCD_creatCustomChar+0x46>
			LCD_displayCustomChar(msg[i]);
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	2b 81       	ldd	r18, Y+3	; 0x03
    19da:	3c 81       	ldd	r19, Y+4	; 0x04
    19dc:	82 0f       	add	r24, r18
    19de:	93 1f       	adc	r25, r19
    19e0:	fc 01       	movw	r30, r24
    19e2:	80 81       	ld	r24, Z
    19e4:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_displayCustomChar>
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	8f 5f       	subi	r24, 0xFF	; 255
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	88 30       	cpi	r24, 0x08	; 8
    19f2:	78 f3       	brcs	.-34     	; 0x19d2 <LCD_creatCustomChar+0x2a>
		}
	}
}
    19f4:	00 00       	nop
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	08 95       	ret

00001a04 <LCD_displayCustomChar>:

/*
* Function that Display Custom Character in CGRAM
*/
void LCD_displayCustomChar(unsigned char char_data) /* LCD data write function */
{
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	cb 56       	subi	r28, 0x6B	; 107
    1a0e:	d1 09       	sbc	r29, r1
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	8f a7       	std	Y+47, r24	; 0x2f
	DATA_OUT = char_data;
    1a1c:	85 e3       	ldi	r24, 0x35	; 53
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	2f a5       	ldd	r18, Y+47	; 0x2f
    1a22:	dc 01       	movw	r26, r24
    1a24:	2c 93       	st	X, r18
	RS = 1;/* RS=1 Data reg. */
    1a26:	82 e3       	ldi	r24, 0x32	; 50
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 81       	ld	r18, Z
    1a2e:	20 61       	ori	r18, 0x10	; 16
    1a30:	dc 01       	movw	r26, r24
    1a32:	2c 93       	st	X, r18
	RW = 0; /* RW=0 write operation */
    1a34:	82 e3       	ldi	r24, 0x32	; 50
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	fc 01       	movw	r30, r24
    1a3a:	20 81       	ld	r18, Z
    1a3c:	2f 7d       	andi	r18, 0xDF	; 223
    1a3e:	dc 01       	movw	r26, r24
    1a40:	2c 93       	st	X, r18
	E = 1; /* Enable Pulse */
    1a42:	82 e3       	ldi	r24, 0x32	; 50
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	fc 01       	movw	r30, r24
    1a48:	20 81       	ld	r18, Z
    1a4a:	20 64       	ori	r18, 0x40	; 64
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	2c 93       	st	X, r18
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a0 e8       	ldi	r26, 0x80	; 128
    1a56:	bf e3       	ldi	r27, 0x3F	; 63
    1a58:	8f 87       	std	Y+15, r24	; 0x0f
    1a5a:	98 8b       	std	Y+16, r25	; 0x10
    1a5c:	a9 8b       	std	Y+17, r26	; 0x11
    1a5e:	ba 8b       	std	Y+18, r27	; 0x12
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1a60:	2b ea       	ldi	r18, 0xAB	; 171
    1a62:	3a ea       	ldi	r19, 0xAA	; 170
    1a64:	4a ea       	ldi	r20, 0xAA	; 170
    1a66:	5e e3       	ldi	r21, 0x3E	; 62
    1a68:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a6a:	78 89       	ldd	r23, Y+16	; 0x10
    1a6c:	89 89       	ldd	r24, Y+17	; 0x11
    1a6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a70:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1a74:	68 af       	std	Y+56, r22	; 0x38
    1a76:	79 af       	std	Y+57, r23	; 0x39
    1a78:	8a af       	std	Y+58, r24	; 0x3a
    1a7a:	9b af       	std	Y+59, r25	; 0x3b
    1a7c:	88 ad       	ldd	r24, Y+56	; 0x38
    1a7e:	99 ad       	ldd	r25, Y+57	; 0x39
    1a80:	aa ad       	ldd	r26, Y+58	; 0x3a
    1a82:	bb ad       	ldd	r27, Y+59	; 0x3b
    1a84:	8b 8b       	std	Y+19, r24	; 0x13
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
    1a88:	ad 8b       	std	Y+21, r26	; 0x15
    1a8a:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e8       	ldi	r20, 0x80	; 128
    1a92:	5e e3       	ldi	r21, 0x3E	; 62
    1a94:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a96:	78 89       	ldd	r23, Y+16	; 0x10
    1a98:	89 89       	ldd	r24, Y+17	; 0x11
    1a9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a9c:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1aa0:	6c af       	std	Y+60, r22	; 0x3c
    1aa2:	7d af       	std	Y+61, r23	; 0x3d
    1aa4:	8e af       	std	Y+62, r24	; 0x3e
    1aa6:	9f af       	std	Y+63, r25	; 0x3f
    1aa8:	8c ad       	ldd	r24, Y+60	; 0x3c
    1aaa:	9d ad       	ldd	r25, Y+61	; 0x3d
    1aac:	ae ad       	ldd	r26, Y+62	; 0x3e
    1aae:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ab0:	8f 8b       	std	Y+23, r24	; 0x17
    1ab2:	98 8f       	std	Y+24, r25	; 0x18
    1ab4:	a9 8f       	std	Y+25, r26	; 0x19
    1ab6:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	6b 89       	ldd	r22, Y+19	; 0x13
    1ac2:	7c 89       	ldd	r23, Y+20	; 0x14
    1ac4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ac6:	9e 89       	ldd	r25, Y+22	; 0x16
    1ac8:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1acc:	88 23       	and	r24, r24
    1ace:	1c f4       	brge	.+6      	; 0x1ad6 <LCD_displayCustomChar+0xd2>
		__ticks = 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	8b 8f       	std	Y+27, r24	; 0x1b
    1ad4:	f8 c0       	rjmp	.+496    	; 0x1cc6 <LCD_displayCustomChar+0x2c2>
	else if (__tmp2 > 65535)
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	3f ef       	ldi	r19, 0xFF	; 255
    1ada:	4f e7       	ldi	r20, 0x7F	; 127
    1adc:	57 e4       	ldi	r21, 0x47	; 71
    1ade:	6f 89       	ldd	r22, Y+23	; 0x17
    1ae0:	78 8d       	ldd	r23, Y+24	; 0x18
    1ae2:	89 8d       	ldd	r24, Y+25	; 0x19
    1ae4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ae6:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	0c f0       	brlt	.+2      	; 0x1af0 <LCD_displayCustomChar+0xec>
    1aee:	b1 c0       	rjmp	.+354    	; 0x1c52 <LCD_displayCustomChar+0x24e>
	{
		_delay_ms(__us / 1000.0);
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a e7       	ldi	r20, 0x7A	; 122
    1af6:	54 e4       	ldi	r21, 0x44	; 68
    1af8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1afa:	78 89       	ldd	r23, Y+16	; 0x10
    1afc:	89 89       	ldd	r24, Y+17	; 0x11
    1afe:	9a 89       	ldd	r25, Y+18	; 0x12
    1b00:	0e 94 47 10 	call	0x208e	; 0x208e <__divsf3>
    1b04:	24 96       	adiw	r28, 0x04	; 4
    1b06:	6c af       	std	Y+60, r22	; 0x3c
    1b08:	7d af       	std	Y+61, r23	; 0x3d
    1b0a:	8e af       	std	Y+62, r24	; 0x3e
    1b0c:	9f af       	std	Y+63, r25	; 0x3f
    1b0e:	24 97       	sbiw	r28, 0x04	; 4
    1b10:	24 96       	adiw	r28, 0x04	; 4
    1b12:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b14:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b16:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b18:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b1a:	24 97       	sbiw	r28, 0x04	; 4
    1b1c:	8c 8f       	std	Y+28, r24	; 0x1c
    1b1e:	9d 8f       	std	Y+29, r25	; 0x1d
    1b20:	ae 8f       	std	Y+30, r26	; 0x1e
    1b22:	bf 8f       	std	Y+31, r27	; 0x1f
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4a e7       	ldi	r20, 0x7A	; 122
    1b2a:	53 e4       	ldi	r21, 0x43	; 67
    1b2c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1b2e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1b30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b34:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1b38:	28 96       	adiw	r28, 0x08	; 8
    1b3a:	6c af       	std	Y+60, r22	; 0x3c
    1b3c:	7d af       	std	Y+61, r23	; 0x3d
    1b3e:	8e af       	std	Y+62, r24	; 0x3e
    1b40:	9f af       	std	Y+63, r25	; 0x3f
    1b42:	28 97       	sbiw	r28, 0x08	; 8
    1b44:	28 96       	adiw	r28, 0x08	; 8
    1b46:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b48:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b4a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b4c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b4e:	28 97       	sbiw	r28, 0x08	; 8
    1b50:	88 a3       	std	Y+32, r24	; 0x20
    1b52:	99 a3       	std	Y+33, r25	; 0x21
    1b54:	aa a3       	std	Y+34, r26	; 0x22
    1b56:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	68 a1       	ldd	r22, Y+32	; 0x20
    1b62:	79 a1       	ldd	r23, Y+33	; 0x21
    1b64:	8a a1       	ldd	r24, Y+34	; 0x22
    1b66:	9b a1       	ldd	r25, Y+35	; 0x23
    1b68:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1b6c:	88 23       	and	r24, r24
    1b6e:	2c f4       	brge	.+10     	; 0x1b7a <LCD_displayCustomChar+0x176>
		__ticks = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9d a3       	std	Y+37, r25	; 0x25
    1b76:	8c a3       	std	Y+36, r24	; 0x24
    1b78:	61 c0       	rjmp	.+194    	; 0x1c3c <LCD_displayCustomChar+0x238>
	else if (__tmp > 65535)
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	57 e4       	ldi	r21, 0x47	; 71
    1b82:	68 a1       	ldd	r22, Y+32	; 0x20
    1b84:	79 a1       	ldd	r23, Y+33	; 0x21
    1b86:	8a a1       	ldd	r24, Y+34	; 0x22
    1b88:	9b a1       	ldd	r25, Y+35	; 0x23
    1b8a:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	0c f0       	brlt	.+2      	; 0x1b94 <LCD_displayCustomChar+0x190>
    1b92:	42 c0       	rjmp	.+132    	; 0x1c18 <LCD_displayCustomChar+0x214>
		__ticks = (uint16_t) (__ms * 10.0);
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1b9e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1ba0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ba2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ba4:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1ba8:	2c 96       	adiw	r28, 0x0c	; 12
    1baa:	6c af       	std	Y+60, r22	; 0x3c
    1bac:	7d af       	std	Y+61, r23	; 0x3d
    1bae:	8e af       	std	Y+62, r24	; 0x3e
    1bb0:	9f af       	std	Y+63, r25	; 0x3f
    1bb2:	2c 97       	sbiw	r28, 0x0c	; 12
    1bb4:	2c 96       	adiw	r28, 0x0c	; 12
    1bb6:	8c ad       	ldd	r24, Y+60	; 0x3c
    1bb8:	9d ad       	ldd	r25, Y+61	; 0x3d
    1bba:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bbc:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bbe:	2c 97       	sbiw	r28, 0x0c	; 12
    1bc0:	8c ab       	std	Y+52, r24	; 0x34
    1bc2:	9d ab       	std	Y+53, r25	; 0x35
    1bc4:	ae ab       	std	Y+54, r26	; 0x36
    1bc6:	bf ab       	std	Y+55, r27	; 0x37
    1bc8:	6c a9       	ldd	r22, Y+52	; 0x34
    1bca:	7d a9       	ldd	r23, Y+53	; 0x35
    1bcc:	8e a9       	ldd	r24, Y+54	; 0x36
    1bce:	9f a9       	ldd	r25, Y+55	; 0x37
    1bd0:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    1bd4:	60 96       	adiw	r28, 0x10	; 16
    1bd6:	6c af       	std	Y+60, r22	; 0x3c
    1bd8:	7d af       	std	Y+61, r23	; 0x3d
    1bda:	8e af       	std	Y+62, r24	; 0x3e
    1bdc:	9f af       	std	Y+63, r25	; 0x3f
    1bde:	60 97       	sbiw	r28, 0x10	; 16
    1be0:	2e 96       	adiw	r28, 0x0e	; 14
    1be2:	ae ad       	ldd	r26, Y+62	; 0x3e
    1be4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1be6:	2e 97       	sbiw	r28, 0x0e	; 14
    1be8:	bd a3       	std	Y+37, r27	; 0x25
    1bea:	ac a3       	std	Y+36, r26	; 0x24
		while(__ticks)
    1bec:	10 c0       	rjmp	.+32     	; 0x1c0e <LCD_displayCustomChar+0x20a>
    1bee:	89 e1       	ldi	r24, 0x19	; 25
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	9f a3       	std	Y+39, r25	; 0x27
    1bf4:	8e a3       	std	Y+38, r24	; 0x26
	__asm__ volatile (
    1bf6:	8e a1       	ldd	r24, Y+38	; 0x26
    1bf8:	9f a1       	ldd	r25, Y+39	; 0x27
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_displayCustomChar+0x1f6>
    1bfe:	9f a3       	std	Y+39, r25	; 0x27
    1c00:	8e a3       	std	Y+38, r24	; 0x26
}
    1c02:	00 00       	nop
			__ticks --;
    1c04:	8c a1       	ldd	r24, Y+36	; 0x24
    1c06:	9d a1       	ldd	r25, Y+37	; 0x25
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	9d a3       	std	Y+37, r25	; 0x25
    1c0c:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
    1c0e:	8c a1       	ldd	r24, Y+36	; 0x24
    1c10:	9d a1       	ldd	r25, Y+37	; 0x25
    1c12:	89 2b       	or	r24, r25
    1c14:	61 f7       	brne	.-40     	; 0x1bee <LCD_displayCustomChar+0x1ea>
		return;
    1c16:	57 c0       	rjmp	.+174    	; 0x1cc6 <LCD_displayCustomChar+0x2c2>
		__ticks = (uint16_t)__tmp;
    1c18:	68 a1       	ldd	r22, Y+32	; 0x20
    1c1a:	79 a1       	ldd	r23, Y+33	; 0x21
    1c1c:	8a a1       	ldd	r24, Y+34	; 0x22
    1c1e:	9b a1       	ldd	r25, Y+35	; 0x23
    1c20:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    1c24:	64 96       	adiw	r28, 0x14	; 20
    1c26:	6c af       	std	Y+60, r22	; 0x3c
    1c28:	7d af       	std	Y+61, r23	; 0x3d
    1c2a:	8e af       	std	Y+62, r24	; 0x3e
    1c2c:	9f af       	std	Y+63, r25	; 0x3f
    1c2e:	64 97       	sbiw	r28, 0x14	; 20
    1c30:	62 96       	adiw	r28, 0x12	; 18
    1c32:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c34:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c36:	62 97       	sbiw	r28, 0x12	; 18
    1c38:	fd a3       	std	Y+37, r31	; 0x25
    1c3a:	ec a3       	std	Y+36, r30	; 0x24
    1c3c:	8c a1       	ldd	r24, Y+36	; 0x24
    1c3e:	9d a1       	ldd	r25, Y+37	; 0x25
    1c40:	99 a7       	std	Y+41, r25	; 0x29
    1c42:	88 a7       	std	Y+40, r24	; 0x28
	__asm__ volatile (
    1c44:	88 a5       	ldd	r24, Y+40	; 0x28
    1c46:	99 a5       	ldd	r25, Y+41	; 0x29
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_displayCustomChar+0x244>
    1c4c:	99 a7       	std	Y+41, r25	; 0x29
    1c4e:	88 a7       	std	Y+40, r24	; 0x28
}
    1c50:	3a c0       	rjmp	.+116    	; 0x1cc6 <LCD_displayCustomChar+0x2c2>
	}
	else if (__tmp > 255)
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	53 e4       	ldi	r21, 0x43	; 67
    1c5a:	6b 89       	ldd	r22, Y+19	; 0x13
    1c5c:	7c 89       	ldd	r23, Y+20	; 0x14
    1c5e:	8d 89       	ldd	r24, Y+21	; 0x15
    1c60:	9e 89       	ldd	r25, Y+22	; 0x16
    1c62:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
    1c66:	18 16       	cp	r1, r24
    1c68:	f4 f4       	brge	.+60     	; 0x1ca6 <LCD_displayCustomChar+0x2a2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1c6a:	6f 89       	ldd	r22, Y+23	; 0x17
    1c6c:	78 8d       	ldd	r23, Y+24	; 0x18
    1c6e:	89 8d       	ldd	r24, Y+25	; 0x19
    1c70:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c72:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    1c76:	68 96       	adiw	r28, 0x18	; 24
    1c78:	6c af       	std	Y+60, r22	; 0x3c
    1c7a:	7d af       	std	Y+61, r23	; 0x3d
    1c7c:	8e af       	std	Y+62, r24	; 0x3e
    1c7e:	9f af       	std	Y+63, r25	; 0x3f
    1c80:	68 97       	sbiw	r28, 0x18	; 24
    1c82:	66 96       	adiw	r28, 0x16	; 22
    1c84:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c86:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c88:	66 97       	sbiw	r28, 0x16	; 22
    1c8a:	9b a7       	std	Y+43, r25	; 0x2b
    1c8c:	8a a7       	std	Y+42, r24	; 0x2a
    1c8e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c90:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c92:	9d a7       	std	Y+45, r25	; 0x2d
    1c94:	8c a7       	std	Y+44, r24	; 0x2c
	__asm__ volatile (
    1c96:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c98:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_displayCustomChar+0x296>
    1c9e:	9d a7       	std	Y+45, r25	; 0x2d
    1ca0:	8c a7       	std	Y+44, r24	; 0x2c
}
    1ca2:	00 00       	nop
		_delay_loop_2(__ticks);
		return;
    1ca4:	17 c0       	rjmp	.+46     	; 0x1cd4 <LCD_displayCustomChar+0x2d0>
	}
	else
		__ticks = (uint8_t)__tmp;
    1ca6:	6b 89       	ldd	r22, Y+19	; 0x13
    1ca8:	7c 89       	ldd	r23, Y+20	; 0x14
    1caa:	8d 89       	ldd	r24, Y+21	; 0x15
    1cac:	9e 89       	ldd	r25, Y+22	; 0x16
    1cae:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    1cb2:	6c 96       	adiw	r28, 0x1c	; 28
    1cb4:	6c af       	std	Y+60, r22	; 0x3c
    1cb6:	7d af       	std	Y+61, r23	; 0x3d
    1cb8:	8e af       	std	Y+62, r24	; 0x3e
    1cba:	9f af       	std	Y+63, r25	; 0x3f
    1cbc:	6c 97       	sbiw	r28, 0x1c	; 28
    1cbe:	69 96       	adiw	r28, 0x19	; 25
    1cc0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cc2:	69 97       	sbiw	r28, 0x19	; 25
    1cc4:	9b 8f       	std	Y+27, r25	; 0x1b
    1cc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc8:	8e a7       	std	Y+46, r24	; 0x2e
	__asm__ volatile (
    1cca:	8e a5       	ldd	r24, Y+46	; 0x2e
    1ccc:	8a 95       	dec	r24
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_displayCustomChar+0x2c8>
    1cd0:	8e a7       	std	Y+46, r24	; 0x2e
}
    1cd2:	00 00       	nop
	_delay_us(1);
	E = 0;
    1cd4:	82 e3       	ldi	r24, 0x32	; 50
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	dc 01       	movw	r26, r24
    1cda:	2c 91       	ld	r18, X
    1cdc:	2f 7b       	andi	r18, 0xBF	; 191
    1cde:	fc 01       	movw	r30, r24
    1ce0:	20 83       	st	Z, r18
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 e0       	ldi	r26, 0x00	; 0
    1ce8:	b0 e4       	ldi	r27, 0x40	; 64
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	ab 83       	std	Y+3, r26	; 0x03
    1cf0:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a e7       	ldi	r20, 0x7A	; 122
    1cf8:	53 e4       	ldi	r21, 0x43	; 67
    1cfa:	69 81       	ldd	r22, Y+1	; 0x01
    1cfc:	7a 81       	ldd	r23, Y+2	; 0x02
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1d06:	a0 96       	adiw	r28, 0x20	; 32
    1d08:	6c af       	std	Y+60, r22	; 0x3c
    1d0a:	7d af       	std	Y+61, r23	; 0x3d
    1d0c:	8e af       	std	Y+62, r24	; 0x3e
    1d0e:	9f af       	std	Y+63, r25	; 0x3f
    1d10:	a0 97       	sbiw	r28, 0x20	; 32
    1d12:	a0 96       	adiw	r28, 0x20	; 32
    1d14:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d16:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d18:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d1a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d1c:	a0 97       	sbiw	r28, 0x20	; 32
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	af 83       	std	Y+7, r26	; 0x07
    1d24:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d30:	7e 81       	ldd	r23, Y+6	; 0x06
    1d32:	8f 81       	ldd	r24, Y+7	; 0x07
    1d34:	98 85       	ldd	r25, Y+8	; 0x08
    1d36:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1d3a:	88 23       	and	r24, r24
    1d3c:	2c f4       	brge	.+10     	; 0x1d48 <LCD_displayCustomChar+0x344>
		__ticks = 1;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9a 87       	std	Y+10, r25	; 0x0a
    1d44:	89 87       	std	Y+9, r24	; 0x09
    1d46:	61 c0       	rjmp	.+194    	; 0x1e0a <LCD_displayCustomChar+0x406>
	else if (__tmp > 65535)
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	6d 81       	ldd	r22, Y+5	; 0x05
    1d52:	7e 81       	ldd	r23, Y+6	; 0x06
    1d54:	8f 81       	ldd	r24, Y+7	; 0x07
    1d56:	98 85       	ldd	r25, Y+8	; 0x08
    1d58:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
    1d5c:	18 16       	cp	r1, r24
    1d5e:	0c f0       	brlt	.+2      	; 0x1d62 <LCD_displayCustomChar+0x35e>
    1d60:	42 c0       	rjmp	.+132    	; 0x1de6 <LCD_displayCustomChar+0x3e2>
		__ticks = (uint16_t) (__ms * 10.0);
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e2       	ldi	r20, 0x20	; 32
    1d68:	51 e4       	ldi	r21, 0x41	; 65
    1d6a:	69 81       	ldd	r22, Y+1	; 0x01
    1d6c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1d76:	a4 96       	adiw	r28, 0x24	; 36
    1d78:	6c af       	std	Y+60, r22	; 0x3c
    1d7a:	7d af       	std	Y+61, r23	; 0x3d
    1d7c:	8e af       	std	Y+62, r24	; 0x3e
    1d7e:	9f af       	std	Y+63, r25	; 0x3f
    1d80:	a4 97       	sbiw	r28, 0x24	; 36
    1d82:	a4 96       	adiw	r28, 0x24	; 36
    1d84:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d86:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d88:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d8a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d8c:	a4 97       	sbiw	r28, 0x24	; 36
    1d8e:	88 ab       	std	Y+48, r24	; 0x30
    1d90:	99 ab       	std	Y+49, r25	; 0x31
    1d92:	aa ab       	std	Y+50, r26	; 0x32
    1d94:	bb ab       	std	Y+51, r27	; 0x33
    1d96:	68 a9       	ldd	r22, Y+48	; 0x30
    1d98:	79 a9       	ldd	r23, Y+49	; 0x31
    1d9a:	8a a9       	ldd	r24, Y+50	; 0x32
    1d9c:	9b a9       	ldd	r25, Y+51	; 0x33
    1d9e:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    1da2:	a8 96       	adiw	r28, 0x28	; 40
    1da4:	6c af       	std	Y+60, r22	; 0x3c
    1da6:	7d af       	std	Y+61, r23	; 0x3d
    1da8:	8e af       	std	Y+62, r24	; 0x3e
    1daa:	9f af       	std	Y+63, r25	; 0x3f
    1dac:	a8 97       	sbiw	r28, 0x28	; 40
    1dae:	a6 96       	adiw	r28, 0x26	; 38
    1db0:	ae ad       	ldd	r26, Y+62	; 0x3e
    1db2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1db4:	a6 97       	sbiw	r28, 0x26	; 38
    1db6:	ba 87       	std	Y+10, r27	; 0x0a
    1db8:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    1dba:	10 c0       	rjmp	.+32     	; 0x1ddc <LCD_displayCustomChar+0x3d8>
    1dbc:	89 e1       	ldi	r24, 0x19	; 25
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9c 87       	std	Y+12, r25	; 0x0c
    1dc2:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    1dc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <LCD_displayCustomChar+0x3c4>
    1dcc:	9c 87       	std	Y+12, r25	; 0x0c
    1dce:	8b 87       	std	Y+11, r24	; 0x0b
}
    1dd0:	00 00       	nop
			__ticks --;
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	9a 87       	std	Y+10, r25	; 0x0a
    1dda:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	89 2b       	or	r24, r25
    1de2:	61 f7       	brne	.-40     	; 0x1dbc <LCD_displayCustomChar+0x3b8>
		return;
    1de4:	1d c0       	rjmp	.+58     	; 0x1e20 <LCD_displayCustomChar+0x41c>
		__ticks = (uint16_t)__tmp;
    1de6:	6d 81       	ldd	r22, Y+5	; 0x05
    1de8:	7e 81       	ldd	r23, Y+6	; 0x06
    1dea:	8f 81       	ldd	r24, Y+7	; 0x07
    1dec:	98 85       	ldd	r25, Y+8	; 0x08
    1dee:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    1df2:	ac 96       	adiw	r28, 0x2c	; 44
    1df4:	6c af       	std	Y+60, r22	; 0x3c
    1df6:	7d af       	std	Y+61, r23	; 0x3d
    1df8:	8e af       	std	Y+62, r24	; 0x3e
    1dfa:	9f af       	std	Y+63, r25	; 0x3f
    1dfc:	ac 97       	sbiw	r28, 0x2c	; 44
    1dfe:	aa 96       	adiw	r28, 0x2a	; 42
    1e00:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e02:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e04:	aa 97       	sbiw	r28, 0x2a	; 42
    1e06:	fa 87       	std	Y+10, r31	; 0x0a
    1e08:	e9 87       	std	Y+9, r30	; 0x09
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	9e 87       	std	Y+14, r25	; 0x0e
    1e10:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    1e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_displayCustomChar+0x412>
    1e1a:	9e 87       	std	Y+14, r25	; 0x0e
    1e1c:	8d 87       	std	Y+13, r24	; 0x0d
}
    1e1e:	00 00       	nop
	_delay_ms(2); /* Data write delay */
}
    1e20:	00 00       	nop
    1e22:	c5 59       	subi	r28, 0x95	; 149
    1e24:	df 4f       	sbci	r29, 0xFF	; 255
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	08 95       	ret

00001e36 <main>:


#include "LCD.h"


int main(void){
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	a2 97       	sbiw	r28, 0x22	; 34
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    1e4a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <LCD_init>
	LCD_clearScreen();
    1e4e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <LCD_clearScreen>
	while(1){
		LCD_displayCharacter('M');
    1e52:	8d e4       	ldi	r24, 0x4D	; 77
    1e54:	0e 94 60 05 	call	0xac0	; 0xac0 <LCD_displayCharacter>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	a8 e4       	ldi	r26, 0x48	; 72
    1e5e:	b3 e4       	ldi	r27, 0x43	; 67
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	ab 83       	std	Y+3, r26	; 0x03
    1e66:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a e7       	ldi	r20, 0x7A	; 122
    1e6e:	53 e4       	ldi	r21, 0x43	; 67
    1e70:	69 81       	ldd	r22, Y+1	; 0x01
    1e72:	7a 81       	ldd	r23, Y+2	; 0x02
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1e7c:	6b 8b       	std	Y+19, r22	; 0x13
    1e7e:	7c 8b       	std	Y+20, r23	; 0x14
    1e80:	8d 8b       	std	Y+21, r24	; 0x15
    1e82:	9e 8b       	std	Y+22, r25	; 0x16
    1e84:	8b 89       	ldd	r24, Y+19	; 0x13
    1e86:	9c 89       	ldd	r25, Y+20	; 0x14
    1e88:	ad 89       	ldd	r26, Y+21	; 0x15
    1e8a:	be 89       	ldd	r27, Y+22	; 0x16
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	af 83       	std	Y+7, r26	; 0x07
    1e92:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e9e:	7e 81       	ldd	r23, Y+6	; 0x06
    1ea0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea2:	98 85       	ldd	r25, Y+8	; 0x08
    1ea4:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <main+0x80>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9a 87       	std	Y+10, r25	; 0x0a
    1eb2:	89 87       	std	Y+9, r24	; 0x09
    1eb4:	54 c0       	rjmp	.+168    	; 0x1f5e <main+0x128>
	else if (__tmp > 65535)
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	6d 81       	ldd	r22, Y+5	; 0x05
    1ec0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ec2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec4:	98 85       	ldd	r25, Y+8	; 0x08
    1ec6:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	d4 f5       	brge	.+116    	; 0x1f42 <main+0x10c>
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	69 81       	ldd	r22, Y+1	; 0x01
    1ed8:	7a 81       	ldd	r23, Y+2	; 0x02
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	0e 94 a6 11 	call	0x234c	; 0x234c <__mulsf3>
    1ee2:	6f 8b       	std	Y+23, r22	; 0x17
    1ee4:	78 8f       	std	Y+24, r23	; 0x18
    1ee6:	89 8f       	std	Y+25, r24	; 0x19
    1ee8:	9a 8f       	std	Y+26, r25	; 0x1a
    1eea:	8f 89       	ldd	r24, Y+23	; 0x17
    1eec:	98 8d       	ldd	r25, Y+24	; 0x18
    1eee:	a9 8d       	ldd	r26, Y+25	; 0x19
    1ef0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ef2:	8f 87       	std	Y+15, r24	; 0x0f
    1ef4:	98 8b       	std	Y+16, r25	; 0x10
    1ef6:	a9 8b       	std	Y+17, r26	; 0x11
    1ef8:	ba 8b       	std	Y+18, r27	; 0x12
    1efa:	6f 85       	ldd	r22, Y+15	; 0x0f
    1efc:	78 89       	ldd	r23, Y+16	; 0x10
    1efe:	89 89       	ldd	r24, Y+17	; 0x11
    1f00:	9a 89       	ldd	r25, Y+18	; 0x12
    1f02:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    1f06:	6b 8f       	std	Y+27, r22	; 0x1b
    1f08:	7c 8f       	std	Y+28, r23	; 0x1c
    1f0a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f0e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1f10:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1f12:	ba 87       	std	Y+10, r27	; 0x0a
    1f14:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    1f16:	10 c0       	rjmp	.+32     	; 0x1f38 <main+0x102>
    1f18:	89 e1       	ldi	r24, 0x19	; 25
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	9c 87       	std	Y+12, r25	; 0x0c
    1f1e:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    1f20:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f22:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <main+0xee>
    1f28:	9c 87       	std	Y+12, r25	; 0x0c
    1f2a:	8b 87       	std	Y+11, r24	; 0x0b
}
    1f2c:	00 00       	nop
			__ticks --;
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	9a 87       	std	Y+10, r25	; 0x0a
    1f36:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	89 2b       	or	r24, r25
    1f3e:	61 f7       	brne	.-40     	; 0x1f18 <main+0xe2>
		return;
    1f40:	19 c0       	rjmp	.+50     	; 0x1f74 <main+0x13e>
		__ticks = (uint16_t)__tmp;
    1f42:	6d 81       	ldd	r22, Y+5	; 0x05
    1f44:	7e 81       	ldd	r23, Y+6	; 0x06
    1f46:	8f 81       	ldd	r24, Y+7	; 0x07
    1f48:	98 85       	ldd	r25, Y+8	; 0x08
    1f4a:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    1f4e:	6f 8f       	std	Y+31, r22	; 0x1f
    1f50:	78 a3       	std	Y+32, r23	; 0x20
    1f52:	89 a3       	std	Y+33, r24	; 0x21
    1f54:	9a a3       	std	Y+34, r25	; 0x22
    1f56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f58:	98 a1       	ldd	r25, Y+32	; 0x20
    1f5a:	9a 87       	std	Y+10, r25	; 0x0a
    1f5c:	89 87       	std	Y+9, r24	; 0x09
    1f5e:	89 85       	ldd	r24, Y+9	; 0x09
    1f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f62:	9e 87       	std	Y+14, r25	; 0x0e
    1f64:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    1f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <main+0x134>
    1f6e:	9e 87       	std	Y+14, r25	; 0x0e
    1f70:	8d 87       	std	Y+13, r24	; 0x0d
}
    1f72:	00 00       	nop
    1f74:	6e cf       	rjmp	.-292    	; 0x1e52 <main+0x1c>

00001f76 <__muluhisi3>:
    1f76:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__umulhisi3>
    1f7a:	a5 9f       	mul	r26, r21
    1f7c:	90 0d       	add	r25, r0
    1f7e:	b4 9f       	mul	r27, r20
    1f80:	90 0d       	add	r25, r0
    1f82:	a4 9f       	mul	r26, r20
    1f84:	80 0d       	add	r24, r0
    1f86:	91 1d       	adc	r25, r1
    1f88:	11 24       	eor	r1, r1
    1f8a:	08 95       	ret

00001f8c <__umulhisi3>:
    1f8c:	a2 9f       	mul	r26, r18
    1f8e:	b0 01       	movw	r22, r0
    1f90:	b3 9f       	mul	r27, r19
    1f92:	c0 01       	movw	r24, r0
    1f94:	a3 9f       	mul	r26, r19
    1f96:	70 0d       	add	r23, r0
    1f98:	81 1d       	adc	r24, r1
    1f9a:	11 24       	eor	r1, r1
    1f9c:	91 1d       	adc	r25, r1
    1f9e:	b2 9f       	mul	r27, r18
    1fa0:	70 0d       	add	r23, r0
    1fa2:	81 1d       	adc	r24, r1
    1fa4:	11 24       	eor	r1, r1
    1fa6:	91 1d       	adc	r25, r1
    1fa8:	08 95       	ret

00001faa <__subsf3>:
    1faa:	50 58       	subi	r21, 0x80	; 128

00001fac <__addsf3>:
    1fac:	bb 27       	eor	r27, r27
    1fae:	aa 27       	eor	r26, r26
    1fb0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__addsf3x>
    1fb4:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__fp_round>
    1fb8:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fp_pscA>
    1fbc:	38 f0       	brcs	.+14     	; 0x1fcc <__addsf3+0x20>
    1fbe:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fp_pscB>
    1fc2:	20 f0       	brcs	.+8      	; 0x1fcc <__addsf3+0x20>
    1fc4:	39 f4       	brne	.+14     	; 0x1fd4 <__addsf3+0x28>
    1fc6:	9f 3f       	cpi	r25, 0xFF	; 255
    1fc8:	19 f4       	brne	.+6      	; 0x1fd0 <__addsf3+0x24>
    1fca:	26 f4       	brtc	.+8      	; 0x1fd4 <__addsf3+0x28>
    1fcc:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__fp_nan>
    1fd0:	0e f4       	brtc	.+2      	; 0x1fd4 <__addsf3+0x28>
    1fd2:	e0 95       	com	r30
    1fd4:	e7 fb       	bst	r30, 7
    1fd6:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__fp_inf>

00001fda <__addsf3x>:
    1fda:	e9 2f       	mov	r30, r25
    1fdc:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__fp_split3>
    1fe0:	58 f3       	brcs	.-42     	; 0x1fb8 <__addsf3+0xc>
    1fe2:	ba 17       	cp	r27, r26
    1fe4:	62 07       	cpc	r22, r18
    1fe6:	73 07       	cpc	r23, r19
    1fe8:	84 07       	cpc	r24, r20
    1fea:	95 07       	cpc	r25, r21
    1fec:	20 f0       	brcs	.+8      	; 0x1ff6 <__addsf3x+0x1c>
    1fee:	79 f4       	brne	.+30     	; 0x200e <__addsf3x+0x34>
    1ff0:	a6 f5       	brtc	.+104    	; 0x205a <__addsf3x+0x80>
    1ff2:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__fp_zero>
    1ff6:	0e f4       	brtc	.+2      	; 0x1ffa <__addsf3x+0x20>
    1ff8:	e0 95       	com	r30
    1ffa:	0b 2e       	mov	r0, r27
    1ffc:	ba 2f       	mov	r27, r26
    1ffe:	a0 2d       	mov	r26, r0
    2000:	0b 01       	movw	r0, r22
    2002:	b9 01       	movw	r22, r18
    2004:	90 01       	movw	r18, r0
    2006:	0c 01       	movw	r0, r24
    2008:	ca 01       	movw	r24, r20
    200a:	a0 01       	movw	r20, r0
    200c:	11 24       	eor	r1, r1
    200e:	ff 27       	eor	r31, r31
    2010:	59 1b       	sub	r21, r25
    2012:	99 f0       	breq	.+38     	; 0x203a <__addsf3x+0x60>
    2014:	59 3f       	cpi	r21, 0xF9	; 249
    2016:	50 f4       	brcc	.+20     	; 0x202c <__addsf3x+0x52>
    2018:	50 3e       	cpi	r21, 0xE0	; 224
    201a:	68 f1       	brcs	.+90     	; 0x2076 <__addsf3x+0x9c>
    201c:	1a 16       	cp	r1, r26
    201e:	f0 40       	sbci	r31, 0x00	; 0
    2020:	a2 2f       	mov	r26, r18
    2022:	23 2f       	mov	r18, r19
    2024:	34 2f       	mov	r19, r20
    2026:	44 27       	eor	r20, r20
    2028:	58 5f       	subi	r21, 0xF8	; 248
    202a:	f3 cf       	rjmp	.-26     	; 0x2012 <__addsf3x+0x38>
    202c:	46 95       	lsr	r20
    202e:	37 95       	ror	r19
    2030:	27 95       	ror	r18
    2032:	a7 95       	ror	r26
    2034:	f0 40       	sbci	r31, 0x00	; 0
    2036:	53 95       	inc	r21
    2038:	c9 f7       	brne	.-14     	; 0x202c <__addsf3x+0x52>
    203a:	7e f4       	brtc	.+30     	; 0x205a <__addsf3x+0x80>
    203c:	1f 16       	cp	r1, r31
    203e:	ba 0b       	sbc	r27, r26
    2040:	62 0b       	sbc	r22, r18
    2042:	73 0b       	sbc	r23, r19
    2044:	84 0b       	sbc	r24, r20
    2046:	ba f0       	brmi	.+46     	; 0x2076 <__addsf3x+0x9c>
    2048:	91 50       	subi	r25, 0x01	; 1
    204a:	a1 f0       	breq	.+40     	; 0x2074 <__addsf3x+0x9a>
    204c:	ff 0f       	add	r31, r31
    204e:	bb 1f       	adc	r27, r27
    2050:	66 1f       	adc	r22, r22
    2052:	77 1f       	adc	r23, r23
    2054:	88 1f       	adc	r24, r24
    2056:	c2 f7       	brpl	.-16     	; 0x2048 <__addsf3x+0x6e>
    2058:	0e c0       	rjmp	.+28     	; 0x2076 <__addsf3x+0x9c>
    205a:	ba 0f       	add	r27, r26
    205c:	62 1f       	adc	r22, r18
    205e:	73 1f       	adc	r23, r19
    2060:	84 1f       	adc	r24, r20
    2062:	48 f4       	brcc	.+18     	; 0x2076 <__addsf3x+0x9c>
    2064:	87 95       	ror	r24
    2066:	77 95       	ror	r23
    2068:	67 95       	ror	r22
    206a:	b7 95       	ror	r27
    206c:	f7 95       	ror	r31
    206e:	9e 3f       	cpi	r25, 0xFE	; 254
    2070:	08 f0       	brcs	.+2      	; 0x2074 <__addsf3x+0x9a>
    2072:	b0 cf       	rjmp	.-160    	; 0x1fd4 <__addsf3+0x28>
    2074:	93 95       	inc	r25
    2076:	88 0f       	add	r24, r24
    2078:	08 f0       	brcs	.+2      	; 0x207c <__addsf3x+0xa2>
    207a:	99 27       	eor	r25, r25
    207c:	ee 0f       	add	r30, r30
    207e:	97 95       	ror	r25
    2080:	87 95       	ror	r24
    2082:	08 95       	ret

00002084 <__cmpsf2>:
    2084:	0e 94 2c 11 	call	0x2258	; 0x2258 <__fp_cmp>
    2088:	08 f4       	brcc	.+2      	; 0x208c <__cmpsf2+0x8>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	08 95       	ret

0000208e <__divsf3>:
    208e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__divsf3x>
    2092:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__fp_round>
    2096:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fp_pscB>
    209a:	58 f0       	brcs	.+22     	; 0x20b2 <__divsf3+0x24>
    209c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fp_pscA>
    20a0:	40 f0       	brcs	.+16     	; 0x20b2 <__divsf3+0x24>
    20a2:	29 f4       	brne	.+10     	; 0x20ae <__divsf3+0x20>
    20a4:	5f 3f       	cpi	r21, 0xFF	; 255
    20a6:	29 f0       	breq	.+10     	; 0x20b2 <__divsf3+0x24>
    20a8:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__fp_inf>
    20ac:	51 11       	cpse	r21, r1
    20ae:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__fp_szero>
    20b2:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__fp_nan>

000020b6 <__divsf3x>:
    20b6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__fp_split3>
    20ba:	68 f3       	brcs	.-38     	; 0x2096 <__divsf3+0x8>

000020bc <__divsf3_pse>:
    20bc:	99 23       	and	r25, r25
    20be:	b1 f3       	breq	.-20     	; 0x20ac <__divsf3+0x1e>
    20c0:	55 23       	and	r21, r21
    20c2:	91 f3       	breq	.-28     	; 0x20a8 <__divsf3+0x1a>
    20c4:	95 1b       	sub	r25, r21
    20c6:	55 0b       	sbc	r21, r21
    20c8:	bb 27       	eor	r27, r27
    20ca:	aa 27       	eor	r26, r26
    20cc:	62 17       	cp	r22, r18
    20ce:	73 07       	cpc	r23, r19
    20d0:	84 07       	cpc	r24, r20
    20d2:	38 f0       	brcs	.+14     	; 0x20e2 <__divsf3_pse+0x26>
    20d4:	9f 5f       	subi	r25, 0xFF	; 255
    20d6:	5f 4f       	sbci	r21, 0xFF	; 255
    20d8:	22 0f       	add	r18, r18
    20da:	33 1f       	adc	r19, r19
    20dc:	44 1f       	adc	r20, r20
    20de:	aa 1f       	adc	r26, r26
    20e0:	a9 f3       	breq	.-22     	; 0x20cc <__divsf3_pse+0x10>
    20e2:	35 d0       	rcall	.+106    	; 0x214e <__divsf3_pse+0x92>
    20e4:	0e 2e       	mov	r0, r30
    20e6:	3a f0       	brmi	.+14     	; 0x20f6 <__divsf3_pse+0x3a>
    20e8:	e0 e8       	ldi	r30, 0x80	; 128
    20ea:	32 d0       	rcall	.+100    	; 0x2150 <__divsf3_pse+0x94>
    20ec:	91 50       	subi	r25, 0x01	; 1
    20ee:	50 40       	sbci	r21, 0x00	; 0
    20f0:	e6 95       	lsr	r30
    20f2:	00 1c       	adc	r0, r0
    20f4:	ca f7       	brpl	.-14     	; 0x20e8 <__divsf3_pse+0x2c>
    20f6:	2b d0       	rcall	.+86     	; 0x214e <__divsf3_pse+0x92>
    20f8:	fe 2f       	mov	r31, r30
    20fa:	29 d0       	rcall	.+82     	; 0x214e <__divsf3_pse+0x92>
    20fc:	66 0f       	add	r22, r22
    20fe:	77 1f       	adc	r23, r23
    2100:	88 1f       	adc	r24, r24
    2102:	bb 1f       	adc	r27, r27
    2104:	26 17       	cp	r18, r22
    2106:	37 07       	cpc	r19, r23
    2108:	48 07       	cpc	r20, r24
    210a:	ab 07       	cpc	r26, r27
    210c:	b0 e8       	ldi	r27, 0x80	; 128
    210e:	09 f0       	breq	.+2      	; 0x2112 <__divsf3_pse+0x56>
    2110:	bb 0b       	sbc	r27, r27
    2112:	80 2d       	mov	r24, r0
    2114:	bf 01       	movw	r22, r30
    2116:	ff 27       	eor	r31, r31
    2118:	93 58       	subi	r25, 0x83	; 131
    211a:	5f 4f       	sbci	r21, 0xFF	; 255
    211c:	3a f0       	brmi	.+14     	; 0x212c <__divsf3_pse+0x70>
    211e:	9e 3f       	cpi	r25, 0xFE	; 254
    2120:	51 05       	cpc	r21, r1
    2122:	78 f0       	brcs	.+30     	; 0x2142 <__divsf3_pse+0x86>
    2124:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__fp_inf>
    2128:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__fp_szero>
    212c:	5f 3f       	cpi	r21, 0xFF	; 255
    212e:	e4 f3       	brlt	.-8      	; 0x2128 <__divsf3_pse+0x6c>
    2130:	98 3e       	cpi	r25, 0xE8	; 232
    2132:	d4 f3       	brlt	.-12     	; 0x2128 <__divsf3_pse+0x6c>
    2134:	86 95       	lsr	r24
    2136:	77 95       	ror	r23
    2138:	67 95       	ror	r22
    213a:	b7 95       	ror	r27
    213c:	f7 95       	ror	r31
    213e:	9f 5f       	subi	r25, 0xFF	; 255
    2140:	c9 f7       	brne	.-14     	; 0x2134 <__divsf3_pse+0x78>
    2142:	88 0f       	add	r24, r24
    2144:	91 1d       	adc	r25, r1
    2146:	96 95       	lsr	r25
    2148:	87 95       	ror	r24
    214a:	97 f9       	bld	r25, 7
    214c:	08 95       	ret
    214e:	e1 e0       	ldi	r30, 0x01	; 1
    2150:	66 0f       	add	r22, r22
    2152:	77 1f       	adc	r23, r23
    2154:	88 1f       	adc	r24, r24
    2156:	bb 1f       	adc	r27, r27
    2158:	62 17       	cp	r22, r18
    215a:	73 07       	cpc	r23, r19
    215c:	84 07       	cpc	r24, r20
    215e:	ba 07       	cpc	r27, r26
    2160:	20 f0       	brcs	.+8      	; 0x216a <__divsf3_pse+0xae>
    2162:	62 1b       	sub	r22, r18
    2164:	73 0b       	sbc	r23, r19
    2166:	84 0b       	sbc	r24, r20
    2168:	ba 0b       	sbc	r27, r26
    216a:	ee 1f       	adc	r30, r30
    216c:	88 f7       	brcc	.-30     	; 0x2150 <__divsf3_pse+0x94>
    216e:	e0 95       	com	r30
    2170:	08 95       	ret

00002172 <__fixsfsi>:
    2172:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    2176:	68 94       	set
    2178:	b1 11       	cpse	r27, r1
    217a:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__fp_szero>
    217e:	08 95       	ret

00002180 <__fixunssfsi>:
    2180:	0e 94 80 11 	call	0x2300	; 0x2300 <__fp_splitA>
    2184:	88 f0       	brcs	.+34     	; 0x21a8 <__fixunssfsi+0x28>
    2186:	9f 57       	subi	r25, 0x7F	; 127
    2188:	98 f0       	brcs	.+38     	; 0x21b0 <__fixunssfsi+0x30>
    218a:	b9 2f       	mov	r27, r25
    218c:	99 27       	eor	r25, r25
    218e:	b7 51       	subi	r27, 0x17	; 23
    2190:	b0 f0       	brcs	.+44     	; 0x21be <__fixunssfsi+0x3e>
    2192:	e1 f0       	breq	.+56     	; 0x21cc <__fixunssfsi+0x4c>
    2194:	66 0f       	add	r22, r22
    2196:	77 1f       	adc	r23, r23
    2198:	88 1f       	adc	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	1a f0       	brmi	.+6      	; 0x21a4 <__fixunssfsi+0x24>
    219e:	ba 95       	dec	r27
    21a0:	c9 f7       	brne	.-14     	; 0x2194 <__fixunssfsi+0x14>
    21a2:	14 c0       	rjmp	.+40     	; 0x21cc <__fixunssfsi+0x4c>
    21a4:	b1 30       	cpi	r27, 0x01	; 1
    21a6:	91 f0       	breq	.+36     	; 0x21cc <__fixunssfsi+0x4c>
    21a8:	0e 94 9a 11 	call	0x2334	; 0x2334 <__fp_zero>
    21ac:	b1 e0       	ldi	r27, 0x01	; 1
    21ae:	08 95       	ret
    21b0:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__fp_zero>
    21b4:	67 2f       	mov	r22, r23
    21b6:	78 2f       	mov	r23, r24
    21b8:	88 27       	eor	r24, r24
    21ba:	b8 5f       	subi	r27, 0xF8	; 248
    21bc:	39 f0       	breq	.+14     	; 0x21cc <__fixunssfsi+0x4c>
    21be:	b9 3f       	cpi	r27, 0xF9	; 249
    21c0:	cc f3       	brlt	.-14     	; 0x21b4 <__fixunssfsi+0x34>
    21c2:	86 95       	lsr	r24
    21c4:	77 95       	ror	r23
    21c6:	67 95       	ror	r22
    21c8:	b3 95       	inc	r27
    21ca:	d9 f7       	brne	.-10     	; 0x21c2 <__fixunssfsi+0x42>
    21cc:	3e f4       	brtc	.+14     	; 0x21dc <__fixunssfsi+0x5c>
    21ce:	90 95       	com	r25
    21d0:	80 95       	com	r24
    21d2:	70 95       	com	r23
    21d4:	61 95       	neg	r22
    21d6:	7f 4f       	sbci	r23, 0xFF	; 255
    21d8:	8f 4f       	sbci	r24, 0xFF	; 255
    21da:	9f 4f       	sbci	r25, 0xFF	; 255
    21dc:	08 95       	ret

000021de <__floatunsisf>:
    21de:	e8 94       	clt
    21e0:	09 c0       	rjmp	.+18     	; 0x21f4 <__floatsisf+0x12>

000021e2 <__floatsisf>:
    21e2:	97 fb       	bst	r25, 7
    21e4:	3e f4       	brtc	.+14     	; 0x21f4 <__floatsisf+0x12>
    21e6:	90 95       	com	r25
    21e8:	80 95       	com	r24
    21ea:	70 95       	com	r23
    21ec:	61 95       	neg	r22
    21ee:	7f 4f       	sbci	r23, 0xFF	; 255
    21f0:	8f 4f       	sbci	r24, 0xFF	; 255
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	99 23       	and	r25, r25
    21f6:	a9 f0       	breq	.+42     	; 0x2222 <__floatsisf+0x40>
    21f8:	f9 2f       	mov	r31, r25
    21fa:	96 e9       	ldi	r25, 0x96	; 150
    21fc:	bb 27       	eor	r27, r27
    21fe:	93 95       	inc	r25
    2200:	f6 95       	lsr	r31
    2202:	87 95       	ror	r24
    2204:	77 95       	ror	r23
    2206:	67 95       	ror	r22
    2208:	b7 95       	ror	r27
    220a:	f1 11       	cpse	r31, r1
    220c:	f8 cf       	rjmp	.-16     	; 0x21fe <__floatsisf+0x1c>
    220e:	fa f4       	brpl	.+62     	; 0x224e <__floatsisf+0x6c>
    2210:	bb 0f       	add	r27, r27
    2212:	11 f4       	brne	.+4      	; 0x2218 <__floatsisf+0x36>
    2214:	60 ff       	sbrs	r22, 0
    2216:	1b c0       	rjmp	.+54     	; 0x224e <__floatsisf+0x6c>
    2218:	6f 5f       	subi	r22, 0xFF	; 255
    221a:	7f 4f       	sbci	r23, 0xFF	; 255
    221c:	8f 4f       	sbci	r24, 0xFF	; 255
    221e:	9f 4f       	sbci	r25, 0xFF	; 255
    2220:	16 c0       	rjmp	.+44     	; 0x224e <__floatsisf+0x6c>
    2222:	88 23       	and	r24, r24
    2224:	11 f0       	breq	.+4      	; 0x222a <__floatsisf+0x48>
    2226:	96 e9       	ldi	r25, 0x96	; 150
    2228:	11 c0       	rjmp	.+34     	; 0x224c <__floatsisf+0x6a>
    222a:	77 23       	and	r23, r23
    222c:	21 f0       	breq	.+8      	; 0x2236 <__floatsisf+0x54>
    222e:	9e e8       	ldi	r25, 0x8E	; 142
    2230:	87 2f       	mov	r24, r23
    2232:	76 2f       	mov	r23, r22
    2234:	05 c0       	rjmp	.+10     	; 0x2240 <__floatsisf+0x5e>
    2236:	66 23       	and	r22, r22
    2238:	71 f0       	breq	.+28     	; 0x2256 <__floatsisf+0x74>
    223a:	96 e8       	ldi	r25, 0x86	; 134
    223c:	86 2f       	mov	r24, r22
    223e:	70 e0       	ldi	r23, 0x00	; 0
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	2a f0       	brmi	.+10     	; 0x224e <__floatsisf+0x6c>
    2244:	9a 95       	dec	r25
    2246:	66 0f       	add	r22, r22
    2248:	77 1f       	adc	r23, r23
    224a:	88 1f       	adc	r24, r24
    224c:	da f7       	brpl	.-10     	; 0x2244 <__floatsisf+0x62>
    224e:	88 0f       	add	r24, r24
    2250:	96 95       	lsr	r25
    2252:	87 95       	ror	r24
    2254:	97 f9       	bld	r25, 7
    2256:	08 95       	ret

00002258 <__fp_cmp>:
    2258:	99 0f       	add	r25, r25
    225a:	00 08       	sbc	r0, r0
    225c:	55 0f       	add	r21, r21
    225e:	aa 0b       	sbc	r26, r26
    2260:	e0 e8       	ldi	r30, 0x80	; 128
    2262:	fe ef       	ldi	r31, 0xFE	; 254
    2264:	16 16       	cp	r1, r22
    2266:	17 06       	cpc	r1, r23
    2268:	e8 07       	cpc	r30, r24
    226a:	f9 07       	cpc	r31, r25
    226c:	c0 f0       	brcs	.+48     	; 0x229e <__fp_cmp+0x46>
    226e:	12 16       	cp	r1, r18
    2270:	13 06       	cpc	r1, r19
    2272:	e4 07       	cpc	r30, r20
    2274:	f5 07       	cpc	r31, r21
    2276:	98 f0       	brcs	.+38     	; 0x229e <__fp_cmp+0x46>
    2278:	62 1b       	sub	r22, r18
    227a:	73 0b       	sbc	r23, r19
    227c:	84 0b       	sbc	r24, r20
    227e:	95 0b       	sbc	r25, r21
    2280:	39 f4       	brne	.+14     	; 0x2290 <__fp_cmp+0x38>
    2282:	0a 26       	eor	r0, r26
    2284:	61 f0       	breq	.+24     	; 0x229e <__fp_cmp+0x46>
    2286:	23 2b       	or	r18, r19
    2288:	24 2b       	or	r18, r20
    228a:	25 2b       	or	r18, r21
    228c:	21 f4       	brne	.+8      	; 0x2296 <__fp_cmp+0x3e>
    228e:	08 95       	ret
    2290:	0a 26       	eor	r0, r26
    2292:	09 f4       	brne	.+2      	; 0x2296 <__fp_cmp+0x3e>
    2294:	a1 40       	sbci	r26, 0x01	; 1
    2296:	a6 95       	lsr	r26
    2298:	8f ef       	ldi	r24, 0xFF	; 255
    229a:	81 1d       	adc	r24, r1
    229c:	81 1d       	adc	r24, r1
    229e:	08 95       	ret

000022a0 <__fp_inf>:
    22a0:	97 f9       	bld	r25, 7
    22a2:	9f 67       	ori	r25, 0x7F	; 127
    22a4:	80 e8       	ldi	r24, 0x80	; 128
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	08 95       	ret

000022ac <__fp_nan>:
    22ac:	9f ef       	ldi	r25, 0xFF	; 255
    22ae:	80 ec       	ldi	r24, 0xC0	; 192
    22b0:	08 95       	ret

000022b2 <__fp_pscA>:
    22b2:	00 24       	eor	r0, r0
    22b4:	0a 94       	dec	r0
    22b6:	16 16       	cp	r1, r22
    22b8:	17 06       	cpc	r1, r23
    22ba:	18 06       	cpc	r1, r24
    22bc:	09 06       	cpc	r0, r25
    22be:	08 95       	ret

000022c0 <__fp_pscB>:
    22c0:	00 24       	eor	r0, r0
    22c2:	0a 94       	dec	r0
    22c4:	12 16       	cp	r1, r18
    22c6:	13 06       	cpc	r1, r19
    22c8:	14 06       	cpc	r1, r20
    22ca:	05 06       	cpc	r0, r21
    22cc:	08 95       	ret

000022ce <__fp_round>:
    22ce:	09 2e       	mov	r0, r25
    22d0:	03 94       	inc	r0
    22d2:	00 0c       	add	r0, r0
    22d4:	11 f4       	brne	.+4      	; 0x22da <__fp_round+0xc>
    22d6:	88 23       	and	r24, r24
    22d8:	52 f0       	brmi	.+20     	; 0x22ee <__fp_round+0x20>
    22da:	bb 0f       	add	r27, r27
    22dc:	40 f4       	brcc	.+16     	; 0x22ee <__fp_round+0x20>
    22de:	bf 2b       	or	r27, r31
    22e0:	11 f4       	brne	.+4      	; 0x22e6 <__fp_round+0x18>
    22e2:	60 ff       	sbrs	r22, 0
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <__fp_round+0x20>
    22e6:	6f 5f       	subi	r22, 0xFF	; 255
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ea:	8f 4f       	sbci	r24, 0xFF	; 255
    22ec:	9f 4f       	sbci	r25, 0xFF	; 255
    22ee:	08 95       	ret

000022f0 <__fp_split3>:
    22f0:	57 fd       	sbrc	r21, 7
    22f2:	90 58       	subi	r25, 0x80	; 128
    22f4:	44 0f       	add	r20, r20
    22f6:	55 1f       	adc	r21, r21
    22f8:	59 f0       	breq	.+22     	; 0x2310 <__fp_splitA+0x10>
    22fa:	5f 3f       	cpi	r21, 0xFF	; 255
    22fc:	71 f0       	breq	.+28     	; 0x231a <__fp_splitA+0x1a>
    22fe:	47 95       	ror	r20

00002300 <__fp_splitA>:
    2300:	88 0f       	add	r24, r24
    2302:	97 fb       	bst	r25, 7
    2304:	99 1f       	adc	r25, r25
    2306:	61 f0       	breq	.+24     	; 0x2320 <__fp_splitA+0x20>
    2308:	9f 3f       	cpi	r25, 0xFF	; 255
    230a:	79 f0       	breq	.+30     	; 0x232a <__fp_splitA+0x2a>
    230c:	87 95       	ror	r24
    230e:	08 95       	ret
    2310:	12 16       	cp	r1, r18
    2312:	13 06       	cpc	r1, r19
    2314:	14 06       	cpc	r1, r20
    2316:	55 1f       	adc	r21, r21
    2318:	f2 cf       	rjmp	.-28     	; 0x22fe <__fp_split3+0xe>
    231a:	46 95       	lsr	r20
    231c:	f1 df       	rcall	.-30     	; 0x2300 <__fp_splitA>
    231e:	08 c0       	rjmp	.+16     	; 0x2330 <__fp_splitA+0x30>
    2320:	16 16       	cp	r1, r22
    2322:	17 06       	cpc	r1, r23
    2324:	18 06       	cpc	r1, r24
    2326:	99 1f       	adc	r25, r25
    2328:	f1 cf       	rjmp	.-30     	; 0x230c <__fp_splitA+0xc>
    232a:	86 95       	lsr	r24
    232c:	71 05       	cpc	r23, r1
    232e:	61 05       	cpc	r22, r1
    2330:	08 94       	sec
    2332:	08 95       	ret

00002334 <__fp_zero>:
    2334:	e8 94       	clt

00002336 <__fp_szero>:
    2336:	bb 27       	eor	r27, r27
    2338:	66 27       	eor	r22, r22
    233a:	77 27       	eor	r23, r23
    233c:	cb 01       	movw	r24, r22
    233e:	97 f9       	bld	r25, 7
    2340:	08 95       	ret

00002342 <__gesf2>:
    2342:	0e 94 2c 11 	call	0x2258	; 0x2258 <__fp_cmp>
    2346:	08 f4       	brcc	.+2      	; 0x234a <__gesf2+0x8>
    2348:	8f ef       	ldi	r24, 0xFF	; 255
    234a:	08 95       	ret

0000234c <__mulsf3>:
    234c:	0e 94 b9 11 	call	0x2372	; 0x2372 <__mulsf3x>
    2350:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__fp_round>
    2354:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fp_pscA>
    2358:	38 f0       	brcs	.+14     	; 0x2368 <__mulsf3+0x1c>
    235a:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fp_pscB>
    235e:	20 f0       	brcs	.+8      	; 0x2368 <__mulsf3+0x1c>
    2360:	95 23       	and	r25, r21
    2362:	11 f0       	breq	.+4      	; 0x2368 <__mulsf3+0x1c>
    2364:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__fp_inf>
    2368:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__fp_nan>
    236c:	11 24       	eor	r1, r1
    236e:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__fp_szero>

00002372 <__mulsf3x>:
    2372:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__fp_split3>
    2376:	70 f3       	brcs	.-36     	; 0x2354 <__mulsf3+0x8>

00002378 <__mulsf3_pse>:
    2378:	95 9f       	mul	r25, r21
    237a:	c1 f3       	breq	.-16     	; 0x236c <__mulsf3+0x20>
    237c:	95 0f       	add	r25, r21
    237e:	50 e0       	ldi	r21, 0x00	; 0
    2380:	55 1f       	adc	r21, r21
    2382:	62 9f       	mul	r22, r18
    2384:	f0 01       	movw	r30, r0
    2386:	72 9f       	mul	r23, r18
    2388:	bb 27       	eor	r27, r27
    238a:	f0 0d       	add	r31, r0
    238c:	b1 1d       	adc	r27, r1
    238e:	63 9f       	mul	r22, r19
    2390:	aa 27       	eor	r26, r26
    2392:	f0 0d       	add	r31, r0
    2394:	b1 1d       	adc	r27, r1
    2396:	aa 1f       	adc	r26, r26
    2398:	64 9f       	mul	r22, r20
    239a:	66 27       	eor	r22, r22
    239c:	b0 0d       	add	r27, r0
    239e:	a1 1d       	adc	r26, r1
    23a0:	66 1f       	adc	r22, r22
    23a2:	82 9f       	mul	r24, r18
    23a4:	22 27       	eor	r18, r18
    23a6:	b0 0d       	add	r27, r0
    23a8:	a1 1d       	adc	r26, r1
    23aa:	62 1f       	adc	r22, r18
    23ac:	73 9f       	mul	r23, r19
    23ae:	b0 0d       	add	r27, r0
    23b0:	a1 1d       	adc	r26, r1
    23b2:	62 1f       	adc	r22, r18
    23b4:	83 9f       	mul	r24, r19
    23b6:	a0 0d       	add	r26, r0
    23b8:	61 1d       	adc	r22, r1
    23ba:	22 1f       	adc	r18, r18
    23bc:	74 9f       	mul	r23, r20
    23be:	33 27       	eor	r19, r19
    23c0:	a0 0d       	add	r26, r0
    23c2:	61 1d       	adc	r22, r1
    23c4:	23 1f       	adc	r18, r19
    23c6:	84 9f       	mul	r24, r20
    23c8:	60 0d       	add	r22, r0
    23ca:	21 1d       	adc	r18, r1
    23cc:	82 2f       	mov	r24, r18
    23ce:	76 2f       	mov	r23, r22
    23d0:	6a 2f       	mov	r22, r26
    23d2:	11 24       	eor	r1, r1
    23d4:	9f 57       	subi	r25, 0x7F	; 127
    23d6:	50 40       	sbci	r21, 0x00	; 0
    23d8:	9a f0       	brmi	.+38     	; 0x2400 <__mulsf3_pse+0x88>
    23da:	f1 f0       	breq	.+60     	; 0x2418 <__mulsf3_pse+0xa0>
    23dc:	88 23       	and	r24, r24
    23de:	4a f0       	brmi	.+18     	; 0x23f2 <__mulsf3_pse+0x7a>
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	bb 1f       	adc	r27, r27
    23e6:	66 1f       	adc	r22, r22
    23e8:	77 1f       	adc	r23, r23
    23ea:	88 1f       	adc	r24, r24
    23ec:	91 50       	subi	r25, 0x01	; 1
    23ee:	50 40       	sbci	r21, 0x00	; 0
    23f0:	a9 f7       	brne	.-22     	; 0x23dc <__mulsf3_pse+0x64>
    23f2:	9e 3f       	cpi	r25, 0xFE	; 254
    23f4:	51 05       	cpc	r21, r1
    23f6:	80 f0       	brcs	.+32     	; 0x2418 <__mulsf3_pse+0xa0>
    23f8:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__fp_inf>
    23fc:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__fp_szero>
    2400:	5f 3f       	cpi	r21, 0xFF	; 255
    2402:	e4 f3       	brlt	.-8      	; 0x23fc <__mulsf3_pse+0x84>
    2404:	98 3e       	cpi	r25, 0xE8	; 232
    2406:	d4 f3       	brlt	.-12     	; 0x23fc <__mulsf3_pse+0x84>
    2408:	86 95       	lsr	r24
    240a:	77 95       	ror	r23
    240c:	67 95       	ror	r22
    240e:	b7 95       	ror	r27
    2410:	f7 95       	ror	r31
    2412:	e7 95       	ror	r30
    2414:	9f 5f       	subi	r25, 0xFF	; 255
    2416:	c1 f7       	brne	.-16     	; 0x2408 <__mulsf3_pse+0x90>
    2418:	fe 2b       	or	r31, r30
    241a:	88 0f       	add	r24, r24
    241c:	91 1d       	adc	r25, r1
    241e:	96 95       	lsr	r25
    2420:	87 95       	ror	r24
    2422:	97 f9       	bld	r25, 7
    2424:	08 95       	ret

00002426 <ltoa>:
    2426:	25 32       	cpi	r18, 0x25	; 37
    2428:	31 05       	cpc	r19, r1
    242a:	20 f4       	brcc	.+8      	; 0x2434 <ltoa+0xe>
    242c:	22 30       	cpi	r18, 0x02	; 2
    242e:	10 f0       	brcs	.+4      	; 0x2434 <ltoa+0xe>
    2430:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__ltoa_ncheck>
    2434:	fa 01       	movw	r30, r20
    2436:	10 82       	st	Z, r1
    2438:	ca 01       	movw	r24, r20
    243a:	08 95       	ret

0000243c <__ltoa_ncheck>:
    243c:	bb 27       	eor	r27, r27
    243e:	2a 30       	cpi	r18, 0x0A	; 10
    2440:	51 f4       	brne	.+20     	; 0x2456 <__ltoa_ncheck+0x1a>
    2442:	99 23       	and	r25, r25
    2444:	42 f4       	brpl	.+16     	; 0x2456 <__ltoa_ncheck+0x1a>
    2446:	bd e2       	ldi	r27, 0x2D	; 45
    2448:	90 95       	com	r25
    244a:	80 95       	com	r24
    244c:	70 95       	com	r23
    244e:	61 95       	neg	r22
    2450:	7f 4f       	sbci	r23, 0xFF	; 255
    2452:	8f 4f       	sbci	r24, 0xFF	; 255
    2454:	9f 4f       	sbci	r25, 0xFF	; 255
    2456:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__ultoa_common>

0000245a <__ultoa_ncheck>:
    245a:	bb 27       	eor	r27, r27

0000245c <__ultoa_common>:
    245c:	fa 01       	movw	r30, r20
    245e:	a6 2f       	mov	r26, r22
    2460:	62 17       	cp	r22, r18
    2462:	71 05       	cpc	r23, r1
    2464:	81 05       	cpc	r24, r1
    2466:	91 05       	cpc	r25, r1
    2468:	33 0b       	sbc	r19, r19
    246a:	30 fb       	bst	r19, 0
    246c:	66 f0       	brts	.+24     	; 0x2486 <__ultoa_common+0x2a>
    246e:	aa 27       	eor	r26, r26
    2470:	66 0f       	add	r22, r22
    2472:	77 1f       	adc	r23, r23
    2474:	88 1f       	adc	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	aa 1f       	adc	r26, r26
    247a:	a2 17       	cp	r26, r18
    247c:	10 f0       	brcs	.+4      	; 0x2482 <__ultoa_common+0x26>
    247e:	a2 1b       	sub	r26, r18
    2480:	63 95       	inc	r22
    2482:	38 50       	subi	r19, 0x08	; 8
    2484:	a9 f7       	brne	.-22     	; 0x2470 <__ultoa_common+0x14>
    2486:	a0 5d       	subi	r26, 0xD0	; 208
    2488:	aa 33       	cpi	r26, 0x3A	; 58
    248a:	08 f0       	brcs	.+2      	; 0x248e <__ultoa_common+0x32>
    248c:	a9 5d       	subi	r26, 0xD9	; 217
    248e:	a1 93       	st	Z+, r26
    2490:	36 f7       	brtc	.-52     	; 0x245e <__ultoa_common+0x2>
    2492:	b1 11       	cpse	r27, r1
    2494:	b1 93       	st	Z+, r27
    2496:	10 82       	st	Z, r1
    2498:	ca 01       	movw	r24, r20
    249a:	0c 94 4f 12 	jmp	0x249e	; 0x249e <strrev>

0000249e <strrev>:
    249e:	dc 01       	movw	r26, r24
    24a0:	fc 01       	movw	r30, r24
    24a2:	67 2f       	mov	r22, r23
    24a4:	71 91       	ld	r23, Z+
    24a6:	77 23       	and	r23, r23
    24a8:	e1 f7       	brne	.-8      	; 0x24a2 <strrev+0x4>
    24aa:	32 97       	sbiw	r30, 0x02	; 2
    24ac:	04 c0       	rjmp	.+8      	; 0x24b6 <strrev+0x18>
    24ae:	7c 91       	ld	r23, X
    24b0:	6d 93       	st	X+, r22
    24b2:	70 83       	st	Z, r23
    24b4:	62 91       	ld	r22, -Z
    24b6:	ae 17       	cp	r26, r30
    24b8:	bf 07       	cpc	r27, r31
    24ba:	c8 f3       	brcs	.-14     	; 0x24ae <strrev+0x10>
    24bc:	08 95       	ret

000024be <_exit>:
    24be:	f8 94       	cli

000024c0 <__stop_program>:
    24c0:	ff cf       	rjmp	.-2      	; 0x24c0 <__stop_program>
