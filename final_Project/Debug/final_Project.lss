
final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00002222  000022b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800062  00800062  000022b8  2**0
                  ALLOC
  3 .stab         00003180  00000000  00000000  000022b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001275  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000066ad  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000066c0  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000060  00000000  00000000  00006700  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000005a0  00000000  00000000  00006760  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000523  00000000  00000000  00006d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000019a  00000000  00000000  00007223  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000020d  00000000  00000000  000073bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 36       	cpi	r26, 0x6B	; 107
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <main>
      8a:	0c 94 0f 11 	jmp	0x221e	; 0x221e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_init>:

/*                                 	 Header File                                                      */
#include "I2C.h"
#include "EEPROM.h"

void EEPROM_init(void){
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62

	I2C_init(); /* initialize I2C Module */
      9a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <I2C_init>

}
      9e:	00 00       	nop
      a0:	df 91       	pop	r29
      a2:	cf 91       	pop	r28
      a4:	08 95       	ret

000000a6 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <EEPROM_writeByte+0x6>
      ac:	0f 92       	push	r0
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	9a 83       	std	Y+2, r25	; 0x02
      b4:	89 83       	std	Y+1, r24	; 0x01
      b6:	6b 83       	std	Y+3, r22	; 0x03

	I2C_start();
      b8:	0e 94 14 01 	call	0x228	; 0x228 <I2C_start>
	if(I2C_getStatus() != TW_START)
      bc:	0e 94 81 01 	call	0x302	; 0x302 <I2C_getStatus>
      c0:	88 30       	cpi	r24, 0x08	; 8
      c2:	11 f0       	breq	.+4      	; 0xc8 <EEPROM_writeByte+0x22>
		return ERROR;
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	26 c0       	rjmp	.+76     	; 0x114 <EEPROM_writeByte+0x6e>

	I2C_write((uint8) ((0xA0) | ((u16addr & 0x0700) >> 7)));
      c8:	89 81       	ldd	r24, Y+1	; 0x01
      ca:	9a 81       	ldd	r25, Y+2	; 0x02
      cc:	88 0f       	add	r24, r24
      ce:	89 2f       	mov	r24, r25
      d0:	88 1f       	adc	r24, r24
      d2:	99 0b       	sbc	r25, r25
      d4:	91 95       	neg	r25
      d6:	8e 70       	andi	r24, 0x0E	; 14
      d8:	80 6a       	ori	r24, 0xA0	; 160
      da:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_write>
	if(I2C_getStatus() != TW_MT_SLA_W_ACK)
      de:	0e 94 81 01 	call	0x302	; 0x302 <I2C_getStatus>
      e2:	88 31       	cpi	r24, 0x18	; 24
      e4:	11 f0       	breq	.+4      	; 0xea <EEPROM_writeByte+0x44>
		return ERROR;
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	15 c0       	rjmp	.+42     	; 0x114 <EEPROM_writeByte+0x6e>

	I2C_write((uint8)(u16addr));
      ea:	89 81       	ldd	r24, Y+1	; 0x01
      ec:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_write>
	if(I2C_getStatus() != TW_MT_DATA_ACK)
      f0:	0e 94 81 01 	call	0x302	; 0x302 <I2C_getStatus>
      f4:	88 32       	cpi	r24, 0x28	; 40
      f6:	11 f0       	breq	.+4      	; 0xfc <EEPROM_writeByte+0x56>
		return ERROR;
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	0c c0       	rjmp	.+24     	; 0x114 <EEPROM_writeByte+0x6e>


	I2C_write((uint8)(u8data));
      fc:	8b 81       	ldd	r24, Y+3	; 0x03
      fe:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_write>
	if(I2C_getStatus() != TW_MT_DATA_ACK)
     102:	0e 94 81 01 	call	0x302	; 0x302 <I2C_getStatus>
     106:	88 32       	cpi	r24, 0x28	; 40
     108:	11 f0       	breq	.+4      	; 0x10e <EEPROM_writeByte+0x68>
		return ERROR;
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	03 c0       	rjmp	.+6      	; 0x114 <EEPROM_writeByte+0x6e>

	I2C_stop();
     10e:	0e 94 29 01 	call	0x252	; 0x252 <I2C_stop>

	return SUCCESS;
     112:	81 e0       	ldi	r24, 0x01	; 1
}
     114:	0f 90       	pop	r0
     116:	0f 90       	pop	r0
     118:	0f 90       	pop	r0
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	08 95       	ret

00000120 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data){
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	00 d0       	rcall	.+0      	; 0x126 <EEPROM_readByte+0x6>
     126:	00 d0       	rcall	.+0      	; 0x128 <EEPROM_readByte+0x8>
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	89 83       	std	Y+1, r24	; 0x01
     130:	7c 83       	std	Y+4, r23	; 0x04
     132:	6b 83       	std	Y+3, r22	; 0x03
	I2C_start();
     134:	0e 94 14 01 	call	0x228	; 0x228 <I2C_start>
	if(I2C_getStatus() != TW_START)
     138:	0e 94 81 01 	call	0x302	; 0x302 <I2C_getStatus>
     13c:	88 30       	cpi	r24, 0x08	; 8
     13e:	11 f0       	breq	.+4      	; 0x144 <EEPROM_readByte+0x24>
		return ERROR;
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	4c c0       	rjmp	.+152    	; 0x1dc <EEPROM_readByte+0xbc>

    I2C_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	9a 81       	ldd	r25, Y+2	; 0x02
     148:	88 0f       	add	r24, r24
     14a:	89 2f       	mov	r24, r25
     14c:	88 1f       	adc	r24, r24
     14e:	99 0b       	sbc	r25, r25
     150:	91 95       	neg	r25
     152:	8e 70       	andi	r24, 0x0E	; 14
     154:	80 6a       	ori	r24, 0xA0	; 160
     156:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_write>
    if (I2C_getStatus() != TW_MT_SLA_W_ACK)
     15a:	0e 94 81 01 	call	0x302	; 0x302 <I2C_getStatus>
     15e:	88 31       	cpi	r24, 0x18	; 24
     160:	11 f0       	breq	.+4      	; 0x166 <EEPROM_readByte+0x46>
        return ERROR;
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	3b c0       	rjmp	.+118    	; 0x1dc <EEPROM_readByte+0xbc>

    I2C_write((uint8)(u16addr));
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_write>
    if (I2C_getStatus() != TW_MT_DATA_ACK)
     16c:	0e 94 81 01 	call	0x302	; 0x302 <I2C_getStatus>
     170:	88 32       	cpi	r24, 0x28	; 40
     172:	11 f0       	breq	.+4      	; 0x178 <EEPROM_readByte+0x58>
        return ERROR;
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	32 c0       	rjmp	.+100    	; 0x1dc <EEPROM_readByte+0xbc>

	I2C_start();
     178:	0e 94 14 01 	call	0x228	; 0x228 <I2C_start>
	if (I2C_getStatus() != TW_REP_START)
     17c:	0e 94 81 01 	call	0x302	; 0x302 <I2C_getStatus>
     180:	80 31       	cpi	r24, 0x10	; 16
     182:	11 f0       	breq	.+4      	; 0x188 <EEPROM_readByte+0x68>
		return ERROR;
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	2a c0       	rjmp	.+84     	; 0x1dc <EEPROM_readByte+0xbc>

	I2C_write((uint8) ((0xA0) | ((u16addr & 0x0701) >> 7)));
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	88 0f       	add	r24, r24
     18e:	89 2f       	mov	r24, r25
     190:	88 1f       	adc	r24, r24
     192:	99 0b       	sbc	r25, r25
     194:	91 95       	neg	r25
     196:	8e 70       	andi	r24, 0x0E	; 14
     198:	80 6a       	ori	r24, 0xA0	; 160
     19a:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_write>
	if (I2C_getStatus() != TW_MT_SLA_W_ACK)
     19e:	0e 94 81 01 	call	0x302	; 0x302 <I2C_getStatus>
     1a2:	88 31       	cpi	r24, 0x18	; 24
     1a4:	11 f0       	breq	.+4      	; 0x1aa <EEPROM_readByte+0x8a>
		return ERROR;
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	19 c0       	rjmp	.+50     	; 0x1dc <EEPROM_readByte+0xbc>

	I2C_write((uint8)(u16addr));
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_write>
	if(I2C_getStatus() != TW_MT_SLA_R_ACK)
     1b0:	0e 94 81 01 	call	0x302	; 0x302 <I2C_getStatus>
     1b4:	80 34       	cpi	r24, 0x40	; 64
     1b6:	11 f0       	breq	.+4      	; 0x1bc <EEPROM_readByte+0x9c>
		return ERROR;
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	10 c0       	rjmp	.+32     	; 0x1dc <EEPROM_readByte+0xbc>


	*u8data = I2C_readWith_ACK();
     1bc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2C_readWith_ACK>
     1c0:	28 2f       	mov	r18, r24
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	9c 81       	ldd	r25, Y+4	; 0x04
     1c6:	fc 01       	movw	r30, r24
     1c8:	20 83       	st	Z, r18
	if(I2C_getStatus() != TW_MR_DATA_NACK)
     1ca:	0e 94 81 01 	call	0x302	; 0x302 <I2C_getStatus>
     1ce:	88 35       	cpi	r24, 0x58	; 88
     1d0:	11 f0       	breq	.+4      	; 0x1d6 <EEPROM_readByte+0xb6>
		return ERROR;
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	03 c0       	rjmp	.+6      	; 0x1dc <EEPROM_readByte+0xbc>

	I2C_stop();
     1d6:	0e 94 29 01 	call	0x252	; 0x252 <I2C_stop>

	return SUCCESS;
     1da:	81 e0       	ldi	r24, 0x01	; 1
}
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <I2C_init>:
 *******************************************************************************/

/*
 * Function responsible to initialize I2C
 */
void I2C_init(void) {
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62

	/* Select Bit Rate: 400 kbps   */
	TWBR = TWBR_VALUE;
     1f2:	80 e2       	ldi	r24, 0x20	; 32
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	22 e0       	ldi	r18, 0x02	; 2
     1f8:	fc 01       	movw	r30, r24
     1fa:	20 83       	st	Z, r18
	TWSR = TWSR_VALUE;
     1fc:	81 e2       	ldi	r24, 0x21	; 33
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	fc 01       	movw	r30, r24
     202:	10 82       	st	Z, r1

	TWAR = 0x02;		/* Select device address */
     204:	82 e2       	ldi	r24, 0x22	; 34
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	22 e0       	ldi	r18, 0x02	; 2
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18

	SET_BIT(TWCR, TWEN); 	/* enable I2C */
     20e:	86 e5       	ldi	r24, 0x56	; 86
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	fc 01       	movw	r30, r24
     214:	20 81       	ld	r18, Z
     216:	86 e5       	ldi	r24, 0x56	; 86
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	24 60       	ori	r18, 0x04	; 4
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18
}
     220:	00 00       	nop
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <I2C_start>:

/*
 * Function responsible to send START bit to TWI BUS
 */
void I2C_start(void) {
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the START bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     230:	86 e5       	ldi	r24, 0x56	; 86
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	24 ea       	ldi	r18, 0xA4	; 164
     236:	fc 01       	movw	r30, r24
     238:	20 83       	st	Z, r18

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
     23a:	00 00       	nop
     23c:	86 e5       	ldi	r24, 0x56	; 86
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	fc 01       	movw	r30, r24
     242:	80 81       	ld	r24, Z
     244:	88 23       	and	r24, r24
     246:	d4 f7       	brge	.-12     	; 0x23c <I2C_start+0x14>

}
     248:	00 00       	nop
     24a:	00 00       	nop
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <I2C_stop>:

/*
 * Function responsible to send STOP bit to TWI BUS .
 */
void I2C_stop(void) {
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the STOP bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     25a:	86 e5       	ldi	r24, 0x56	; 86
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	24 e9       	ldi	r18, 0x94	; 148
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18

}
     264:	00 00       	nop
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <I2C_write>:

/*
 * Function responsible to send data to TWI BUS .
 */
void I2C_write(uint8 data) {
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	0f 92       	push	r0
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
     278:	83 e2       	ldi	r24, 0x23	; 35
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	29 81       	ldd	r18, Y+1	; 0x01
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
     282:	86 e5       	ldi	r24, 0x56	; 86
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	24 e8       	ldi	r18, 0x84	; 132
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
     28c:	00 00       	nop
     28e:	86 e5       	ldi	r24, 0x56	; 86
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	fc 01       	movw	r30, r24
     294:	80 81       	ld	r24, Z
     296:	88 23       	and	r24, r24
     298:	d4 f7       	brge	.-12     	; 0x28e <I2C_write+0x22>

}
     29a:	00 00       	nop
     29c:	00 00       	nop
     29e:	0f 90       	pop	r0
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <I2C_readWith_ACK>:

/*
 * Function responsible to read data from TWI BUS & request more data .
 */
uint8 I2C_readWith_ACK(void) {
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     2ae:	86 e5       	ldi	r24, 0x56	; 86
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	24 ec       	ldi	r18, 0xC4	; 196
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 83       	st	Z, r18
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
     2b8:	00 00       	nop
     2ba:	86 e5       	ldi	r24, 0x56	; 86
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	fc 01       	movw	r30, r24
     2c0:	80 81       	ld	r24, Z
     2c2:	88 23       	and	r24, r24
     2c4:	d4 f7       	brge	.-12     	; 0x2ba <I2C_readWith_ACK+0x14>
	/* Read Data */
	return TWDR;
     2c6:	83 e2       	ldi	r24, 0x23	; 35
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	fc 01       	movw	r30, r24
     2cc:	80 81       	ld	r24, Z

}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <I2C_readWith_NACK>:

/*
 * Function responsible to read data from TWI BUS & request stop data transfer .
 */
uint8 I2C_readWith_NACK(void) {
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
     2dc:	86 e5       	ldi	r24, 0x56	; 86
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	24 e8       	ldi	r18, 0x84	; 132
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 83       	st	Z, r18
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
     2e6:	00 00       	nop
     2e8:	86 e5       	ldi	r24, 0x56	; 86
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	fc 01       	movw	r30, r24
     2ee:	80 81       	ld	r24, Z
     2f0:	88 23       	and	r24, r24
     2f2:	d4 f7       	brge	.-12     	; 0x2e8 <I2C_readWith_NACK+0x14>
	/* Read Data */
	return TWDR;
     2f4:	83 e2       	ldi	r24, 0x23	; 35
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	fc 01       	movw	r30, r24
     2fa:	80 81       	ld	r24, Z
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <I2C_getStatus>:

/*
 * Function responsible to read status register .
 */
uint8 I2C_getStatus(void) {
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	0f 92       	push	r0
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     30c:	81 e2       	ldi	r24, 0x21	; 33
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	fc 01       	movw	r30, r24
     312:	80 81       	ld	r24, Z
     314:	88 7f       	andi	r24, 0xF8	; 248
     316:	89 83       	std	Y+1, r24	; 0x01
    return status;
     318:	89 81       	ldd	r24, Y+1	; 0x01
}
     31a:	0f 90       	pop	r0
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <LCD_sendCommand>:
 *******************************************************************************/

/*
 * Function responsible for Send Order to LCD
 */
void LCD_sendCommand(uint8 command) {
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	c9 58       	subi	r28, 0x89	; 137
     32c:	d1 09       	sbc	r29, r1
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
     338:	89 af       	std	Y+57, r24	; 0x39
	RS = CLEAR; /* tell LCD that data which will send now is command */
     33a:	82 e3       	ldi	r24, 0x32	; 50
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	dc 01       	movw	r26, r24
     340:	2c 91       	ld	r18, X
     342:	2f 7e       	andi	r18, 0xEF	; 239
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
	RW = CLEAR; /* select write Mode on LCD */
     348:	82 e3       	ldi	r24, 0x32	; 50
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	dc 01       	movw	r26, r24
     34e:	2c 91       	ld	r18, X
     350:	2f 7d       	andi	r18, 0xDF	; 223
     352:	fc 01       	movw	r30, r24
     354:	20 83       	st	Z, r18
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	a0 e8       	ldi	r26, 0x80	; 128
     35c:	bf e3       	ldi	r27, 0x3F	; 63
     35e:	8b a7       	std	Y+43, r24	; 0x2b
     360:	9c a7       	std	Y+44, r25	; 0x2c
     362:	ad a7       	std	Y+45, r26	; 0x2d
     364:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	4a ef       	ldi	r20, 0xFA	; 250
     36c:	54 e4       	ldi	r21, 0x44	; 68
     36e:	6b a5       	ldd	r22, Y+43	; 0x2b
     370:	7c a5       	ldd	r23, Y+44	; 0x2c
     372:	8d a5       	ldd	r24, Y+45	; 0x2d
     374:	9e a5       	ldd	r25, Y+46	; 0x2e
     376:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     37a:	2e 96       	adiw	r28, 0x0e	; 14
     37c:	6c af       	std	Y+60, r22	; 0x3c
     37e:	7d af       	std	Y+61, r23	; 0x3d
     380:	8e af       	std	Y+62, r24	; 0x3e
     382:	9f af       	std	Y+63, r25	; 0x3f
     384:	2e 97       	sbiw	r28, 0x0e	; 14
     386:	2e 96       	adiw	r28, 0x0e	; 14
     388:	8c ad       	ldd	r24, Y+60	; 0x3c
     38a:	9d ad       	ldd	r25, Y+61	; 0x3d
     38c:	ae ad       	ldd	r26, Y+62	; 0x3e
     38e:	bf ad       	ldd	r27, Y+63	; 0x3f
     390:	2e 97       	sbiw	r28, 0x0e	; 14
     392:	8f a7       	std	Y+47, r24	; 0x2f
     394:	98 ab       	std	Y+48, r25	; 0x30
     396:	a9 ab       	std	Y+49, r26	; 0x31
     398:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e8       	ldi	r20, 0x80	; 128
     3a0:	5f e3       	ldi	r21, 0x3F	; 63
     3a2:	6f a5       	ldd	r22, Y+47	; 0x2f
     3a4:	78 a9       	ldd	r23, Y+48	; 0x30
     3a6:	89 a9       	ldd	r24, Y+49	; 0x31
     3a8:	9a a9       	ldd	r25, Y+50	; 0x32
     3aa:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     3ae:	88 23       	and	r24, r24
     3b0:	2c f4       	brge	.+10     	; 0x3bc <LCD_sendCommand+0x9a>
		__ticks = 1;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	9c ab       	std	Y+52, r25	; 0x34
     3b8:	8b ab       	std	Y+51, r24	; 0x33
     3ba:	65 c0       	rjmp	.+202    	; 0x486 <__stack+0x27>
	else if (__tmp > 65535)
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	3f ef       	ldi	r19, 0xFF	; 255
     3c0:	4f e7       	ldi	r20, 0x7F	; 127
     3c2:	57 e4       	ldi	r21, 0x47	; 71
     3c4:	6f a5       	ldd	r22, Y+47	; 0x2f
     3c6:	78 a9       	ldd	r23, Y+48	; 0x30
     3c8:	89 a9       	ldd	r24, Y+49	; 0x31
     3ca:	9a a9       	ldd	r25, Y+50	; 0x32
     3cc:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
     3d0:	18 16       	cp	r1, r24
     3d2:	0c f0       	brlt	.+2      	; 0x3d6 <LCD_sendCommand+0xb4>
     3d4:	46 c0       	rjmp	.+140    	; 0x462 <__stack+0x3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	40 e2       	ldi	r20, 0x20	; 32
     3dc:	51 e4       	ldi	r21, 0x41	; 65
     3de:	6b a5       	ldd	r22, Y+43	; 0x2b
     3e0:	7c a5       	ldd	r23, Y+44	; 0x2c
     3e2:	8d a5       	ldd	r24, Y+45	; 0x2d
     3e4:	9e a5       	ldd	r25, Y+46	; 0x2e
     3e6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     3ea:	62 96       	adiw	r28, 0x12	; 18
     3ec:	6c af       	std	Y+60, r22	; 0x3c
     3ee:	7d af       	std	Y+61, r23	; 0x3d
     3f0:	8e af       	std	Y+62, r24	; 0x3e
     3f2:	9f af       	std	Y+63, r25	; 0x3f
     3f4:	62 97       	sbiw	r28, 0x12	; 18
     3f6:	62 96       	adiw	r28, 0x12	; 18
     3f8:	8c ad       	ldd	r24, Y+60	; 0x3c
     3fa:	9d ad       	ldd	r25, Y+61	; 0x3d
     3fc:	ae ad       	ldd	r26, Y+62	; 0x3e
     3fe:	bf ad       	ldd	r27, Y+63	; 0x3f
     400:	62 97       	sbiw	r28, 0x12	; 18
     402:	2a 96       	adiw	r28, 0x0a	; 10
     404:	8c af       	std	Y+60, r24	; 0x3c
     406:	9d af       	std	Y+61, r25	; 0x3d
     408:	ae af       	std	Y+62, r26	; 0x3e
     40a:	bf af       	std	Y+63, r27	; 0x3f
     40c:	2a 97       	sbiw	r28, 0x0a	; 10
     40e:	2a 96       	adiw	r28, 0x0a	; 10
     410:	6c ad       	ldd	r22, Y+60	; 0x3c
     412:	7d ad       	ldd	r23, Y+61	; 0x3d
     414:	8e ad       	ldd	r24, Y+62	; 0x3e
     416:	9f ad       	ldd	r25, Y+63	; 0x3f
     418:	2a 97       	sbiw	r28, 0x0a	; 10
     41a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     41e:	66 96       	adiw	r28, 0x16	; 22
     420:	6c af       	std	Y+60, r22	; 0x3c
     422:	7d af       	std	Y+61, r23	; 0x3d
     424:	8e af       	std	Y+62, r24	; 0x3e
     426:	9f af       	std	Y+63, r25	; 0x3f
     428:	66 97       	sbiw	r28, 0x16	; 22
     42a:	64 96       	adiw	r28, 0x14	; 20
     42c:	ae ad       	ldd	r26, Y+62	; 0x3e
     42e:	bf ad       	ldd	r27, Y+63	; 0x3f
     430:	64 97       	sbiw	r28, 0x14	; 20
     432:	bc ab       	std	Y+52, r27	; 0x34
     434:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
     436:	10 c0       	rjmp	.+32     	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
     438:	88 ec       	ldi	r24, 0xC8	; 200
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	9e ab       	std	Y+54, r25	; 0x36
     43e:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     440:	8d a9       	ldd	r24, Y+53	; 0x35
     442:	9e a9       	ldd	r25, Y+54	; 0x36
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
     448:	9e ab       	std	Y+54, r25	; 0x36
     44a:	8d ab       	std	Y+53, r24	; 0x35
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     44c:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     44e:	8b a9       	ldd	r24, Y+51	; 0x33
     450:	9c a9       	ldd	r25, Y+52	; 0x34
     452:	01 97       	sbiw	r24, 0x01	; 1
     454:	9c ab       	std	Y+52, r25	; 0x34
     456:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
     458:	8b a9       	ldd	r24, Y+51	; 0x33
     45a:	9c a9       	ldd	r25, Y+52	; 0x34
     45c:	89 2b       	or	r24, r25
     45e:	61 f7       	brne	.-40     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
		}
		return;
     460:	1d c0       	rjmp	.+58     	; 0x49c <__stack+0x3d>
	}
	else
		__ticks = (uint16_t)__tmp;
     462:	6f a5       	ldd	r22, Y+47	; 0x2f
     464:	78 a9       	ldd	r23, Y+48	; 0x30
     466:	89 a9       	ldd	r24, Y+49	; 0x31
     468:	9a a9       	ldd	r25, Y+50	; 0x32
     46a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     46e:	6a 96       	adiw	r28, 0x1a	; 26
     470:	6c af       	std	Y+60, r22	; 0x3c
     472:	7d af       	std	Y+61, r23	; 0x3d
     474:	8e af       	std	Y+62, r24	; 0x3e
     476:	9f af       	std	Y+63, r25	; 0x3f
     478:	6a 97       	sbiw	r28, 0x1a	; 26
     47a:	68 96       	adiw	r28, 0x18	; 24
     47c:	ee ad       	ldd	r30, Y+62	; 0x3e
     47e:	ff ad       	ldd	r31, Y+63	; 0x3f
     480:	68 97       	sbiw	r28, 0x18	; 24
     482:	fc ab       	std	Y+52, r31	; 0x34
     484:	eb ab       	std	Y+51, r30	; 0x33
     486:	8b a9       	ldd	r24, Y+51	; 0x33
     488:	9c a9       	ldd	r25, Y+52	; 0x34
     48a:	98 af       	std	Y+56, r25	; 0x38
     48c:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
     48e:	8f a9       	ldd	r24, Y+55	; 0x37
     490:	98 ad       	ldd	r25, Y+56	; 0x38
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <__stack+0x33>
     496:	98 af       	std	Y+56, r25	; 0x38
     498:	8f ab       	std	Y+55, r24	; 0x37
}
     49a:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
     49c:	82 e3       	ldi	r24, 0x32	; 50
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	dc 01       	movw	r26, r24
     4a2:	2c 91       	ld	r18, X
     4a4:	20 64       	ori	r18, 0x40	; 64
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 83       	st	Z, r18
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	a0 e8       	ldi	r26, 0x80	; 128
     4b0:	bf e3       	ldi	r27, 0x3F	; 63
     4b2:	8d 8f       	std	Y+29, r24	; 0x1d
     4b4:	9e 8f       	std	Y+30, r25	; 0x1e
     4b6:	af 8f       	std	Y+31, r26	; 0x1f
     4b8:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	4a ef       	ldi	r20, 0xFA	; 250
     4c0:	54 e4       	ldi	r21, 0x44	; 68
     4c2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     4c4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     4c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4c8:	98 a1       	ldd	r25, Y+32	; 0x20
     4ca:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     4ce:	6e 96       	adiw	r28, 0x1e	; 30
     4d0:	6c af       	std	Y+60, r22	; 0x3c
     4d2:	7d af       	std	Y+61, r23	; 0x3d
     4d4:	8e af       	std	Y+62, r24	; 0x3e
     4d6:	9f af       	std	Y+63, r25	; 0x3f
     4d8:	6e 97       	sbiw	r28, 0x1e	; 30
     4da:	6e 96       	adiw	r28, 0x1e	; 30
     4dc:	8c ad       	ldd	r24, Y+60	; 0x3c
     4de:	9d ad       	ldd	r25, Y+61	; 0x3d
     4e0:	ae ad       	ldd	r26, Y+62	; 0x3e
     4e2:	bf ad       	ldd	r27, Y+63	; 0x3f
     4e4:	6e 97       	sbiw	r28, 0x1e	; 30
     4e6:	89 a3       	std	Y+33, r24	; 0x21
     4e8:	9a a3       	std	Y+34, r25	; 0x22
     4ea:	ab a3       	std	Y+35, r26	; 0x23
     4ec:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	40 e8       	ldi	r20, 0x80	; 128
     4f4:	5f e3       	ldi	r21, 0x3F	; 63
     4f6:	69 a1       	ldd	r22, Y+33	; 0x21
     4f8:	7a a1       	ldd	r23, Y+34	; 0x22
     4fa:	8b a1       	ldd	r24, Y+35	; 0x23
     4fc:	9c a1       	ldd	r25, Y+36	; 0x24
     4fe:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     502:	88 23       	and	r24, r24
     504:	2c f4       	brge	.+10     	; 0x510 <__stack+0xb1>
		__ticks = 1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	9e a3       	std	Y+38, r25	; 0x26
     50c:	8d a3       	std	Y+37, r24	; 0x25
     50e:	65 c0       	rjmp	.+202    	; 0x5da <__stack+0x17b>
	else if (__tmp > 65535)
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	3f ef       	ldi	r19, 0xFF	; 255
     514:	4f e7       	ldi	r20, 0x7F	; 127
     516:	57 e4       	ldi	r21, 0x47	; 71
     518:	69 a1       	ldd	r22, Y+33	; 0x21
     51a:	7a a1       	ldd	r23, Y+34	; 0x22
     51c:	8b a1       	ldd	r24, Y+35	; 0x23
     51e:	9c a1       	ldd	r25, Y+36	; 0x24
     520:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
     524:	18 16       	cp	r1, r24
     526:	0c f0       	brlt	.+2      	; 0x52a <__stack+0xcb>
     528:	46 c0       	rjmp	.+140    	; 0x5b6 <__stack+0x157>
		__ticks = (uint16_t) (__ms * 10.0);
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e2       	ldi	r20, 0x20	; 32
     530:	51 e4       	ldi	r21, 0x41	; 65
     532:	6d 8d       	ldd	r22, Y+29	; 0x1d
     534:	7e 8d       	ldd	r23, Y+30	; 0x1e
     536:	8f 8d       	ldd	r24, Y+31	; 0x1f
     538:	98 a1       	ldd	r25, Y+32	; 0x20
     53a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     53e:	a2 96       	adiw	r28, 0x22	; 34
     540:	6c af       	std	Y+60, r22	; 0x3c
     542:	7d af       	std	Y+61, r23	; 0x3d
     544:	8e af       	std	Y+62, r24	; 0x3e
     546:	9f af       	std	Y+63, r25	; 0x3f
     548:	a2 97       	sbiw	r28, 0x22	; 34
     54a:	a2 96       	adiw	r28, 0x22	; 34
     54c:	8c ad       	ldd	r24, Y+60	; 0x3c
     54e:	9d ad       	ldd	r25, Y+61	; 0x3d
     550:	ae ad       	ldd	r26, Y+62	; 0x3e
     552:	bf ad       	ldd	r27, Y+63	; 0x3f
     554:	a2 97       	sbiw	r28, 0x22	; 34
     556:	26 96       	adiw	r28, 0x06	; 6
     558:	8c af       	std	Y+60, r24	; 0x3c
     55a:	9d af       	std	Y+61, r25	; 0x3d
     55c:	ae af       	std	Y+62, r26	; 0x3e
     55e:	bf af       	std	Y+63, r27	; 0x3f
     560:	26 97       	sbiw	r28, 0x06	; 6
     562:	26 96       	adiw	r28, 0x06	; 6
     564:	6c ad       	ldd	r22, Y+60	; 0x3c
     566:	7d ad       	ldd	r23, Y+61	; 0x3d
     568:	8e ad       	ldd	r24, Y+62	; 0x3e
     56a:	9f ad       	ldd	r25, Y+63	; 0x3f
     56c:	26 97       	sbiw	r28, 0x06	; 6
     56e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     572:	a6 96       	adiw	r28, 0x26	; 38
     574:	6c af       	std	Y+60, r22	; 0x3c
     576:	7d af       	std	Y+61, r23	; 0x3d
     578:	8e af       	std	Y+62, r24	; 0x3e
     57a:	9f af       	std	Y+63, r25	; 0x3f
     57c:	a6 97       	sbiw	r28, 0x26	; 38
     57e:	a4 96       	adiw	r28, 0x24	; 36
     580:	ae ad       	ldd	r26, Y+62	; 0x3e
     582:	bf ad       	ldd	r27, Y+63	; 0x3f
     584:	a4 97       	sbiw	r28, 0x24	; 36
     586:	be a3       	std	Y+38, r27	; 0x26
     588:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
     58a:	10 c0       	rjmp	.+32     	; 0x5ac <__stack+0x14d>
     58c:	88 ec       	ldi	r24, 0xC8	; 200
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	98 a7       	std	Y+40, r25	; 0x28
     592:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
     594:	8f a1       	ldd	r24, Y+39	; 0x27
     596:	98 a5       	ldd	r25, Y+40	; 0x28
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <__stack+0x139>
     59c:	98 a7       	std	Y+40, r25	; 0x28
     59e:	8f a3       	std	Y+39, r24	; 0x27
}
     5a0:	00 00       	nop
			__ticks --;
     5a2:	8d a1       	ldd	r24, Y+37	; 0x25
     5a4:	9e a1       	ldd	r25, Y+38	; 0x26
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	9e a3       	std	Y+38, r25	; 0x26
     5aa:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
     5ac:	8d a1       	ldd	r24, Y+37	; 0x25
     5ae:	9e a1       	ldd	r25, Y+38	; 0x26
     5b0:	89 2b       	or	r24, r25
     5b2:	61 f7       	brne	.-40     	; 0x58c <__stack+0x12d>
		return;
     5b4:	1d c0       	rjmp	.+58     	; 0x5f0 <__stack+0x191>
		__ticks = (uint16_t)__tmp;
     5b6:	69 a1       	ldd	r22, Y+33	; 0x21
     5b8:	7a a1       	ldd	r23, Y+34	; 0x22
     5ba:	8b a1       	ldd	r24, Y+35	; 0x23
     5bc:	9c a1       	ldd	r25, Y+36	; 0x24
     5be:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     5c2:	aa 96       	adiw	r28, 0x2a	; 42
     5c4:	6c af       	std	Y+60, r22	; 0x3c
     5c6:	7d af       	std	Y+61, r23	; 0x3d
     5c8:	8e af       	std	Y+62, r24	; 0x3e
     5ca:	9f af       	std	Y+63, r25	; 0x3f
     5cc:	aa 97       	sbiw	r28, 0x2a	; 42
     5ce:	a8 96       	adiw	r28, 0x28	; 40
     5d0:	ee ad       	ldd	r30, Y+62	; 0x3e
     5d2:	ff ad       	ldd	r31, Y+63	; 0x3f
     5d4:	a8 97       	sbiw	r28, 0x28	; 40
     5d6:	fe a3       	std	Y+38, r31	; 0x26
     5d8:	ed a3       	std	Y+37, r30	; 0x25
     5da:	8d a1       	ldd	r24, Y+37	; 0x25
     5dc:	9e a1       	ldd	r25, Y+38	; 0x26
     5de:	9a a7       	std	Y+42, r25	; 0x2a
     5e0:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
     5e2:	89 a5       	ldd	r24, Y+41	; 0x29
     5e4:	9a a5       	ldd	r25, Y+42	; 0x2a
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <__stack+0x187>
     5ea:	9a a7       	std	Y+42, r25	; 0x2a
     5ec:	89 a7       	std	Y+41, r24	; 0x29
}
     5ee:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if(DATA_MODE ==8)
	DATA_OUT = command; /* send command to LCD to make order */
     5f0:	85 e3       	ldi	r24, 0x35	; 53
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	29 ad       	ldd	r18, Y+57	; 0x39
     5f6:	dc 01       	movw	r26, r24
     5f8:	2c 93       	st	X, r18
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	a0 e8       	ldi	r26, 0x80	; 128
     600:	bf e3       	ldi	r27, 0x3F	; 63
     602:	8f 87       	std	Y+15, r24	; 0x0f
     604:	98 8b       	std	Y+16, r25	; 0x10
     606:	a9 8b       	std	Y+17, r26	; 0x11
     608:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	4a ef       	ldi	r20, 0xFA	; 250
     610:	54 e4       	ldi	r21, 0x44	; 68
     612:	6f 85       	ldd	r22, Y+15	; 0x0f
     614:	78 89       	ldd	r23, Y+16	; 0x10
     616:	89 89       	ldd	r24, Y+17	; 0x11
     618:	9a 89       	ldd	r25, Y+18	; 0x12
     61a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     61e:	ae 96       	adiw	r28, 0x2e	; 46
     620:	6c af       	std	Y+60, r22	; 0x3c
     622:	7d af       	std	Y+61, r23	; 0x3d
     624:	8e af       	std	Y+62, r24	; 0x3e
     626:	9f af       	std	Y+63, r25	; 0x3f
     628:	ae 97       	sbiw	r28, 0x2e	; 46
     62a:	ae 96       	adiw	r28, 0x2e	; 46
     62c:	8c ad       	ldd	r24, Y+60	; 0x3c
     62e:	9d ad       	ldd	r25, Y+61	; 0x3d
     630:	ae ad       	ldd	r26, Y+62	; 0x3e
     632:	bf ad       	ldd	r27, Y+63	; 0x3f
     634:	ae 97       	sbiw	r28, 0x2e	; 46
     636:	8b 8b       	std	Y+19, r24	; 0x13
     638:	9c 8b       	std	Y+20, r25	; 0x14
     63a:	ad 8b       	std	Y+21, r26	; 0x15
     63c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e8       	ldi	r20, 0x80	; 128
     644:	5f e3       	ldi	r21, 0x3F	; 63
     646:	6b 89       	ldd	r22, Y+19	; 0x13
     648:	7c 89       	ldd	r23, Y+20	; 0x14
     64a:	8d 89       	ldd	r24, Y+21	; 0x15
     64c:	9e 89       	ldd	r25, Y+22	; 0x16
     64e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     652:	88 23       	and	r24, r24
     654:	2c f4       	brge	.+10     	; 0x660 <__stack+0x201>
		__ticks = 1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	98 8f       	std	Y+24, r25	; 0x18
     65c:	8f 8b       	std	Y+23, r24	; 0x17
     65e:	65 c0       	rjmp	.+202    	; 0x72a <__stack+0x2cb>
	else if (__tmp > 65535)
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	3f ef       	ldi	r19, 0xFF	; 255
     664:	4f e7       	ldi	r20, 0x7F	; 127
     666:	57 e4       	ldi	r21, 0x47	; 71
     668:	6b 89       	ldd	r22, Y+19	; 0x13
     66a:	7c 89       	ldd	r23, Y+20	; 0x14
     66c:	8d 89       	ldd	r24, Y+21	; 0x15
     66e:	9e 89       	ldd	r25, Y+22	; 0x16
     670:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	0c f0       	brlt	.+2      	; 0x67a <__stack+0x21b>
     678:	46 c0       	rjmp	.+140    	; 0x706 <__stack+0x2a7>
		__ticks = (uint16_t) (__ms * 10.0);
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 e2       	ldi	r20, 0x20	; 32
     680:	51 e4       	ldi	r21, 0x41	; 65
     682:	6f 85       	ldd	r22, Y+15	; 0x0f
     684:	78 89       	ldd	r23, Y+16	; 0x10
     686:	89 89       	ldd	r24, Y+17	; 0x11
     688:	9a 89       	ldd	r25, Y+18	; 0x12
     68a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     68e:	e2 96       	adiw	r28, 0x32	; 50
     690:	6c af       	std	Y+60, r22	; 0x3c
     692:	7d af       	std	Y+61, r23	; 0x3d
     694:	8e af       	std	Y+62, r24	; 0x3e
     696:	9f af       	std	Y+63, r25	; 0x3f
     698:	e2 97       	sbiw	r28, 0x32	; 50
     69a:	e2 96       	adiw	r28, 0x32	; 50
     69c:	8c ad       	ldd	r24, Y+60	; 0x3c
     69e:	9d ad       	ldd	r25, Y+61	; 0x3d
     6a0:	ae ad       	ldd	r26, Y+62	; 0x3e
     6a2:	bf ad       	ldd	r27, Y+63	; 0x3f
     6a4:	e2 97       	sbiw	r28, 0x32	; 50
     6a6:	22 96       	adiw	r28, 0x02	; 2
     6a8:	8c af       	std	Y+60, r24	; 0x3c
     6aa:	9d af       	std	Y+61, r25	; 0x3d
     6ac:	ae af       	std	Y+62, r26	; 0x3e
     6ae:	bf af       	std	Y+63, r27	; 0x3f
     6b0:	22 97       	sbiw	r28, 0x02	; 2
     6b2:	22 96       	adiw	r28, 0x02	; 2
     6b4:	6c ad       	ldd	r22, Y+60	; 0x3c
     6b6:	7d ad       	ldd	r23, Y+61	; 0x3d
     6b8:	8e ad       	ldd	r24, Y+62	; 0x3e
     6ba:	9f ad       	ldd	r25, Y+63	; 0x3f
     6bc:	22 97       	sbiw	r28, 0x02	; 2
     6be:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     6c2:	e6 96       	adiw	r28, 0x36	; 54
     6c4:	6c af       	std	Y+60, r22	; 0x3c
     6c6:	7d af       	std	Y+61, r23	; 0x3d
     6c8:	8e af       	std	Y+62, r24	; 0x3e
     6ca:	9f af       	std	Y+63, r25	; 0x3f
     6cc:	e6 97       	sbiw	r28, 0x36	; 54
     6ce:	e4 96       	adiw	r28, 0x34	; 52
     6d0:	ae ad       	ldd	r26, Y+62	; 0x3e
     6d2:	bf ad       	ldd	r27, Y+63	; 0x3f
     6d4:	e4 97       	sbiw	r28, 0x34	; 52
     6d6:	b8 8f       	std	Y+24, r27	; 0x18
     6d8:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     6da:	10 c0       	rjmp	.+32     	; 0x6fc <__stack+0x29d>
     6dc:	88 ec       	ldi	r24, 0xC8	; 200
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	9a 8f       	std	Y+26, r25	; 0x1a
     6e2:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
     6e4:	89 8d       	ldd	r24, Y+25	; 0x19
     6e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <__stack+0x289>
     6ec:	9a 8f       	std	Y+26, r25	; 0x1a
     6ee:	89 8f       	std	Y+25, r24	; 0x19
}
     6f0:	00 00       	nop
			__ticks --;
     6f2:	8f 89       	ldd	r24, Y+23	; 0x17
     6f4:	98 8d       	ldd	r25, Y+24	; 0x18
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	98 8f       	std	Y+24, r25	; 0x18
     6fa:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
     6fc:	8f 89       	ldd	r24, Y+23	; 0x17
     6fe:	98 8d       	ldd	r25, Y+24	; 0x18
     700:	89 2b       	or	r24, r25
     702:	61 f7       	brne	.-40     	; 0x6dc <__stack+0x27d>
		return;
     704:	1d c0       	rjmp	.+58     	; 0x740 <__stack+0x2e1>
		__ticks = (uint16_t)__tmp;
     706:	6b 89       	ldd	r22, Y+19	; 0x13
     708:	7c 89       	ldd	r23, Y+20	; 0x14
     70a:	8d 89       	ldd	r24, Y+21	; 0x15
     70c:	9e 89       	ldd	r25, Y+22	; 0x16
     70e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     712:	ea 96       	adiw	r28, 0x3a	; 58
     714:	6c af       	std	Y+60, r22	; 0x3c
     716:	7d af       	std	Y+61, r23	; 0x3d
     718:	8e af       	std	Y+62, r24	; 0x3e
     71a:	9f af       	std	Y+63, r25	; 0x3f
     71c:	ea 97       	sbiw	r28, 0x3a	; 58
     71e:	e8 96       	adiw	r28, 0x38	; 56
     720:	ee ad       	ldd	r30, Y+62	; 0x3e
     722:	ff ad       	ldd	r31, Y+63	; 0x3f
     724:	e8 97       	sbiw	r28, 0x38	; 56
     726:	f8 8f       	std	Y+24, r31	; 0x18
     728:	ef 8b       	std	Y+23, r30	; 0x17
     72a:	8f 89       	ldd	r24, Y+23	; 0x17
     72c:	98 8d       	ldd	r25, Y+24	; 0x18
     72e:	9c 8f       	std	Y+28, r25	; 0x1c
     730:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
     732:	8b 8d       	ldd	r24, Y+27	; 0x1b
     734:	9c 8d       	ldd	r25, Y+28	; 0x1c
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <__stack+0x2d7>
     73a:	9c 8f       	std	Y+28, r25	; 0x1c
     73c:	8b 8f       	std	Y+27, r24	; 0x1b
}
     73e:	00 00       	nop
#ifdef LOWER_MODE_BITS
	DATA_OUT = ((command) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
     740:	82 e3       	ldi	r24, 0x32	; 50
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	dc 01       	movw	r26, r24
     746:	2c 91       	ld	r18, X
     748:	2f 7b       	andi	r18, 0xBF	; 191
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	a0 e8       	ldi	r26, 0x80	; 128
     754:	bf e3       	ldi	r27, 0x3F	; 63
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	9a 83       	std	Y+2, r25	; 0x02
     75a:	ab 83       	std	Y+3, r26	; 0x03
     75c:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	4a ef       	ldi	r20, 0xFA	; 250
     764:	54 e4       	ldi	r21, 0x44	; 68
     766:	69 81       	ldd	r22, Y+1	; 0x01
     768:	7a 81       	ldd	r23, Y+2	; 0x02
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	9c 81       	ldd	r25, Y+4	; 0x04
     76e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     772:	ee 96       	adiw	r28, 0x3e	; 62
     774:	6c af       	std	Y+60, r22	; 0x3c
     776:	7d af       	std	Y+61, r23	; 0x3d
     778:	8e af       	std	Y+62, r24	; 0x3e
     77a:	9f af       	std	Y+63, r25	; 0x3f
     77c:	ee 97       	sbiw	r28, 0x3e	; 62
     77e:	ee 96       	adiw	r28, 0x3e	; 62
     780:	8c ad       	ldd	r24, Y+60	; 0x3c
     782:	9d ad       	ldd	r25, Y+61	; 0x3d
     784:	ae ad       	ldd	r26, Y+62	; 0x3e
     786:	bf ad       	ldd	r27, Y+63	; 0x3f
     788:	ee 97       	sbiw	r28, 0x3e	; 62
     78a:	8d 83       	std	Y+5, r24	; 0x05
     78c:	9e 83       	std	Y+6, r25	; 0x06
     78e:	af 83       	std	Y+7, r26	; 0x07
     790:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	40 e8       	ldi	r20, 0x80	; 128
     798:	5f e3       	ldi	r21, 0x3F	; 63
     79a:	6d 81       	ldd	r22, Y+5	; 0x05
     79c:	7e 81       	ldd	r23, Y+6	; 0x06
     79e:	8f 81       	ldd	r24, Y+7	; 0x07
     7a0:	98 85       	ldd	r25, Y+8	; 0x08
     7a2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     7a6:	88 23       	and	r24, r24
     7a8:	2c f4       	brge	.+10     	; 0x7b4 <__stack+0x355>
		__ticks = 1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9a 87       	std	Y+10, r25	; 0x0a
     7b0:	89 87       	std	Y+9, r24	; 0x09
     7b2:	6d c0       	rjmp	.+218    	; 0x88e <__stack+0x42f>
	else if (__tmp > 65535)
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	3f ef       	ldi	r19, 0xFF	; 255
     7b8:	4f e7       	ldi	r20, 0x7F	; 127
     7ba:	57 e4       	ldi	r21, 0x47	; 71
     7bc:	6d 81       	ldd	r22, Y+5	; 0x05
     7be:	7e 81       	ldd	r23, Y+6	; 0x06
     7c0:	8f 81       	ldd	r24, Y+7	; 0x07
     7c2:	98 85       	ldd	r25, Y+8	; 0x08
     7c4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	0c f0       	brlt	.+2      	; 0x7ce <__stack+0x36f>
     7cc:	4a c0       	rjmp	.+148    	; 0x862 <__stack+0x403>
		__ticks = (uint16_t) (__ms * 10.0);
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e2       	ldi	r20, 0x20	; 32
     7d4:	51 e4       	ldi	r21, 0x41	; 65
     7d6:	69 81       	ldd	r22, Y+1	; 0x01
     7d8:	7a 81       	ldd	r23, Y+2	; 0x02
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
     7dc:	9c 81       	ldd	r25, Y+4	; 0x04
     7de:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     7e2:	c2 58       	subi	r28, 0x82	; 130
     7e4:	df 4f       	sbci	r29, 0xFF	; 255
     7e6:	68 83       	st	Y, r22
     7e8:	79 83       	std	Y+1, r23	; 0x01
     7ea:	8a 83       	std	Y+2, r24	; 0x02
     7ec:	9b 83       	std	Y+3, r25	; 0x03
     7ee:	ce 57       	subi	r28, 0x7E	; 126
     7f0:	d0 40       	sbci	r29, 0x00	; 0
     7f2:	c2 58       	subi	r28, 0x82	; 130
     7f4:	df 4f       	sbci	r29, 0xFF	; 255
     7f6:	88 81       	ld	r24, Y
     7f8:	99 81       	ldd	r25, Y+1	; 0x01
     7fa:	aa 81       	ldd	r26, Y+2	; 0x02
     7fc:	bb 81       	ldd	r27, Y+3	; 0x03
     7fe:	ce 57       	subi	r28, 0x7E	; 126
     800:	d0 40       	sbci	r29, 0x00	; 0
     802:	8a af       	std	Y+58, r24	; 0x3a
     804:	9b af       	std	Y+59, r25	; 0x3b
     806:	ac af       	std	Y+60, r26	; 0x3c
     808:	bd af       	std	Y+61, r27	; 0x3d
     80a:	6a ad       	ldd	r22, Y+58	; 0x3a
     80c:	7b ad       	ldd	r23, Y+59	; 0x3b
     80e:	8c ad       	ldd	r24, Y+60	; 0x3c
     810:	9d ad       	ldd	r25, Y+61	; 0x3d
     812:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     816:	ce 57       	subi	r28, 0x7E	; 126
     818:	df 4f       	sbci	r29, 0xFF	; 255
     81a:	68 83       	st	Y, r22
     81c:	79 83       	std	Y+1, r23	; 0x01
     81e:	8a 83       	std	Y+2, r24	; 0x02
     820:	9b 83       	std	Y+3, r25	; 0x03
     822:	c2 58       	subi	r28, 0x82	; 130
     824:	d0 40       	sbci	r29, 0x00	; 0
     826:	ce 57       	subi	r28, 0x7E	; 126
     828:	df 4f       	sbci	r29, 0xFF	; 255
     82a:	a8 81       	ld	r26, Y
     82c:	b9 81       	ldd	r27, Y+1	; 0x01
     82e:	c2 58       	subi	r28, 0x82	; 130
     830:	d0 40       	sbci	r29, 0x00	; 0
     832:	ba 87       	std	Y+10, r27	; 0x0a
     834:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     836:	10 c0       	rjmp	.+32     	; 0x858 <__stack+0x3f9>
     838:	88 ec       	ldi	r24, 0xC8	; 200
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	9c 87       	std	Y+12, r25	; 0x0c
     83e:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
     840:	8b 85       	ldd	r24, Y+11	; 0x0b
     842:	9c 85       	ldd	r25, Y+12	; 0x0c
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <__stack+0x3e5>
     848:	9c 87       	std	Y+12, r25	; 0x0c
     84a:	8b 87       	std	Y+11, r24	; 0x0b
}
     84c:	00 00       	nop
			__ticks --;
     84e:	89 85       	ldd	r24, Y+9	; 0x09
     850:	9a 85       	ldd	r25, Y+10	; 0x0a
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	9a 87       	std	Y+10, r25	; 0x0a
     856:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     858:	89 85       	ldd	r24, Y+9	; 0x09
     85a:	9a 85       	ldd	r25, Y+10	; 0x0a
     85c:	89 2b       	or	r24, r25
     85e:	61 f7       	brne	.-40     	; 0x838 <__stack+0x3d9>
		return;
     860:	21 c0       	rjmp	.+66     	; 0x8a4 <__stack+0x445>
		__ticks = (uint16_t)__tmp;
     862:	6d 81       	ldd	r22, Y+5	; 0x05
     864:	7e 81       	ldd	r23, Y+6	; 0x06
     866:	8f 81       	ldd	r24, Y+7	; 0x07
     868:	98 85       	ldd	r25, Y+8	; 0x08
     86a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     86e:	ca 57       	subi	r28, 0x7A	; 122
     870:	df 4f       	sbci	r29, 0xFF	; 255
     872:	68 83       	st	Y, r22
     874:	79 83       	std	Y+1, r23	; 0x01
     876:	8a 83       	std	Y+2, r24	; 0x02
     878:	9b 83       	std	Y+3, r25	; 0x03
     87a:	c6 58       	subi	r28, 0x86	; 134
     87c:	d0 40       	sbci	r29, 0x00	; 0
     87e:	ca 57       	subi	r28, 0x7A	; 122
     880:	df 4f       	sbci	r29, 0xFF	; 255
     882:	e8 81       	ld	r30, Y
     884:	f9 81       	ldd	r31, Y+1	; 0x01
     886:	c6 58       	subi	r28, 0x86	; 134
     888:	d0 40       	sbci	r29, 0x00	; 0
     88a:	fa 87       	std	Y+10, r31	; 0x0a
     88c:	e9 87       	std	Y+9, r30	; 0x09
     88e:	89 85       	ldd	r24, Y+9	; 0x09
     890:	9a 85       	ldd	r25, Y+10	; 0x0a
     892:	9e 87       	std	Y+14, r25	; 0x0e
     894:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
     896:	8d 85       	ldd	r24, Y+13	; 0x0d
     898:	9e 85       	ldd	r25, Y+14	; 0x0e
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <__stack+0x43b>
     89e:	9e 87       	std	Y+14, r25	; 0x0e
     8a0:	8d 87       	std	Y+13, r24	; 0x0d
}
     8a2:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
     8a4:	00 00       	nop
}
     8a6:	c7 57       	subi	r28, 0x77	; 119
     8a8:	df 4f       	sbci	r29, 0xFF	; 255
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <LCD_displayCharacter>:

/*
 * Function responsible for Display only One character on LCD
 */
void LCD_displayCharacter(uint8 data) {
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	c9 58       	subi	r28, 0x89	; 137
     8c4:	d1 09       	sbc	r29, r1
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	89 af       	std	Y+57, r24	; 0x39
	RS = SET; /* tell LCD that data which will send now is DATA */
     8d2:	82 e3       	ldi	r24, 0x32	; 50
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	dc 01       	movw	r26, r24
     8d8:	2c 91       	ld	r18, X
     8da:	20 61       	ori	r18, 0x10	; 16
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18
	RW = CLEAR; /* select write Mode on LCD */
     8e0:	82 e3       	ldi	r24, 0x32	; 50
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	dc 01       	movw	r26, r24
     8e6:	2c 91       	ld	r18, X
     8e8:	2f 7d       	andi	r18, 0xDF	; 223
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	a0 e8       	ldi	r26, 0x80	; 128
     8f4:	bf e3       	ldi	r27, 0x3F	; 63
     8f6:	8b a7       	std	Y+43, r24	; 0x2b
     8f8:	9c a7       	std	Y+44, r25	; 0x2c
     8fa:	ad a7       	std	Y+45, r26	; 0x2d
     8fc:	be a7       	std	Y+46, r27	; 0x2e
	__tmp = ((F_CPU) / 4e3) * __ms;
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	4a ef       	ldi	r20, 0xFA	; 250
     904:	54 e4       	ldi	r21, 0x44	; 68
     906:	6b a5       	ldd	r22, Y+43	; 0x2b
     908:	7c a5       	ldd	r23, Y+44	; 0x2c
     90a:	8d a5       	ldd	r24, Y+45	; 0x2d
     90c:	9e a5       	ldd	r25, Y+46	; 0x2e
     90e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     912:	2e 96       	adiw	r28, 0x0e	; 14
     914:	6c af       	std	Y+60, r22	; 0x3c
     916:	7d af       	std	Y+61, r23	; 0x3d
     918:	8e af       	std	Y+62, r24	; 0x3e
     91a:	9f af       	std	Y+63, r25	; 0x3f
     91c:	2e 97       	sbiw	r28, 0x0e	; 14
     91e:	2e 96       	adiw	r28, 0x0e	; 14
     920:	8c ad       	ldd	r24, Y+60	; 0x3c
     922:	9d ad       	ldd	r25, Y+61	; 0x3d
     924:	ae ad       	ldd	r26, Y+62	; 0x3e
     926:	bf ad       	ldd	r27, Y+63	; 0x3f
     928:	2e 97       	sbiw	r28, 0x0e	; 14
     92a:	8f a7       	std	Y+47, r24	; 0x2f
     92c:	98 ab       	std	Y+48, r25	; 0x30
     92e:	a9 ab       	std	Y+49, r26	; 0x31
     930:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e8       	ldi	r20, 0x80	; 128
     938:	5f e3       	ldi	r21, 0x3F	; 63
     93a:	6f a5       	ldd	r22, Y+47	; 0x2f
     93c:	78 a9       	ldd	r23, Y+48	; 0x30
     93e:	89 a9       	ldd	r24, Y+49	; 0x31
     940:	9a a9       	ldd	r25, Y+50	; 0x32
     942:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     946:	88 23       	and	r24, r24
     948:	2c f4       	brge	.+10     	; 0x954 <LCD_displayCharacter+0x9a>
		__ticks = 1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	9c ab       	std	Y+52, r25	; 0x34
     950:	8b ab       	std	Y+51, r24	; 0x33
     952:	65 c0       	rjmp	.+202    	; 0xa1e <LCD_displayCharacter+0x164>
	else if (__tmp > 65535)
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	3f ef       	ldi	r19, 0xFF	; 255
     958:	4f e7       	ldi	r20, 0x7F	; 127
     95a:	57 e4       	ldi	r21, 0x47	; 71
     95c:	6f a5       	ldd	r22, Y+47	; 0x2f
     95e:	78 a9       	ldd	r23, Y+48	; 0x30
     960:	89 a9       	ldd	r24, Y+49	; 0x31
     962:	9a a9       	ldd	r25, Y+50	; 0x32
     964:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
     968:	18 16       	cp	r1, r24
     96a:	0c f0       	brlt	.+2      	; 0x96e <LCD_displayCharacter+0xb4>
     96c:	46 c0       	rjmp	.+140    	; 0x9fa <LCD_displayCharacter+0x140>
		__ticks = (uint16_t) (__ms * 10.0);
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e2       	ldi	r20, 0x20	; 32
     974:	51 e4       	ldi	r21, 0x41	; 65
     976:	6b a5       	ldd	r22, Y+43	; 0x2b
     978:	7c a5       	ldd	r23, Y+44	; 0x2c
     97a:	8d a5       	ldd	r24, Y+45	; 0x2d
     97c:	9e a5       	ldd	r25, Y+46	; 0x2e
     97e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     982:	62 96       	adiw	r28, 0x12	; 18
     984:	6c af       	std	Y+60, r22	; 0x3c
     986:	7d af       	std	Y+61, r23	; 0x3d
     988:	8e af       	std	Y+62, r24	; 0x3e
     98a:	9f af       	std	Y+63, r25	; 0x3f
     98c:	62 97       	sbiw	r28, 0x12	; 18
     98e:	62 96       	adiw	r28, 0x12	; 18
     990:	8c ad       	ldd	r24, Y+60	; 0x3c
     992:	9d ad       	ldd	r25, Y+61	; 0x3d
     994:	ae ad       	ldd	r26, Y+62	; 0x3e
     996:	bf ad       	ldd	r27, Y+63	; 0x3f
     998:	62 97       	sbiw	r28, 0x12	; 18
     99a:	2a 96       	adiw	r28, 0x0a	; 10
     99c:	8c af       	std	Y+60, r24	; 0x3c
     99e:	9d af       	std	Y+61, r25	; 0x3d
     9a0:	ae af       	std	Y+62, r26	; 0x3e
     9a2:	bf af       	std	Y+63, r27	; 0x3f
     9a4:	2a 97       	sbiw	r28, 0x0a	; 10
     9a6:	2a 96       	adiw	r28, 0x0a	; 10
     9a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     9aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     9ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     9ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     9b0:	2a 97       	sbiw	r28, 0x0a	; 10
     9b2:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     9b6:	66 96       	adiw	r28, 0x16	; 22
     9b8:	6c af       	std	Y+60, r22	; 0x3c
     9ba:	7d af       	std	Y+61, r23	; 0x3d
     9bc:	8e af       	std	Y+62, r24	; 0x3e
     9be:	9f af       	std	Y+63, r25	; 0x3f
     9c0:	66 97       	sbiw	r28, 0x16	; 22
     9c2:	64 96       	adiw	r28, 0x14	; 20
     9c4:	ae ad       	ldd	r26, Y+62	; 0x3e
     9c6:	bf ad       	ldd	r27, Y+63	; 0x3f
     9c8:	64 97       	sbiw	r28, 0x14	; 20
     9ca:	bc ab       	std	Y+52, r27	; 0x34
     9cc:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
     9ce:	10 c0       	rjmp	.+32     	; 0x9f0 <LCD_displayCharacter+0x136>
     9d0:	88 ec       	ldi	r24, 0xC8	; 200
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	9e ab       	std	Y+54, r25	; 0x36
     9d6:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
     9d8:	8d a9       	ldd	r24, Y+53	; 0x35
     9da:	9e a9       	ldd	r25, Y+54	; 0x36
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	f1 f7       	brne	.-4      	; 0x9dc <LCD_displayCharacter+0x122>
     9e0:	9e ab       	std	Y+54, r25	; 0x36
     9e2:	8d ab       	std	Y+53, r24	; 0x35
}
     9e4:	00 00       	nop
			__ticks --;
     9e6:	8b a9       	ldd	r24, Y+51	; 0x33
     9e8:	9c a9       	ldd	r25, Y+52	; 0x34
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	9c ab       	std	Y+52, r25	; 0x34
     9ee:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
     9f0:	8b a9       	ldd	r24, Y+51	; 0x33
     9f2:	9c a9       	ldd	r25, Y+52	; 0x34
     9f4:	89 2b       	or	r24, r25
     9f6:	61 f7       	brne	.-40     	; 0x9d0 <LCD_displayCharacter+0x116>
		return;
     9f8:	1d c0       	rjmp	.+58     	; 0xa34 <LCD_displayCharacter+0x17a>
		__ticks = (uint16_t)__tmp;
     9fa:	6f a5       	ldd	r22, Y+47	; 0x2f
     9fc:	78 a9       	ldd	r23, Y+48	; 0x30
     9fe:	89 a9       	ldd	r24, Y+49	; 0x31
     a00:	9a a9       	ldd	r25, Y+50	; 0x32
     a02:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     a06:	6a 96       	adiw	r28, 0x1a	; 26
     a08:	6c af       	std	Y+60, r22	; 0x3c
     a0a:	7d af       	std	Y+61, r23	; 0x3d
     a0c:	8e af       	std	Y+62, r24	; 0x3e
     a0e:	9f af       	std	Y+63, r25	; 0x3f
     a10:	6a 97       	sbiw	r28, 0x1a	; 26
     a12:	68 96       	adiw	r28, 0x18	; 24
     a14:	ee ad       	ldd	r30, Y+62	; 0x3e
     a16:	ff ad       	ldd	r31, Y+63	; 0x3f
     a18:	68 97       	sbiw	r28, 0x18	; 24
     a1a:	fc ab       	std	Y+52, r31	; 0x34
     a1c:	eb ab       	std	Y+51, r30	; 0x33
     a1e:	8b a9       	ldd	r24, Y+51	; 0x33
     a20:	9c a9       	ldd	r25, Y+52	; 0x34
     a22:	98 af       	std	Y+56, r25	; 0x38
     a24:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
     a26:	8f a9       	ldd	r24, Y+55	; 0x37
     a28:	98 ad       	ldd	r25, Y+56	; 0x38
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <LCD_displayCharacter+0x170>
     a2e:	98 af       	std	Y+56, r25	; 0x38
     a30:	8f ab       	std	Y+55, r24	; 0x37
}
     a32:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
     a34:	82 e3       	ldi	r24, 0x32	; 50
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	dc 01       	movw	r26, r24
     a3a:	2c 91       	ld	r18, X
     a3c:	20 64       	ori	r18, 0x40	; 64
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a0 e8       	ldi	r26, 0x80	; 128
     a48:	bf e3       	ldi	r27, 0x3F	; 63
     a4a:	8d 8f       	std	Y+29, r24	; 0x1d
     a4c:	9e 8f       	std	Y+30, r25	; 0x1e
     a4e:	af 8f       	std	Y+31, r26	; 0x1f
     a50:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	4a ef       	ldi	r20, 0xFA	; 250
     a58:	54 e4       	ldi	r21, 0x44	; 68
     a5a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     a5c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     a5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a60:	98 a1       	ldd	r25, Y+32	; 0x20
     a62:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     a66:	6e 96       	adiw	r28, 0x1e	; 30
     a68:	6c af       	std	Y+60, r22	; 0x3c
     a6a:	7d af       	std	Y+61, r23	; 0x3d
     a6c:	8e af       	std	Y+62, r24	; 0x3e
     a6e:	9f af       	std	Y+63, r25	; 0x3f
     a70:	6e 97       	sbiw	r28, 0x1e	; 30
     a72:	6e 96       	adiw	r28, 0x1e	; 30
     a74:	8c ad       	ldd	r24, Y+60	; 0x3c
     a76:	9d ad       	ldd	r25, Y+61	; 0x3d
     a78:	ae ad       	ldd	r26, Y+62	; 0x3e
     a7a:	bf ad       	ldd	r27, Y+63	; 0x3f
     a7c:	6e 97       	sbiw	r28, 0x1e	; 30
     a7e:	89 a3       	std	Y+33, r24	; 0x21
     a80:	9a a3       	std	Y+34, r25	; 0x22
     a82:	ab a3       	std	Y+35, r26	; 0x23
     a84:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 e8       	ldi	r20, 0x80	; 128
     a8c:	5f e3       	ldi	r21, 0x3F	; 63
     a8e:	69 a1       	ldd	r22, Y+33	; 0x21
     a90:	7a a1       	ldd	r23, Y+34	; 0x22
     a92:	8b a1       	ldd	r24, Y+35	; 0x23
     a94:	9c a1       	ldd	r25, Y+36	; 0x24
     a96:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     a9a:	88 23       	and	r24, r24
     a9c:	2c f4       	brge	.+10     	; 0xaa8 <LCD_displayCharacter+0x1ee>
		__ticks = 1;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	9e a3       	std	Y+38, r25	; 0x26
     aa4:	8d a3       	std	Y+37, r24	; 0x25
     aa6:	65 c0       	rjmp	.+202    	; 0xb72 <LCD_displayCharacter+0x2b8>
	else if (__tmp > 65535)
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	3f ef       	ldi	r19, 0xFF	; 255
     aac:	4f e7       	ldi	r20, 0x7F	; 127
     aae:	57 e4       	ldi	r21, 0x47	; 71
     ab0:	69 a1       	ldd	r22, Y+33	; 0x21
     ab2:	7a a1       	ldd	r23, Y+34	; 0x22
     ab4:	8b a1       	ldd	r24, Y+35	; 0x23
     ab6:	9c a1       	ldd	r25, Y+36	; 0x24
     ab8:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
     abc:	18 16       	cp	r1, r24
     abe:	0c f0       	brlt	.+2      	; 0xac2 <LCD_displayCharacter+0x208>
     ac0:	46 c0       	rjmp	.+140    	; 0xb4e <LCD_displayCharacter+0x294>
		__ticks = (uint16_t) (__ms * 10.0);
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e2       	ldi	r20, 0x20	; 32
     ac8:	51 e4       	ldi	r21, 0x41	; 65
     aca:	6d 8d       	ldd	r22, Y+29	; 0x1d
     acc:	7e 8d       	ldd	r23, Y+30	; 0x1e
     ace:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ad0:	98 a1       	ldd	r25, Y+32	; 0x20
     ad2:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     ad6:	a2 96       	adiw	r28, 0x22	; 34
     ad8:	6c af       	std	Y+60, r22	; 0x3c
     ada:	7d af       	std	Y+61, r23	; 0x3d
     adc:	8e af       	std	Y+62, r24	; 0x3e
     ade:	9f af       	std	Y+63, r25	; 0x3f
     ae0:	a2 97       	sbiw	r28, 0x22	; 34
     ae2:	a2 96       	adiw	r28, 0x22	; 34
     ae4:	8c ad       	ldd	r24, Y+60	; 0x3c
     ae6:	9d ad       	ldd	r25, Y+61	; 0x3d
     ae8:	ae ad       	ldd	r26, Y+62	; 0x3e
     aea:	bf ad       	ldd	r27, Y+63	; 0x3f
     aec:	a2 97       	sbiw	r28, 0x22	; 34
     aee:	26 96       	adiw	r28, 0x06	; 6
     af0:	8c af       	std	Y+60, r24	; 0x3c
     af2:	9d af       	std	Y+61, r25	; 0x3d
     af4:	ae af       	std	Y+62, r26	; 0x3e
     af6:	bf af       	std	Y+63, r27	; 0x3f
     af8:	26 97       	sbiw	r28, 0x06	; 6
     afa:	26 96       	adiw	r28, 0x06	; 6
     afc:	6c ad       	ldd	r22, Y+60	; 0x3c
     afe:	7d ad       	ldd	r23, Y+61	; 0x3d
     b00:	8e ad       	ldd	r24, Y+62	; 0x3e
     b02:	9f ad       	ldd	r25, Y+63	; 0x3f
     b04:	26 97       	sbiw	r28, 0x06	; 6
     b06:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     b0a:	a6 96       	adiw	r28, 0x26	; 38
     b0c:	6c af       	std	Y+60, r22	; 0x3c
     b0e:	7d af       	std	Y+61, r23	; 0x3d
     b10:	8e af       	std	Y+62, r24	; 0x3e
     b12:	9f af       	std	Y+63, r25	; 0x3f
     b14:	a6 97       	sbiw	r28, 0x26	; 38
     b16:	a4 96       	adiw	r28, 0x24	; 36
     b18:	ae ad       	ldd	r26, Y+62	; 0x3e
     b1a:	bf ad       	ldd	r27, Y+63	; 0x3f
     b1c:	a4 97       	sbiw	r28, 0x24	; 36
     b1e:	be a3       	std	Y+38, r27	; 0x26
     b20:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
     b22:	10 c0       	rjmp	.+32     	; 0xb44 <LCD_displayCharacter+0x28a>
     b24:	88 ec       	ldi	r24, 0xC8	; 200
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	98 a7       	std	Y+40, r25	; 0x28
     b2a:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
     b2c:	8f a1       	ldd	r24, Y+39	; 0x27
     b2e:	98 a5       	ldd	r25, Y+40	; 0x28
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <LCD_displayCharacter+0x276>
     b34:	98 a7       	std	Y+40, r25	; 0x28
     b36:	8f a3       	std	Y+39, r24	; 0x27
}
     b38:	00 00       	nop
			__ticks --;
     b3a:	8d a1       	ldd	r24, Y+37	; 0x25
     b3c:	9e a1       	ldd	r25, Y+38	; 0x26
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	9e a3       	std	Y+38, r25	; 0x26
     b42:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
     b44:	8d a1       	ldd	r24, Y+37	; 0x25
     b46:	9e a1       	ldd	r25, Y+38	; 0x26
     b48:	89 2b       	or	r24, r25
     b4a:	61 f7       	brne	.-40     	; 0xb24 <LCD_displayCharacter+0x26a>
		return;
     b4c:	1d c0       	rjmp	.+58     	; 0xb88 <LCD_displayCharacter+0x2ce>
		__ticks = (uint16_t)__tmp;
     b4e:	69 a1       	ldd	r22, Y+33	; 0x21
     b50:	7a a1       	ldd	r23, Y+34	; 0x22
     b52:	8b a1       	ldd	r24, Y+35	; 0x23
     b54:	9c a1       	ldd	r25, Y+36	; 0x24
     b56:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     b5a:	aa 96       	adiw	r28, 0x2a	; 42
     b5c:	6c af       	std	Y+60, r22	; 0x3c
     b5e:	7d af       	std	Y+61, r23	; 0x3d
     b60:	8e af       	std	Y+62, r24	; 0x3e
     b62:	9f af       	std	Y+63, r25	; 0x3f
     b64:	aa 97       	sbiw	r28, 0x2a	; 42
     b66:	a8 96       	adiw	r28, 0x28	; 40
     b68:	ee ad       	ldd	r30, Y+62	; 0x3e
     b6a:	ff ad       	ldd	r31, Y+63	; 0x3f
     b6c:	a8 97       	sbiw	r28, 0x28	; 40
     b6e:	fe a3       	std	Y+38, r31	; 0x26
     b70:	ed a3       	std	Y+37, r30	; 0x25
     b72:	8d a1       	ldd	r24, Y+37	; 0x25
     b74:	9e a1       	ldd	r25, Y+38	; 0x26
     b76:	9a a7       	std	Y+42, r25	; 0x2a
     b78:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
     b7a:	89 a5       	ldd	r24, Y+41	; 0x29
     b7c:	9a a5       	ldd	r25, Y+42	; 0x2a
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <LCD_displayCharacter+0x2c4>
     b82:	9a a7       	std	Y+42, r25	; 0x2a
     b84:	89 a7       	std	Y+41, r24	; 0x29
}
     b86:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if(DATA_MODE ==8)
	DATA_OUT = data; /* send DATA to LCD to make order */
     b88:	85 e3       	ldi	r24, 0x35	; 53
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	29 ad       	ldd	r18, Y+57	; 0x39
     b8e:	dc 01       	movw	r26, r24
     b90:	2c 93       	st	X, r18
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	a0 e8       	ldi	r26, 0x80	; 128
     b98:	bf e3       	ldi	r27, 0x3F	; 63
     b9a:	8f 87       	std	Y+15, r24	; 0x0f
     b9c:	98 8b       	std	Y+16, r25	; 0x10
     b9e:	a9 8b       	std	Y+17, r26	; 0x11
     ba0:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	4a ef       	ldi	r20, 0xFA	; 250
     ba8:	54 e4       	ldi	r21, 0x44	; 68
     baa:	6f 85       	ldd	r22, Y+15	; 0x0f
     bac:	78 89       	ldd	r23, Y+16	; 0x10
     bae:	89 89       	ldd	r24, Y+17	; 0x11
     bb0:	9a 89       	ldd	r25, Y+18	; 0x12
     bb2:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     bb6:	ae 96       	adiw	r28, 0x2e	; 46
     bb8:	6c af       	std	Y+60, r22	; 0x3c
     bba:	7d af       	std	Y+61, r23	; 0x3d
     bbc:	8e af       	std	Y+62, r24	; 0x3e
     bbe:	9f af       	std	Y+63, r25	; 0x3f
     bc0:	ae 97       	sbiw	r28, 0x2e	; 46
     bc2:	ae 96       	adiw	r28, 0x2e	; 46
     bc4:	8c ad       	ldd	r24, Y+60	; 0x3c
     bc6:	9d ad       	ldd	r25, Y+61	; 0x3d
     bc8:	ae ad       	ldd	r26, Y+62	; 0x3e
     bca:	bf ad       	ldd	r27, Y+63	; 0x3f
     bcc:	ae 97       	sbiw	r28, 0x2e	; 46
     bce:	8b 8b       	std	Y+19, r24	; 0x13
     bd0:	9c 8b       	std	Y+20, r25	; 0x14
     bd2:	ad 8b       	std	Y+21, r26	; 0x15
     bd4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e8       	ldi	r20, 0x80	; 128
     bdc:	5f e3       	ldi	r21, 0x3F	; 63
     bde:	6b 89       	ldd	r22, Y+19	; 0x13
     be0:	7c 89       	ldd	r23, Y+20	; 0x14
     be2:	8d 89       	ldd	r24, Y+21	; 0x15
     be4:	9e 89       	ldd	r25, Y+22	; 0x16
     be6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     bea:	88 23       	and	r24, r24
     bec:	2c f4       	brge	.+10     	; 0xbf8 <LCD_displayCharacter+0x33e>
		__ticks = 1;
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	98 8f       	std	Y+24, r25	; 0x18
     bf4:	8f 8b       	std	Y+23, r24	; 0x17
     bf6:	65 c0       	rjmp	.+202    	; 0xcc2 <LCD_displayCharacter+0x408>
	else if (__tmp > 65535)
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	3f ef       	ldi	r19, 0xFF	; 255
     bfc:	4f e7       	ldi	r20, 0x7F	; 127
     bfe:	57 e4       	ldi	r21, 0x47	; 71
     c00:	6b 89       	ldd	r22, Y+19	; 0x13
     c02:	7c 89       	ldd	r23, Y+20	; 0x14
     c04:	8d 89       	ldd	r24, Y+21	; 0x15
     c06:	9e 89       	ldd	r25, Y+22	; 0x16
     c08:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
     c0c:	18 16       	cp	r1, r24
     c0e:	0c f0       	brlt	.+2      	; 0xc12 <LCD_displayCharacter+0x358>
     c10:	46 c0       	rjmp	.+140    	; 0xc9e <LCD_displayCharacter+0x3e4>
		__ticks = (uint16_t) (__ms * 10.0);
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e2       	ldi	r20, 0x20	; 32
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	6f 85       	ldd	r22, Y+15	; 0x0f
     c1c:	78 89       	ldd	r23, Y+16	; 0x10
     c1e:	89 89       	ldd	r24, Y+17	; 0x11
     c20:	9a 89       	ldd	r25, Y+18	; 0x12
     c22:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     c26:	e2 96       	adiw	r28, 0x32	; 50
     c28:	6c af       	std	Y+60, r22	; 0x3c
     c2a:	7d af       	std	Y+61, r23	; 0x3d
     c2c:	8e af       	std	Y+62, r24	; 0x3e
     c2e:	9f af       	std	Y+63, r25	; 0x3f
     c30:	e2 97       	sbiw	r28, 0x32	; 50
     c32:	e2 96       	adiw	r28, 0x32	; 50
     c34:	8c ad       	ldd	r24, Y+60	; 0x3c
     c36:	9d ad       	ldd	r25, Y+61	; 0x3d
     c38:	ae ad       	ldd	r26, Y+62	; 0x3e
     c3a:	bf ad       	ldd	r27, Y+63	; 0x3f
     c3c:	e2 97       	sbiw	r28, 0x32	; 50
     c3e:	22 96       	adiw	r28, 0x02	; 2
     c40:	8c af       	std	Y+60, r24	; 0x3c
     c42:	9d af       	std	Y+61, r25	; 0x3d
     c44:	ae af       	std	Y+62, r26	; 0x3e
     c46:	bf af       	std	Y+63, r27	; 0x3f
     c48:	22 97       	sbiw	r28, 0x02	; 2
     c4a:	22 96       	adiw	r28, 0x02	; 2
     c4c:	6c ad       	ldd	r22, Y+60	; 0x3c
     c4e:	7d ad       	ldd	r23, Y+61	; 0x3d
     c50:	8e ad       	ldd	r24, Y+62	; 0x3e
     c52:	9f ad       	ldd	r25, Y+63	; 0x3f
     c54:	22 97       	sbiw	r28, 0x02	; 2
     c56:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     c5a:	e6 96       	adiw	r28, 0x36	; 54
     c5c:	6c af       	std	Y+60, r22	; 0x3c
     c5e:	7d af       	std	Y+61, r23	; 0x3d
     c60:	8e af       	std	Y+62, r24	; 0x3e
     c62:	9f af       	std	Y+63, r25	; 0x3f
     c64:	e6 97       	sbiw	r28, 0x36	; 54
     c66:	e4 96       	adiw	r28, 0x34	; 52
     c68:	ae ad       	ldd	r26, Y+62	; 0x3e
     c6a:	bf ad       	ldd	r27, Y+63	; 0x3f
     c6c:	e4 97       	sbiw	r28, 0x34	; 52
     c6e:	b8 8f       	std	Y+24, r27	; 0x18
     c70:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     c72:	10 c0       	rjmp	.+32     	; 0xc94 <LCD_displayCharacter+0x3da>
     c74:	88 ec       	ldi	r24, 0xC8	; 200
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	9a 8f       	std	Y+26, r25	; 0x1a
     c7a:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
     c7c:	89 8d       	ldd	r24, Y+25	; 0x19
     c7e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <LCD_displayCharacter+0x3c6>
     c84:	9a 8f       	std	Y+26, r25	; 0x1a
     c86:	89 8f       	std	Y+25, r24	; 0x19
}
     c88:	00 00       	nop
			__ticks --;
     c8a:	8f 89       	ldd	r24, Y+23	; 0x17
     c8c:	98 8d       	ldd	r25, Y+24	; 0x18
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	98 8f       	std	Y+24, r25	; 0x18
     c92:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
     c94:	8f 89       	ldd	r24, Y+23	; 0x17
     c96:	98 8d       	ldd	r25, Y+24	; 0x18
     c98:	89 2b       	or	r24, r25
     c9a:	61 f7       	brne	.-40     	; 0xc74 <LCD_displayCharacter+0x3ba>
		return;
     c9c:	1d c0       	rjmp	.+58     	; 0xcd8 <LCD_displayCharacter+0x41e>
		__ticks = (uint16_t)__tmp;
     c9e:	6b 89       	ldd	r22, Y+19	; 0x13
     ca0:	7c 89       	ldd	r23, Y+20	; 0x14
     ca2:	8d 89       	ldd	r24, Y+21	; 0x15
     ca4:	9e 89       	ldd	r25, Y+22	; 0x16
     ca6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     caa:	ea 96       	adiw	r28, 0x3a	; 58
     cac:	6c af       	std	Y+60, r22	; 0x3c
     cae:	7d af       	std	Y+61, r23	; 0x3d
     cb0:	8e af       	std	Y+62, r24	; 0x3e
     cb2:	9f af       	std	Y+63, r25	; 0x3f
     cb4:	ea 97       	sbiw	r28, 0x3a	; 58
     cb6:	e8 96       	adiw	r28, 0x38	; 56
     cb8:	ee ad       	ldd	r30, Y+62	; 0x3e
     cba:	ff ad       	ldd	r31, Y+63	; 0x3f
     cbc:	e8 97       	sbiw	r28, 0x38	; 56
     cbe:	f8 8f       	std	Y+24, r31	; 0x18
     cc0:	ef 8b       	std	Y+23, r30	; 0x17
     cc2:	8f 89       	ldd	r24, Y+23	; 0x17
     cc4:	98 8d       	ldd	r25, Y+24	; 0x18
     cc6:	9c 8f       	std	Y+28, r25	; 0x1c
     cc8:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
     cca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ccc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <LCD_displayCharacter+0x414>
     cd2:	9c 8f       	std	Y+28, r25	; 0x1c
     cd4:	8b 8f       	std	Y+27, r24	; 0x1b
}
     cd6:	00 00       	nop
#ifdef LOWER_MODE_BITS
	DATA_OUT = ((data) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
     cd8:	82 e3       	ldi	r24, 0x32	; 50
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	dc 01       	movw	r26, r24
     cde:	2c 91       	ld	r18, X
     ce0:	2f 7b       	andi	r18, 0xBF	; 191
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e8       	ldi	r26, 0x80	; 128
     cec:	bf e3       	ldi	r27, 0x3F	; 63
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	ab 83       	std	Y+3, r26	; 0x03
     cf4:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	4a ef       	ldi	r20, 0xFA	; 250
     cfc:	54 e4       	ldi	r21, 0x44	; 68
     cfe:	69 81       	ldd	r22, Y+1	; 0x01
     d00:	7a 81       	ldd	r23, Y+2	; 0x02
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	9c 81       	ldd	r25, Y+4	; 0x04
     d06:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     d0a:	ee 96       	adiw	r28, 0x3e	; 62
     d0c:	6c af       	std	Y+60, r22	; 0x3c
     d0e:	7d af       	std	Y+61, r23	; 0x3d
     d10:	8e af       	std	Y+62, r24	; 0x3e
     d12:	9f af       	std	Y+63, r25	; 0x3f
     d14:	ee 97       	sbiw	r28, 0x3e	; 62
     d16:	ee 96       	adiw	r28, 0x3e	; 62
     d18:	8c ad       	ldd	r24, Y+60	; 0x3c
     d1a:	9d ad       	ldd	r25, Y+61	; 0x3d
     d1c:	ae ad       	ldd	r26, Y+62	; 0x3e
     d1e:	bf ad       	ldd	r27, Y+63	; 0x3f
     d20:	ee 97       	sbiw	r28, 0x3e	; 62
     d22:	8d 83       	std	Y+5, r24	; 0x05
     d24:	9e 83       	std	Y+6, r25	; 0x06
     d26:	af 83       	std	Y+7, r26	; 0x07
     d28:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e8       	ldi	r20, 0x80	; 128
     d30:	5f e3       	ldi	r21, 0x3F	; 63
     d32:	6d 81       	ldd	r22, Y+5	; 0x05
     d34:	7e 81       	ldd	r23, Y+6	; 0x06
     d36:	8f 81       	ldd	r24, Y+7	; 0x07
     d38:	98 85       	ldd	r25, Y+8	; 0x08
     d3a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     d3e:	88 23       	and	r24, r24
     d40:	2c f4       	brge	.+10     	; 0xd4c <LCD_displayCharacter+0x492>
		__ticks = 1;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9a 87       	std	Y+10, r25	; 0x0a
     d48:	89 87       	std	Y+9, r24	; 0x09
     d4a:	6d c0       	rjmp	.+218    	; 0xe26 <LCD_displayCharacter+0x56c>
	else if (__tmp > 65535)
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	3f ef       	ldi	r19, 0xFF	; 255
     d50:	4f e7       	ldi	r20, 0x7F	; 127
     d52:	57 e4       	ldi	r21, 0x47	; 71
     d54:	6d 81       	ldd	r22, Y+5	; 0x05
     d56:	7e 81       	ldd	r23, Y+6	; 0x06
     d58:	8f 81       	ldd	r24, Y+7	; 0x07
     d5a:	98 85       	ldd	r25, Y+8	; 0x08
     d5c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
     d60:	18 16       	cp	r1, r24
     d62:	0c f0       	brlt	.+2      	; 0xd66 <LCD_displayCharacter+0x4ac>
     d64:	4a c0       	rjmp	.+148    	; 0xdfa <LCD_displayCharacter+0x540>
		__ticks = (uint16_t) (__ms * 10.0);
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e2       	ldi	r20, 0x20	; 32
     d6c:	51 e4       	ldi	r21, 0x41	; 65
     d6e:	69 81       	ldd	r22, Y+1	; 0x01
     d70:	7a 81       	ldd	r23, Y+2	; 0x02
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     d7a:	c2 58       	subi	r28, 0x82	; 130
     d7c:	df 4f       	sbci	r29, 0xFF	; 255
     d7e:	68 83       	st	Y, r22
     d80:	79 83       	std	Y+1, r23	; 0x01
     d82:	8a 83       	std	Y+2, r24	; 0x02
     d84:	9b 83       	std	Y+3, r25	; 0x03
     d86:	ce 57       	subi	r28, 0x7E	; 126
     d88:	d0 40       	sbci	r29, 0x00	; 0
     d8a:	c2 58       	subi	r28, 0x82	; 130
     d8c:	df 4f       	sbci	r29, 0xFF	; 255
     d8e:	88 81       	ld	r24, Y
     d90:	99 81       	ldd	r25, Y+1	; 0x01
     d92:	aa 81       	ldd	r26, Y+2	; 0x02
     d94:	bb 81       	ldd	r27, Y+3	; 0x03
     d96:	ce 57       	subi	r28, 0x7E	; 126
     d98:	d0 40       	sbci	r29, 0x00	; 0
     d9a:	8a af       	std	Y+58, r24	; 0x3a
     d9c:	9b af       	std	Y+59, r25	; 0x3b
     d9e:	ac af       	std	Y+60, r26	; 0x3c
     da0:	bd af       	std	Y+61, r27	; 0x3d
     da2:	6a ad       	ldd	r22, Y+58	; 0x3a
     da4:	7b ad       	ldd	r23, Y+59	; 0x3b
     da6:	8c ad       	ldd	r24, Y+60	; 0x3c
     da8:	9d ad       	ldd	r25, Y+61	; 0x3d
     daa:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     dae:	ce 57       	subi	r28, 0x7E	; 126
     db0:	df 4f       	sbci	r29, 0xFF	; 255
     db2:	68 83       	st	Y, r22
     db4:	79 83       	std	Y+1, r23	; 0x01
     db6:	8a 83       	std	Y+2, r24	; 0x02
     db8:	9b 83       	std	Y+3, r25	; 0x03
     dba:	c2 58       	subi	r28, 0x82	; 130
     dbc:	d0 40       	sbci	r29, 0x00	; 0
     dbe:	ce 57       	subi	r28, 0x7E	; 126
     dc0:	df 4f       	sbci	r29, 0xFF	; 255
     dc2:	a8 81       	ld	r26, Y
     dc4:	b9 81       	ldd	r27, Y+1	; 0x01
     dc6:	c2 58       	subi	r28, 0x82	; 130
     dc8:	d0 40       	sbci	r29, 0x00	; 0
     dca:	ba 87       	std	Y+10, r27	; 0x0a
     dcc:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     dce:	10 c0       	rjmp	.+32     	; 0xdf0 <LCD_displayCharacter+0x536>
     dd0:	88 ec       	ldi	r24, 0xC8	; 200
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9c 87       	std	Y+12, r25	; 0x0c
     dd6:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
     dd8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dda:	9c 85       	ldd	r25, Y+12	; 0x0c
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <LCD_displayCharacter+0x522>
     de0:	9c 87       	std	Y+12, r25	; 0x0c
     de2:	8b 87       	std	Y+11, r24	; 0x0b
}
     de4:	00 00       	nop
			__ticks --;
     de6:	89 85       	ldd	r24, Y+9	; 0x09
     de8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	9a 87       	std	Y+10, r25	; 0x0a
     dee:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     df0:	89 85       	ldd	r24, Y+9	; 0x09
     df2:	9a 85       	ldd	r25, Y+10	; 0x0a
     df4:	89 2b       	or	r24, r25
     df6:	61 f7       	brne	.-40     	; 0xdd0 <LCD_displayCharacter+0x516>
		return;
     df8:	21 c0       	rjmp	.+66     	; 0xe3c <LCD_displayCharacter+0x582>
		__ticks = (uint16_t)__tmp;
     dfa:	6d 81       	ldd	r22, Y+5	; 0x05
     dfc:	7e 81       	ldd	r23, Y+6	; 0x06
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	98 85       	ldd	r25, Y+8	; 0x08
     e02:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     e06:	ca 57       	subi	r28, 0x7A	; 122
     e08:	df 4f       	sbci	r29, 0xFF	; 255
     e0a:	68 83       	st	Y, r22
     e0c:	79 83       	std	Y+1, r23	; 0x01
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	9b 83       	std	Y+3, r25	; 0x03
     e12:	c6 58       	subi	r28, 0x86	; 134
     e14:	d0 40       	sbci	r29, 0x00	; 0
     e16:	ca 57       	subi	r28, 0x7A	; 122
     e18:	df 4f       	sbci	r29, 0xFF	; 255
     e1a:	e8 81       	ld	r30, Y
     e1c:	f9 81       	ldd	r31, Y+1	; 0x01
     e1e:	c6 58       	subi	r28, 0x86	; 134
     e20:	d0 40       	sbci	r29, 0x00	; 0
     e22:	fa 87       	std	Y+10, r31	; 0x0a
     e24:	e9 87       	std	Y+9, r30	; 0x09
     e26:	89 85       	ldd	r24, Y+9	; 0x09
     e28:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2a:	9e 87       	std	Y+14, r25	; 0x0e
     e2c:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
     e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e30:	9e 85       	ldd	r25, Y+14	; 0x0e
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <LCD_displayCharacter+0x578>
     e36:	9e 87       	std	Y+14, r25	; 0x0e
     e38:	8d 87       	std	Y+13, r24	; 0x0d
}
     e3a:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
     e3c:	00 00       	nop
}
     e3e:	c7 57       	subi	r28, 0x77	; 119
     e40:	df 4f       	sbci	r29, 0xFF	; 255
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <LCD_displayString>:

/*
 * Function responsible for Display more One character on LCD
 */
void LCD_displayString(const char *Str) {
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	00 d0       	rcall	.+0      	; 0xe58 <LCD_displayString+0x6>
     e58:	0f 92       	push	r0
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	9b 83       	std	Y+3, r25	; 0x03
     e60:	8a 83       	std	Y+2, r24	; 0x02
		LCD_displayCharacter(*Str);
		Str++;
	}
	************************************************************/

	 uint8 i = 0;
     e62:	19 82       	std	Y+1, r1	; 0x01
	 while(Str[i] != '\0')
     e64:	0e c0       	rjmp	.+28     	; 0xe82 <LCD_displayString+0x30>
	 {
	 LCD_displayCharacter(Str[i]);
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	2a 81       	ldd	r18, Y+2	; 0x02
     e6e:	3b 81       	ldd	r19, Y+3	; 0x03
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	fc 01       	movw	r30, r24
     e76:	80 81       	ld	r24, Z
     e78:	0e 94 5d 04 	call	0x8ba	; 0x8ba <LCD_displayCharacter>
	 i++;
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	89 83       	std	Y+1, r24	; 0x01
	 while(Str[i] != '\0')
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	2a 81       	ldd	r18, Y+2	; 0x02
     e8a:	3b 81       	ldd	r19, Y+3	; 0x03
     e8c:	82 0f       	add	r24, r18
     e8e:	93 1f       	adc	r25, r19
     e90:	fc 01       	movw	r30, r24
     e92:	80 81       	ld	r24, Z
     e94:	88 23       	and	r24, r24
     e96:	39 f7       	brne	.-50     	; 0xe66 <LCD_displayString+0x14>
	 }
	return;
     e98:	00 00       	nop

}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <LCD_init>:

/*
 * Function responsible to initialize LCD pins and mode .... etc .
 */
void LCD_init(void) {
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	a2 97       	sbiw	r28, 0x22	; 34
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
	RS_DIR = SET; /* select RS pin output pin */
     eba:	81 e3       	ldi	r24, 0x31	; 49
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	dc 01       	movw	r26, r24
     ec0:	2c 91       	ld	r18, X
     ec2:	20 61       	ori	r18, 0x10	; 16
     ec4:	fc 01       	movw	r30, r24
     ec6:	20 83       	st	Z, r18
	RW_DIR = SET; /* select RW pin output pin */
     ec8:	81 e3       	ldi	r24, 0x31	; 49
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	dc 01       	movw	r26, r24
     ece:	2c 91       	ld	r18, X
     ed0:	20 62       	ori	r18, 0x20	; 32
     ed2:	fc 01       	movw	r30, r24
     ed4:	20 83       	st	Z, r18
	E_DIR = SET; /* select Enable pin output pin */
     ed6:	81 e3       	ldi	r24, 0x31	; 49
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	dc 01       	movw	r26, r24
     edc:	2c 91       	ld	r18, X
     ede:	20 64       	ori	r18, 0x40	; 64
     ee0:	fc 01       	movw	r30, r24
     ee2:	20 83       	st	Z, r18
#if (DATA_MODE == 8)
	DATA_DIR = 0xFF; /* select LCD DATA PORT Output pin */
     ee4:	84 e3       	ldi	r24, 0x34	; 52
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	2f ef       	ldi	r18, 0xFF	; 255
     eea:	dc 01       	movw	r26, r24
     eec:	2c 93       	st	X, r18
	/* LCD Configuration Mode of number of DATA line = 8 lines */
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
     eee:	88 e3       	ldi	r24, 0x38	; 56
     ef0:	0e 94 91 01 	call	0x322	; 0x322 <LCD_sendCommand>

#ifdef LOWER_MODE_BITS
	DATA_DIR |= 0x0F; /* select first 4 bits as a output pins */
#endif
#endif
	LCD_sendCommand(CURSOR_OFF); /* hide cursor from LCD */
     ef4:	8c e0       	ldi	r24, 0x0C	; 12
     ef6:	0e 94 91 01 	call	0x322	; 0x322 <LCD_sendCommand>
	LCD_sendCommand(AUTO_INCREMENT); /* hide cursor from LCD */
     efa:	86 e0       	ldi	r24, 0x06	; 6
     efc:	0e 94 91 01 	call	0x322	; 0x322 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	0e 94 91 01 	call	0x322	; 0x322 <LCD_sendCommand>
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	a0 e0       	ldi	r26, 0x00	; 0
     f0c:	b0 e4       	ldi	r27, 0x40	; 64
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	ab 83       	std	Y+3, r26	; 0x03
     f14:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	4a ef       	ldi	r20, 0xFA	; 250
     f1c:	54 e4       	ldi	r21, 0x44	; 68
     f1e:	69 81       	ldd	r22, Y+1	; 0x01
     f20:	7a 81       	ldd	r23, Y+2	; 0x02
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     f2a:	6b 8b       	std	Y+19, r22	; 0x13
     f2c:	7c 8b       	std	Y+20, r23	; 0x14
     f2e:	8d 8b       	std	Y+21, r24	; 0x15
     f30:	9e 8b       	std	Y+22, r25	; 0x16
     f32:	8b 89       	ldd	r24, Y+19	; 0x13
     f34:	9c 89       	ldd	r25, Y+20	; 0x14
     f36:	ad 89       	ldd	r26, Y+21	; 0x15
     f38:	be 89       	ldd	r27, Y+22	; 0x16
     f3a:	8d 83       	std	Y+5, r24	; 0x05
     f3c:	9e 83       	std	Y+6, r25	; 0x06
     f3e:	af 83       	std	Y+7, r26	; 0x07
     f40:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e8       	ldi	r20, 0x80	; 128
     f48:	5f e3       	ldi	r21, 0x3F	; 63
     f4a:	6d 81       	ldd	r22, Y+5	; 0x05
     f4c:	7e 81       	ldd	r23, Y+6	; 0x06
     f4e:	8f 81       	ldd	r24, Y+7	; 0x07
     f50:	98 85       	ldd	r25, Y+8	; 0x08
     f52:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     f56:	88 23       	and	r24, r24
     f58:	2c f4       	brge	.+10     	; 0xf64 <LCD_init+0xbe>
		__ticks = 1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9a 87       	std	Y+10, r25	; 0x0a
     f60:	89 87       	std	Y+9, r24	; 0x09
     f62:	54 c0       	rjmp	.+168    	; 0x100c <LCD_init+0x166>
	else if (__tmp > 65535)
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	3f ef       	ldi	r19, 0xFF	; 255
     f68:	4f e7       	ldi	r20, 0x7F	; 127
     f6a:	57 e4       	ldi	r21, 0x47	; 71
     f6c:	6d 81       	ldd	r22, Y+5	; 0x05
     f6e:	7e 81       	ldd	r23, Y+6	; 0x06
     f70:	8f 81       	ldd	r24, Y+7	; 0x07
     f72:	98 85       	ldd	r25, Y+8	; 0x08
     f74:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
     f78:	18 16       	cp	r1, r24
     f7a:	d4 f5       	brge	.+116    	; 0xff0 <LCD_init+0x14a>
		__ticks = (uint16_t) (__ms * 10.0);
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e2       	ldi	r20, 0x20	; 32
     f82:	51 e4       	ldi	r21, 0x41	; 65
     f84:	69 81       	ldd	r22, Y+1	; 0x01
     f86:	7a 81       	ldd	r23, Y+2	; 0x02
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
     f90:	6f 8b       	std	Y+23, r22	; 0x17
     f92:	78 8f       	std	Y+24, r23	; 0x18
     f94:	89 8f       	std	Y+25, r24	; 0x19
     f96:	9a 8f       	std	Y+26, r25	; 0x1a
     f98:	8f 89       	ldd	r24, Y+23	; 0x17
     f9a:	98 8d       	ldd	r25, Y+24	; 0x18
     f9c:	a9 8d       	ldd	r26, Y+25	; 0x19
     f9e:	ba 8d       	ldd	r27, Y+26	; 0x1a
     fa0:	8f 87       	std	Y+15, r24	; 0x0f
     fa2:	98 8b       	std	Y+16, r25	; 0x10
     fa4:	a9 8b       	std	Y+17, r26	; 0x11
     fa6:	ba 8b       	std	Y+18, r27	; 0x12
     fa8:	6f 85       	ldd	r22, Y+15	; 0x0f
     faa:	78 89       	ldd	r23, Y+16	; 0x10
     fac:	89 89       	ldd	r24, Y+17	; 0x11
     fae:	9a 89       	ldd	r25, Y+18	; 0x12
     fb0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     fb4:	6b 8f       	std	Y+27, r22	; 0x1b
     fb6:	7c 8f       	std	Y+28, r23	; 0x1c
     fb8:	8d 8f       	std	Y+29, r24	; 0x1d
     fba:	9e 8f       	std	Y+30, r25	; 0x1e
     fbc:	ab 8d       	ldd	r26, Y+27	; 0x1b
     fbe:	bc 8d       	ldd	r27, Y+28	; 0x1c
     fc0:	ba 87       	std	Y+10, r27	; 0x0a
     fc2:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     fc4:	10 c0       	rjmp	.+32     	; 0xfe6 <LCD_init+0x140>
     fc6:	88 ec       	ldi	r24, 0xC8	; 200
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	9c 87       	std	Y+12, r25	; 0x0c
     fcc:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
     fce:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd0:	9c 85       	ldd	r25, Y+12	; 0x0c
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <LCD_init+0x12c>
     fd6:	9c 87       	std	Y+12, r25	; 0x0c
     fd8:	8b 87       	std	Y+11, r24	; 0x0b
}
     fda:	00 00       	nop
			__ticks --;
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	9a 87       	std	Y+10, r25	; 0x0a
     fe4:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	89 2b       	or	r24, r25
     fec:	61 f7       	brne	.-40     	; 0xfc6 <LCD_init+0x120>
		return;
     fee:	19 c0       	rjmp	.+50     	; 0x1022 <LCD_init+0x17c>
		__ticks = (uint16_t)__tmp;
     ff0:	6d 81       	ldd	r22, Y+5	; 0x05
     ff2:	7e 81       	ldd	r23, Y+6	; 0x06
     ff4:	8f 81       	ldd	r24, Y+7	; 0x07
     ff6:	98 85       	ldd	r25, Y+8	; 0x08
     ff8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     ffc:	6f 8f       	std	Y+31, r22	; 0x1f
     ffe:	78 a3       	std	Y+32, r23	; 0x20
    1000:	89 a3       	std	Y+33, r24	; 0x21
    1002:	9a a3       	std	Y+34, r25	; 0x22
    1004:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1006:	f8 a1       	ldd	r31, Y+32	; 0x20
    1008:	fa 87       	std	Y+10, r31	; 0x0a
    100a:	e9 87       	std	Y+9, r30	; 0x09
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	9e 87       	std	Y+14, r25	; 0x0e
    1012:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    1014:	8d 85       	ldd	r24, Y+13	; 0x0d
    1016:	9e 85       	ldd	r25, Y+14	; 0x0e
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <LCD_init+0x172>
    101c:	9e 87       	std	Y+14, r25	; 0x0e
    101e:	8d 87       	std	Y+13, r24	; 0x0d
}
    1020:	00 00       	nop
	_delay_ms(2);
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    1022:	80 e8       	ldi	r24, 0x80	; 128
    1024:	0e 94 91 01 	call	0x322	; 0x322 <LCD_sendCommand>
	return;
    1028:	00 00       	nop
}
    102a:	a2 96       	adiw	r28, 0x22	; 34
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <LCD_clearScreen>:

/*
 * Function responsible to send clear command to LCD
 */
void LCD_clearScreen(void) {
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	0e 94 91 01 	call	0x322	; 0x322 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	0e 94 91 01 	call	0x322	; 0x322 <LCD_sendCommand>
	return;
    1050:	00 00       	nop
}
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <LCD_displayStringRowColumn>:

/*
 * Function responsible for Display more One character on LCD & select place on screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	00 d0       	rcall	.+0      	; 0x105e <LCD_displayStringRowColumn+0x6>
    105e:	00 d0       	rcall	.+0      	; 0x1060 <LCD_displayStringRowColumn+0x8>
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	6a 83       	std	Y+2, r22	; 0x02
    1068:	5c 83       	std	Y+4, r21	; 0x04
    106a:	4b 83       	std	Y+3, r20	; 0x03
	/* call LCD_goToRowColumn function to select cursor location */
	LCD_goToRowColumn(row, col);
    106c:	6a 81       	ldd	r22, Y+2	; 0x02
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	0e 94 46 08 	call	0x108c	; 0x108c <LCD_goToRowColumn>
	/* call LCD_displayString function to display string on LCD */
	LCD_displayString(Str);
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	0e 94 29 07 	call	0xe52	; 0xe52 <LCD_displayString>
	return;
    107c:	00 00       	nop
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <LCD_goToRowColumn>:

/*
 * Function responsible to select place on screen
 */
void LCD_goToRowColumn(uint8 row, uint8 col) {
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	00 d0       	rcall	.+0      	; 0x1092 <LCD_goToRowColumn+0x6>
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	8a 83       	std	Y+2, r24	; 0x02
    109a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch (row) {
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	83 30       	cpi	r24, 0x03	; 3
    10a4:	91 05       	cpc	r25, r1
    10a6:	d1 f0       	breq	.+52     	; 0x10dc <LCD_goToRowColumn+0x50>
    10a8:	84 30       	cpi	r24, 0x04	; 4
    10aa:	91 05       	cpc	r25, r1
    10ac:	dc f4       	brge	.+54     	; 0x10e4 <LCD_goToRowColumn+0x58>
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	91 05       	cpc	r25, r1
    10b2:	81 f0       	breq	.+32     	; 0x10d4 <LCD_goToRowColumn+0x48>
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	ac f4       	brge	.+42     	; 0x10e4 <LCD_goToRowColumn+0x58>
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	19 f0       	breq	.+6      	; 0x10c4 <LCD_goToRowColumn+0x38>
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	29 f0       	breq	.+10     	; 0x10cc <LCD_goToRowColumn+0x40>
    10c2:	10 c0       	rjmp	.+32     	; 0x10e4 <LCD_goToRowColumn+0x58>
	case 0:
		address = 0x80 | col; /* first address in first line in LCD = 0x00 */
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	80 68       	ori	r24, 0x80	; 128
    10c8:	89 83       	std	Y+1, r24	; 0x01
		break;
    10ca:	0c c0       	rjmp	.+24     	; 0x10e4 <LCD_goToRowColumn+0x58>
	case 1:
		address = col | 0xC0; /* first address in second line in LCD = 0x40 */
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	80 6c       	ori	r24, 0xC0	; 192
    10d0:	89 83       	std	Y+1, r24	; 0x01
		break;
    10d2:	08 c0       	rjmp	.+16     	; 0x10e4 <LCD_goToRowColumn+0x58>
	case 2:
		address = col | 0x10; /* first address in 3th line in LCD = 0x10 */
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	80 61       	ori	r24, 0x10	; 16
    10d8:	89 83       	std	Y+1, r24	; 0x01
		break;
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <LCD_goToRowColumn+0x58>
	case 3:
		address = col | 0x50; /* first address in 4th line in LCD = 0x50 */
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	80 65       	ori	r24, 0x50	; 80
    10e0:	89 83       	std	Y+1, r24	; 0x01
		break;
    10e2:	00 00       	nop
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0x80+Address */
	LCD_sendCommand(address | CURSOR_HOME_LOCATION);
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	80 68       	ori	r24, 0x80	; 128
    10e8:	0e 94 91 01 	call	0x322	; 0x322 <LCD_sendCommand>
}
    10ec:	00 00       	nop
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <LCD_intgerToString>:

/*
 * Function that transform number to string and display to LCD
 */
void LCD_intgerToString(int data) {
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	62 97       	sbiw	r28, 0x12	; 18
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	9a 8b       	std	Y+18, r25	; 0x12
    1110:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data, buff, 10); /* 10 for decimal */
    1112:	89 89       	ldd	r24, Y+17	; 0x11
    1114:	9a 89       	ldd	r25, Y+18	; 0x12
    1116:	4a e0       	ldi	r20, 0x0A	; 10
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	9e 01       	movw	r18, r28
    111c:	2f 5f       	subi	r18, 0xFF	; 255
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	b9 01       	movw	r22, r18
    1122:	0e 94 cf 10 	call	0x219e	; 0x219e <itoa>
	LCD_displayString(buff);
    1126:	ce 01       	movw	r24, r28
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	0e 94 29 07 	call	0xe52	; 0xe52 <LCD_displayString>
}
    112e:	00 00       	nop
    1130:	62 96       	adiw	r28, 0x12	; 18
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <LCD_creatCustomChar>:

/*
 * Function that Create Custom Character in CGRAM
 */
void LCD_creatCustomChar(uint8 loc, uint8 *msg) {
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	00 d0       	rcall	.+0      	; 0x1148 <LCD_creatCustomChar+0x6>
    1148:	00 d0       	rcall	.+0      	; 0x114a <LCD_creatCustomChar+0x8>
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	8a 83       	std	Y+2, r24	; 0x02
    1150:	7c 83       	std	Y+4, r23	; 0x04
    1152:	6b 83       	std	Y+3, r22	; 0x03
	uint8 i;
	if (loc < 8) {
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	88 30       	cpi	r24, 0x08	; 8
    1158:	d0 f4       	brcc	.+52     	; 0x118e <LCD_creatCustomChar+0x4c>
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	88 0f       	add	r24, r24
    115e:	88 0f       	add	r24, r24
    1160:	88 0f       	add	r24, r24
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	0e 94 91 01 	call	0x322	; 0x322 <LCD_sendCommand>
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    1168:	19 82       	std	Y+1, r1	; 0x01
    116a:	0e c0       	rjmp	.+28     	; 0x1188 <LCD_creatCustomChar+0x46>
			LCD_displayCustomChar(msg[i]);
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	2b 81       	ldd	r18, Y+3	; 0x03
    1174:	3c 81       	ldd	r19, Y+4	; 0x04
    1176:	82 0f       	add	r24, r18
    1178:	93 1f       	adc	r25, r19
    117a:	fc 01       	movw	r30, r24
    117c:	80 81       	ld	r24, Z
    117e:	0e 94 cf 08 	call	0x119e	; 0x119e <LCD_displayCustomChar>
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	8f 5f       	subi	r24, 0xFF	; 255
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	88 30       	cpi	r24, 0x08	; 8
    118c:	78 f3       	brcs	.-34     	; 0x116c <LCD_creatCustomChar+0x2a>
		}
	}
}
    118e:	00 00       	nop
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <LCD_displayCustomChar>:

/*
 * Function that Display Custom Character in CGRAM
 */
void LCD_displayCustomChar(uint8 char_data) /* LCD data write function */
{
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	cf 56       	subi	r28, 0x6F	; 111
    11a8:	d1 09       	sbc	r29, r1
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	8f a7       	std	Y+47, r24	; 0x2f

#if(DATA_MODE ==8)
	DATA_OUT = char_data; /* send DATA to LCD to make order */
    11b6:	85 e3       	ldi	r24, 0x35	; 53
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	2f a5       	ldd	r18, Y+47	; 0x2f
    11bc:	dc 01       	movw	r26, r24
    11be:	2c 93       	st	X, r18

#ifdef LOWER_MODE_BITS
	DATA_OUT = ((char_data) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	RS = SET;/* RS=1 Data reg. */
    11c0:	82 e3       	ldi	r24, 0x32	; 50
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 81       	ld	r18, Z
    11c8:	20 61       	ori	r18, 0x10	; 16
    11ca:	dc 01       	movw	r26, r24
    11cc:	2c 93       	st	X, r18
	RW = CLEAR; /* RW=0 write operation */
    11ce:	82 e3       	ldi	r24, 0x32	; 50
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 81       	ld	r18, Z
    11d6:	2f 7d       	andi	r18, 0xDF	; 223
    11d8:	dc 01       	movw	r26, r24
    11da:	2c 93       	st	X, r18
	E = SET; /* Enable Pulse */
    11dc:	82 e3       	ldi	r24, 0x32	; 50
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	fc 01       	movw	r30, r24
    11e2:	20 81       	ld	r18, Z
    11e4:	20 64       	ori	r18, 0x40	; 64
    11e6:	dc 01       	movw	r26, r24
    11e8:	2c 93       	st	X, r18
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a0 e8       	ldi	r26, 0x80	; 128
    11f0:	bf e3       	ldi	r27, 0x3F	; 63
    11f2:	8f 87       	std	Y+15, r24	; 0x0f
    11f4:	98 8b       	std	Y+16, r25	; 0x10
    11f6:	a9 8b       	std	Y+17, r26	; 0x11
    11f8:	ba 8b       	std	Y+18, r27	; 0x12
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    11fa:	2b ea       	ldi	r18, 0xAB	; 171
    11fc:	3a ea       	ldi	r19, 0xAA	; 170
    11fe:	4a e2       	ldi	r20, 0x2A	; 42
    1200:	50 e4       	ldi	r21, 0x40	; 64
    1202:	6f 85       	ldd	r22, Y+15	; 0x0f
    1204:	78 89       	ldd	r23, Y+16	; 0x10
    1206:	89 89       	ldd	r24, Y+17	; 0x11
    1208:	9a 89       	ldd	r25, Y+18	; 0x12
    120a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
    120e:	68 af       	std	Y+56, r22	; 0x38
    1210:	79 af       	std	Y+57, r23	; 0x39
    1212:	8a af       	std	Y+58, r24	; 0x3a
    1214:	9b af       	std	Y+59, r25	; 0x3b
    1216:	88 ad       	ldd	r24, Y+56	; 0x38
    1218:	99 ad       	ldd	r25, Y+57	; 0x39
    121a:	aa ad       	ldd	r26, Y+58	; 0x3a
    121c:	bb ad       	ldd	r27, Y+59	; 0x3b
    121e:	8b 8b       	std	Y+19, r24	; 0x13
    1220:	9c 8b       	std	Y+20, r25	; 0x14
    1222:	ad 8b       	std	Y+21, r26	; 0x15
    1224:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1226:	8f 85       	ldd	r24, Y+15	; 0x0f
    1228:	98 89       	ldd	r25, Y+16	; 0x10
    122a:	a9 89       	ldd	r26, Y+17	; 0x11
    122c:	ba 89       	ldd	r27, Y+18	; 0x12
    122e:	8c af       	std	Y+60, r24	; 0x3c
    1230:	9d af       	std	Y+61, r25	; 0x3d
    1232:	ae af       	std	Y+62, r26	; 0x3e
    1234:	bf af       	std	Y+63, r27	; 0x3f
    1236:	2c ad       	ldd	r18, Y+60	; 0x3c
    1238:	3d ad       	ldd	r19, Y+61	; 0x3d
    123a:	4e ad       	ldd	r20, Y+62	; 0x3e
    123c:	5f ad       	ldd	r21, Y+63	; 0x3f
    123e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1240:	7d ad       	ldd	r23, Y+61	; 0x3d
    1242:	8e ad       	ldd	r24, Y+62	; 0x3e
    1244:	9f ad       	ldd	r25, Y+63	; 0x3f
    1246:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__addsf3>
    124a:	24 96       	adiw	r28, 0x04	; 4
    124c:	6c af       	std	Y+60, r22	; 0x3c
    124e:	7d af       	std	Y+61, r23	; 0x3d
    1250:	8e af       	std	Y+62, r24	; 0x3e
    1252:	9f af       	std	Y+63, r25	; 0x3f
    1254:	24 97       	sbiw	r28, 0x04	; 4
    1256:	24 96       	adiw	r28, 0x04	; 4
    1258:	8c ad       	ldd	r24, Y+60	; 0x3c
    125a:	9d ad       	ldd	r25, Y+61	; 0x3d
    125c:	ae ad       	ldd	r26, Y+62	; 0x3e
    125e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1260:	24 97       	sbiw	r28, 0x04	; 4
    1262:	8f 8b       	std	Y+23, r24	; 0x17
    1264:	98 8f       	std	Y+24, r25	; 0x18
    1266:	a9 8f       	std	Y+25, r26	; 0x19
    1268:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e8       	ldi	r20, 0x80	; 128
    1270:	5f e3       	ldi	r21, 0x3F	; 63
    1272:	6b 89       	ldd	r22, Y+19	; 0x13
    1274:	7c 89       	ldd	r23, Y+20	; 0x14
    1276:	8d 89       	ldd	r24, Y+21	; 0x15
    1278:	9e 89       	ldd	r25, Y+22	; 0x16
    127a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
    127e:	88 23       	and	r24, r24
    1280:	1c f4       	brge	.+6      	; 0x1288 <LCD_displayCustomChar+0xea>
		__ticks = 1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	8b 8f       	std	Y+27, r24	; 0x1b
    1286:	f8 c0       	rjmp	.+496    	; 0x1478 <LCD_displayCustomChar+0x2da>
	else if (__tmp2 > 65535)
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	3f ef       	ldi	r19, 0xFF	; 255
    128c:	4f e7       	ldi	r20, 0x7F	; 127
    128e:	57 e4       	ldi	r21, 0x47	; 71
    1290:	6f 89       	ldd	r22, Y+23	; 0x17
    1292:	78 8d       	ldd	r23, Y+24	; 0x18
    1294:	89 8d       	ldd	r24, Y+25	; 0x19
    1296:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1298:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
    129c:	18 16       	cp	r1, r24
    129e:	0c f0       	brlt	.+2      	; 0x12a2 <LCD_displayCustomChar+0x104>
    12a0:	b1 c0       	rjmp	.+354    	; 0x1404 <LCD_displayCustomChar+0x266>
	{
		_delay_ms(__us / 1000.0);
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	4a e7       	ldi	r20, 0x7A	; 122
    12a8:	54 e4       	ldi	r21, 0x44	; 68
    12aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    12ac:	78 89       	ldd	r23, Y+16	; 0x10
    12ae:	89 89       	ldd	r24, Y+17	; 0x11
    12b0:	9a 89       	ldd	r25, Y+18	; 0x12
    12b2:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__divsf3>
    12b6:	28 96       	adiw	r28, 0x08	; 8
    12b8:	6c af       	std	Y+60, r22	; 0x3c
    12ba:	7d af       	std	Y+61, r23	; 0x3d
    12bc:	8e af       	std	Y+62, r24	; 0x3e
    12be:	9f af       	std	Y+63, r25	; 0x3f
    12c0:	28 97       	sbiw	r28, 0x08	; 8
    12c2:	28 96       	adiw	r28, 0x08	; 8
    12c4:	8c ad       	ldd	r24, Y+60	; 0x3c
    12c6:	9d ad       	ldd	r25, Y+61	; 0x3d
    12c8:	ae ad       	ldd	r26, Y+62	; 0x3e
    12ca:	bf ad       	ldd	r27, Y+63	; 0x3f
    12cc:	28 97       	sbiw	r28, 0x08	; 8
    12ce:	8c 8f       	std	Y+28, r24	; 0x1c
    12d0:	9d 8f       	std	Y+29, r25	; 0x1d
    12d2:	ae 8f       	std	Y+30, r26	; 0x1e
    12d4:	bf 8f       	std	Y+31, r27	; 0x1f
	__tmp = ((F_CPU) / 4e3) * __ms;
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	4a ef       	ldi	r20, 0xFA	; 250
    12dc:	54 e4       	ldi	r21, 0x44	; 68
    12de:	6c 8d       	ldd	r22, Y+28	; 0x1c
    12e0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    12e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12e6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
    12ea:	2c 96       	adiw	r28, 0x0c	; 12
    12ec:	6c af       	std	Y+60, r22	; 0x3c
    12ee:	7d af       	std	Y+61, r23	; 0x3d
    12f0:	8e af       	std	Y+62, r24	; 0x3e
    12f2:	9f af       	std	Y+63, r25	; 0x3f
    12f4:	2c 97       	sbiw	r28, 0x0c	; 12
    12f6:	2c 96       	adiw	r28, 0x0c	; 12
    12f8:	8c ad       	ldd	r24, Y+60	; 0x3c
    12fa:	9d ad       	ldd	r25, Y+61	; 0x3d
    12fc:	ae ad       	ldd	r26, Y+62	; 0x3e
    12fe:	bf ad       	ldd	r27, Y+63	; 0x3f
    1300:	2c 97       	sbiw	r28, 0x0c	; 12
    1302:	88 a3       	std	Y+32, r24	; 0x20
    1304:	99 a3       	std	Y+33, r25	; 0x21
    1306:	aa a3       	std	Y+34, r26	; 0x22
    1308:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	68 a1       	ldd	r22, Y+32	; 0x20
    1314:	79 a1       	ldd	r23, Y+33	; 0x21
    1316:	8a a1       	ldd	r24, Y+34	; 0x22
    1318:	9b a1       	ldd	r25, Y+35	; 0x23
    131a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
    131e:	88 23       	and	r24, r24
    1320:	2c f4       	brge	.+10     	; 0x132c <LCD_displayCustomChar+0x18e>
		__ticks = 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9d a3       	std	Y+37, r25	; 0x25
    1328:	8c a3       	std	Y+36, r24	; 0x24
    132a:	61 c0       	rjmp	.+194    	; 0x13ee <LCD_displayCustomChar+0x250>
	else if (__tmp > 65535)
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	3f ef       	ldi	r19, 0xFF	; 255
    1330:	4f e7       	ldi	r20, 0x7F	; 127
    1332:	57 e4       	ldi	r21, 0x47	; 71
    1334:	68 a1       	ldd	r22, Y+32	; 0x20
    1336:	79 a1       	ldd	r23, Y+33	; 0x21
    1338:	8a a1       	ldd	r24, Y+34	; 0x22
    133a:	9b a1       	ldd	r25, Y+35	; 0x23
    133c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
    1340:	18 16       	cp	r1, r24
    1342:	0c f0       	brlt	.+2      	; 0x1346 <LCD_displayCustomChar+0x1a8>
    1344:	42 c0       	rjmp	.+132    	; 0x13ca <LCD_displayCustomChar+0x22c>
		__ticks = (uint16_t) (__ms * 10.0);
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e2       	ldi	r20, 0x20	; 32
    134c:	51 e4       	ldi	r21, 0x41	; 65
    134e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1350:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1352:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1354:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1356:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
    135a:	60 96       	adiw	r28, 0x10	; 16
    135c:	6c af       	std	Y+60, r22	; 0x3c
    135e:	7d af       	std	Y+61, r23	; 0x3d
    1360:	8e af       	std	Y+62, r24	; 0x3e
    1362:	9f af       	std	Y+63, r25	; 0x3f
    1364:	60 97       	sbiw	r28, 0x10	; 16
    1366:	60 96       	adiw	r28, 0x10	; 16
    1368:	8c ad       	ldd	r24, Y+60	; 0x3c
    136a:	9d ad       	ldd	r25, Y+61	; 0x3d
    136c:	ae ad       	ldd	r26, Y+62	; 0x3e
    136e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1370:	60 97       	sbiw	r28, 0x10	; 16
    1372:	8c ab       	std	Y+52, r24	; 0x34
    1374:	9d ab       	std	Y+53, r25	; 0x35
    1376:	ae ab       	std	Y+54, r26	; 0x36
    1378:	bf ab       	std	Y+55, r27	; 0x37
    137a:	6c a9       	ldd	r22, Y+52	; 0x34
    137c:	7d a9       	ldd	r23, Y+53	; 0x35
    137e:	8e a9       	ldd	r24, Y+54	; 0x36
    1380:	9f a9       	ldd	r25, Y+55	; 0x37
    1382:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    1386:	64 96       	adiw	r28, 0x14	; 20
    1388:	6c af       	std	Y+60, r22	; 0x3c
    138a:	7d af       	std	Y+61, r23	; 0x3d
    138c:	8e af       	std	Y+62, r24	; 0x3e
    138e:	9f af       	std	Y+63, r25	; 0x3f
    1390:	64 97       	sbiw	r28, 0x14	; 20
    1392:	62 96       	adiw	r28, 0x12	; 18
    1394:	ae ad       	ldd	r26, Y+62	; 0x3e
    1396:	bf ad       	ldd	r27, Y+63	; 0x3f
    1398:	62 97       	sbiw	r28, 0x12	; 18
    139a:	bd a3       	std	Y+37, r27	; 0x25
    139c:	ac a3       	std	Y+36, r26	; 0x24
		while(__ticks)
    139e:	10 c0       	rjmp	.+32     	; 0x13c0 <LCD_displayCustomChar+0x222>
    13a0:	88 ec       	ldi	r24, 0xC8	; 200
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9f a3       	std	Y+39, r25	; 0x27
    13a6:	8e a3       	std	Y+38, r24	; 0x26
	__asm__ volatile (
    13a8:	8e a1       	ldd	r24, Y+38	; 0x26
    13aa:	9f a1       	ldd	r25, Y+39	; 0x27
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <LCD_displayCustomChar+0x20e>
    13b0:	9f a3       	std	Y+39, r25	; 0x27
    13b2:	8e a3       	std	Y+38, r24	; 0x26
}
    13b4:	00 00       	nop
			__ticks --;
    13b6:	8c a1       	ldd	r24, Y+36	; 0x24
    13b8:	9d a1       	ldd	r25, Y+37	; 0x25
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	9d a3       	std	Y+37, r25	; 0x25
    13be:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
    13c0:	8c a1       	ldd	r24, Y+36	; 0x24
    13c2:	9d a1       	ldd	r25, Y+37	; 0x25
    13c4:	89 2b       	or	r24, r25
    13c6:	61 f7       	brne	.-40     	; 0x13a0 <LCD_displayCustomChar+0x202>
		return;
    13c8:	57 c0       	rjmp	.+174    	; 0x1478 <LCD_displayCustomChar+0x2da>
		__ticks = (uint16_t)__tmp;
    13ca:	68 a1       	ldd	r22, Y+32	; 0x20
    13cc:	79 a1       	ldd	r23, Y+33	; 0x21
    13ce:	8a a1       	ldd	r24, Y+34	; 0x22
    13d0:	9b a1       	ldd	r25, Y+35	; 0x23
    13d2:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    13d6:	68 96       	adiw	r28, 0x18	; 24
    13d8:	6c af       	std	Y+60, r22	; 0x3c
    13da:	7d af       	std	Y+61, r23	; 0x3d
    13dc:	8e af       	std	Y+62, r24	; 0x3e
    13de:	9f af       	std	Y+63, r25	; 0x3f
    13e0:	68 97       	sbiw	r28, 0x18	; 24
    13e2:	66 96       	adiw	r28, 0x16	; 22
    13e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    13e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    13e8:	66 97       	sbiw	r28, 0x16	; 22
    13ea:	fd a3       	std	Y+37, r31	; 0x25
    13ec:	ec a3       	std	Y+36, r30	; 0x24
    13ee:	8c a1       	ldd	r24, Y+36	; 0x24
    13f0:	9d a1       	ldd	r25, Y+37	; 0x25
    13f2:	99 a7       	std	Y+41, r25	; 0x29
    13f4:	88 a7       	std	Y+40, r24	; 0x28
	__asm__ volatile (
    13f6:	88 a5       	ldd	r24, Y+40	; 0x28
    13f8:	99 a5       	ldd	r25, Y+41	; 0x29
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <LCD_displayCustomChar+0x25c>
    13fe:	99 a7       	std	Y+41, r25	; 0x29
    1400:	88 a7       	std	Y+40, r24	; 0x28
}
    1402:	3a c0       	rjmp	.+116    	; 0x1478 <LCD_displayCustomChar+0x2da>
	}
	else if (__tmp > 255)
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	53 e4       	ldi	r21, 0x43	; 67
    140c:	6b 89       	ldd	r22, Y+19	; 0x13
    140e:	7c 89       	ldd	r23, Y+20	; 0x14
    1410:	8d 89       	ldd	r24, Y+21	; 0x15
    1412:	9e 89       	ldd	r25, Y+22	; 0x16
    1414:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
    1418:	18 16       	cp	r1, r24
    141a:	f4 f4       	brge	.+60     	; 0x1458 <LCD_displayCustomChar+0x2ba>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    141c:	6f 89       	ldd	r22, Y+23	; 0x17
    141e:	78 8d       	ldd	r23, Y+24	; 0x18
    1420:	89 8d       	ldd	r24, Y+25	; 0x19
    1422:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1424:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    1428:	6c 96       	adiw	r28, 0x1c	; 28
    142a:	6c af       	std	Y+60, r22	; 0x3c
    142c:	7d af       	std	Y+61, r23	; 0x3d
    142e:	8e af       	std	Y+62, r24	; 0x3e
    1430:	9f af       	std	Y+63, r25	; 0x3f
    1432:	6c 97       	sbiw	r28, 0x1c	; 28
    1434:	6a 96       	adiw	r28, 0x1a	; 26
    1436:	8e ad       	ldd	r24, Y+62	; 0x3e
    1438:	9f ad       	ldd	r25, Y+63	; 0x3f
    143a:	6a 97       	sbiw	r28, 0x1a	; 26
    143c:	9b a7       	std	Y+43, r25	; 0x2b
    143e:	8a a7       	std	Y+42, r24	; 0x2a
    1440:	8a a5       	ldd	r24, Y+42	; 0x2a
    1442:	9b a5       	ldd	r25, Y+43	; 0x2b
    1444:	9d a7       	std	Y+45, r25	; 0x2d
    1446:	8c a7       	std	Y+44, r24	; 0x2c
	__asm__ volatile (
    1448:	8c a5       	ldd	r24, Y+44	; 0x2c
    144a:	9d a5       	ldd	r25, Y+45	; 0x2d
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <LCD_displayCustomChar+0x2ae>
    1450:	9d a7       	std	Y+45, r25	; 0x2d
    1452:	8c a7       	std	Y+44, r24	; 0x2c
}
    1454:	00 00       	nop
		_delay_loop_2(__ticks);
		return;
    1456:	17 c0       	rjmp	.+46     	; 0x1486 <LCD_displayCustomChar+0x2e8>
	}
	else
		__ticks = (uint8_t)__tmp;
    1458:	6b 89       	ldd	r22, Y+19	; 0x13
    145a:	7c 89       	ldd	r23, Y+20	; 0x14
    145c:	8d 89       	ldd	r24, Y+21	; 0x15
    145e:	9e 89       	ldd	r25, Y+22	; 0x16
    1460:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    1464:	a0 96       	adiw	r28, 0x20	; 32
    1466:	6c af       	std	Y+60, r22	; 0x3c
    1468:	7d af       	std	Y+61, r23	; 0x3d
    146a:	8e af       	std	Y+62, r24	; 0x3e
    146c:	9f af       	std	Y+63, r25	; 0x3f
    146e:	a0 97       	sbiw	r28, 0x20	; 32
    1470:	6d 96       	adiw	r28, 0x1d	; 29
    1472:	9f ad       	ldd	r25, Y+63	; 0x3f
    1474:	6d 97       	sbiw	r28, 0x1d	; 29
    1476:	9b 8f       	std	Y+27, r25	; 0x1b
    1478:	8b 8d       	ldd	r24, Y+27	; 0x1b
    147a:	8e a7       	std	Y+46, r24	; 0x2e
	__asm__ volatile (
    147c:	8e a5       	ldd	r24, Y+46	; 0x2e
    147e:	8a 95       	dec	r24
    1480:	f1 f7       	brne	.-4      	; 0x147e <LCD_displayCustomChar+0x2e0>
    1482:	8e a7       	std	Y+46, r24	; 0x2e
}
    1484:	00 00       	nop
	_delay_us(1);
	E = CLEAR;
    1486:	82 e3       	ldi	r24, 0x32	; 50
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	dc 01       	movw	r26, r24
    148c:	2c 91       	ld	r18, X
    148e:	2f 7b       	andi	r18, 0xBF	; 191
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e4       	ldi	r27, 0x40	; 64
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	ab 83       	std	Y+3, r26	; 0x03
    14a2:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	4a ef       	ldi	r20, 0xFA	; 250
    14aa:	54 e4       	ldi	r21, 0x44	; 68
    14ac:	69 81       	ldd	r22, Y+1	; 0x01
    14ae:	7a 81       	ldd	r23, Y+2	; 0x02
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
    14b8:	a4 96       	adiw	r28, 0x24	; 36
    14ba:	6c af       	std	Y+60, r22	; 0x3c
    14bc:	7d af       	std	Y+61, r23	; 0x3d
    14be:	8e af       	std	Y+62, r24	; 0x3e
    14c0:	9f af       	std	Y+63, r25	; 0x3f
    14c2:	a4 97       	sbiw	r28, 0x24	; 36
    14c4:	a4 96       	adiw	r28, 0x24	; 36
    14c6:	8c ad       	ldd	r24, Y+60	; 0x3c
    14c8:	9d ad       	ldd	r25, Y+61	; 0x3d
    14ca:	ae ad       	ldd	r26, Y+62	; 0x3e
    14cc:	bf ad       	ldd	r27, Y+63	; 0x3f
    14ce:	a4 97       	sbiw	r28, 0x24	; 36
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	af 83       	std	Y+7, r26	; 0x07
    14d6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e8       	ldi	r20, 0x80	; 128
    14de:	5f e3       	ldi	r21, 0x3F	; 63
    14e0:	6d 81       	ldd	r22, Y+5	; 0x05
    14e2:	7e 81       	ldd	r23, Y+6	; 0x06
    14e4:	8f 81       	ldd	r24, Y+7	; 0x07
    14e6:	98 85       	ldd	r25, Y+8	; 0x08
    14e8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	2c f4       	brge	.+10     	; 0x14fa <LCD_displayCustomChar+0x35c>
		__ticks = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9a 87       	std	Y+10, r25	; 0x0a
    14f6:	89 87       	std	Y+9, r24	; 0x09
    14f8:	61 c0       	rjmp	.+194    	; 0x15bc <LCD_displayCustomChar+0x41e>
	else if (__tmp > 65535)
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	3f ef       	ldi	r19, 0xFF	; 255
    14fe:	4f e7       	ldi	r20, 0x7F	; 127
    1500:	57 e4       	ldi	r21, 0x47	; 71
    1502:	6d 81       	ldd	r22, Y+5	; 0x05
    1504:	7e 81       	ldd	r23, Y+6	; 0x06
    1506:	8f 81       	ldd	r24, Y+7	; 0x07
    1508:	98 85       	ldd	r25, Y+8	; 0x08
    150a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
    150e:	18 16       	cp	r1, r24
    1510:	0c f0       	brlt	.+2      	; 0x1514 <LCD_displayCustomChar+0x376>
    1512:	42 c0       	rjmp	.+132    	; 0x1598 <LCD_displayCustomChar+0x3fa>
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	69 81       	ldd	r22, Y+1	; 0x01
    151e:	7a 81       	ldd	r23, Y+2	; 0x02
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
    1528:	a8 96       	adiw	r28, 0x28	; 40
    152a:	6c af       	std	Y+60, r22	; 0x3c
    152c:	7d af       	std	Y+61, r23	; 0x3d
    152e:	8e af       	std	Y+62, r24	; 0x3e
    1530:	9f af       	std	Y+63, r25	; 0x3f
    1532:	a8 97       	sbiw	r28, 0x28	; 40
    1534:	a8 96       	adiw	r28, 0x28	; 40
    1536:	8c ad       	ldd	r24, Y+60	; 0x3c
    1538:	9d ad       	ldd	r25, Y+61	; 0x3d
    153a:	ae ad       	ldd	r26, Y+62	; 0x3e
    153c:	bf ad       	ldd	r27, Y+63	; 0x3f
    153e:	a8 97       	sbiw	r28, 0x28	; 40
    1540:	88 ab       	std	Y+48, r24	; 0x30
    1542:	99 ab       	std	Y+49, r25	; 0x31
    1544:	aa ab       	std	Y+50, r26	; 0x32
    1546:	bb ab       	std	Y+51, r27	; 0x33
    1548:	68 a9       	ldd	r22, Y+48	; 0x30
    154a:	79 a9       	ldd	r23, Y+49	; 0x31
    154c:	8a a9       	ldd	r24, Y+50	; 0x32
    154e:	9b a9       	ldd	r25, Y+51	; 0x33
    1550:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    1554:	ac 96       	adiw	r28, 0x2c	; 44
    1556:	6c af       	std	Y+60, r22	; 0x3c
    1558:	7d af       	std	Y+61, r23	; 0x3d
    155a:	8e af       	std	Y+62, r24	; 0x3e
    155c:	9f af       	std	Y+63, r25	; 0x3f
    155e:	ac 97       	sbiw	r28, 0x2c	; 44
    1560:	aa 96       	adiw	r28, 0x2a	; 42
    1562:	ae ad       	ldd	r26, Y+62	; 0x3e
    1564:	bf ad       	ldd	r27, Y+63	; 0x3f
    1566:	aa 97       	sbiw	r28, 0x2a	; 42
    1568:	ba 87       	std	Y+10, r27	; 0x0a
    156a:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    156c:	10 c0       	rjmp	.+32     	; 0x158e <LCD_displayCustomChar+0x3f0>
    156e:	88 ec       	ldi	r24, 0xC8	; 200
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9c 87       	std	Y+12, r25	; 0x0c
    1574:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    1576:	8b 85       	ldd	r24, Y+11	; 0x0b
    1578:	9c 85       	ldd	r25, Y+12	; 0x0c
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD_displayCustomChar+0x3dc>
    157e:	9c 87       	std	Y+12, r25	; 0x0c
    1580:	8b 87       	std	Y+11, r24	; 0x0b
}
    1582:	00 00       	nop
			__ticks --;
    1584:	89 85       	ldd	r24, Y+9	; 0x09
    1586:	9a 85       	ldd	r25, Y+10	; 0x0a
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	9a 87       	std	Y+10, r25	; 0x0a
    158c:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	89 2b       	or	r24, r25
    1594:	61 f7       	brne	.-40     	; 0x156e <LCD_displayCustomChar+0x3d0>
		return;
    1596:	1d c0       	rjmp	.+58     	; 0x15d2 <LCD_displayCustomChar+0x434>
		__ticks = (uint16_t)__tmp;
    1598:	6d 81       	ldd	r22, Y+5	; 0x05
    159a:	7e 81       	ldd	r23, Y+6	; 0x06
    159c:	8f 81       	ldd	r24, Y+7	; 0x07
    159e:	98 85       	ldd	r25, Y+8	; 0x08
    15a0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    15a4:	e0 96       	adiw	r28, 0x30	; 48
    15a6:	6c af       	std	Y+60, r22	; 0x3c
    15a8:	7d af       	std	Y+61, r23	; 0x3d
    15aa:	8e af       	std	Y+62, r24	; 0x3e
    15ac:	9f af       	std	Y+63, r25	; 0x3f
    15ae:	e0 97       	sbiw	r28, 0x30	; 48
    15b0:	ae 96       	adiw	r28, 0x2e	; 46
    15b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    15b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    15b6:	ae 97       	sbiw	r28, 0x2e	; 46
    15b8:	fa 87       	std	Y+10, r31	; 0x0a
    15ba:	e9 87       	std	Y+9, r30	; 0x09
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	9e 87       	std	Y+14, r25	; 0x0e
    15c2:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    15c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <LCD_displayCustomChar+0x42a>
    15cc:	9e 87       	std	Y+14, r25	; 0x0e
    15ce:	8d 87       	std	Y+13, r24	; 0x0d
}
    15d0:	00 00       	nop
	_delay_ms(2); /* Data write delay */
	return;
    15d2:	00 00       	nop

}
    15d4:	c1 59       	subi	r28, 0x91	; 145
    15d6:	df 4f       	sbci	r29, 0xFF	; 255
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	08 95       	ret

000015e8 <main>:
uint8 byte;
uint16 address = 0x0311;
uint32 pass;
uint32 checker ;

int main(void){
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	c4 54       	subi	r28, 0x44	; 68
    15f2:	d1 09       	sbc	r29, r1
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
	EEPROM_init();
    15fe:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_init>
	UART_init();
    1602:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <UART_init>
	DDRD |=0xE0;
    1606:	81 e3       	ldi	r24, 0x31	; 49
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	dc 01       	movw	r26, r24
    160c:	2c 91       	ld	r18, X
    160e:	81 e3       	ldi	r24, 0x31	; 49
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	20 6e       	ori	r18, 0xE0	; 224
    1614:	fc 01       	movw	r30, r24
    1616:	20 83       	st	Z, r18
	PORTD &=0x1F;
    1618:	82 e3       	ldi	r24, 0x32	; 50
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	dc 01       	movw	r26, r24
    161e:	2c 91       	ld	r18, X
    1620:	82 e3       	ldi	r24, 0x32	; 50
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	2f 71       	andi	r18, 0x1F	; 31
    1626:	fc 01       	movw	r30, r24
    1628:	20 83       	st	Z, r18

	while (1){
		byte =UART_recieveByte();
    162a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <UART_recieveByte>
    162e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <byte>
		if(byte == '*'){
    1632:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <byte>
    1636:	8a 32       	cpi	r24, 0x2A	; 42
    1638:	19 f4       	brne	.+6      	; 0x1640 <main+0x58>
			ReciveFullPass();
    163a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <ReciveFullPass>
    163e:	72 c1       	rjmp	.+740    	; 0x1924 <main+0x33c>
		}else if(byte == '+'){
    1640:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <byte>
    1644:	8b 32       	cpi	r24, 0x2B	; 43
    1646:	09 f0       	breq	.+2      	; 0x164a <main+0x62>
    1648:	6d c1       	rjmp	.+730    	; 0x1924 <main+0x33c>
			while (UART_recieveByte() != '#') {} // wait until MC1 is ready
    164a:	00 00       	nop
    164c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <UART_recieveByte>
    1650:	83 32       	cpi	r24, 0x23	; 35
    1652:	e1 f7       	brne	.-8      	; 0x164c <main+0x64>
			RecivePassword(&pass);
    1654:	82 e6       	ldi	r24, 0x62	; 98
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 9e 0c 	call	0x193c	; 0x193c <RecivePassword>
			if(pass == checker){
    165c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_end>
    1660:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_end+0x1>
    1664:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end+0x2>
    1668:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_end+0x3>
    166c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <checker>
    1670:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <checker+0x1>
    1674:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <checker+0x2>
    1678:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <checker+0x3>
    167c:	48 17       	cp	r20, r24
    167e:	59 07       	cpc	r21, r25
    1680:	6a 07       	cpc	r22, r26
    1682:	7b 07       	cpc	r23, r27
    1684:	09 f0       	breq	.+2      	; 0x1688 <main+0xa0>
    1686:	a4 c0       	rjmp	.+328    	; 0x17d0 <main+0x1e8>
				UART_sendByte(SUCCESS);
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <UART_sendByte>
				SET_BIT(PORTD,PD5);
    168e:	82 e3       	ldi	r24, 0x32	; 50
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	dc 01       	movw	r26, r24
    1694:	2c 91       	ld	r18, X
    1696:	82 e3       	ldi	r24, 0x32	; 50
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	20 62       	ori	r18, 0x20	; 32
    169c:	fc 01       	movw	r30, r24
    169e:	20 83       	st	Z, r18
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e4       	ldi	r25, 0x40	; 64
    16a4:	ac e1       	ldi	r26, 0x1C	; 28
    16a6:	b6 e4       	ldi	r27, 0x46	; 70
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	ab 83       	std	Y+3, r26	; 0x03
    16ae:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	4a ef       	ldi	r20, 0xFA	; 250
    16b6:	54 e4       	ldi	r21, 0x44	; 68
    16b8:	69 81       	ldd	r22, Y+1	; 0x01
    16ba:	7a 81       	ldd	r23, Y+2	; 0x02
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
    16c4:	6d a3       	std	Y+37, r22	; 0x25
    16c6:	7e a3       	std	Y+38, r23	; 0x26
    16c8:	8f a3       	std	Y+39, r24	; 0x27
    16ca:	98 a7       	std	Y+40, r25	; 0x28
    16cc:	8d a1       	ldd	r24, Y+37	; 0x25
    16ce:	9e a1       	ldd	r25, Y+38	; 0x26
    16d0:	af a1       	ldd	r26, Y+39	; 0x27
    16d2:	b8 a5       	ldd	r27, Y+40	; 0x28
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	9e 83       	std	Y+6, r25	; 0x06
    16d8:	af 83       	std	Y+7, r26	; 0x07
    16da:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	6d 81       	ldd	r22, Y+5	; 0x05
    16e6:	7e 81       	ldd	r23, Y+6	; 0x06
    16e8:	8f 81       	ldd	r24, Y+7	; 0x07
    16ea:	98 85       	ldd	r25, Y+8	; 0x08
    16ec:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	2c f4       	brge	.+10     	; 0x16fe <main+0x116>
		__ticks = 1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9a 87       	std	Y+10, r25	; 0x0a
    16fa:	89 87       	std	Y+9, r24	; 0x09
    16fc:	54 c0       	rjmp	.+168    	; 0x17a6 <main+0x1be>
	else if (__tmp > 65535)
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	4f e7       	ldi	r20, 0x7F	; 127
    1704:	57 e4       	ldi	r21, 0x47	; 71
    1706:	6d 81       	ldd	r22, Y+5	; 0x05
    1708:	7e 81       	ldd	r23, Y+6	; 0x06
    170a:	8f 81       	ldd	r24, Y+7	; 0x07
    170c:	98 85       	ldd	r25, Y+8	; 0x08
    170e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
    1712:	18 16       	cp	r1, r24
    1714:	d4 f5       	brge	.+116    	; 0x178a <main+0x1a2>
		__ticks = (uint16_t) (__ms * 10.0);
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e2       	ldi	r20, 0x20	; 32
    171c:	51 e4       	ldi	r21, 0x41	; 65
    171e:	69 81       	ldd	r22, Y+1	; 0x01
    1720:	7a 81       	ldd	r23, Y+2	; 0x02
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
    172a:	69 a7       	std	Y+41, r22	; 0x29
    172c:	7a a7       	std	Y+42, r23	; 0x2a
    172e:	8b a7       	std	Y+43, r24	; 0x2b
    1730:	9c a7       	std	Y+44, r25	; 0x2c
    1732:	89 a5       	ldd	r24, Y+41	; 0x29
    1734:	9a a5       	ldd	r25, Y+42	; 0x2a
    1736:	ab a5       	ldd	r26, Y+43	; 0x2b
    1738:	bc a5       	ldd	r27, Y+44	; 0x2c
    173a:	8d 8f       	std	Y+29, r24	; 0x1d
    173c:	9e 8f       	std	Y+30, r25	; 0x1e
    173e:	af 8f       	std	Y+31, r26	; 0x1f
    1740:	b8 a3       	std	Y+32, r27	; 0x20
    1742:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1744:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1746:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1748:	98 a1       	ldd	r25, Y+32	; 0x20
    174a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    174e:	6d a7       	std	Y+45, r22	; 0x2d
    1750:	7e a7       	std	Y+46, r23	; 0x2e
    1752:	8f a7       	std	Y+47, r24	; 0x2f
    1754:	98 ab       	std	Y+48, r25	; 0x30
    1756:	ad a5       	ldd	r26, Y+45	; 0x2d
    1758:	be a5       	ldd	r27, Y+46	; 0x2e
    175a:	ba 87       	std	Y+10, r27	; 0x0a
    175c:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    175e:	10 c0       	rjmp	.+32     	; 0x1780 <main+0x198>
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 87       	std	Y+12, r25	; 0x0c
    1766:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    1768:	8b 85       	ldd	r24, Y+11	; 0x0b
    176a:	9c 85       	ldd	r25, Y+12	; 0x0c
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <main+0x184>
    1770:	9c 87       	std	Y+12, r25	; 0x0c
    1772:	8b 87       	std	Y+11, r24	; 0x0b
}
    1774:	00 00       	nop
			__ticks --;
    1776:	89 85       	ldd	r24, Y+9	; 0x09
    1778:	9a 85       	ldd	r25, Y+10	; 0x0a
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	9a 87       	std	Y+10, r25	; 0x0a
    177e:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    1780:	89 85       	ldd	r24, Y+9	; 0x09
    1782:	9a 85       	ldd	r25, Y+10	; 0x0a
    1784:	89 2b       	or	r24, r25
    1786:	61 f7       	brne	.-40     	; 0x1760 <main+0x178>
		return;
    1788:	19 c0       	rjmp	.+50     	; 0x17bc <main+0x1d4>
		__ticks = (uint16_t)__tmp;
    178a:	6d 81       	ldd	r22, Y+5	; 0x05
    178c:	7e 81       	ldd	r23, Y+6	; 0x06
    178e:	8f 81       	ldd	r24, Y+7	; 0x07
    1790:	98 85       	ldd	r25, Y+8	; 0x08
    1792:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    1796:	69 ab       	std	Y+49, r22	; 0x31
    1798:	7a ab       	std	Y+50, r23	; 0x32
    179a:	8b ab       	std	Y+51, r24	; 0x33
    179c:	9c ab       	std	Y+52, r25	; 0x34
    179e:	e9 a9       	ldd	r30, Y+49	; 0x31
    17a0:	fa a9       	ldd	r31, Y+50	; 0x32
    17a2:	fa 87       	std	Y+10, r31	; 0x0a
    17a4:	e9 87       	std	Y+9, r30	; 0x09
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	9e 87       	std	Y+14, r25	; 0x0e
    17ac:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    17ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <main+0x1ca>
    17b6:	9e 87       	std	Y+14, r25	; 0x0e
    17b8:	8d 87       	std	Y+13, r24	; 0x0d
}
    17ba:	00 00       	nop
				_delay_ms(10000);
				CLEAR_BIT(PORTD,PD5);
    17bc:	82 e3       	ldi	r24, 0x32	; 50
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	dc 01       	movw	r26, r24
    17c2:	2c 91       	ld	r18, X
    17c4:	82 e3       	ldi	r24, 0x32	; 50
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	2f 7d       	andi	r18, 0xDF	; 223
    17ca:	fc 01       	movw	r30, r24
    17cc:	20 83       	st	Z, r18
    17ce:	aa c0       	rjmp	.+340    	; 0x1924 <main+0x33c>
			}else{
				UART_sendByte(ERROR);
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <UART_sendByte>
				SET_BIT(PORTD,PD7);
    17d6:	82 e3       	ldi	r24, 0x32	; 50
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	dc 01       	movw	r26, r24
    17dc:	2c 91       	ld	r18, X
    17de:	82 e3       	ldi	r24, 0x32	; 50
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	20 68       	ori	r18, 0x80	; 128
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e4       	ldi	r25, 0x40	; 64
    17ec:	ac e1       	ldi	r26, 0x1C	; 28
    17ee:	b6 e4       	ldi	r27, 0x46	; 70
    17f0:	8f 87       	std	Y+15, r24	; 0x0f
    17f2:	98 8b       	std	Y+16, r25	; 0x10
    17f4:	a9 8b       	std	Y+17, r26	; 0x11
    17f6:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a ef       	ldi	r20, 0xFA	; 250
    17fe:	54 e4       	ldi	r21, 0x44	; 68
    1800:	6f 85       	ldd	r22, Y+15	; 0x0f
    1802:	78 89       	ldd	r23, Y+16	; 0x10
    1804:	89 89       	ldd	r24, Y+17	; 0x11
    1806:	9a 89       	ldd	r25, Y+18	; 0x12
    1808:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
    180c:	6d ab       	std	Y+53, r22	; 0x35
    180e:	7e ab       	std	Y+54, r23	; 0x36
    1810:	8f ab       	std	Y+55, r24	; 0x37
    1812:	98 af       	std	Y+56, r25	; 0x38
    1814:	8d a9       	ldd	r24, Y+53	; 0x35
    1816:	9e a9       	ldd	r25, Y+54	; 0x36
    1818:	af a9       	ldd	r26, Y+55	; 0x37
    181a:	b8 ad       	ldd	r27, Y+56	; 0x38
    181c:	8b 8b       	std	Y+19, r24	; 0x13
    181e:	9c 8b       	std	Y+20, r25	; 0x14
    1820:	ad 8b       	std	Y+21, r26	; 0x15
    1822:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e8       	ldi	r20, 0x80	; 128
    182a:	5f e3       	ldi	r21, 0x3F	; 63
    182c:	6b 89       	ldd	r22, Y+19	; 0x13
    182e:	7c 89       	ldd	r23, Y+20	; 0x14
    1830:	8d 89       	ldd	r24, Y+21	; 0x15
    1832:	9e 89       	ldd	r25, Y+22	; 0x16
    1834:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
    1838:	88 23       	and	r24, r24
    183a:	2c f4       	brge	.+10     	; 0x1846 <main+0x25e>
		__ticks = 1;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	98 8f       	std	Y+24, r25	; 0x18
    1842:	8f 8b       	std	Y+23, r24	; 0x17
    1844:	5b c0       	rjmp	.+182    	; 0x18fc <main+0x314>
	else if (__tmp > 65535)
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	3f ef       	ldi	r19, 0xFF	; 255
    184a:	4f e7       	ldi	r20, 0x7F	; 127
    184c:	57 e4       	ldi	r21, 0x47	; 71
    184e:	6b 89       	ldd	r22, Y+19	; 0x13
    1850:	7c 89       	ldd	r23, Y+20	; 0x14
    1852:	8d 89       	ldd	r24, Y+21	; 0x15
    1854:	9e 89       	ldd	r25, Y+22	; 0x16
    1856:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
    185a:	18 16       	cp	r1, r24
    185c:	0c f0       	brlt	.+2      	; 0x1860 <main+0x278>
    185e:	3c c0       	rjmp	.+120    	; 0x18d8 <main+0x2f0>
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e2       	ldi	r20, 0x20	; 32
    1866:	51 e4       	ldi	r21, 0x41	; 65
    1868:	6f 85       	ldd	r22, Y+15	; 0x0f
    186a:	78 89       	ldd	r23, Y+16	; 0x10
    186c:	89 89       	ldd	r24, Y+17	; 0x11
    186e:	9a 89       	ldd	r25, Y+18	; 0x12
    1870:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
    1874:	69 af       	std	Y+57, r22	; 0x39
    1876:	7a af       	std	Y+58, r23	; 0x3a
    1878:	8b af       	std	Y+59, r24	; 0x3b
    187a:	9c af       	std	Y+60, r25	; 0x3c
    187c:	89 ad       	ldd	r24, Y+57	; 0x39
    187e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1880:	ab ad       	ldd	r26, Y+59	; 0x3b
    1882:	bc ad       	ldd	r27, Y+60	; 0x3c
    1884:	89 a3       	std	Y+33, r24	; 0x21
    1886:	9a a3       	std	Y+34, r25	; 0x22
    1888:	ab a3       	std	Y+35, r26	; 0x23
    188a:	bc a3       	std	Y+36, r27	; 0x24
    188c:	69 a1       	ldd	r22, Y+33	; 0x21
    188e:	7a a1       	ldd	r23, Y+34	; 0x22
    1890:	8b a1       	ldd	r24, Y+35	; 0x23
    1892:	9c a1       	ldd	r25, Y+36	; 0x24
    1894:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    1898:	21 96       	adiw	r28, 0x01	; 1
    189a:	6c af       	std	Y+60, r22	; 0x3c
    189c:	7d af       	std	Y+61, r23	; 0x3d
    189e:	8e af       	std	Y+62, r24	; 0x3e
    18a0:	9f af       	std	Y+63, r25	; 0x3f
    18a2:	21 97       	sbiw	r28, 0x01	; 1
    18a4:	ad ad       	ldd	r26, Y+61	; 0x3d
    18a6:	be ad       	ldd	r27, Y+62	; 0x3e
    18a8:	b8 8f       	std	Y+24, r27	; 0x18
    18aa:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
    18ac:	10 c0       	rjmp	.+32     	; 0x18ce <main+0x2e6>
    18ae:	88 ec       	ldi	r24, 0xC8	; 200
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	9a 8f       	std	Y+26, r25	; 0x1a
    18b4:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
    18b6:	89 8d       	ldd	r24, Y+25	; 0x19
    18b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <main+0x2d2>
    18be:	9a 8f       	std	Y+26, r25	; 0x1a
    18c0:	89 8f       	std	Y+25, r24	; 0x19
}
    18c2:	00 00       	nop
			__ticks --;
    18c4:	8f 89       	ldd	r24, Y+23	; 0x17
    18c6:	98 8d       	ldd	r25, Y+24	; 0x18
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	98 8f       	std	Y+24, r25	; 0x18
    18cc:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
    18ce:	8f 89       	ldd	r24, Y+23	; 0x17
    18d0:	98 8d       	ldd	r25, Y+24	; 0x18
    18d2:	89 2b       	or	r24, r25
    18d4:	61 f7       	brne	.-40     	; 0x18ae <main+0x2c6>
		return;
    18d6:	1d c0       	rjmp	.+58     	; 0x1912 <main+0x32a>
		__ticks = (uint16_t)__tmp;
    18d8:	6b 89       	ldd	r22, Y+19	; 0x13
    18da:	7c 89       	ldd	r23, Y+20	; 0x14
    18dc:	8d 89       	ldd	r24, Y+21	; 0x15
    18de:	9e 89       	ldd	r25, Y+22	; 0x16
    18e0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    18e4:	25 96       	adiw	r28, 0x05	; 5
    18e6:	6c af       	std	Y+60, r22	; 0x3c
    18e8:	7d af       	std	Y+61, r23	; 0x3d
    18ea:	8e af       	std	Y+62, r24	; 0x3e
    18ec:	9f af       	std	Y+63, r25	; 0x3f
    18ee:	25 97       	sbiw	r28, 0x05	; 5
    18f0:	23 96       	adiw	r28, 0x03	; 3
    18f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    18f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    18f6:	23 97       	sbiw	r28, 0x03	; 3
    18f8:	f8 8f       	std	Y+24, r31	; 0x18
    18fa:	ef 8b       	std	Y+23, r30	; 0x17
    18fc:	8f 89       	ldd	r24, Y+23	; 0x17
    18fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1900:	9c 8f       	std	Y+28, r25	; 0x1c
    1902:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
    1904:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1906:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <main+0x320>
    190c:	9c 8f       	std	Y+28, r25	; 0x1c
    190e:	8b 8f       	std	Y+27, r24	; 0x1b
}
    1910:	00 00       	nop
				_delay_ms(10000);
				CLEAR_BIT(PORTD,PD7);
    1912:	82 e3       	ldi	r24, 0x32	; 50
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	dc 01       	movw	r26, r24
    1918:	2c 91       	ld	r18, X
    191a:	82 e3       	ldi	r24, 0x32	; 50
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	2f 77       	andi	r18, 0x7F	; 127
    1920:	fc 01       	movw	r30, r24
    1922:	20 83       	st	Z, r18
			}
		}

	return 0;
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
}
}
    1928:	cc 5b       	subi	r28, 0xBC	; 188
    192a:	df 4f       	sbci	r29, 0xFF	; 255
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <RecivePassword>:

void RecivePassword(uint32 *data){
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	a4 97       	sbiw	r28, 0x24	; 36
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	98 8b       	std	Y+16, r25	; 0x10
    1952:	8f 87       	std	Y+15, r24	; 0x0f
	byte = UART_recieveByte();
    1954:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <UART_recieveByte>
    1958:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <byte>
	while (byte != '=') {
    195c:	c8 c0       	rjmp	.+400    	; 0x1aee <RecivePassword+0x1b2>
		*data = ((*data) * 10) + byte;
    195e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1960:	98 89       	ldd	r25, Y+16	; 0x10
    1962:	dc 01       	movw	r26, r24
    1964:	4d 91       	ld	r20, X+
    1966:	5d 91       	ld	r21, X+
    1968:	6d 91       	ld	r22, X+
    196a:	7c 91       	ld	r23, X
    196c:	db 01       	movw	r26, r22
    196e:	ca 01       	movw	r24, r20
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	aa 1f       	adc	r26, r26
    1976:	bb 1f       	adc	r27, r27
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	aa 1f       	adc	r26, r26
    197e:	bb 1f       	adc	r27, r27
    1980:	84 0f       	add	r24, r20
    1982:	95 1f       	adc	r25, r21
    1984:	a6 1f       	adc	r26, r22
    1986:	b7 1f       	adc	r27, r23
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	aa 1f       	adc	r26, r26
    198e:	bb 1f       	adc	r27, r27
    1990:	ac 01       	movw	r20, r24
    1992:	bd 01       	movw	r22, r26
    1994:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <byte>
    1998:	88 2f       	mov	r24, r24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	a0 e0       	ldi	r26, 0x00	; 0
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	84 0f       	add	r24, r20
    19a2:	95 1f       	adc	r25, r21
    19a4:	a6 1f       	adc	r26, r22
    19a6:	b7 1f       	adc	r27, r23
    19a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    19aa:	38 89       	ldd	r19, Y+16	; 0x10
    19ac:	f9 01       	movw	r30, r18
    19ae:	80 83       	st	Z, r24
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	a2 83       	std	Z+2, r26	; 0x02
    19b4:	b3 83       	std	Z+3, r27	; 0x03
		PORTB ^= (1 << PB0);
    19b6:	88 e3       	ldi	r24, 0x38	; 56
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	dc 01       	movw	r26, r24
    19bc:	3c 91       	ld	r19, X
    19be:	88 e3       	ldi	r24, 0x38	; 56
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	21 e0       	ldi	r18, 0x01	; 1
    19c4:	23 27       	eor	r18, r19
    19c6:	fc 01       	movw	r30, r24
    19c8:	20 83       	st	Z, r18
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	aa ef       	ldi	r26, 0xFA	; 250
    19d0:	b3 e4       	ldi	r27, 0x43	; 67
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	ab 83       	std	Y+3, r26	; 0x03
    19d8:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a ef       	ldi	r20, 0xFA	; 250
    19e0:	54 e4       	ldi	r21, 0x44	; 68
    19e2:	69 81       	ldd	r22, Y+1	; 0x01
    19e4:	7a 81       	ldd	r23, Y+2	; 0x02
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
    19ee:	6d 8b       	std	Y+21, r22	; 0x15
    19f0:	7e 8b       	std	Y+22, r23	; 0x16
    19f2:	8f 8b       	std	Y+23, r24	; 0x17
    19f4:	98 8f       	std	Y+24, r25	; 0x18
    19f6:	8d 89       	ldd	r24, Y+21	; 0x15
    19f8:	9e 89       	ldd	r25, Y+22	; 0x16
    19fa:	af 89       	ldd	r26, Y+23	; 0x17
    19fc:	b8 8d       	ldd	r27, Y+24	; 0x18
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	af 83       	std	Y+7, r26	; 0x07
    1a04:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	6d 81       	ldd	r22, Y+5	; 0x05
    1a10:	7e 81       	ldd	r23, Y+6	; 0x06
    1a12:	8f 81       	ldd	r24, Y+7	; 0x07
    1a14:	98 85       	ldd	r25, Y+8	; 0x08
    1a16:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <RecivePassword+0xec>
		__ticks = 1;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9a 87       	std	Y+10, r25	; 0x0a
    1a24:	89 87       	std	Y+9, r24	; 0x09
    1a26:	54 c0       	rjmp	.+168    	; 0x1ad0 <RecivePassword+0x194>
	else if (__tmp > 65535)
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	6d 81       	ldd	r22, Y+5	; 0x05
    1a32:	7e 81       	ldd	r23, Y+6	; 0x06
    1a34:	8f 81       	ldd	r24, Y+7	; 0x07
    1a36:	98 85       	ldd	r25, Y+8	; 0x08
    1a38:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__gesf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	d4 f5       	brge	.+116    	; 0x1ab4 <RecivePassword+0x178>
		__ticks = (uint16_t) (__ms * 10.0);
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	69 81       	ldd	r22, Y+1	; 0x01
    1a4a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulsf3>
    1a54:	69 8f       	std	Y+25, r22	; 0x19
    1a56:	7a 8f       	std	Y+26, r23	; 0x1a
    1a58:	8b 8f       	std	Y+27, r24	; 0x1b
    1a5a:	9c 8f       	std	Y+28, r25	; 0x1c
    1a5c:	89 8d       	ldd	r24, Y+25	; 0x19
    1a5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a60:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1a62:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1a64:	89 8b       	std	Y+17, r24	; 0x11
    1a66:	9a 8b       	std	Y+18, r25	; 0x12
    1a68:	ab 8b       	std	Y+19, r26	; 0x13
    1a6a:	bc 8b       	std	Y+20, r27	; 0x14
    1a6c:	69 89       	ldd	r22, Y+17	; 0x11
    1a6e:	7a 89       	ldd	r23, Y+18	; 0x12
    1a70:	8b 89       	ldd	r24, Y+19	; 0x13
    1a72:	9c 89       	ldd	r25, Y+20	; 0x14
    1a74:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    1a78:	6d 8f       	std	Y+29, r22	; 0x1d
    1a7a:	7e 8f       	std	Y+30, r23	; 0x1e
    1a7c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a7e:	98 a3       	std	Y+32, r25	; 0x20
    1a80:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1a82:	be 8d       	ldd	r27, Y+30	; 0x1e
    1a84:	ba 87       	std	Y+10, r27	; 0x0a
    1a86:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    1a88:	10 c0       	rjmp	.+32     	; 0x1aaa <RecivePassword+0x16e>
    1a8a:	88 ec       	ldi	r24, 0xC8	; 200
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9c 87       	std	Y+12, r25	; 0x0c
    1a90:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    1a92:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a94:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <RecivePassword+0x15a>
    1a9a:	9c 87       	std	Y+12, r25	; 0x0c
    1a9c:	8b 87       	std	Y+11, r24	; 0x0b
}
    1a9e:	00 00       	nop
			__ticks --;
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	9a 87       	std	Y+10, r25	; 0x0a
    1aa8:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    1aaa:	89 85       	ldd	r24, Y+9	; 0x09
    1aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aae:	89 2b       	or	r24, r25
    1ab0:	61 f7       	brne	.-40     	; 0x1a8a <RecivePassword+0x14e>
		return;
    1ab2:	19 c0       	rjmp	.+50     	; 0x1ae6 <RecivePassword+0x1aa>
		__ticks = (uint16_t)__tmp;
    1ab4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ab6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ab8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aba:	98 85       	ldd	r25, Y+8	; 0x08
    1abc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
    1ac0:	69 a3       	std	Y+33, r22	; 0x21
    1ac2:	7a a3       	std	Y+34, r23	; 0x22
    1ac4:	8b a3       	std	Y+35, r24	; 0x23
    1ac6:	9c a3       	std	Y+36, r25	; 0x24
    1ac8:	e9 a1       	ldd	r30, Y+33	; 0x21
    1aca:	fa a1       	ldd	r31, Y+34	; 0x22
    1acc:	fa 87       	std	Y+10, r31	; 0x0a
    1ace:	e9 87       	std	Y+9, r30	; 0x09
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	9e 87       	std	Y+14, r25	; 0x0e
    1ad6:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    1ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <RecivePassword+0x1a0>
    1ae0:	9e 87       	std	Y+14, r25	; 0x0e
    1ae2:	8d 87       	std	Y+13, r24	; 0x0d
}
    1ae4:	00 00       	nop
		_delay_ms(500);
		byte = UART_recieveByte();
    1ae6:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <UART_recieveByte>
    1aea:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <byte>
	while (byte != '=') {
    1aee:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <byte>
    1af2:	8d 33       	cpi	r24, 0x3D	; 61
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <RecivePassword+0x1bc>
    1af6:	33 cf       	rjmp	.-410    	; 0x195e <RecivePassword+0x22>

	}
}
    1af8:	00 00       	nop
    1afa:	00 00       	nop
    1afc:	a4 96       	adiw	r28, 0x24	; 36
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	08 95       	ret

00001b0e <ReciveFullPass>:

void ReciveFullPass(void){
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
	while (UART_recieveByte() != '#') {} // wait until MC1 is ready
    1b16:	00 00       	nop
    1b18:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <UART_recieveByte>
    1b1c:	83 32       	cpi	r24, 0x23	; 35
    1b1e:	e1 f7       	brne	.-8      	; 0x1b18 <ReciveFullPass+0xa>
	DDRB |= (1 << PB0);
    1b20:	87 e3       	ldi	r24, 0x37	; 55
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	fc 01       	movw	r30, r24
    1b26:	20 81       	ld	r18, Z
    1b28:	87 e3       	ldi	r24, 0x37	; 55
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	21 60       	ori	r18, 0x01	; 1
    1b2e:	fc 01       	movw	r30, r24
    1b30:	20 83       	st	Z, r18
	PORTB |= (1 << PB0);
    1b32:	88 e3       	ldi	r24, 0x38	; 56
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	fc 01       	movw	r30, r24
    1b38:	20 81       	ld	r18, Z
    1b3a:	88 e3       	ldi	r24, 0x38	; 56
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	21 60       	ori	r18, 0x01	; 1
    1b40:	fc 01       	movw	r30, r24
    1b42:	20 83       	st	Z, r18
	do{
		pass = 0;
    1b44:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
    1b48:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
    1b4c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
    1b50:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
		checker = 0;
    1b54:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <checker>
    1b58:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <checker+0x1>
    1b5c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <checker+0x2>
    1b60:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <checker+0x3>
		RecivePassword(&pass);
    1b64:	82 e6       	ldi	r24, 0x62	; 98
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 9e 0c 	call	0x193c	; 0x193c <RecivePassword>
		RecivePassword(&checker);
    1b6c:	86 e6       	ldi	r24, 0x66	; 102
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 94 9e 0c 	call	0x193c	; 0x193c <RecivePassword>
		if (pass == checker){
    1b74:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_end>
    1b78:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_end+0x1>
    1b7c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end+0x2>
    1b80:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_end+0x3>
    1b84:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <checker>
    1b88:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <checker+0x1>
    1b8c:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <checker+0x2>
    1b90:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <checker+0x3>
    1b94:	48 17       	cp	r20, r24
    1b96:	59 07       	cpc	r21, r25
    1b98:	6a 07       	cpc	r22, r26
    1b9a:	7b 07       	cpc	r23, r27
    1b9c:	21 f4       	brne	.+8      	; 0x1ba6 <ReciveFullPass+0x98>
			UART_sendByte(SUCCESS);
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <UART_sendByte>
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <ReciveFullPass+0x9e>
		} else{
			UART_sendByte(ERROR);
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <UART_sendByte>
		}
	} while (pass != checker);
    1bac:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_end>
    1bb0:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_end+0x1>
    1bb4:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end+0x2>
    1bb8:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_end+0x3>
    1bbc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <checker>
    1bc0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <checker+0x1>
    1bc4:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <checker+0x2>
    1bc8:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <checker+0x3>
    1bcc:	48 17       	cp	r20, r24
    1bce:	59 07       	cpc	r21, r25
    1bd0:	6a 07       	cpc	r22, r26
    1bd2:	7b 07       	cpc	r23, r27
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <ReciveFullPass+0xca>
    1bd6:	b6 cf       	rjmp	.-148    	; 0x1b44 <ReciveFullPass+0x36>
}
    1bd8:	00 00       	nop
    1bda:	00 00       	nop
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	08 95       	ret

00001be2 <UART_init>:
 *******************************************************************************/

/*
 * Function responsible to initialize UART module .
 */
void UART_init(void) {
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA, U2X);
    1bea:	8b e2       	ldi	r24, 0x2B	; 43
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	fc 01       	movw	r30, r24
    1bf0:	20 81       	ld	r18, Z
    1bf2:	8b e2       	ldi	r24, 0x2B	; 43
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	22 60       	ori	r18, 0x02	; 2
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	20 83       	st	Z, r18
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	SET_BIT(UCSRB, TXEN);
    1bfc:	8a e2       	ldi	r24, 0x2A	; 42
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	fc 01       	movw	r30, r24
    1c02:	20 81       	ld	r18, Z
    1c04:	8a e2       	ldi	r24, 0x2A	; 42
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	28 60       	ori	r18, 0x08	; 8
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	20 83       	st	Z, r18
	SET_BIT(UCSRB, RXEN);
    1c0e:	8a e2       	ldi	r24, 0x2A	; 42
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	fc 01       	movw	r30, r24
    1c14:	20 81       	ld	r18, Z
    1c16:	8a e2       	ldi	r24, 0x2A	; 42
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	20 61       	ori	r18, 0x10	; 16
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	20 83       	st	Z, r18
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRC, URSEL);
    1c20:	80 e4       	ldi	r24, 0x40	; 64
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	fc 01       	movw	r30, r24
    1c26:	20 81       	ld	r18, Z
    1c28:	80 e4       	ldi	r24, 0x40	; 64
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	20 68       	ori	r18, 0x80	; 128
    1c2e:	fc 01       	movw	r30, r24
    1c30:	20 83       	st	Z, r18
	SET_BIT(UCSRC, UCSZ1);
    1c32:	80 e4       	ldi	r24, 0x40	; 64
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	fc 01       	movw	r30, r24
    1c38:	20 81       	ld	r18, Z
    1c3a:	80 e4       	ldi	r24, 0x40	; 64
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	24 60       	ori	r18, 0x04	; 4
    1c40:	fc 01       	movw	r30, r24
    1c42:	20 83       	st	Z, r18
	SET_BIT(UCSRC, UCSZ0);
    1c44:	80 e4       	ldi	r24, 0x40	; 64
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	fc 01       	movw	r30, r24
    1c4a:	20 81       	ld	r18, Z
    1c4c:	80 e4       	ldi	r24, 0x40	; 64
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	22 60       	ori	r18, 0x02	; 2
    1c52:	fc 01       	movw	r30, r24
    1c54:	20 83       	st	Z, r18

	/*	select type of parity */
	SET_BIT(UCSRC, UPM1);
    1c56:	80 e4       	ldi	r24, 0x40	; 64
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	20 81       	ld	r18, Z
    1c5e:	80 e4       	ldi	r24, 0x40	; 64
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	20 62       	ori	r18, 0x20	; 32
    1c64:	fc 01       	movw	r30, r24
    1c66:	20 83       	st	Z, r18

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = 12 >> 8;
    1c68:	80 e4       	ldi	r24, 0x40	; 64
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	10 82       	st	Z, r1
	UBRRL = 12;
    1c70:	89 e2       	ldi	r24, 0x29	; 41
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	2c e0       	ldi	r18, 0x0C	; 12
    1c76:	fc 01       	movw	r30, r24
    1c78:	20 83       	st	Z, r18

}
    1c7a:	00 00       	nop
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	08 95       	ret

00001c82 <UART_sendByte>:

/*
 * Function responsible to send byte to another device .
 */
void UART_sendByte(const uint8 data) {
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	89 83       	std	Y+1, r24	; 0x01

	/* UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1c8e:	00 00       	nop
    1c90:	8b e2       	ldi	r24, 0x2B	; 43
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	fc 01       	movw	r30, r24
    1c96:	80 81       	ld	r24, Z
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	80 72       	andi	r24, 0x20	; 32
    1c9e:	99 27       	eor	r25, r25
    1ca0:	89 2b       	or	r24, r25
    1ca2:	b1 f3       	breq	.-20     	; 0x1c90 <UART_sendByte+0xe>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    1ca4:	8c e2       	ldi	r24, 0x2C	; 44
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	29 81       	ldd	r18, Y+1	; 0x01
    1caa:	fc 01       	movw	r30, r24
    1cac:	20 83       	st	Z, r18
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/

}
    1cae:	00 00       	nop
    1cb0:	0f 90       	pop	r0
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <UART_recieveByte>:

/*
 * Function responsible to receive byte from another device .
 */
uint8 UART_recieveByte(void) {
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62

	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1cc0:	00 00       	nop
    1cc2:	8b e2       	ldi	r24, 0x2B	; 43
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 23       	and	r24, r24
    1ccc:	d4 f7       	brge	.-12     	; 0x1cc2 <UART_recieveByte+0xa>
	/* Read the received data from the RX buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    1cce:	8c e2       	ldi	r24, 0x2C	; 44
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	80 81       	ld	r24, Z
}
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	08 95       	ret

00001cdc <UART_sendString>:

/*
 * Function responsible to send String from another device .
 */
void UART_sendString(const uint8 *Str) {
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <UART_sendString+0x6>
    1ce2:	0f 92       	push	r0
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	9b 83       	std	Y+3, r25	; 0x03
    1cea:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    1cec:	19 82       	std	Y+1, r1	; 0x01
	while(Str[i] != '\0')
    1cee:	0e c0       	rjmp	.+28     	; 0x1d0c <UART_sendString+0x30>
	{
		UART_sendByte(Str[i]);		/* send string character by character until null character */
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf8:	3b 81       	ldd	r19, Y+3	; 0x03
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	fc 01       	movw	r30, r24
    1d00:	80 81       	ld	r24, Z
    1d02:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <UART_sendByte>
		i++;
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	while(Str[i] != '\0')
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	2a 81       	ldd	r18, Y+2	; 0x02
    1d14:	3b 81       	ldd	r19, Y+3	; 0x03
    1d16:	82 0f       	add	r24, r18
    1d18:	93 1f       	adc	r25, r19
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	80 81       	ld	r24, Z
    1d1e:	88 23       	and	r24, r24
    1d20:	39 f7       	brne	.-50     	; 0x1cf0 <UART_sendString+0x14>
	}
	UART_sendByte('#');
    1d22:	83 e2       	ldi	r24, 0x23	; 35
    1d24:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <UART_sendByte>
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/

}
    1d28:	00 00       	nop
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	08 95       	ret

00001d36 <UART_receiveString>:

/*
 * Function responsible to receive String from another device .
 */
void UART_receiveString(uint8 *Str) {
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <UART_receiveString+0xa>
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	9b 83       	std	Y+3, r25	; 0x03
    1d48:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    1d4a:	19 82       	std	Y+1, r1	; 0x01
	do{

		Str[i] = UART_recieveByte();
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	2a 81       	ldd	r18, Y+2	; 0x02
    1d54:	3b 81       	ldd	r19, Y+3	; 0x03
    1d56:	89 01       	movw	r16, r18
    1d58:	08 0f       	add	r16, r24
    1d5a:	19 1f       	adc	r17, r25
    1d5c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <UART_recieveByte>
    1d60:	f8 01       	movw	r30, r16
    1d62:	80 83       	st	Z, r24

	}while(Str[i++] != '#');		/* still receive character until '#' symbol  send */
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	98 0f       	add	r25, r24
    1d6a:	99 83       	std	Y+1, r25	; 0x01
    1d6c:	88 2f       	mov	r24, r24
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	2a 81       	ldd	r18, Y+2	; 0x02
    1d72:	3b 81       	ldd	r19, Y+3	; 0x03
    1d74:	82 0f       	add	r24, r18
    1d76:	93 1f       	adc	r25, r19
    1d78:	fc 01       	movw	r30, r24
    1d7a:	80 81       	ld	r24, Z
    1d7c:	83 32       	cpi	r24, 0x23	; 35
    1d7e:	31 f7       	brne	.-52     	; 0x1d4c <UART_receiveString+0x16>

	Str[--i] = '\0';			/* add null character at the end of string */
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	81 50       	subi	r24, 0x01	; 1
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d8e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d90:	82 0f       	add	r24, r18
    1d92:	93 1f       	adc	r25, r19
    1d94:	fc 01       	movw	r30, r24
    1d96:	10 82       	st	Z, r1

}
    1d98:	00 00       	nop
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	08 95       	ret

00001daa <__subsf3>:
    1daa:	50 58       	subi	r21, 0x80	; 128

00001dac <__addsf3>:
    1dac:	bb 27       	eor	r27, r27
    1dae:	aa 27       	eor	r26, r26
    1db0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__addsf3x>
    1db4:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__fp_round>
    1db8:	0e 94 15 10 	call	0x202a	; 0x202a <__fp_pscA>
    1dbc:	38 f0       	brcs	.+14     	; 0x1dcc <__addsf3+0x20>
    1dbe:	0e 94 1c 10 	call	0x2038	; 0x2038 <__fp_pscB>
    1dc2:	20 f0       	brcs	.+8      	; 0x1dcc <__addsf3+0x20>
    1dc4:	39 f4       	brne	.+14     	; 0x1dd4 <__addsf3+0x28>
    1dc6:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc8:	19 f4       	brne	.+6      	; 0x1dd0 <__addsf3+0x24>
    1dca:	26 f4       	brtc	.+8      	; 0x1dd4 <__addsf3+0x28>
    1dcc:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__fp_nan>
    1dd0:	0e f4       	brtc	.+2      	; 0x1dd4 <__addsf3+0x28>
    1dd2:	e0 95       	com	r30
    1dd4:	e7 fb       	bst	r30, 7
    1dd6:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_inf>

00001dda <__addsf3x>:
    1dda:	e9 2f       	mov	r30, r25
    1ddc:	0e 94 34 10 	call	0x2068	; 0x2068 <__fp_split3>
    1de0:	58 f3       	brcs	.-42     	; 0x1db8 <__addsf3+0xc>
    1de2:	ba 17       	cp	r27, r26
    1de4:	62 07       	cpc	r22, r18
    1de6:	73 07       	cpc	r23, r19
    1de8:	84 07       	cpc	r24, r20
    1dea:	95 07       	cpc	r25, r21
    1dec:	20 f0       	brcs	.+8      	; 0x1df6 <__addsf3x+0x1c>
    1dee:	79 f4       	brne	.+30     	; 0x1e0e <__addsf3x+0x34>
    1df0:	a6 f5       	brtc	.+104    	; 0x1e5a <__addsf3x+0x80>
    1df2:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__fp_zero>
    1df6:	0e f4       	brtc	.+2      	; 0x1dfa <__addsf3x+0x20>
    1df8:	e0 95       	com	r30
    1dfa:	0b 2e       	mov	r0, r27
    1dfc:	ba 2f       	mov	r27, r26
    1dfe:	a0 2d       	mov	r26, r0
    1e00:	0b 01       	movw	r0, r22
    1e02:	b9 01       	movw	r22, r18
    1e04:	90 01       	movw	r18, r0
    1e06:	0c 01       	movw	r0, r24
    1e08:	ca 01       	movw	r24, r20
    1e0a:	a0 01       	movw	r20, r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	ff 27       	eor	r31, r31
    1e10:	59 1b       	sub	r21, r25
    1e12:	99 f0       	breq	.+38     	; 0x1e3a <__addsf3x+0x60>
    1e14:	59 3f       	cpi	r21, 0xF9	; 249
    1e16:	50 f4       	brcc	.+20     	; 0x1e2c <__addsf3x+0x52>
    1e18:	50 3e       	cpi	r21, 0xE0	; 224
    1e1a:	68 f1       	brcs	.+90     	; 0x1e76 <__addsf3x+0x9c>
    1e1c:	1a 16       	cp	r1, r26
    1e1e:	f0 40       	sbci	r31, 0x00	; 0
    1e20:	a2 2f       	mov	r26, r18
    1e22:	23 2f       	mov	r18, r19
    1e24:	34 2f       	mov	r19, r20
    1e26:	44 27       	eor	r20, r20
    1e28:	58 5f       	subi	r21, 0xF8	; 248
    1e2a:	f3 cf       	rjmp	.-26     	; 0x1e12 <__addsf3x+0x38>
    1e2c:	46 95       	lsr	r20
    1e2e:	37 95       	ror	r19
    1e30:	27 95       	ror	r18
    1e32:	a7 95       	ror	r26
    1e34:	f0 40       	sbci	r31, 0x00	; 0
    1e36:	53 95       	inc	r21
    1e38:	c9 f7       	brne	.-14     	; 0x1e2c <__addsf3x+0x52>
    1e3a:	7e f4       	brtc	.+30     	; 0x1e5a <__addsf3x+0x80>
    1e3c:	1f 16       	cp	r1, r31
    1e3e:	ba 0b       	sbc	r27, r26
    1e40:	62 0b       	sbc	r22, r18
    1e42:	73 0b       	sbc	r23, r19
    1e44:	84 0b       	sbc	r24, r20
    1e46:	ba f0       	brmi	.+46     	; 0x1e76 <__addsf3x+0x9c>
    1e48:	91 50       	subi	r25, 0x01	; 1
    1e4a:	a1 f0       	breq	.+40     	; 0x1e74 <__addsf3x+0x9a>
    1e4c:	ff 0f       	add	r31, r31
    1e4e:	bb 1f       	adc	r27, r27
    1e50:	66 1f       	adc	r22, r22
    1e52:	77 1f       	adc	r23, r23
    1e54:	88 1f       	adc	r24, r24
    1e56:	c2 f7       	brpl	.-16     	; 0x1e48 <__addsf3x+0x6e>
    1e58:	0e c0       	rjmp	.+28     	; 0x1e76 <__addsf3x+0x9c>
    1e5a:	ba 0f       	add	r27, r26
    1e5c:	62 1f       	adc	r22, r18
    1e5e:	73 1f       	adc	r23, r19
    1e60:	84 1f       	adc	r24, r20
    1e62:	48 f4       	brcc	.+18     	; 0x1e76 <__addsf3x+0x9c>
    1e64:	87 95       	ror	r24
    1e66:	77 95       	ror	r23
    1e68:	67 95       	ror	r22
    1e6a:	b7 95       	ror	r27
    1e6c:	f7 95       	ror	r31
    1e6e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e70:	08 f0       	brcs	.+2      	; 0x1e74 <__addsf3x+0x9a>
    1e72:	b0 cf       	rjmp	.-160    	; 0x1dd4 <__addsf3+0x28>
    1e74:	93 95       	inc	r25
    1e76:	88 0f       	add	r24, r24
    1e78:	08 f0       	brcs	.+2      	; 0x1e7c <__addsf3x+0xa2>
    1e7a:	99 27       	eor	r25, r25
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	97 95       	ror	r25
    1e80:	87 95       	ror	r24
    1e82:	08 95       	ret

00001e84 <__cmpsf2>:
    1e84:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__fp_cmp>
    1e88:	08 f4       	brcc	.+2      	; 0x1e8c <__cmpsf2+0x8>
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	08 95       	ret

00001e8e <__divsf3>:
    1e8e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__divsf3x>
    1e92:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__fp_round>
    1e96:	0e 94 1c 10 	call	0x2038	; 0x2038 <__fp_pscB>
    1e9a:	58 f0       	brcs	.+22     	; 0x1eb2 <__divsf3+0x24>
    1e9c:	0e 94 15 10 	call	0x202a	; 0x202a <__fp_pscA>
    1ea0:	40 f0       	brcs	.+16     	; 0x1eb2 <__divsf3+0x24>
    1ea2:	29 f4       	brne	.+10     	; 0x1eae <__divsf3+0x20>
    1ea4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea6:	29 f0       	breq	.+10     	; 0x1eb2 <__divsf3+0x24>
    1ea8:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_inf>
    1eac:	51 11       	cpse	r21, r1
    1eae:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__fp_szero>
    1eb2:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__fp_nan>

00001eb6 <__divsf3x>:
    1eb6:	0e 94 34 10 	call	0x2068	; 0x2068 <__fp_split3>
    1eba:	68 f3       	brcs	.-38     	; 0x1e96 <__divsf3+0x8>

00001ebc <__divsf3_pse>:
    1ebc:	99 23       	and	r25, r25
    1ebe:	b1 f3       	breq	.-20     	; 0x1eac <__divsf3+0x1e>
    1ec0:	55 23       	and	r21, r21
    1ec2:	91 f3       	breq	.-28     	; 0x1ea8 <__divsf3+0x1a>
    1ec4:	95 1b       	sub	r25, r21
    1ec6:	55 0b       	sbc	r21, r21
    1ec8:	bb 27       	eor	r27, r27
    1eca:	aa 27       	eor	r26, r26
    1ecc:	62 17       	cp	r22, r18
    1ece:	73 07       	cpc	r23, r19
    1ed0:	84 07       	cpc	r24, r20
    1ed2:	38 f0       	brcs	.+14     	; 0x1ee2 <__divsf3_pse+0x26>
    1ed4:	9f 5f       	subi	r25, 0xFF	; 255
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed8:	22 0f       	add	r18, r18
    1eda:	33 1f       	adc	r19, r19
    1edc:	44 1f       	adc	r20, r20
    1ede:	aa 1f       	adc	r26, r26
    1ee0:	a9 f3       	breq	.-22     	; 0x1ecc <__divsf3_pse+0x10>
    1ee2:	35 d0       	rcall	.+106    	; 0x1f4e <__divsf3_pse+0x92>
    1ee4:	0e 2e       	mov	r0, r30
    1ee6:	3a f0       	brmi	.+14     	; 0x1ef6 <__divsf3_pse+0x3a>
    1ee8:	e0 e8       	ldi	r30, 0x80	; 128
    1eea:	32 d0       	rcall	.+100    	; 0x1f50 <__divsf3_pse+0x94>
    1eec:	91 50       	subi	r25, 0x01	; 1
    1eee:	50 40       	sbci	r21, 0x00	; 0
    1ef0:	e6 95       	lsr	r30
    1ef2:	00 1c       	adc	r0, r0
    1ef4:	ca f7       	brpl	.-14     	; 0x1ee8 <__divsf3_pse+0x2c>
    1ef6:	2b d0       	rcall	.+86     	; 0x1f4e <__divsf3_pse+0x92>
    1ef8:	fe 2f       	mov	r31, r30
    1efa:	29 d0       	rcall	.+82     	; 0x1f4e <__divsf3_pse+0x92>
    1efc:	66 0f       	add	r22, r22
    1efe:	77 1f       	adc	r23, r23
    1f00:	88 1f       	adc	r24, r24
    1f02:	bb 1f       	adc	r27, r27
    1f04:	26 17       	cp	r18, r22
    1f06:	37 07       	cpc	r19, r23
    1f08:	48 07       	cpc	r20, r24
    1f0a:	ab 07       	cpc	r26, r27
    1f0c:	b0 e8       	ldi	r27, 0x80	; 128
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <__divsf3_pse+0x56>
    1f10:	bb 0b       	sbc	r27, r27
    1f12:	80 2d       	mov	r24, r0
    1f14:	bf 01       	movw	r22, r30
    1f16:	ff 27       	eor	r31, r31
    1f18:	93 58       	subi	r25, 0x83	; 131
    1f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1c:	3a f0       	brmi	.+14     	; 0x1f2c <__divsf3_pse+0x70>
    1f1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f20:	51 05       	cpc	r21, r1
    1f22:	78 f0       	brcs	.+30     	; 0x1f42 <__divsf3_pse+0x86>
    1f24:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_inf>
    1f28:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__fp_szero>
    1f2c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f2e:	e4 f3       	brlt	.-8      	; 0x1f28 <__divsf3_pse+0x6c>
    1f30:	98 3e       	cpi	r25, 0xE8	; 232
    1f32:	d4 f3       	brlt	.-12     	; 0x1f28 <__divsf3_pse+0x6c>
    1f34:	86 95       	lsr	r24
    1f36:	77 95       	ror	r23
    1f38:	67 95       	ror	r22
    1f3a:	b7 95       	ror	r27
    1f3c:	f7 95       	ror	r31
    1f3e:	9f 5f       	subi	r25, 0xFF	; 255
    1f40:	c9 f7       	brne	.-14     	; 0x1f34 <__divsf3_pse+0x78>
    1f42:	88 0f       	add	r24, r24
    1f44:	91 1d       	adc	r25, r1
    1f46:	96 95       	lsr	r25
    1f48:	87 95       	ror	r24
    1f4a:	97 f9       	bld	r25, 7
    1f4c:	08 95       	ret
    1f4e:	e1 e0       	ldi	r30, 0x01	; 1
    1f50:	66 0f       	add	r22, r22
    1f52:	77 1f       	adc	r23, r23
    1f54:	88 1f       	adc	r24, r24
    1f56:	bb 1f       	adc	r27, r27
    1f58:	62 17       	cp	r22, r18
    1f5a:	73 07       	cpc	r23, r19
    1f5c:	84 07       	cpc	r24, r20
    1f5e:	ba 07       	cpc	r27, r26
    1f60:	20 f0       	brcs	.+8      	; 0x1f6a <__divsf3_pse+0xae>
    1f62:	62 1b       	sub	r22, r18
    1f64:	73 0b       	sbc	r23, r19
    1f66:	84 0b       	sbc	r24, r20
    1f68:	ba 0b       	sbc	r27, r26
    1f6a:	ee 1f       	adc	r30, r30
    1f6c:	88 f7       	brcc	.-30     	; 0x1f50 <__divsf3_pse+0x94>
    1f6e:	e0 95       	com	r30
    1f70:	08 95       	ret

00001f72 <__fixunssfsi>:
    1f72:	0e 94 3c 10 	call	0x2078	; 0x2078 <__fp_splitA>
    1f76:	88 f0       	brcs	.+34     	; 0x1f9a <__fixunssfsi+0x28>
    1f78:	9f 57       	subi	r25, 0x7F	; 127
    1f7a:	98 f0       	brcs	.+38     	; 0x1fa2 <__fixunssfsi+0x30>
    1f7c:	b9 2f       	mov	r27, r25
    1f7e:	99 27       	eor	r25, r25
    1f80:	b7 51       	subi	r27, 0x17	; 23
    1f82:	b0 f0       	brcs	.+44     	; 0x1fb0 <__fixunssfsi+0x3e>
    1f84:	e1 f0       	breq	.+56     	; 0x1fbe <__fixunssfsi+0x4c>
    1f86:	66 0f       	add	r22, r22
    1f88:	77 1f       	adc	r23, r23
    1f8a:	88 1f       	adc	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	1a f0       	brmi	.+6      	; 0x1f96 <__fixunssfsi+0x24>
    1f90:	ba 95       	dec	r27
    1f92:	c9 f7       	brne	.-14     	; 0x1f86 <__fixunssfsi+0x14>
    1f94:	14 c0       	rjmp	.+40     	; 0x1fbe <__fixunssfsi+0x4c>
    1f96:	b1 30       	cpi	r27, 0x01	; 1
    1f98:	91 f0       	breq	.+36     	; 0x1fbe <__fixunssfsi+0x4c>
    1f9a:	0e 94 56 10 	call	0x20ac	; 0x20ac <__fp_zero>
    1f9e:	b1 e0       	ldi	r27, 0x01	; 1
    1fa0:	08 95       	ret
    1fa2:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__fp_zero>
    1fa6:	67 2f       	mov	r22, r23
    1fa8:	78 2f       	mov	r23, r24
    1faa:	88 27       	eor	r24, r24
    1fac:	b8 5f       	subi	r27, 0xF8	; 248
    1fae:	39 f0       	breq	.+14     	; 0x1fbe <__fixunssfsi+0x4c>
    1fb0:	b9 3f       	cpi	r27, 0xF9	; 249
    1fb2:	cc f3       	brlt	.-14     	; 0x1fa6 <__fixunssfsi+0x34>
    1fb4:	86 95       	lsr	r24
    1fb6:	77 95       	ror	r23
    1fb8:	67 95       	ror	r22
    1fba:	b3 95       	inc	r27
    1fbc:	d9 f7       	brne	.-10     	; 0x1fb4 <__fixunssfsi+0x42>
    1fbe:	3e f4       	brtc	.+14     	; 0x1fce <__fixunssfsi+0x5c>
    1fc0:	90 95       	com	r25
    1fc2:	80 95       	com	r24
    1fc4:	70 95       	com	r23
    1fc6:	61 95       	neg	r22
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fca:	8f 4f       	sbci	r24, 0xFF	; 255
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	08 95       	ret

00001fd0 <__fp_cmp>:
    1fd0:	99 0f       	add	r25, r25
    1fd2:	00 08       	sbc	r0, r0
    1fd4:	55 0f       	add	r21, r21
    1fd6:	aa 0b       	sbc	r26, r26
    1fd8:	e0 e8       	ldi	r30, 0x80	; 128
    1fda:	fe ef       	ldi	r31, 0xFE	; 254
    1fdc:	16 16       	cp	r1, r22
    1fde:	17 06       	cpc	r1, r23
    1fe0:	e8 07       	cpc	r30, r24
    1fe2:	f9 07       	cpc	r31, r25
    1fe4:	c0 f0       	brcs	.+48     	; 0x2016 <__fp_cmp+0x46>
    1fe6:	12 16       	cp	r1, r18
    1fe8:	13 06       	cpc	r1, r19
    1fea:	e4 07       	cpc	r30, r20
    1fec:	f5 07       	cpc	r31, r21
    1fee:	98 f0       	brcs	.+38     	; 0x2016 <__fp_cmp+0x46>
    1ff0:	62 1b       	sub	r22, r18
    1ff2:	73 0b       	sbc	r23, r19
    1ff4:	84 0b       	sbc	r24, r20
    1ff6:	95 0b       	sbc	r25, r21
    1ff8:	39 f4       	brne	.+14     	; 0x2008 <__fp_cmp+0x38>
    1ffa:	0a 26       	eor	r0, r26
    1ffc:	61 f0       	breq	.+24     	; 0x2016 <__fp_cmp+0x46>
    1ffe:	23 2b       	or	r18, r19
    2000:	24 2b       	or	r18, r20
    2002:	25 2b       	or	r18, r21
    2004:	21 f4       	brne	.+8      	; 0x200e <__fp_cmp+0x3e>
    2006:	08 95       	ret
    2008:	0a 26       	eor	r0, r26
    200a:	09 f4       	brne	.+2      	; 0x200e <__fp_cmp+0x3e>
    200c:	a1 40       	sbci	r26, 0x01	; 1
    200e:	a6 95       	lsr	r26
    2010:	8f ef       	ldi	r24, 0xFF	; 255
    2012:	81 1d       	adc	r24, r1
    2014:	81 1d       	adc	r24, r1
    2016:	08 95       	ret

00002018 <__fp_inf>:
    2018:	97 f9       	bld	r25, 7
    201a:	9f 67       	ori	r25, 0x7F	; 127
    201c:	80 e8       	ldi	r24, 0x80	; 128
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	08 95       	ret

00002024 <__fp_nan>:
    2024:	9f ef       	ldi	r25, 0xFF	; 255
    2026:	80 ec       	ldi	r24, 0xC0	; 192
    2028:	08 95       	ret

0000202a <__fp_pscA>:
    202a:	00 24       	eor	r0, r0
    202c:	0a 94       	dec	r0
    202e:	16 16       	cp	r1, r22
    2030:	17 06       	cpc	r1, r23
    2032:	18 06       	cpc	r1, r24
    2034:	09 06       	cpc	r0, r25
    2036:	08 95       	ret

00002038 <__fp_pscB>:
    2038:	00 24       	eor	r0, r0
    203a:	0a 94       	dec	r0
    203c:	12 16       	cp	r1, r18
    203e:	13 06       	cpc	r1, r19
    2040:	14 06       	cpc	r1, r20
    2042:	05 06       	cpc	r0, r21
    2044:	08 95       	ret

00002046 <__fp_round>:
    2046:	09 2e       	mov	r0, r25
    2048:	03 94       	inc	r0
    204a:	00 0c       	add	r0, r0
    204c:	11 f4       	brne	.+4      	; 0x2052 <__fp_round+0xc>
    204e:	88 23       	and	r24, r24
    2050:	52 f0       	brmi	.+20     	; 0x2066 <__fp_round+0x20>
    2052:	bb 0f       	add	r27, r27
    2054:	40 f4       	brcc	.+16     	; 0x2066 <__fp_round+0x20>
    2056:	bf 2b       	or	r27, r31
    2058:	11 f4       	brne	.+4      	; 0x205e <__fp_round+0x18>
    205a:	60 ff       	sbrs	r22, 0
    205c:	04 c0       	rjmp	.+8      	; 0x2066 <__fp_round+0x20>
    205e:	6f 5f       	subi	r22, 0xFF	; 255
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	8f 4f       	sbci	r24, 0xFF	; 255
    2064:	9f 4f       	sbci	r25, 0xFF	; 255
    2066:	08 95       	ret

00002068 <__fp_split3>:
    2068:	57 fd       	sbrc	r21, 7
    206a:	90 58       	subi	r25, 0x80	; 128
    206c:	44 0f       	add	r20, r20
    206e:	55 1f       	adc	r21, r21
    2070:	59 f0       	breq	.+22     	; 0x2088 <__fp_splitA+0x10>
    2072:	5f 3f       	cpi	r21, 0xFF	; 255
    2074:	71 f0       	breq	.+28     	; 0x2092 <__fp_splitA+0x1a>
    2076:	47 95       	ror	r20

00002078 <__fp_splitA>:
    2078:	88 0f       	add	r24, r24
    207a:	97 fb       	bst	r25, 7
    207c:	99 1f       	adc	r25, r25
    207e:	61 f0       	breq	.+24     	; 0x2098 <__fp_splitA+0x20>
    2080:	9f 3f       	cpi	r25, 0xFF	; 255
    2082:	79 f0       	breq	.+30     	; 0x20a2 <__fp_splitA+0x2a>
    2084:	87 95       	ror	r24
    2086:	08 95       	ret
    2088:	12 16       	cp	r1, r18
    208a:	13 06       	cpc	r1, r19
    208c:	14 06       	cpc	r1, r20
    208e:	55 1f       	adc	r21, r21
    2090:	f2 cf       	rjmp	.-28     	; 0x2076 <__fp_split3+0xe>
    2092:	46 95       	lsr	r20
    2094:	f1 df       	rcall	.-30     	; 0x2078 <__fp_splitA>
    2096:	08 c0       	rjmp	.+16     	; 0x20a8 <__fp_splitA+0x30>
    2098:	16 16       	cp	r1, r22
    209a:	17 06       	cpc	r1, r23
    209c:	18 06       	cpc	r1, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	f1 cf       	rjmp	.-30     	; 0x2084 <__fp_splitA+0xc>
    20a2:	86 95       	lsr	r24
    20a4:	71 05       	cpc	r23, r1
    20a6:	61 05       	cpc	r22, r1
    20a8:	08 94       	sec
    20aa:	08 95       	ret

000020ac <__fp_zero>:
    20ac:	e8 94       	clt

000020ae <__fp_szero>:
    20ae:	bb 27       	eor	r27, r27
    20b0:	66 27       	eor	r22, r22
    20b2:	77 27       	eor	r23, r23
    20b4:	cb 01       	movw	r24, r22
    20b6:	97 f9       	bld	r25, 7
    20b8:	08 95       	ret

000020ba <__gesf2>:
    20ba:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__fp_cmp>
    20be:	08 f4       	brcc	.+2      	; 0x20c2 <__gesf2+0x8>
    20c0:	8f ef       	ldi	r24, 0xFF	; 255
    20c2:	08 95       	ret

000020c4 <__mulsf3>:
    20c4:	0e 94 75 10 	call	0x20ea	; 0x20ea <__mulsf3x>
    20c8:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__fp_round>
    20cc:	0e 94 15 10 	call	0x202a	; 0x202a <__fp_pscA>
    20d0:	38 f0       	brcs	.+14     	; 0x20e0 <__mulsf3+0x1c>
    20d2:	0e 94 1c 10 	call	0x2038	; 0x2038 <__fp_pscB>
    20d6:	20 f0       	brcs	.+8      	; 0x20e0 <__mulsf3+0x1c>
    20d8:	95 23       	and	r25, r21
    20da:	11 f0       	breq	.+4      	; 0x20e0 <__mulsf3+0x1c>
    20dc:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_inf>
    20e0:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__fp_nan>
    20e4:	11 24       	eor	r1, r1
    20e6:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__fp_szero>

000020ea <__mulsf3x>:
    20ea:	0e 94 34 10 	call	0x2068	; 0x2068 <__fp_split3>
    20ee:	70 f3       	brcs	.-36     	; 0x20cc <__mulsf3+0x8>

000020f0 <__mulsf3_pse>:
    20f0:	95 9f       	mul	r25, r21
    20f2:	c1 f3       	breq	.-16     	; 0x20e4 <__mulsf3+0x20>
    20f4:	95 0f       	add	r25, r21
    20f6:	50 e0       	ldi	r21, 0x00	; 0
    20f8:	55 1f       	adc	r21, r21
    20fa:	62 9f       	mul	r22, r18
    20fc:	f0 01       	movw	r30, r0
    20fe:	72 9f       	mul	r23, r18
    2100:	bb 27       	eor	r27, r27
    2102:	f0 0d       	add	r31, r0
    2104:	b1 1d       	adc	r27, r1
    2106:	63 9f       	mul	r22, r19
    2108:	aa 27       	eor	r26, r26
    210a:	f0 0d       	add	r31, r0
    210c:	b1 1d       	adc	r27, r1
    210e:	aa 1f       	adc	r26, r26
    2110:	64 9f       	mul	r22, r20
    2112:	66 27       	eor	r22, r22
    2114:	b0 0d       	add	r27, r0
    2116:	a1 1d       	adc	r26, r1
    2118:	66 1f       	adc	r22, r22
    211a:	82 9f       	mul	r24, r18
    211c:	22 27       	eor	r18, r18
    211e:	b0 0d       	add	r27, r0
    2120:	a1 1d       	adc	r26, r1
    2122:	62 1f       	adc	r22, r18
    2124:	73 9f       	mul	r23, r19
    2126:	b0 0d       	add	r27, r0
    2128:	a1 1d       	adc	r26, r1
    212a:	62 1f       	adc	r22, r18
    212c:	83 9f       	mul	r24, r19
    212e:	a0 0d       	add	r26, r0
    2130:	61 1d       	adc	r22, r1
    2132:	22 1f       	adc	r18, r18
    2134:	74 9f       	mul	r23, r20
    2136:	33 27       	eor	r19, r19
    2138:	a0 0d       	add	r26, r0
    213a:	61 1d       	adc	r22, r1
    213c:	23 1f       	adc	r18, r19
    213e:	84 9f       	mul	r24, r20
    2140:	60 0d       	add	r22, r0
    2142:	21 1d       	adc	r18, r1
    2144:	82 2f       	mov	r24, r18
    2146:	76 2f       	mov	r23, r22
    2148:	6a 2f       	mov	r22, r26
    214a:	11 24       	eor	r1, r1
    214c:	9f 57       	subi	r25, 0x7F	; 127
    214e:	50 40       	sbci	r21, 0x00	; 0
    2150:	9a f0       	brmi	.+38     	; 0x2178 <__mulsf3_pse+0x88>
    2152:	f1 f0       	breq	.+60     	; 0x2190 <__mulsf3_pse+0xa0>
    2154:	88 23       	and	r24, r24
    2156:	4a f0       	brmi	.+18     	; 0x216a <__mulsf3_pse+0x7a>
    2158:	ee 0f       	add	r30, r30
    215a:	ff 1f       	adc	r31, r31
    215c:	bb 1f       	adc	r27, r27
    215e:	66 1f       	adc	r22, r22
    2160:	77 1f       	adc	r23, r23
    2162:	88 1f       	adc	r24, r24
    2164:	91 50       	subi	r25, 0x01	; 1
    2166:	50 40       	sbci	r21, 0x00	; 0
    2168:	a9 f7       	brne	.-22     	; 0x2154 <__mulsf3_pse+0x64>
    216a:	9e 3f       	cpi	r25, 0xFE	; 254
    216c:	51 05       	cpc	r21, r1
    216e:	80 f0       	brcs	.+32     	; 0x2190 <__mulsf3_pse+0xa0>
    2170:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_inf>
    2174:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__fp_szero>
    2178:	5f 3f       	cpi	r21, 0xFF	; 255
    217a:	e4 f3       	brlt	.-8      	; 0x2174 <__mulsf3_pse+0x84>
    217c:	98 3e       	cpi	r25, 0xE8	; 232
    217e:	d4 f3       	brlt	.-12     	; 0x2174 <__mulsf3_pse+0x84>
    2180:	86 95       	lsr	r24
    2182:	77 95       	ror	r23
    2184:	67 95       	ror	r22
    2186:	b7 95       	ror	r27
    2188:	f7 95       	ror	r31
    218a:	e7 95       	ror	r30
    218c:	9f 5f       	subi	r25, 0xFF	; 255
    218e:	c1 f7       	brne	.-16     	; 0x2180 <__mulsf3_pse+0x90>
    2190:	fe 2b       	or	r31, r30
    2192:	88 0f       	add	r24, r24
    2194:	91 1d       	adc	r25, r1
    2196:	96 95       	lsr	r25
    2198:	87 95       	ror	r24
    219a:	97 f9       	bld	r25, 7
    219c:	08 95       	ret

0000219e <itoa>:
    219e:	45 32       	cpi	r20, 0x25	; 37
    21a0:	51 05       	cpc	r21, r1
    21a2:	20 f4       	brcc	.+8      	; 0x21ac <itoa+0xe>
    21a4:	42 30       	cpi	r20, 0x02	; 2
    21a6:	10 f0       	brcs	.+4      	; 0x21ac <itoa+0xe>
    21a8:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__itoa_ncheck>
    21ac:	fb 01       	movw	r30, r22
    21ae:	10 82       	st	Z, r1
    21b0:	cb 01       	movw	r24, r22
    21b2:	08 95       	ret

000021b4 <__itoa_ncheck>:
    21b4:	bb 27       	eor	r27, r27
    21b6:	4a 30       	cpi	r20, 0x0A	; 10
    21b8:	31 f4       	brne	.+12     	; 0x21c6 <__itoa_ncheck+0x12>
    21ba:	99 23       	and	r25, r25
    21bc:	22 f4       	brpl	.+8      	; 0x21c6 <__itoa_ncheck+0x12>
    21be:	bd e2       	ldi	r27, 0x2D	; 45
    21c0:	90 95       	com	r25
    21c2:	81 95       	neg	r24
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__utoa_common>

000021ca <__utoa_ncheck>:
    21ca:	bb 27       	eor	r27, r27

000021cc <__utoa_common>:
    21cc:	fb 01       	movw	r30, r22
    21ce:	55 27       	eor	r21, r21
    21d0:	aa 27       	eor	r26, r26
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	aa 1f       	adc	r26, r26
    21d8:	a4 17       	cp	r26, r20
    21da:	10 f0       	brcs	.+4      	; 0x21e0 <__utoa_common+0x14>
    21dc:	a4 1b       	sub	r26, r20
    21de:	83 95       	inc	r24
    21e0:	50 51       	subi	r21, 0x10	; 16
    21e2:	b9 f7       	brne	.-18     	; 0x21d2 <__utoa_common+0x6>
    21e4:	a0 5d       	subi	r26, 0xD0	; 208
    21e6:	aa 33       	cpi	r26, 0x3A	; 58
    21e8:	08 f0       	brcs	.+2      	; 0x21ec <__utoa_common+0x20>
    21ea:	a9 5d       	subi	r26, 0xD9	; 217
    21ec:	a1 93       	st	Z+, r26
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	79 f7       	brne	.-34     	; 0x21d0 <__utoa_common+0x4>
    21f2:	b1 11       	cpse	r27, r1
    21f4:	b1 93       	st	Z+, r27
    21f6:	11 92       	st	Z+, r1
    21f8:	cb 01       	movw	r24, r22
    21fa:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <strrev>

000021fe <strrev>:
    21fe:	dc 01       	movw	r26, r24
    2200:	fc 01       	movw	r30, r24
    2202:	67 2f       	mov	r22, r23
    2204:	71 91       	ld	r23, Z+
    2206:	77 23       	and	r23, r23
    2208:	e1 f7       	brne	.-8      	; 0x2202 <strrev+0x4>
    220a:	32 97       	sbiw	r30, 0x02	; 2
    220c:	04 c0       	rjmp	.+8      	; 0x2216 <strrev+0x18>
    220e:	7c 91       	ld	r23, X
    2210:	6d 93       	st	X+, r22
    2212:	70 83       	st	Z, r23
    2214:	62 91       	ld	r22, -Z
    2216:	ae 17       	cp	r26, r30
    2218:	bf 07       	cpc	r27, r31
    221a:	c8 f3       	brcs	.-14     	; 0x220e <strrev+0x10>
    221c:	08 95       	ret

0000221e <_exit>:
    221e:	f8 94       	cli

00002220 <__stop_program>:
    2220:	ff cf       	rjmp	.-2      	; 0x2220 <__stop_program>
