
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  000028f0  00002984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080017e  0080017e  00002aa2  2**0
                  ALLOC
  3 .stab         00002610  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f52  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006006  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006166  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000062f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000833a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000943b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a3c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a802  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 14 	jmp	0x282c	; 0x282c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 14 	jmp	0x282c	; 0x282c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:

/*                                 	HMI Header File                                                      */
#include "HMI_ECU.h"

/*				main HMI_ECU Function		*/
int main(void) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	6c 97       	sbiw	r28, 0x1c	; 28
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	UART_init(); /* initialize UART module*/
     cb2:	0e 94 29 13 	call	0x2652	; 0x2652 <UART_init>
	LCD_init(); /* initialize LCD module*/
     cb6:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_init>
	SET_BIT(DDRB, 0);
     cba:	a7 e3       	ldi	r26, 0x37	; 55
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e7 e3       	ldi	r30, 0x37	; 55
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	81 60       	ori	r24, 0x01	; 1
     cc6:	8c 93       	st	X, r24
	/*		Determined function that call Back by Timer 	*/
	TIMER_setCallBack(TimerControl);
     cc8:	8c e6       	ldi	r24, 0x6C	; 108
     cca:	98 e0       	ldi	r25, 0x08	; 8
     ccc:	0e 94 b1 12 	call	0x2562	; 0x2562 <TIMER_setCallBack>
	/*print start massage on LCD screen*/
	LCD_displayStringRowColumn(0, 3, "Welcome !");
     cd0:	20 e6       	ldi	r18, 0x60	; 96
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	63 e0       	ldi	r22, 0x03	; 3
     cd8:	a9 01       	movw	r20, r18
     cda:	0e 94 17 10 	call	0x202e	; 0x202e <LCD_displayStringRowColumn>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	aa e7       	ldi	r26, 0x7A	; 122
     ce4:	b4 e4       	ldi	r27, 0x44	; 68
     ce6:	89 8f       	std	Y+25, r24	; 0x19
     ce8:	9a 8f       	std	Y+26, r25	; 0x1a
     cea:	ab 8f       	std	Y+27, r26	; 0x1b
     cec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cee:	69 8d       	ldd	r22, Y+25	; 0x19
     cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	4a ef       	ldi	r20, 0xFA	; 250
     cfc:	54 e4       	ldi	r21, 0x44	; 68
     cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	8d 8b       	std	Y+21, r24	; 0x15
     d08:	9e 8b       	std	Y+22, r25	; 0x16
     d0a:	af 8b       	std	Y+23, r26	; 0x17
     d0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d0e:	6d 89       	ldd	r22, Y+21	; 0x15
     d10:	7e 89       	ldd	r23, Y+22	; 0x16
     d12:	8f 89       	ldd	r24, Y+23	; 0x17
     d14:	98 8d       	ldd	r25, Y+24	; 0x18
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e8       	ldi	r20, 0x80	; 128
     d1c:	5f e3       	ldi	r21, 0x3F	; 63
     d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d22:	88 23       	and	r24, r24
     d24:	2c f4       	brge	.+10     	; 0xd30 <main+0x92>
		__ticks = 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9c 8b       	std	Y+20, r25	; 0x14
     d2c:	8b 8b       	std	Y+19, r24	; 0x13
     d2e:	3f c0       	rjmp	.+126    	; 0xdae <main+0x110>
	else if (__tmp > 65535)
     d30:	6d 89       	ldd	r22, Y+21	; 0x15
     d32:	7e 89       	ldd	r23, Y+22	; 0x16
     d34:	8f 89       	ldd	r24, Y+23	; 0x17
     d36:	98 8d       	ldd	r25, Y+24	; 0x18
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	3f ef       	ldi	r19, 0xFF	; 255
     d3c:	4f e7       	ldi	r20, 0x7F	; 127
     d3e:	57 e4       	ldi	r21, 0x47	; 71
     d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d44:	18 16       	cp	r1, r24
     d46:	4c f5       	brge	.+82     	; 0xd9a <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d48:	69 8d       	ldd	r22, Y+25	; 0x19
     d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e2       	ldi	r20, 0x20	; 32
     d56:	51 e4       	ldi	r21, 0x41	; 65
     d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	bc 01       	movw	r22, r24
     d62:	cd 01       	movw	r24, r26
     d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	9c 8b       	std	Y+20, r25	; 0x14
     d6e:	8b 8b       	std	Y+19, r24	; 0x13
     d70:	0f c0       	rjmp	.+30     	; 0xd90 <main+0xf2>
     d72:	88 ec       	ldi	r24, 0xC8	; 200
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9a 8b       	std	Y+18, r25	; 0x12
     d78:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d7a:	89 89       	ldd	r24, Y+17	; 0x11
     d7c:	9a 89       	ldd	r25, Y+18	; 0x12
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <main+0xe0>
     d82:	9a 8b       	std	Y+18, r25	; 0x12
     d84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d86:	8b 89       	ldd	r24, Y+19	; 0x13
     d88:	9c 89       	ldd	r25, Y+20	; 0x14
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	9c 8b       	std	Y+20, r25	; 0x14
     d8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d90:	8b 89       	ldd	r24, Y+19	; 0x13
     d92:	9c 89       	ldd	r25, Y+20	; 0x14
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	69 f7       	brne	.-38     	; 0xd72 <main+0xd4>
     d98:	14 c0       	rjmp	.+40     	; 0xdc2 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9a:	6d 89       	ldd	r22, Y+21	; 0x15
     d9c:	7e 89       	ldd	r23, Y+22	; 0x16
     d9e:	8f 89       	ldd	r24, Y+23	; 0x17
     da0:	98 8d       	ldd	r25, Y+24	; 0x18
     da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	9c 8b       	std	Y+20, r25	; 0x14
     dac:	8b 8b       	std	Y+19, r24	; 0x13
     dae:	8b 89       	ldd	r24, Y+19	; 0x13
     db0:	9c 89       	ldd	r25, Y+20	; 0x14
     db2:	98 8b       	std	Y+16, r25	; 0x10
     db4:	8f 87       	std	Y+15, r24	; 0x0f
     db6:	8f 85       	ldd	r24, Y+15	; 0x0f
     db8:	98 89       	ldd	r25, Y+16	; 0x10
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <main+0x11c>
     dbe:	98 8b       	std	Y+16, r25	; 0x10
     dc0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);/* wait one second to show massage*/

	/* Wait until HMI_ECU is ready */
	while (UART_recieveByte() != '#')
     dc2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_recieveByte>
     dc6:	83 32       	cpi	r24, 0x23	; 35
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <main+0x124>
		;
	/*wait until MC2 Determine that is first used or not and receive Reply */
	if (UART_recieveByte() == SUCCESS) {
     dca:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_recieveByte>
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	11 f4       	brne	.+4      	; 0xdd6 <main+0x138>
		createNewPass(); /*  start to create password */
     dd2:	0e 94 8a 07 	call	0xf14	; 0xf14 <createNewPass>
	} else {
	}
	/* Start of infinity loop */
	while (1) {
		while (0 != state)
     dd6:	80 91 80 01 	lds	r24, 0x0180
     dda:	88 23       	and	r24, r24
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <main+0x138>
			;
		mainOption(); /* print option on LCD Screen choose open door or change password*/
     dde:	0e 94 75 07 	call	0xeea	; 0xeea <mainOption>
		/* receive press key from KeyPad */
		key = KeyPad_getPressedKey();
     de2:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <KeyPad_getPressedKey>
     de6:	80 93 83 01 	sts	0x0183, r24
		if (key == '+') {
     dea:	80 91 83 01 	lds	r24, 0x0183
     dee:	8b 32       	cpi	r24, 0x2B	; 43
     df0:	19 f4       	brne	.+6      	; 0xdf8 <main+0x15a>
			openDoor(); /*if user enter '+' key start to open door mode*/
     df2:	0e 94 99 09 	call	0x1332	; 0x1332 <openDoor>
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <main+0x166>
		} else if (key == '-') {
     df8:	80 91 83 01 	lds	r24, 0x0183
     dfc:	8d 32       	cpi	r24, 0x2D	; 45
     dfe:	11 f4       	brne	.+4      	; 0xe04 <main+0x166>
			changePass(); /*if user enter ''-' key start to change pass mode*/
     e00:	0e 94 2f 08 	call	0x105e	; 0x105e <changePass>
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	aa ef       	ldi	r26, 0xFA	; 250
     e0a:	b3 e4       	ldi	r27, 0x43	; 67
     e0c:	8b 87       	std	Y+11, r24	; 0x0b
     e0e:	9c 87       	std	Y+12, r25	; 0x0c
     e10:	ad 87       	std	Y+13, r26	; 0x0d
     e12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e14:	6b 85       	ldd	r22, Y+11	; 0x0b
     e16:	7c 85       	ldd	r23, Y+12	; 0x0c
     e18:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	4a ef       	ldi	r20, 0xFA	; 250
     e22:	54 e4       	ldi	r21, 0x44	; 68
     e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	8f 83       	std	Y+7, r24	; 0x07
     e2e:	98 87       	std	Y+8, r25	; 0x08
     e30:	a9 87       	std	Y+9, r26	; 0x09
     e32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e34:	6f 81       	ldd	r22, Y+7	; 0x07
     e36:	78 85       	ldd	r23, Y+8	; 0x08
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e8       	ldi	r20, 0x80	; 128
     e42:	5f e3       	ldi	r21, 0x3F	; 63
     e44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e48:	88 23       	and	r24, r24
     e4a:	2c f4       	brge	.+10     	; 0xe56 <main+0x1b8>
		__ticks = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9e 83       	std	Y+6, r25	; 0x06
     e52:	8d 83       	std	Y+5, r24	; 0x05
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <main+0x236>
	else if (__tmp > 65535)
     e56:	6f 81       	ldd	r22, Y+7	; 0x07
     e58:	78 85       	ldd	r23, Y+8	; 0x08
     e5a:	89 85       	ldd	r24, Y+9	; 0x09
     e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	3f ef       	ldi	r19, 0xFF	; 255
     e62:	4f e7       	ldi	r20, 0x7F	; 127
     e64:	57 e4       	ldi	r21, 0x47	; 71
     e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e6a:	18 16       	cp	r1, r24
     e6c:	4c f5       	brge	.+82     	; 0xec0 <main+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e70:	7c 85       	ldd	r23, Y+12	; 0x0c
     e72:	8d 85       	ldd	r24, Y+13	; 0x0d
     e74:	9e 85       	ldd	r25, Y+14	; 0x0e
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e2       	ldi	r20, 0x20	; 32
     e7c:	51 e4       	ldi	r21, 0x41	; 65
     e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8d 83       	std	Y+5, r24	; 0x05
     e96:	0f c0       	rjmp	.+30     	; 0xeb6 <main+0x218>
     e98:	88 ec       	ldi	r24, 0xC8	; 200
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9c 83       	std	Y+4, r25	; 0x04
     e9e:	8b 83       	std	Y+3, r24	; 0x03
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <main+0x206>
     ea8:	9c 83       	std	Y+4, r25	; 0x04
     eaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	69 f7       	brne	.-38     	; 0xe98 <main+0x1fa>
     ebe:	8b cf       	rjmp	.-234    	; 0xdd6 <main+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec0:	6f 81       	ldd	r22, Y+7	; 0x07
     ec2:	78 85       	ldd	r23, Y+8	; 0x08
     ec4:	89 85       	ldd	r24, Y+9	; 0x09
     ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	8d 83       	std	Y+5, r24	; 0x05
     ed4:	8d 81       	ldd	r24, Y+5	; 0x05
     ed6:	9e 81       	ldd	r25, Y+6	; 0x06
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <main+0x242>
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	76 cf       	rjmp	.-276    	; 0xdd6 <main+0x138>

00000eea <mainOption>:
}

/*
 * Description: Function print option on LCD Screen ( open door or change pass ) .
 */
void mainOption(void) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/* print option on LCD Screen ( open door or change pass )*/
	LCD_clearScreen();
     ef2:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
	LCD_displayString(" + : open Door ");
     ef6:	8a e6       	ldi	r24, 0x6A	; 106
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
	LCD_goToRowColumn(1, 0);
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_goToRowColumn>
	LCD_displayString(" - : Change Pass ");
     f06:	8a e7       	ldi	r24, 0x7A	; 122
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
}
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <createNewPass>:

/*
 * Description: Function to create password at first used or change password .
 */
void createNewPass(void) {
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	2f 97       	sbiw	r28, 0x0f	; 15
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
	uint8 stat;
	do {
		/* enter first pass*/
		enterPass(" Enter New Pass ");
     f28:	8c e8       	ldi	r24, 0x8C	; 140
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 c9 08 	call	0x1192	; 0x1192 <enterPass>
		enterPass(" Re-enter Pass "); /* enter second pass*/
     f30:	8d e9       	ldi	r24, 0x9D	; 157
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 c9 08 	call	0x1192	; 0x1192 <enterPass>
		/* wait until MC2 determine that two pass is equal or not*/
		if (UART_recieveByte() == SUCCESS) {
     f38:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_recieveByte>
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	49 f4       	brne	.+18     	; 0xf52 <createNewPass+0x3e>
			LCD_clearScreen();
     f40:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
			/* tells user that enter pass is accepted & store in EEPROM */
			LCD_displayString("Pass is Created");
     f44:	8d ea       	ldi	r24, 0xAD	; 173
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
			stat = SUCCESS; /* make stat success to break while loop*/
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	8f 87       	std	Y+15, r24	; 0x0f
     f50:	07 c0       	rjmp	.+14     	; 0xf60 <createNewPass+0x4c>
		} else {
			LCD_clearScreen();
     f52:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
			/* tells user that enter pass is not accepted */
			LCD_displayString(" ERROR Password ");
     f56:	8d eb       	ldi	r24, 0xBD	; 189
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
			stat = ERROR;/* make stat success to do this again while loop*/
     f5e:	1f 86       	std	Y+15, r1	; 0x0f
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	aa e7       	ldi	r26, 0x7A	; 122
     f66:	b4 e4       	ldi	r27, 0x44	; 68
     f68:	8b 87       	std	Y+11, r24	; 0x0b
     f6a:	9c 87       	std	Y+12, r25	; 0x0c
     f6c:	ad 87       	std	Y+13, r26	; 0x0d
     f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f70:	6b 85       	ldd	r22, Y+11	; 0x0b
     f72:	7c 85       	ldd	r23, Y+12	; 0x0c
     f74:	8d 85       	ldd	r24, Y+13	; 0x0d
     f76:	9e 85       	ldd	r25, Y+14	; 0x0e
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	4a ef       	ldi	r20, 0xFA	; 250
     f7e:	54 e4       	ldi	r21, 0x44	; 68
     f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	8f 83       	std	Y+7, r24	; 0x07
     f8a:	98 87       	std	Y+8, r25	; 0x08
     f8c:	a9 87       	std	Y+9, r26	; 0x09
     f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f90:	6f 81       	ldd	r22, Y+7	; 0x07
     f92:	78 85       	ldd	r23, Y+8	; 0x08
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	2c f4       	brge	.+10     	; 0xfb2 <createNewPass+0x9e>
		__ticks = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9e 83       	std	Y+6, r25	; 0x06
     fae:	8d 83       	std	Y+5, r24	; 0x05
     fb0:	3f c0       	rjmp	.+126    	; 0x1030 <createNewPass+0x11c>
	else if (__tmp > 65535)
     fb2:	6f 81       	ldd	r22, Y+7	; 0x07
     fb4:	78 85       	ldd	r23, Y+8	; 0x08
     fb6:	89 85       	ldd	r24, Y+9	; 0x09
     fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	3f ef       	ldi	r19, 0xFF	; 255
     fbe:	4f e7       	ldi	r20, 0x7F	; 127
     fc0:	57 e4       	ldi	r21, 0x47	; 71
     fc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fc6:	18 16       	cp	r1, r24
     fc8:	4c f5       	brge	.+82     	; 0x101c <createNewPass+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fca:	6b 85       	ldd	r22, Y+11	; 0x0b
     fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fce:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e2       	ldi	r20, 0x20	; 32
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	8d 83       	std	Y+5, r24	; 0x05
     ff2:	0f c0       	rjmp	.+30     	; 0x1012 <createNewPass+0xfe>
     ff4:	88 ec       	ldi	r24, 0xC8	; 200
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <createNewPass+0xec>
    1004:	9c 83       	std	Y+4, r25	; 0x04
    1006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	69 f7       	brne	.-38     	; 0xff4 <createNewPass+0xe0>
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <createNewPass+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101c:	6f 81       	ldd	r22, Y+7	; 0x07
    101e:	78 85       	ldd	r23, Y+8	; 0x08
    1020:	89 85       	ldd	r24, Y+9	; 0x09
    1022:	9a 85       	ldd	r25, Y+10	; 0x0a
    1024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <createNewPass+0x128>
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(1000);
	} while (stat != SUCCESS); /*do this until user enter two equal password*/
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	09 f0       	breq	.+2      	; 0x104c <createNewPass+0x138>
    104a:	6e cf       	rjmp	.-292    	; 0xf28 <createNewPass+0x14>
}
    104c:	2f 96       	adiw	r28, 0x0f	; 15
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <changePass>:

/*
 * Description: Function use to check that password enter is equal to password or not to open garage .
 */
void changePass(void) {
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
	/*enter password by user */
	enterPass(" Enter old Pass");
    1066:	8e ec       	ldi	r24, 0xCE	; 206
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 c9 08 	call	0x1192	; 0x1192 <enterPass>
	/*take replay from MC2 that entered pass is correct or not*/
	if (UART_recieveByte() == SUCCESS) {
    106e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_recieveByte>
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	19 f4       	brne	.+6      	; 0x107c <changePass+0x1e>
		createNewPass(); /*start create new pass*/
    1076:	0e 94 8a 07 	call	0xf14	; 0xf14 <createNewPass>
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <changePass+0x2a>
	} else {
		LCD_clearScreen();
    107c:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
		/*print error massage that means user enter incorrect pass*/
		LCD_displayString("  ERROR Pass ");
    1080:	8e ed       	ldi	r24, 0xDE	; 222
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
	}
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <closeDoor>:

/*
 * Description: Function check that garage open first then close it .
 */
void closeDoor(void) {
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
	/* tells MC2 that MC1 become ready & start communication */
	UART_sendByte('#');
    1096:	83 e2       	ldi	r24, 0x23	; 35
    1098:	0e 94 68 13 	call	0x26d0	; 0x26d0 <UART_sendByte>
	do {
		/*send press key from Key pad to MC2*/
		UART_sendByte(KeyPad_getPressedKey());
    109c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <KeyPad_getPressedKey>
    10a0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <UART_sendByte>
		/*receive replay from MC2 to know that is correct key is press or not*/
	} while (UART_recieveByte() != SUCCESS);
    10a4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_recieveByte>
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	c1 f7       	brne	.-16     	; 0x109c <closeDoor+0xe>

	LCD_clearScreen();
    10ac:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
	/*tells user that garage start closing by print massage on LCD */
	LCD_displayString(" Door is Locking ");
    10b0:	8c ee       	ldi	r24, 0xEC	; 236
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
	TIMER_init(&timePtr); /* initialize timer to start  count*/
    10b8:	88 e7       	ldi	r24, 0x78	; 120
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	0e 94 24 12 	call	0x2448	; 0x2448 <TIMER_init>
	timeIndex = 0; /* Initialize timer interrupt counter */
    10c0:	10 92 7e 01 	sts	0x017E, r1
	g_state = CLOSING; /* indicate that garage in closing mode */
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	80 93 7c 01 	sts	0x017C, r24
	while (g_state == CLOSING)
    10ca:	80 91 7c 01 	lds	r24, 0x017C
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	e1 f3       	breq	.-8      	; 0x10ca <closeDoor+0x3c>
		; /*  wait until garage mode change to close mode */

}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <TimerControl>:

/*
 * Description: it is callBack Function that call by Timer when interrupt has happen .
 */
void TimerControl(void) {
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	/* Increment to show how many timer1 interrupt happen after initialize Timer  */
	timeIndex++;
    10e0:	80 91 7e 01 	lds	r24, 0x017E
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
    10e6:	80 93 7e 01 	sts	0x017E, r24
	/* check first that garage state is closing to close it . */
	if (g_state == CLOSING) {
    10ea:	80 91 7c 01 	lds	r24, 0x017C
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	b1 f4       	brne	.+44     	; 0x111e <TimerControl+0x46>
		/* check second that  time count equal ( 3 time * 5 second )15 second after timer initialize . */
		if (timeIndex >= 3) {
    10f2:	80 91 7e 01 	lds	r24, 0x017E
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <TimerControl+0x24>
    10fa:	48 c0       	rjmp	.+144    	; 0x118c <TimerControl+0xb4>
			/* Clear Timer1 Register & active Sleep mode For Timer1.*/
			TIMER_Deinit();
    10fc:	0e 94 80 12 	call	0x2500	; 0x2500 <TIMER_Deinit>
			/*receive state of garage door */
			if (UART_recieveByte() == CLOSE) {
    1100:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_recieveByte>
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	09 f0       	breq	.+2      	; 0x110a <TimerControl+0x32>
    1108:	41 c0       	rjmp	.+130    	; 0x118c <TimerControl+0xb4>
				g_state = CLOSE; /*change global state of garage door to close state*/
    110a:	83 e0       	ldi	r24, 0x03	; 3
    110c:	80 93 7c 01 	sts	0x017C, r24
				LCD_clearScreen();
    1110:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
				/*print closed massage that indicate of garage door state */
				LCD_displayString(" Door is Closed ");
    1114:	8e ef       	ldi	r24, 0xFE	; 254
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
    111c:	37 c0       	rjmp	.+110    	; 0x118c <TimerControl+0xb4>
			}
		}

	} else if (g_state == BUZZER) { /* check first that garage state is in BUZZER mode */
    111e:	80 91 7c 01 	lds	r24, 0x017C
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	a1 f4       	brne	.+40     	; 0x114e <TimerControl+0x76>
		/* check second that time count equal ( 12 time * 5 second )60 second after timer initialize . */
		if (timeIndex >= 12) {
    1126:	80 91 7e 01 	lds	r24, 0x017E
    112a:	8c 30       	cpi	r24, 0x0C	; 12
    112c:	78 f1       	brcs	.+94     	; 0x118c <TimerControl+0xb4>
			/* take replay from MC2 that garage door is close*/
			if (UART_recieveByte() == CLOSE) {
    112e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_recieveByte>
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	59 f5       	brne	.+86     	; 0x118c <TimerControl+0xb4>
				g_state = CLOSE; /*show state of garage door now is Close*/
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	80 93 7c 01 	sts	0x017C, r24
				/* Clear Timer1 Register & active Sleep mode For Timer1.*/
				TIMER_Deinit();
    113c:	0e 94 80 12 	call	0x2500	; 0x2500 <TIMER_Deinit>
				LCD_clearScreen();
    1140:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
				/*print closed massage that indicate of garage door state */
				LCD_displayString(" Door is Closed ");
    1144:	8e ef       	ldi	r24, 0xFE	; 254
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
    114c:	1f c0       	rjmp	.+62     	; 0x118c <TimerControl+0xb4>
			}
		}
	} else if (g_state == OPENING) { /* check first that garage state is in opening mode */
    114e:	80 91 7c 01 	lds	r24, 0x017C
    1152:	88 23       	and	r24, r24
    1154:	d9 f4       	brne	.+54     	; 0x118c <TimerControl+0xb4>

		/* check second that  time count equal ( 3 time * 5 second )15 second after timer initialize . */
		if (timeIndex >= 3) {
    1156:	80 91 7e 01 	lds	r24, 0x017E
    115a:	83 30       	cpi	r24, 0x03	; 3
    115c:	b8 f0       	brcs	.+46     	; 0x118c <TimerControl+0xb4>
			/* Clear Timer1 Register & active Sleep mode For Timer1.*/
			TIMER_Deinit();
    115e:	0e 94 80 12 	call	0x2500	; 0x2500 <TIMER_Deinit>
			/* take replay from MC2 that garage door is open*/
			if (UART_recieveByte() == OPEN) {
    1162:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_recieveByte>
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	89 f4       	brne	.+34     	; 0x118c <TimerControl+0xb4>
				g_state = OPEN; /*show state of garage door now is open*/
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 7c 01 	sts	0x017C, r24

				LCD_clearScreen();
    1170:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
				/*print open massage that indicate of garage door state */
				LCD_displayString(" Door is Opened ");
    1174:	8f e0       	ldi	r24, 0x0F	; 15
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
				LCD_goToRowColumn(1, 0);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_goToRowColumn>
				/*print massage that indicate to key to close garage door */
				LCD_displayString("+: to Close Door");
    1184:	80 e2       	ldi	r24, 0x20	; 32
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
			}
		}

	}

}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <enterPass>:

/*
 * Description: Function receive press key  From KeyPad & send to Control -ECU
 * pointer to select which massage will appear in LCD Screen .
 */
void enterPass(const char *Str) {
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	60 97       	sbiw	r28, 0x10	; 16
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	98 8b       	std	Y+16, r25	; 0x10
    11a8:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
    11aa:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
	/*print determined massage*/
	LCD_displayString(Str);
    11ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    11b0:	98 89       	ldd	r25, Y+16	; 0x10
    11b2:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_goToRowColumn>
	do {
		/* tells MC2 that MC1 become ready & start communication */
		UART_sendByte('*');
    11be:	8a e2       	ldi	r24, 0x2A	; 42
    11c0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <UART_sendByte>
		/*receive press key from KeyPad Module*/
		key = KeyPad_getPressedKey();
    11c4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <KeyPad_getPressedKey>
    11c8:	80 93 83 01 	sts	0x0183, r24
		/*check if press key is number or option key*/
		if ((key >= 48) && (key <= 57)) {
    11cc:	80 91 83 01 	lds	r24, 0x0183
    11d0:	80 33       	cpi	r24, 0x30	; 48
    11d2:	88 f0       	brcs	.+34     	; 0x11f6 <enterPass+0x64>
    11d4:	80 91 83 01 	lds	r24, 0x0183
    11d8:	8a 33       	cpi	r24, 0x3A	; 58
    11da:	68 f4       	brcc	.+26     	; 0x11f6 <enterPass+0x64>
			key -= 48; /*minus 48 that is ASCII of zero number*/
    11dc:	80 91 83 01 	lds	r24, 0x0183
    11e0:	80 53       	subi	r24, 0x30	; 48
    11e2:	80 93 83 01 	sts	0x0183, r24
			UART_sendByte(key); /*send number of press key */
    11e6:	80 91 83 01 	lds	r24, 0x0183
    11ea:	0e 94 68 13 	call	0x26d0	; 0x26d0 <UART_sendByte>
			LCD_displayCharacter('*'); /*display '*' to indicate that key is send to MC2 */
    11ee:	8a e2       	ldi	r24, 0x2A	; 42
    11f0:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <LCD_displayCharacter>
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <enterPass+0x6c>
		} else {
			/*if press key is option key send by ASCII*/
			UART_sendByte(key);
    11f6:	80 91 83 01 	lds	r24, 0x0183
    11fa:	0e 94 68 13 	call	0x26d0	; 0x26d0 <UART_sendByte>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a8 ec       	ldi	r26, 0xC8	; 200
    1204:	b3 e4       	ldi	r27, 0x43	; 67
    1206:	8b 87       	std	Y+11, r24	; 0x0b
    1208:	9c 87       	std	Y+12, r25	; 0x0c
    120a:	ad 87       	std	Y+13, r26	; 0x0d
    120c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1210:	7c 85       	ldd	r23, Y+12	; 0x0c
    1212:	8d 85       	ldd	r24, Y+13	; 0x0d
    1214:	9e 85       	ldd	r25, Y+14	; 0x0e
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4a ef       	ldi	r20, 0xFA	; 250
    121c:	54 e4       	ldi	r21, 0x44	; 68
    121e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	8f 83       	std	Y+7, r24	; 0x07
    1228:	98 87       	std	Y+8, r25	; 0x08
    122a:	a9 87       	std	Y+9, r26	; 0x09
    122c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    122e:	6f 81       	ldd	r22, Y+7	; 0x07
    1230:	78 85       	ldd	r23, Y+8	; 0x08
    1232:	89 85       	ldd	r24, Y+9	; 0x09
    1234:	9a 85       	ldd	r25, Y+10	; 0x0a
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	5f e3       	ldi	r21, 0x3F	; 63
    123e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1242:	88 23       	and	r24, r24
    1244:	2c f4       	brge	.+10     	; 0x1250 <enterPass+0xbe>
		__ticks = 1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9e 83       	std	Y+6, r25	; 0x06
    124c:	8d 83       	std	Y+5, r24	; 0x05
    124e:	3f c0       	rjmp	.+126    	; 0x12ce <enterPass+0x13c>
	else if (__tmp > 65535)
    1250:	6f 81       	ldd	r22, Y+7	; 0x07
    1252:	78 85       	ldd	r23, Y+8	; 0x08
    1254:	89 85       	ldd	r24, Y+9	; 0x09
    1256:	9a 85       	ldd	r25, Y+10	; 0x0a
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	3f ef       	ldi	r19, 0xFF	; 255
    125c:	4f e7       	ldi	r20, 0x7F	; 127
    125e:	57 e4       	ldi	r21, 0x47	; 71
    1260:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1264:	18 16       	cp	r1, r24
    1266:	4c f5       	brge	.+82     	; 0x12ba <enterPass+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1268:	6b 85       	ldd	r22, Y+11	; 0x0b
    126a:	7c 85       	ldd	r23, Y+12	; 0x0c
    126c:	8d 85       	ldd	r24, Y+13	; 0x0d
    126e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e2       	ldi	r20, 0x20	; 32
    1276:	51 e4       	ldi	r21, 0x41	; 65
    1278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9e 83       	std	Y+6, r25	; 0x06
    128e:	8d 83       	std	Y+5, r24	; 0x05
    1290:	0f c0       	rjmp	.+30     	; 0x12b0 <enterPass+0x11e>
    1292:	88 ec       	ldi	r24, 0xC8	; 200
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9c 83       	std	Y+4, r25	; 0x04
    1298:	8b 83       	std	Y+3, r24	; 0x03
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <enterPass+0x10c>
    12a2:	9c 83       	std	Y+4, r25	; 0x04
    12a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	69 f7       	brne	.-38     	; 0x1292 <enterPass+0x100>
    12b8:	14 c0       	rjmp	.+40     	; 0x12e2 <enterPass+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ba:	6f 81       	ldd	r22, Y+7	; 0x07
    12bc:	78 85       	ldd	r23, Y+8	; 0x08
    12be:	89 85       	ldd	r24, Y+9	; 0x09
    12c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 83       	std	Y+5, r24	; 0x05
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	f1 f7       	brne	.-4      	; 0x12da <enterPass+0x148>
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(400);/*  that wait to synchronize between human & ECU */
	} while (key != '=');
    12e2:	80 91 83 01 	lds	r24, 0x0183
    12e6:	8d 33       	cpi	r24, 0x3D	; 61
    12e8:	09 f0       	breq	.+2      	; 0x12ec <enterPass+0x15a>
    12ea:	69 cf       	rjmp	.-302    	; 0x11be <enterPass+0x2c>
}
    12ec:	60 96       	adiw	r28, 0x10	; 16
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <runBuzzer>:

void runBuzzer(void) {
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    1306:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
	/* print thief massage */
	LCD_displayString(" You are Thief!");
    130a:	81 e3       	ldi	r24, 0x31	; 49
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
	/* initialize timer to start count */
	TIMER_init(&timePtr);
    1312:	88 e7       	ldi	r24, 0x78	; 120
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	0e 94 24 12 	call	0x2448	; 0x2448 <TIMER_init>
	timeIndex = 0; /* Initialize timer interrupt counter */
    131a:	10 92 7e 01 	sts	0x017E, r1
	g_state = BUZZER; /* indicate that garage in Buzzer mode */
    131e:	84 e0       	ldi	r24, 0x04	; 4
    1320:	80 93 7c 01 	sts	0x017C, r24
	while (g_state == BUZZER)
    1324:	80 91 7c 01 	lds	r24, 0x017C
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	e1 f3       	breq	.-8      	; 0x1324 <runBuzzer+0x26>
		;/*  wait until garage mode change from Buzzer mode */

}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <openDoor>:

/*
 * Description: Function check enter password by user to open garage .
 */
void openDoor(void) {
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	2f 97       	sbiw	r28, 0x0f	; 15
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
    1346:	1f 86       	std	Y+15, r1	; 0x0f
	do {
		/*recive password from KeyPad & send to MC2 */
		enterPass(" Plz enter Pass");
    1348:	81 e4       	ldi	r24, 0x41	; 65
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	0e 94 c9 08 	call	0x1192	; 0x1192 <enterPass>
		/*  wait until MC2 is ready */
		while (UART_recieveByte() == '#')
    1350:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_recieveByte>
    1354:	83 32       	cpi	r24, 0x23	; 35
    1356:	e1 f3       	breq	.-8      	; 0x1350 <openDoor+0x1e>
			;
		/* check that entered  pass is correct or not*/
		if (UART_recieveByte() == SUCCESS) {
    1358:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_recieveByte>
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	b9 f4       	brne	.+46     	; 0x138e <openDoor+0x5c>
			LCD_clearScreen();
    1360:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
			/* print massage that indicate garage door is start open */
			LCD_displayString("Door is Opening");
    1364:	81 e5       	ldi	r24, 0x51	; 81
    1366:	91 e0       	ldi	r25, 0x01	; 1
    1368:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
			/* initialize timer to start  count*/
			TIMER_init(&timePtr);
    136c:	88 e7       	ldi	r24, 0x78	; 120
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	0e 94 24 12 	call	0x2448	; 0x2448 <TIMER_init>
			timeIndex = 0; /* Initialize timer interrupt counter */
    1374:	10 92 7e 01 	sts	0x017E, r1
			g_state = OPENING; /* indicate that garage in opening mode */
    1378:	10 92 7c 01 	sts	0x017C, r1
			while (g_state == OPENING)
    137c:	80 91 7c 01 	lds	r24, 0x017C
    1380:	88 23       	and	r24, r24
    1382:	e1 f3       	breq	.-8      	; 0x137c <openDoor+0x4a>
				; /*  wait until garage mode change to open mode */
			closeDoor(); /*  start with close mode */
    1384:	0e 94 47 08 	call	0x108e	; 0x108e <closeDoor>
			i = 10; /* choose (10) that any number > 3 to break while loop*/
    1388:	8a e0       	ldi	r24, 0x0A	; 10
    138a:	8f 87       	std	Y+15, r24	; 0x0f
    138c:	7b c0       	rjmp	.+246    	; 0x1484 <openDoor+0x152>
		} else {
			LCD_clearScreen();
    138e:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_clearScreen>
			/* print massage that entered pass is incorrect */
			LCD_displayString(" 	 ERROR Pass ");
    1392:	81 e6       	ldi	r24, 0x61	; 97
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	aa e7       	ldi	r26, 0x7A	; 122
    13a0:	b4 e4       	ldi	r27, 0x44	; 68
    13a2:	8b 87       	std	Y+11, r24	; 0x0b
    13a4:	9c 87       	std	Y+12, r25	; 0x0c
    13a6:	ad 87       	std	Y+13, r26	; 0x0d
    13a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	4a ef       	ldi	r20, 0xFA	; 250
    13b8:	54 e4       	ldi	r21, 0x44	; 68
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	8f 83       	std	Y+7, r24	; 0x07
    13c4:	98 87       	std	Y+8, r25	; 0x08
    13c6:	a9 87       	std	Y+9, r26	; 0x09
    13c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ca:	6f 81       	ldd	r22, Y+7	; 0x07
    13cc:	78 85       	ldd	r23, Y+8	; 0x08
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13de:	88 23       	and	r24, r24
    13e0:	2c f4       	brge	.+10     	; 0x13ec <openDoor+0xba>
		__ticks = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9e 83       	std	Y+6, r25	; 0x06
    13e8:	8d 83       	std	Y+5, r24	; 0x05
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <openDoor+0x138>
	else if (__tmp > 65535)
    13ec:	6f 81       	ldd	r22, Y+7	; 0x07
    13ee:	78 85       	ldd	r23, Y+8	; 0x08
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	57 e4       	ldi	r21, 0x47	; 71
    13fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1400:	18 16       	cp	r1, r24
    1402:	4c f5       	brge	.+82     	; 0x1456 <openDoor+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1404:	6b 85       	ldd	r22, Y+11	; 0x0b
    1406:	7c 85       	ldd	r23, Y+12	; 0x0c
    1408:	8d 85       	ldd	r24, Y+13	; 0x0d
    140a:	9e 85       	ldd	r25, Y+14	; 0x0e
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	0f c0       	rjmp	.+30     	; 0x144c <openDoor+0x11a>
    142e:	88 ec       	ldi	r24, 0xC8	; 200
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	9c 83       	std	Y+4, r25	; 0x04
    1434:	8b 83       	std	Y+3, r24	; 0x03
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <openDoor+0x108>
    143e:	9c 83       	std	Y+4, r25	; 0x04
    1440:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	9e 81       	ldd	r25, Y+6	; 0x06
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	69 f7       	brne	.-38     	; 0x142e <openDoor+0xfc>
    1454:	14 c0       	rjmp	.+40     	; 0x147e <openDoor+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1456:	6f 81       	ldd	r22, Y+7	; 0x07
    1458:	78 85       	ldd	r23, Y+8	; 0x08
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <openDoor+0x144>
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			i++;
    147e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1480:	8f 5f       	subi	r24, 0xFF	; 255
    1482:	8f 87       	std	Y+15, r24	; 0x0f
		}
	} while (i < 3); /* wait until user enter correct pass or three time wrong password*/
    1484:	8f 85       	ldd	r24, Y+15	; 0x0f
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	08 f4       	brcc	.+2      	; 0x148c <openDoor+0x15a>
    148a:	5e cf       	rjmp	.-324    	; 0x1348 <openDoor+0x16>
	if (i == 3) { /* that means user enter three time wrong password*/
    148c:	8f 85       	ldd	r24, Y+15	; 0x0f
    148e:	83 30       	cpi	r24, 0x03	; 3
    1490:	11 f4       	brne	.+4      	; 0x1496 <openDoor+0x164>
		runBuzzer(); /* start of buzzer mode */
    1492:	0e 94 7f 09 	call	0x12fe	; 0x12fe <runBuzzer>
	}

}
    1496:	2f 96       	adiw	r28, 0x0f	; 15
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <KeyPad_getPressedKey>:


/*
 * Function responsible for getting the pressed keypad key
 */
uint8 KeyPad_getPressedKey(void) {
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <KeyPad_getPressedKey+0x6>
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62

	uint8 col,row;
		while(1)
		{
			for(col=0;col<N_col;col++) /* loop for columns */
    14b2:	1a 82       	std	Y+2, r1	; 0x02
    14b4:	4c c0       	rjmp	.+152    	; 0x154e <KeyPad_getPressedKey+0xa6>
			{
				/*
				 * each time only one of the column pins will be output and
				 * the rest will be input pins include the row pins
				 */
				KEYPAD_DIR = (0b00010000<<col);
    14b6:	ea e3       	ldi	r30, 0x3A	; 58
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	80 e1       	ldi	r24, 0x10	; 16
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <KeyPad_getPressedKey+0x22>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	2a 95       	dec	r18
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <KeyPad_getPressedKey+0x1e>
    14ce:	80 83       	st	Z, r24

				/*
				 * clear the output pin column in this trace and enable the internal
				 * pull up resistors for the rows pins
				 */
				KEYPAD_PORT = (~(0b00010000<<col));
    14d0:	eb e3       	ldi	r30, 0x3B	; 59
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	80 e1       	ldi	r24, 0x10	; 16
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <KeyPad_getPressedKey+0x3e>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <KeyPad_getPressedKey+0x3a>
    14ea:	80 95       	com	r24
    14ec:	80 83       	st	Z, r24
				for(row=0;row<N_row;row++) /* loop for rows */
    14ee:	19 82       	std	Y+1, r1	; 0x01
    14f0:	28 c0       	rjmp	.+80     	; 0x1542 <KeyPad_getPressedKey+0x9a>
				{
					if(BIT_IS_CLEAR(KEYPAD_PIN,row)) /* if the switch is press in this row */
    14f2:	e9 e3       	ldi	r30, 0x39	; 57
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a9 01       	movw	r20, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <KeyPad_getPressedKey+0x62>
    1506:	55 95       	asr	r21
    1508:	47 95       	ror	r20
    150a:	8a 95       	dec	r24
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <KeyPad_getPressedKey+0x5e>
    150e:	ca 01       	movw	r24, r20
    1510:	81 70       	andi	r24, 0x01	; 1
    1512:	90 70       	andi	r25, 0x00	; 0
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	91 f4       	brne	.+36     	; 0x153c <KeyPad_getPressedKey+0x94>
					{
						#if (N_col == 3)
							return KeyPad_4x3_ReturnASCII((row*N_col)+col+1);
						#elif (N_col == 4)
							return KeyPad_4x4_ReturnASCII((row*N_col)+col+1);
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	98 2f       	mov	r25, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	89 0f       	add	r24, r25
    152c:	8f 5f       	subi	r24, 0xFF	; 255
    152e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <KeyPad_4x4_ReturnASCII>
						#endif
					}
				}
			}
		}
	}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret
				/*
				 * clear the output pin column in this trace and enable the internal
				 * pull up resistors for the rows pins
				 */
				KEYPAD_PORT = (~(0b00010000<<col));
				for(row=0;row<N_row;row++) /* loop for rows */
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	84 30       	cpi	r24, 0x04	; 4
    1546:	a8 f2       	brcs	.-86     	; 0x14f2 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void) {

	uint8 col,row;
		while(1)
		{
			for(col=0;col<N_col;col++) /* loop for columns */
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	8a 83       	std	Y+2, r24	; 0x02
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	08 f4       	brcc	.+2      	; 0x1556 <KeyPad_getPressedKey+0xae>
    1554:	b0 cf       	rjmp	.-160    	; 0x14b6 <KeyPad_getPressedKey+0xe>
    1556:	ad cf       	rjmp	.-166    	; 0x14b2 <KeyPad_getPressedKey+0xa>

00001558 <KeyPad_4x4_ReturnASCII>:
		break;
	}
	return 0;
}
#elif(N_col ==4)
static uint8 KeyPad_4x4_ReturnASCII(uint8 num) {
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <KeyPad_4x4_ReturnASCII+0x6>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <KeyPad_4x4_ReturnASCII+0x8>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	89 83       	std	Y+1, r24	; 0x01
	switch (num) {
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3c 83       	std	Y+4, r19	; 0x04
    156e:	2b 83       	std	Y+3, r18	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	88 30       	cpi	r24, 0x08	; 8
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <KeyPad_4x4_ReturnASCII+0x24>
    157a:	70 c0       	rjmp	.+224    	; 0x165c <KeyPad_4x4_ReturnASCII+0x104>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	29 30       	cpi	r18, 0x09	; 9
    1582:	31 05       	cpc	r19, r1
    1584:	5c f5       	brge	.+86     	; 0x15dc <KeyPad_4x4_ReturnASCII+0x84>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	84 30       	cpi	r24, 0x04	; 4
    158c:	91 05       	cpc	r25, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <KeyPad_4x4_ReturnASCII+0x3a>
    1590:	59 c0       	rjmp	.+178    	; 0x1644 <KeyPad_4x4_ReturnASCII+0xec>
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	25 30       	cpi	r18, 0x05	; 5
    1598:	31 05       	cpc	r19, r1
    159a:	9c f4       	brge	.+38     	; 0x15c2 <KeyPad_4x4_ReturnASCII+0x6a>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <KeyPad_4x4_ReturnASCII+0x50>
    15a6:	48 c0       	rjmp	.+144    	; 0x1638 <KeyPad_4x4_ReturnASCII+0xe0>
    15a8:	2b 81       	ldd	r18, Y+3	; 0x03
    15aa:	3c 81       	ldd	r19, Y+4	; 0x04
    15ac:	23 30       	cpi	r18, 0x03	; 3
    15ae:	31 05       	cpc	r19, r1
    15b0:	0c f0       	brlt	.+2      	; 0x15b4 <KeyPad_4x4_ReturnASCII+0x5c>
    15b2:	45 c0       	rjmp	.+138    	; 0x163e <KeyPad_4x4_ReturnASCII+0xe6>
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	91 05       	cpc	r25, r1
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <KeyPad_4x4_ReturnASCII+0x68>
    15be:	39 c0       	rjmp	.+114    	; 0x1632 <KeyPad_4x4_ReturnASCII+0xda>
    15c0:	68 c0       	rjmp	.+208    	; 0x1692 <KeyPad_4x4_ReturnASCII+0x13a>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	26 30       	cpi	r18, 0x06	; 6
    15c8:	31 05       	cpc	r19, r1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <KeyPad_4x4_ReturnASCII+0x76>
    15cc:	41 c0       	rjmp	.+130    	; 0x1650 <KeyPad_4x4_ReturnASCII+0xf8>
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	87 30       	cpi	r24, 0x07	; 7
    15d4:	91 05       	cpc	r25, r1
    15d6:	0c f0       	brlt	.+2      	; 0x15da <KeyPad_4x4_ReturnASCII+0x82>
    15d8:	3e c0       	rjmp	.+124    	; 0x1656 <KeyPad_4x4_ReturnASCII+0xfe>
    15da:	37 c0       	rjmp	.+110    	; 0x164a <KeyPad_4x4_ReturnASCII+0xf2>
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	2c 30       	cpi	r18, 0x0C	; 12
    15e2:	31 05       	cpc	r19, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <KeyPad_4x4_ReturnASCII+0x90>
    15e6:	46 c0       	rjmp	.+140    	; 0x1674 <KeyPad_4x4_ReturnASCII+0x11c>
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	8d 30       	cpi	r24, 0x0D	; 13
    15ee:	91 05       	cpc	r25, r1
    15f0:	5c f4       	brge	.+22     	; 0x1608 <KeyPad_4x4_ReturnASCII+0xb0>
    15f2:	2b 81       	ldd	r18, Y+3	; 0x03
    15f4:	3c 81       	ldd	r19, Y+4	; 0x04
    15f6:	2a 30       	cpi	r18, 0x0A	; 10
    15f8:	31 05       	cpc	r19, r1
    15fa:	b1 f1       	breq	.+108    	; 0x1668 <KeyPad_4x4_ReturnASCII+0x110>
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	8b 30       	cpi	r24, 0x0B	; 11
    1602:	91 05       	cpc	r25, r1
    1604:	a4 f5       	brge	.+104    	; 0x166e <KeyPad_4x4_ReturnASCII+0x116>
    1606:	2d c0       	rjmp	.+90     	; 0x1662 <KeyPad_4x4_ReturnASCII+0x10a>
    1608:	2b 81       	ldd	r18, Y+3	; 0x03
    160a:	3c 81       	ldd	r19, Y+4	; 0x04
    160c:	2e 30       	cpi	r18, 0x0E	; 14
    160e:	31 05       	cpc	r19, r1
    1610:	b9 f1       	breq	.+110    	; 0x1680 <KeyPad_4x4_ReturnASCII+0x128>
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	8e 30       	cpi	r24, 0x0E	; 14
    1618:	91 05       	cpc	r25, r1
    161a:	7c f1       	brlt	.+94     	; 0x167a <KeyPad_4x4_ReturnASCII+0x122>
    161c:	2b 81       	ldd	r18, Y+3	; 0x03
    161e:	3c 81       	ldd	r19, Y+4	; 0x04
    1620:	2f 30       	cpi	r18, 0x0F	; 15
    1622:	31 05       	cpc	r19, r1
    1624:	81 f1       	breq	.+96     	; 0x1686 <KeyPad_4x4_ReturnASCII+0x12e>
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	80 31       	cpi	r24, 0x10	; 16
    162c:	91 05       	cpc	r25, r1
    162e:	71 f1       	breq	.+92     	; 0x168c <KeyPad_4x4_ReturnASCII+0x134>
    1630:	30 c0       	rjmp	.+96     	; 0x1692 <KeyPad_4x4_ReturnASCII+0x13a>
	case 1:		return '7';
    1632:	97 e3       	ldi	r25, 0x37	; 55
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	2e c0       	rjmp	.+92     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 2:		return '8';
    1638:	28 e3       	ldi	r18, 0x38	; 56
    163a:	2a 83       	std	Y+2, r18	; 0x02
    163c:	2b c0       	rjmp	.+86     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 3:		return '9';
    163e:	39 e3       	ldi	r19, 0x39	; 57
    1640:	3a 83       	std	Y+2, r19	; 0x02
    1642:	28 c0       	rjmp	.+80     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 4:		return '/';
    1644:	8f e2       	ldi	r24, 0x2F	; 47
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	25 c0       	rjmp	.+74     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 5:		return '4';
    164a:	94 e3       	ldi	r25, 0x34	; 52
    164c:	9a 83       	std	Y+2, r25	; 0x02
    164e:	22 c0       	rjmp	.+68     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 6:		return '5';
    1650:	25 e3       	ldi	r18, 0x35	; 53
    1652:	2a 83       	std	Y+2, r18	; 0x02
    1654:	1f c0       	rjmp	.+62     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 7:		return '6';
    1656:	36 e3       	ldi	r19, 0x36	; 54
    1658:	3a 83       	std	Y+2, r19	; 0x02
    165a:	1c c0       	rjmp	.+56     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 8:		return '*';
    165c:	8a e2       	ldi	r24, 0x2A	; 42
    165e:	8a 83       	std	Y+2, r24	; 0x02
    1660:	19 c0       	rjmp	.+50     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 9:		return '1';
    1662:	91 e3       	ldi	r25, 0x31	; 49
    1664:	9a 83       	std	Y+2, r25	; 0x02
    1666:	16 c0       	rjmp	.+44     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 10:	return '2';
    1668:	22 e3       	ldi	r18, 0x32	; 50
    166a:	2a 83       	std	Y+2, r18	; 0x02
    166c:	13 c0       	rjmp	.+38     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 11:	return '3';
    166e:	33 e3       	ldi	r19, 0x33	; 51
    1670:	3a 83       	std	Y+2, r19	; 0x02
    1672:	10 c0       	rjmp	.+32     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 12:	return '-';
    1674:	8d e2       	ldi	r24, 0x2D	; 45
    1676:	8a 83       	std	Y+2, r24	; 0x02
    1678:	0d c0       	rjmp	.+26     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 13:	return 8;
    167a:	98 e0       	ldi	r25, 0x08	; 8
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	0a c0       	rjmp	.+20     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 14:	return '0';
    1680:	20 e3       	ldi	r18, 0x30	; 48
    1682:	2a 83       	std	Y+2, r18	; 0x02
    1684:	07 c0       	rjmp	.+14     	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 15:	return '=';
    1686:	3d e3       	ldi	r19, 0x3D	; 61
    1688:	3a 83       	std	Y+2, r19	; 0x02
    168a:	04 c0       	rjmp	.+8      	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 16:	return '+';
    168c:	8b e2       	ldi	r24, 0x2B	; 43
    168e:	8a 83       	std	Y+2, r24	; 0x02
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <KeyPad_4x4_ReturnASCII+0x13c>
			break;
	default:	return '\0';
    1692:	1a 82       	std	Y+2, r1	; 0x02
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
	return 0;
}
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <LCD_sendCommand>:
 *******************************************************************************/

/*
 * Function responsible for Send Order to LCD
 */
void LCD_sendCommand(uint8 command) {
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	e9 97       	sbiw	r28, 0x39	; 57
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	89 af       	std	Y+57, r24	; 0x39
	RS = CLEAR; /* tell LCD that data which will send now is command */
    16ba:	e2 e3       	ldi	r30, 0x32	; 50
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	8f 7e       	andi	r24, 0xEF	; 239
    16c2:	80 83       	st	Z, r24
	RW = CLEAR; /* select write Mode on LCD */
    16c4:	e2 e3       	ldi	r30, 0x32	; 50
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	8f 7d       	andi	r24, 0xDF	; 223
    16cc:	80 83       	st	Z, r24
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a0 e8       	ldi	r26, 0x80	; 128
    16d4:	bf e3       	ldi	r27, 0x3F	; 63
    16d6:	8d ab       	std	Y+53, r24	; 0x35
    16d8:	9e ab       	std	Y+54, r25	; 0x36
    16da:	af ab       	std	Y+55, r26	; 0x37
    16dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16de:	6d a9       	ldd	r22, Y+53	; 0x35
    16e0:	7e a9       	ldd	r23, Y+54	; 0x36
    16e2:	8f a9       	ldd	r24, Y+55	; 0x37
    16e4:	98 ad       	ldd	r25, Y+56	; 0x38
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	4a ef       	ldi	r20, 0xFA	; 250
    16ec:	54 e4       	ldi	r21, 0x44	; 68
    16ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	89 ab       	std	Y+49, r24	; 0x31
    16f8:	9a ab       	std	Y+50, r25	; 0x32
    16fa:	ab ab       	std	Y+51, r26	; 0x33
    16fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1700:	7a a9       	ldd	r23, Y+50	; 0x32
    1702:	8b a9       	ldd	r24, Y+51	; 0x33
    1704:	9c a9       	ldd	r25, Y+52	; 0x34
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e8       	ldi	r20, 0x80	; 128
    170c:	5f e3       	ldi	r21, 0x3F	; 63
    170e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1712:	88 23       	and	r24, r24
    1714:	2c f4       	brge	.+10     	; 0x1720 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	98 ab       	std	Y+48, r25	; 0x30
    171c:	8f a7       	std	Y+47, r24	; 0x2f
    171e:	3f c0       	rjmp	.+126    	; 0x179e <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1720:	69 a9       	ldd	r22, Y+49	; 0x31
    1722:	7a a9       	ldd	r23, Y+50	; 0x32
    1724:	8b a9       	ldd	r24, Y+51	; 0x33
    1726:	9c a9       	ldd	r25, Y+52	; 0x34
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	3f ef       	ldi	r19, 0xFF	; 255
    172c:	4f e7       	ldi	r20, 0x7F	; 127
    172e:	57 e4       	ldi	r21, 0x47	; 71
    1730:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1734:	18 16       	cp	r1, r24
    1736:	4c f5       	brge	.+82     	; 0x178a <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1738:	6d a9       	ldd	r22, Y+53	; 0x35
    173a:	7e a9       	ldd	r23, Y+54	; 0x36
    173c:	8f a9       	ldd	r24, Y+55	; 0x37
    173e:	98 ad       	ldd	r25, Y+56	; 0x38
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e2       	ldi	r20, 0x20	; 32
    1746:	51 e4       	ldi	r21, 0x41	; 65
    1748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	bc 01       	movw	r22, r24
    1752:	cd 01       	movw	r24, r26
    1754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	98 ab       	std	Y+48, r25	; 0x30
    175e:	8f a7       	std	Y+47, r24	; 0x2f
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <LCD_sendCommand+0xdc>
    1762:	88 ec       	ldi	r24, 0xC8	; 200
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	9e a7       	std	Y+46, r25	; 0x2e
    1768:	8d a7       	std	Y+45, r24	; 0x2d
    176a:	8d a5       	ldd	r24, Y+45	; 0x2d
    176c:	9e a5       	ldd	r25, Y+46	; 0x2e
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <LCD_sendCommand+0xca>
    1772:	9e a7       	std	Y+46, r25	; 0x2e
    1774:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1776:	8f a5       	ldd	r24, Y+47	; 0x2f
    1778:	98 a9       	ldd	r25, Y+48	; 0x30
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	98 ab       	std	Y+48, r25	; 0x30
    177e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1780:	8f a5       	ldd	r24, Y+47	; 0x2f
    1782:	98 a9       	ldd	r25, Y+48	; 0x30
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	69 f7       	brne	.-38     	; 0x1762 <LCD_sendCommand+0xbe>
    1788:	14 c0       	rjmp	.+40     	; 0x17b2 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178a:	69 a9       	ldd	r22, Y+49	; 0x31
    178c:	7a a9       	ldd	r23, Y+50	; 0x32
    178e:	8b a9       	ldd	r24, Y+51	; 0x33
    1790:	9c a9       	ldd	r25, Y+52	; 0x34
    1792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	98 ab       	std	Y+48, r25	; 0x30
    179c:	8f a7       	std	Y+47, r24	; 0x2f
    179e:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a0:	98 a9       	ldd	r25, Y+48	; 0x30
    17a2:	9c a7       	std	Y+44, r25	; 0x2c
    17a4:	8b a7       	std	Y+43, r24	; 0x2b
    17a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <LCD_sendCommand+0x106>
    17ae:	9c a7       	std	Y+44, r25	; 0x2c
    17b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
    17b2:	e2 e3       	ldi	r30, 0x32	; 50
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	80 64       	ori	r24, 0x40	; 64
    17ba:	80 83       	st	Z, r24
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	a0 e8       	ldi	r26, 0x80	; 128
    17c2:	bf e3       	ldi	r27, 0x3F	; 63
    17c4:	8f a3       	std	Y+39, r24	; 0x27
    17c6:	98 a7       	std	Y+40, r25	; 0x28
    17c8:	a9 a7       	std	Y+41, r26	; 0x29
    17ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17cc:	6f a1       	ldd	r22, Y+39	; 0x27
    17ce:	78 a5       	ldd	r23, Y+40	; 0x28
    17d0:	89 a5       	ldd	r24, Y+41	; 0x29
    17d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	4a ef       	ldi	r20, 0xFA	; 250
    17da:	54 e4       	ldi	r21, 0x44	; 68
    17dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	8b a3       	std	Y+35, r24	; 0x23
    17e6:	9c a3       	std	Y+36, r25	; 0x24
    17e8:	ad a3       	std	Y+37, r26	; 0x25
    17ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17ec:	6b a1       	ldd	r22, Y+35	; 0x23
    17ee:	7c a1       	ldd	r23, Y+36	; 0x24
    17f0:	8d a1       	ldd	r24, Y+37	; 0x25
    17f2:	9e a1       	ldd	r25, Y+38	; 0x26
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e8       	ldi	r20, 0x80	; 128
    17fa:	5f e3       	ldi	r21, 0x3F	; 63
    17fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1800:	88 23       	and	r24, r24
    1802:	2c f4       	brge	.+10     	; 0x180e <LCD_sendCommand+0x16a>
		__ticks = 1;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	9a a3       	std	Y+34, r25	; 0x22
    180a:	89 a3       	std	Y+33, r24	; 0x21
    180c:	3f c0       	rjmp	.+126    	; 0x188c <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    180e:	6b a1       	ldd	r22, Y+35	; 0x23
    1810:	7c a1       	ldd	r23, Y+36	; 0x24
    1812:	8d a1       	ldd	r24, Y+37	; 0x25
    1814:	9e a1       	ldd	r25, Y+38	; 0x26
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	3f ef       	ldi	r19, 0xFF	; 255
    181a:	4f e7       	ldi	r20, 0x7F	; 127
    181c:	57 e4       	ldi	r21, 0x47	; 71
    181e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1822:	18 16       	cp	r1, r24
    1824:	4c f5       	brge	.+82     	; 0x1878 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1826:	6f a1       	ldd	r22, Y+39	; 0x27
    1828:	78 a5       	ldd	r23, Y+40	; 0x28
    182a:	89 a5       	ldd	r24, Y+41	; 0x29
    182c:	9a a5       	ldd	r25, Y+42	; 0x2a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e2       	ldi	r20, 0x20	; 32
    1834:	51 e4       	ldi	r21, 0x41	; 65
    1836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	bc 01       	movw	r22, r24
    1840:	cd 01       	movw	r24, r26
    1842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	9a a3       	std	Y+34, r25	; 0x22
    184c:	89 a3       	std	Y+33, r24	; 0x21
    184e:	0f c0       	rjmp	.+30     	; 0x186e <LCD_sendCommand+0x1ca>
    1850:	88 ec       	ldi	r24, 0xC8	; 200
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	98 a3       	std	Y+32, r25	; 0x20
    1856:	8f 8f       	std	Y+31, r24	; 0x1f
    1858:	8f 8d       	ldd	r24, Y+31	; 0x1f
    185a:	98 a1       	ldd	r25, Y+32	; 0x20
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <LCD_sendCommand+0x1b8>
    1860:	98 a3       	std	Y+32, r25	; 0x20
    1862:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1864:	89 a1       	ldd	r24, Y+33	; 0x21
    1866:	9a a1       	ldd	r25, Y+34	; 0x22
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	9a a3       	std	Y+34, r25	; 0x22
    186c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186e:	89 a1       	ldd	r24, Y+33	; 0x21
    1870:	9a a1       	ldd	r25, Y+34	; 0x22
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	69 f7       	brne	.-38     	; 0x1850 <LCD_sendCommand+0x1ac>
    1876:	14 c0       	rjmp	.+40     	; 0x18a0 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1878:	6b a1       	ldd	r22, Y+35	; 0x23
    187a:	7c a1       	ldd	r23, Y+36	; 0x24
    187c:	8d a1       	ldd	r24, Y+37	; 0x25
    187e:	9e a1       	ldd	r25, Y+38	; 0x26
    1880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	9a a3       	std	Y+34, r25	; 0x22
    188a:	89 a3       	std	Y+33, r24	; 0x21
    188c:	89 a1       	ldd	r24, Y+33	; 0x21
    188e:	9a a1       	ldd	r25, Y+34	; 0x22
    1890:	9e 8f       	std	Y+30, r25	; 0x1e
    1892:	8d 8f       	std	Y+29, r24	; 0x1d
    1894:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1896:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <LCD_sendCommand+0x1f4>
    189c:	9e 8f       	std	Y+30, r25	; 0x1e
    189e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if(DATA_MODE ==8)
	DATA_OUT = command; /* send command to LCD to make order */
    18a0:	e5 e3       	ldi	r30, 0x35	; 53
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	89 ad       	ldd	r24, Y+57	; 0x39
    18a6:	80 83       	st	Z, r24
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e8       	ldi	r26, 0x80	; 128
    18ae:	bf e3       	ldi	r27, 0x3F	; 63
    18b0:	89 8f       	std	Y+25, r24	; 0x19
    18b2:	9a 8f       	std	Y+26, r25	; 0x1a
    18b4:	ab 8f       	std	Y+27, r26	; 0x1b
    18b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a ef       	ldi	r20, 0xFA	; 250
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8d 8b       	std	Y+21, r24	; 0x15
    18d2:	9e 8b       	std	Y+22, r25	; 0x16
    18d4:	af 8b       	std	Y+23, r26	; 0x17
    18d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18d8:	6d 89       	ldd	r22, Y+21	; 0x15
    18da:	7e 89       	ldd	r23, Y+22	; 0x16
    18dc:	8f 89       	ldd	r24, Y+23	; 0x17
    18de:	98 8d       	ldd	r25, Y+24	; 0x18
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	2c f4       	brge	.+10     	; 0x18fa <LCD_sendCommand+0x256>
		__ticks = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9c 8b       	std	Y+20, r25	; 0x14
    18f6:	8b 8b       	std	Y+19, r24	; 0x13
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    18fa:	6d 89       	ldd	r22, Y+21	; 0x15
    18fc:	7e 89       	ldd	r23, Y+22	; 0x16
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	4c f5       	brge	.+82     	; 0x1964 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	69 8d       	ldd	r22, Y+25	; 0x19
    1914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9c 8b       	std	Y+20, r25	; 0x14
    1938:	8b 8b       	std	Y+19, r24	; 0x13
    193a:	0f c0       	rjmp	.+30     	; 0x195a <LCD_sendCommand+0x2b6>
    193c:	88 ec       	ldi	r24, 0xC8	; 200
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9a 8b       	std	Y+18, r25	; 0x12
    1942:	89 8b       	std	Y+17, r24	; 0x11
    1944:	89 89       	ldd	r24, Y+17	; 0x11
    1946:	9a 89       	ldd	r25, Y+18	; 0x12
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCD_sendCommand+0x2a4>
    194c:	9a 8b       	std	Y+18, r25	; 0x12
    194e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	8b 89       	ldd	r24, Y+19	; 0x13
    1952:	9c 89       	ldd	r25, Y+20	; 0x14
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9c 8b       	std	Y+20, r25	; 0x14
    1958:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195a:	8b 89       	ldd	r24, Y+19	; 0x13
    195c:	9c 89       	ldd	r25, Y+20	; 0x14
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	69 f7       	brne	.-38     	; 0x193c <LCD_sendCommand+0x298>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1964:	6d 89       	ldd	r22, Y+21	; 0x15
    1966:	7e 89       	ldd	r23, Y+22	; 0x16
    1968:	8f 89       	ldd	r24, Y+23	; 0x17
    196a:	98 8d       	ldd	r25, Y+24	; 0x18
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9c 8b       	std	Y+20, r25	; 0x14
    1976:	8b 8b       	std	Y+19, r24	; 0x13
    1978:	8b 89       	ldd	r24, Y+19	; 0x13
    197a:	9c 89       	ldd	r25, Y+20	; 0x14
    197c:	98 8b       	std	Y+16, r25	; 0x10
    197e:	8f 87       	std	Y+15, r24	; 0x0f
    1980:	8f 85       	ldd	r24, Y+15	; 0x0f
    1982:	98 89       	ldd	r25, Y+16	; 0x10
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCD_sendCommand+0x2e0>
    1988:	98 8b       	std	Y+16, r25	; 0x10
    198a:	8f 87       	std	Y+15, r24	; 0x0f
#ifdef LOWER_MODE_BITS
	DATA_OUT = ((command) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    198c:	e2 e3       	ldi	r30, 0x32	; 50
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8f 7b       	andi	r24, 0xBF	; 191
    1994:	80 83       	st	Z, r24
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e8       	ldi	r26, 0x80	; 128
    199c:	bf e3       	ldi	r27, 0x3F	; 63
    199e:	8b 87       	std	Y+11, r24	; 0x0b
    19a0:	9c 87       	std	Y+12, r25	; 0x0c
    19a2:	ad 87       	std	Y+13, r26	; 0x0d
    19a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	4a ef       	ldi	r20, 0xFA	; 250
    19b4:	54 e4       	ldi	r21, 0x44	; 68
    19b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	8f 83       	std	Y+7, r24	; 0x07
    19c0:	98 87       	std	Y+8, r25	; 0x08
    19c2:	a9 87       	std	Y+9, r26	; 0x09
    19c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c6:	6f 81       	ldd	r22, Y+7	; 0x07
    19c8:	78 85       	ldd	r23, Y+8	; 0x08
    19ca:	89 85       	ldd	r24, Y+9	; 0x09
    19cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e8       	ldi	r20, 0x80	; 128
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19da:	88 23       	and	r24, r24
    19dc:	2c f4       	brge	.+10     	; 0x19e8 <LCD_sendCommand+0x344>
		__ticks = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9e 83       	std	Y+6, r25	; 0x06
    19e4:	8d 83       	std	Y+5, r24	; 0x05
    19e6:	3f c0       	rjmp	.+126    	; 0x1a66 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    19e8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ea:	78 85       	ldd	r23, Y+8	; 0x08
    19ec:	89 85       	ldd	r24, Y+9	; 0x09
    19ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	3f ef       	ldi	r19, 0xFF	; 255
    19f4:	4f e7       	ldi	r20, 0x7F	; 127
    19f6:	57 e4       	ldi	r21, 0x47	; 71
    19f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19fc:	18 16       	cp	r1, r24
    19fe:	4c f5       	brge	.+82     	; 0x1a52 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e2       	ldi	r20, 0x20	; 32
    1a0e:	51 e4       	ldi	r21, 0x41	; 65
    1a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	0f c0       	rjmp	.+30     	; 0x1a48 <LCD_sendCommand+0x3a4>
    1a2a:	88 ec       	ldi	r24, 0xC8	; 200
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9c 83       	std	Y+4, r25	; 0x04
    1a30:	8b 83       	std	Y+3, r24	; 0x03
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <LCD_sendCommand+0x392>
    1a3a:	9c 83       	std	Y+4, r25	; 0x04
    1a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	69 f7       	brne	.-38     	; 0x1a2a <LCD_sendCommand+0x386>
    1a50:	14 c0       	rjmp	.+40     	; 0x1a7a <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a52:	6f 81       	ldd	r22, Y+7	; 0x07
    1a54:	78 85       	ldd	r23, Y+8	; 0x08
    1a56:	89 85       	ldd	r24, Y+9	; 0x09
    1a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	9a 83       	std	Y+2, r25	; 0x02
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LCD_sendCommand+0x3ce>
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
}
    1a7a:	e9 96       	adiw	r28, 0x39	; 57
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <LCD_displayCharacter>:

/*
 * Function responsible for Display only One character on LCD
 */
void LCD_displayCharacter(uint8 data) {
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	e9 97       	sbiw	r28, 0x39	; 57
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	89 af       	std	Y+57, r24	; 0x39
	RS = SET; /* tell LCD that data which will send now is DATA */
    1aa2:	e2 e3       	ldi	r30, 0x32	; 50
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 61       	ori	r24, 0x10	; 16
    1aaa:	80 83       	st	Z, r24
	RW = CLEAR; /* select write Mode on LCD */
    1aac:	e2 e3       	ldi	r30, 0x32	; 50
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8f 7d       	andi	r24, 0xDF	; 223
    1ab4:	80 83       	st	Z, r24
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 e8       	ldi	r26, 0x80	; 128
    1abc:	bf e3       	ldi	r27, 0x3F	; 63
    1abe:	8d ab       	std	Y+53, r24	; 0x35
    1ac0:	9e ab       	std	Y+54, r25	; 0x36
    1ac2:	af ab       	std	Y+55, r26	; 0x37
    1ac4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac8:	7e a9       	ldd	r23, Y+54	; 0x36
    1aca:	8f a9       	ldd	r24, Y+55	; 0x37
    1acc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4a ef       	ldi	r20, 0xFA	; 250
    1ad4:	54 e4       	ldi	r21, 0x44	; 68
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	89 ab       	std	Y+49, r24	; 0x31
    1ae0:	9a ab       	std	Y+50, r25	; 0x32
    1ae2:	ab ab       	std	Y+51, r26	; 0x33
    1ae4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ae6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aea:	8b a9       	ldd	r24, Y+51	; 0x33
    1aec:	9c a9       	ldd	r25, Y+52	; 0x34
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e8       	ldi	r20, 0x80	; 128
    1af4:	5f e3       	ldi	r21, 0x3F	; 63
    1af6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	98 ab       	std	Y+48, r25	; 0x30
    1b04:	8f a7       	std	Y+47, r24	; 0x2f
    1b06:	3f c0       	rjmp	.+126    	; 0x1b86 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1b08:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	3f ef       	ldi	r19, 0xFF	; 255
    1b14:	4f e7       	ldi	r20, 0x7F	; 127
    1b16:	57 e4       	ldi	r21, 0x47	; 71
    1b18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	4c f5       	brge	.+82     	; 0x1b72 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b20:	6d a9       	ldd	r22, Y+53	; 0x35
    1b22:	7e a9       	ldd	r23, Y+54	; 0x36
    1b24:	8f a9       	ldd	r24, Y+55	; 0x37
    1b26:	98 ad       	ldd	r25, Y+56	; 0x38
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e2       	ldi	r20, 0x20	; 32
    1b2e:	51 e4       	ldi	r21, 0x41	; 65
    1b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	98 ab       	std	Y+48, r25	; 0x30
    1b46:	8f a7       	std	Y+47, r24	; 0x2f
    1b48:	0f c0       	rjmp	.+30     	; 0x1b68 <LCD_displayCharacter+0xdc>
    1b4a:	88 ec       	ldi	r24, 0xC8	; 200
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9e a7       	std	Y+46, r25	; 0x2e
    1b50:	8d a7       	std	Y+45, r24	; 0x2d
    1b52:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b54:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <LCD_displayCharacter+0xca>
    1b5a:	9e a7       	std	Y+46, r25	; 0x2e
    1b5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b60:	98 a9       	ldd	r25, Y+48	; 0x30
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	98 ab       	std	Y+48, r25	; 0x30
    1b66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	69 f7       	brne	.-38     	; 0x1b4a <LCD_displayCharacter+0xbe>
    1b70:	14 c0       	rjmp	.+40     	; 0x1b9a <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b72:	69 a9       	ldd	r22, Y+49	; 0x31
    1b74:	7a a9       	ldd	r23, Y+50	; 0x32
    1b76:	8b a9       	ldd	r24, Y+51	; 0x33
    1b78:	9c a9       	ldd	r25, Y+52	; 0x34
    1b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	98 ab       	std	Y+48, r25	; 0x30
    1b84:	8f a7       	std	Y+47, r24	; 0x2f
    1b86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b88:	98 a9       	ldd	r25, Y+48	; 0x30
    1b8a:	9c a7       	std	Y+44, r25	; 0x2c
    1b8c:	8b a7       	std	Y+43, r24	; 0x2b
    1b8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b90:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCD_displayCharacter+0x106>
    1b96:	9c a7       	std	Y+44, r25	; 0x2c
    1b98:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
    1b9a:	e2 e3       	ldi	r30, 0x32	; 50
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	80 64       	ori	r24, 0x40	; 64
    1ba2:	80 83       	st	Z, r24
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 e8       	ldi	r26, 0x80	; 128
    1baa:	bf e3       	ldi	r27, 0x3F	; 63
    1bac:	8f a3       	std	Y+39, r24	; 0x27
    1bae:	98 a7       	std	Y+40, r25	; 0x28
    1bb0:	a9 a7       	std	Y+41, r26	; 0x29
    1bb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb6:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb8:	89 a5       	ldd	r24, Y+41	; 0x29
    1bba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a ef       	ldi	r20, 0xFA	; 250
    1bc2:	54 e4       	ldi	r21, 0x44	; 68
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8b a3       	std	Y+35, r24	; 0x23
    1bce:	9c a3       	std	Y+36, r25	; 0x24
    1bd0:	ad a3       	std	Y+37, r26	; 0x25
    1bd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bd4:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd6:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bda:	9e a1       	ldd	r25, Y+38	; 0x26
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be8:	88 23       	and	r24, r24
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9a a3       	std	Y+34, r25	; 0x22
    1bf2:	89 a3       	std	Y+33, r24	; 0x21
    1bf4:	3f c0       	rjmp	.+126    	; 0x1c74 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1bf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	4c f5       	brge	.+82     	; 0x1c60 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c10:	78 a5       	ldd	r23, Y+40	; 0x28
    1c12:	89 a5       	ldd	r24, Y+41	; 0x29
    1c14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9a a3       	std	Y+34, r25	; 0x22
    1c34:	89 a3       	std	Y+33, r24	; 0x21
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <LCD_displayCharacter+0x1ca>
    1c38:	88 ec       	ldi	r24, 0xC8	; 200
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	98 a3       	std	Y+32, r25	; 0x20
    1c3e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c42:	98 a1       	ldd	r25, Y+32	; 0x20
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_displayCharacter+0x1b8>
    1c48:	98 a3       	std	Y+32, r25	; 0x20
    1c4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9a a3       	std	Y+34, r25	; 0x22
    1c54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	89 a1       	ldd	r24, Y+33	; 0x21
    1c58:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <LCD_displayCharacter+0x1ac>
    1c5e:	14 c0       	rjmp	.+40     	; 0x1c88 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	6b a1       	ldd	r22, Y+35	; 0x23
    1c62:	7c a1       	ldd	r23, Y+36	; 0x24
    1c64:	8d a1       	ldd	r24, Y+37	; 0x25
    1c66:	9e a1       	ldd	r25, Y+38	; 0x26
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9a a3       	std	Y+34, r25	; 0x22
    1c72:	89 a3       	std	Y+33, r24	; 0x21
    1c74:	89 a1       	ldd	r24, Y+33	; 0x21
    1c76:	9a a1       	ldd	r25, Y+34	; 0x22
    1c78:	9e 8f       	std	Y+30, r25	; 0x1e
    1c7a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_displayCharacter+0x1f4>
    1c84:	9e 8f       	std	Y+30, r25	; 0x1e
    1c86:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if(DATA_MODE ==8)
	DATA_OUT = data; /* send DATA to LCD to make order */
    1c88:	e5 e3       	ldi	r30, 0x35	; 53
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	89 ad       	ldd	r24, Y+57	; 0x39
    1c8e:	80 83       	st	Z, r24
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a0 e8       	ldi	r26, 0x80	; 128
    1c96:	bf e3       	ldi	r27, 0x3F	; 63
    1c98:	89 8f       	std	Y+25, r24	; 0x19
    1c9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c9c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4a ef       	ldi	r20, 0xFA	; 250
    1cae:	54 e4       	ldi	r21, 0x44	; 68
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8d 8b       	std	Y+21, r24	; 0x15
    1cba:	9e 8b       	std	Y+22, r25	; 0x16
    1cbc:	af 8b       	std	Y+23, r26	; 0x17
    1cbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	3f c0       	rjmp	.+126    	; 0x1d60 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	3f ef       	ldi	r19, 0xFF	; 255
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	57 e4       	ldi	r21, 0x47	; 71
    1cf2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	4c f5       	brge	.+82     	; 0x1d4c <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1cfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e2       	ldi	r20, 0x20	; 32
    1d08:	51 e4       	ldi	r21, 0x41	; 65
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9c 8b       	std	Y+20, r25	; 0x14
    1d20:	8b 8b       	std	Y+19, r24	; 0x13
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <LCD_displayCharacter+0x2b6>
    1d24:	88 ec       	ldi	r24, 0xC8	; 200
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	9a 8b       	std	Y+18, r25	; 0x12
    1d2a:	89 8b       	std	Y+17, r24	; 0x11
    1d2c:	89 89       	ldd	r24, Y+17	; 0x11
    1d2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <LCD_displayCharacter+0x2a4>
    1d34:	9a 8b       	std	Y+18, r25	; 0x12
    1d36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d38:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d42:	8b 89       	ldd	r24, Y+19	; 0x13
    1d44:	9c 89       	ldd	r25, Y+20	; 0x14
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	69 f7       	brne	.-38     	; 0x1d24 <LCD_displayCharacter+0x298>
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d50:	8f 89       	ldd	r24, Y+23	; 0x17
    1d52:	98 8d       	ldd	r25, Y+24	; 0x18
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
    1d60:	8b 89       	ldd	r24, Y+19	; 0x13
    1d62:	9c 89       	ldd	r25, Y+20	; 0x14
    1d64:	98 8b       	std	Y+16, r25	; 0x10
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
    1d68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6a:	98 89       	ldd	r25, Y+16	; 0x10
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <LCD_displayCharacter+0x2e0>
    1d70:	98 8b       	std	Y+16, r25	; 0x10
    1d72:	8f 87       	std	Y+15, r24	; 0x0f
#ifdef LOWER_MODE_BITS
	DATA_OUT = ((data) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    1d74:	e2 e3       	ldi	r30, 0x32	; 50
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	8f 7b       	andi	r24, 0xBF	; 191
    1d7c:	80 83       	st	Z, r24
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	a0 e8       	ldi	r26, 0x80	; 128
    1d84:	bf e3       	ldi	r27, 0x3F	; 63
    1d86:	8b 87       	std	Y+11, r24	; 0x0b
    1d88:	9c 87       	std	Y+12, r25	; 0x0c
    1d8a:	ad 87       	std	Y+13, r26	; 0x0d
    1d8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	4a ef       	ldi	r20, 0xFA	; 250
    1d9c:	54 e4       	ldi	r21, 0x44	; 68
    1d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	8f 83       	std	Y+7, r24	; 0x07
    1da8:	98 87       	std	Y+8, r25	; 0x08
    1daa:	a9 87       	std	Y+9, r26	; 0x09
    1dac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e8       	ldi	r20, 0x80	; 128
    1dbc:	5f e3       	ldi	r21, 0x3F	; 63
    1dbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc2:	88 23       	and	r24, r24
    1dc4:	2c f4       	brge	.+10     	; 0x1dd0 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	3f c0       	rjmp	.+126    	; 0x1e4e <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	4f e7       	ldi	r20, 0x7F	; 127
    1dde:	57 e4       	ldi	r21, 0x47	; 71
    1de0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	4c f5       	brge	.+82     	; 0x1e3a <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e2       	ldi	r20, 0x20	; 32
    1df6:	51 e4       	ldi	r21, 0x41	; 65
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	8d 83       	std	Y+5, r24	; 0x05
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <LCD_displayCharacter+0x3a4>
    1e12:	88 ec       	ldi	r24, 0xC8	; 200
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	9c 83       	std	Y+4, r25	; 0x04
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_displayCharacter+0x392>
    1e22:	9c 83       	std	Y+4, r25	; 0x04
    1e24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e26:	8d 81       	ldd	r24, Y+5	; 0x05
    1e28:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	69 f7       	brne	.-38     	; 0x1e12 <LCD_displayCharacter+0x386>
    1e38:	14 c0       	rjmp	.+40     	; 0x1e62 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3c:	78 85       	ldd	r23, Y+8	; 0x08
    1e3e:	89 85       	ldd	r24, Y+9	; 0x09
    1e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_displayCharacter+0x3ce>
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
}
    1e62:	e9 96       	adiw	r28, 0x39	; 57
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <LCD_displayString>:

/*
 * Function responsible for Display more One character on LCD
 */
void LCD_displayString(const char *Str) {
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <LCD_displayString+0x6>
    1e7a:	0f 92       	push	r0
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	9b 83       	std	Y+3, r25	; 0x03
    1e82:	8a 83       	std	Y+2, r24	; 0x02
		LCD_displayCharacter(*Str);
		Str++;
	}
	************************************************************/

	 uint8 i = 0;
    1e84:	19 82       	std	Y+1, r1	; 0x01
    1e86:	0e c0       	rjmp	.+28     	; 0x1ea4 <LCD_displayString+0x30>
	 while(Str[i] != '\0')
	 {
	 LCD_displayCharacter(Str[i]);
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	9b 81       	ldd	r25, Y+3	; 0x03
    1e92:	fc 01       	movw	r30, r24
    1e94:	e2 0f       	add	r30, r18
    1e96:	f3 1f       	adc	r31, r19
    1e98:	80 81       	ld	r24, Z
    1e9a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <LCD_displayCharacter>
	 i++;
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	8f 5f       	subi	r24, 0xFF	; 255
    1ea2:	89 83       	std	Y+1, r24	; 0x01
		Str++;
	}
	************************************************************/

	 uint8 i = 0;
	 while(Str[i] != '\0')
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	9b 81       	ldd	r25, Y+3	; 0x03
    1eae:	fc 01       	movw	r30, r24
    1eb0:	e2 0f       	add	r30, r18
    1eb2:	f3 1f       	adc	r31, r19
    1eb4:	80 81       	ld	r24, Z
    1eb6:	88 23       	and	r24, r24
    1eb8:	39 f7       	brne	.-50     	; 0x1e88 <LCD_displayString+0x14>
	 LCD_displayCharacter(Str[i]);
	 i++;
	 }
	return;

}
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <LCD_init>:

/*
 * Function responsible to initialize LCD pins and mode .... etc .
 */
void LCD_init(void) {
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	2e 97       	sbiw	r28, 0x0e	; 14
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
	RS_DIR = SET; /* select RS pin output pin */
    1eda:	e1 e3       	ldi	r30, 0x31	; 49
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	80 61       	ori	r24, 0x10	; 16
    1ee2:	80 83       	st	Z, r24
	RW_DIR = SET; /* select RW pin output pin */
    1ee4:	e1 e3       	ldi	r30, 0x31	; 49
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 62       	ori	r24, 0x20	; 32
    1eec:	80 83       	st	Z, r24
	E_DIR = SET; /* select Enable pin output pin */
    1eee:	e1 e3       	ldi	r30, 0x31	; 49
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 64       	ori	r24, 0x40	; 64
    1ef6:	80 83       	st	Z, r24
#if (DATA_MODE == 8)
	DATA_DIR = 0xFF; /* select LCD DATA PORT Output pin */
    1ef8:	e4 e3       	ldi	r30, 0x34	; 52
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	8f ef       	ldi	r24, 0xFF	; 255
    1efe:	80 83       	st	Z, r24
	/* LCD Configuration Mode of number of DATA line = 8 lines */
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
    1f00:	88 e3       	ldi	r24, 0x38	; 56
    1f02:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>

#ifdef LOWER_MODE_BITS
	DATA_DIR |= 0x0F; /* select first 4 bits as a output pins */
#endif
#endif
	LCD_sendCommand(CURSOR_OFF); /* hide cursor from LCD */
    1f06:	8c e0       	ldi	r24, 0x0C	; 12
    1f08:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
	LCD_sendCommand(AUTO_INCREMENT); /* hide cursor from LCD */
    1f0c:	86 e0       	ldi	r24, 0x06	; 6
    1f0e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e0       	ldi	r26, 0x00	; 0
    1f1e:	b0 e4       	ldi	r27, 0x40	; 64
    1f20:	8b 87       	std	Y+11, r24	; 0x0b
    1f22:	9c 87       	std	Y+12, r25	; 0x0c
    1f24:	ad 87       	std	Y+13, r26	; 0x0d
    1f26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	4a ef       	ldi	r20, 0xFA	; 250
    1f36:	54 e4       	ldi	r21, 0x44	; 68
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8f 83       	std	Y+7, r24	; 0x07
    1f42:	98 87       	std	Y+8, r25	; 0x08
    1f44:	a9 87       	std	Y+9, r26	; 0x09
    1f46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e8       	ldi	r20, 0x80	; 128
    1f56:	5f e3       	ldi	r21, 0x3F	; 63
    1f58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5c:	88 23       	and	r24, r24
    1f5e:	2c f4       	brge	.+10     	; 0x1f6a <LCD_init+0xa4>
		__ticks = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	3f c0       	rjmp	.+126    	; 0x1fe8 <LCD_init+0x122>
	else if (__tmp > 65535)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	3f ef       	ldi	r19, 0xFF	; 255
    1f76:	4f e7       	ldi	r20, 0x7F	; 127
    1f78:	57 e4       	ldi	r21, 0x47	; 71
    1f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	4c f5       	brge	.+82     	; 0x1fd4 <LCD_init+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e2       	ldi	r20, 0x20	; 32
    1f90:	51 e4       	ldi	r21, 0x41	; 65
    1f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
    1faa:	0f c0       	rjmp	.+30     	; 0x1fca <LCD_init+0x104>
    1fac:	88 ec       	ldi	r24, 0xC8	; 200
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9c 83       	std	Y+4, r25	; 0x04
    1fb2:	8b 83       	std	Y+3, r24	; 0x03
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_init+0xf2>
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	9e 83       	std	Y+6, r25	; 0x06
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fca:	8d 81       	ldd	r24, Y+5	; 0x05
    1fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	69 f7       	brne	.-38     	; 0x1fac <LCD_init+0xe6>
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <LCD_init+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd6:	78 85       	ldd	r23, Y+8	; 0x08
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9e 83       	std	Y+6, r25	; 0x06
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fea:	9e 81       	ldd	r25, Y+6	; 0x06
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_init+0x12e>
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    1ffc:	80 e8       	ldi	r24, 0x80	; 128
    1ffe:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
	return;
}
    2002:	2e 96       	adiw	r28, 0x0e	; 14
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <LCD_clearScreen>:

/*
 * Function responsible to send clear command to LCD
 */
void LCD_clearScreen(void) {
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    2022:	80 e8       	ldi	r24, 0x80	; 128
    2024:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
	return;
}
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <LCD_displayStringRowColumn>:

/*
 * Function responsible for Display more One character on LCD & select place on screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <LCD_displayStringRowColumn+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <LCD_displayStringRowColumn+0x8>
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	6a 83       	std	Y+2, r22	; 0x02
    203e:	5c 83       	std	Y+4, r21	; 0x04
    2040:	4b 83       	std	Y+3, r20	; 0x03
	/* call LCD_goToRowColumn function to select cursor location */
	LCD_goToRowColumn(row, col);
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	6a 81       	ldd	r22, Y+2	; 0x02
    2046:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_goToRowColumn>
	/* call LCD_displayString function to display string on LCD */
	LCD_displayString(Str);
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
	return;
}
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <LCD_goToRowColumn>:

/*
 * Function responsible to select place on screen
 */
void LCD_goToRowColumn(uint8 row, uint8 col) {
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <LCD_goToRowColumn+0x6>
    2066:	00 d0       	rcall	.+0      	; 0x2068 <LCD_goToRowColumn+0x8>
    2068:	0f 92       	push	r0
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	8a 83       	std	Y+2, r24	; 0x02
    2070:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch (row) {
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	3d 83       	std	Y+5, r19	; 0x05
    207a:	2c 83       	std	Y+4, r18	; 0x04
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	9d 81       	ldd	r25, Y+5	; 0x05
    2080:	81 30       	cpi	r24, 0x01	; 1
    2082:	91 05       	cpc	r25, r1
    2084:	c9 f0       	breq	.+50     	; 0x20b8 <LCD_goToRowColumn+0x58>
    2086:	2c 81       	ldd	r18, Y+4	; 0x04
    2088:	3d 81       	ldd	r19, Y+5	; 0x05
    208a:	22 30       	cpi	r18, 0x02	; 2
    208c:	31 05       	cpc	r19, r1
    208e:	2c f4       	brge	.+10     	; 0x209a <LCD_goToRowColumn+0x3a>
    2090:	8c 81       	ldd	r24, Y+4	; 0x04
    2092:	9d 81       	ldd	r25, Y+5	; 0x05
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	61 f0       	breq	.+24     	; 0x20b0 <LCD_goToRowColumn+0x50>
    2098:	1a c0       	rjmp	.+52     	; 0x20ce <LCD_goToRowColumn+0x6e>
    209a:	2c 81       	ldd	r18, Y+4	; 0x04
    209c:	3d 81       	ldd	r19, Y+5	; 0x05
    209e:	22 30       	cpi	r18, 0x02	; 2
    20a0:	31 05       	cpc	r19, r1
    20a2:	71 f0       	breq	.+28     	; 0x20c0 <LCD_goToRowColumn+0x60>
    20a4:	8c 81       	ldd	r24, Y+4	; 0x04
    20a6:	9d 81       	ldd	r25, Y+5	; 0x05
    20a8:	83 30       	cpi	r24, 0x03	; 3
    20aa:	91 05       	cpc	r25, r1
    20ac:	69 f0       	breq	.+26     	; 0x20c8 <LCD_goToRowColumn+0x68>
    20ae:	0f c0       	rjmp	.+30     	; 0x20ce <LCD_goToRowColumn+0x6e>
	case 0:
		address = 0x80 | col; /* first address in first line in LCD = 0x00 */
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	80 68       	ori	r24, 0x80	; 128
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	0b c0       	rjmp	.+22     	; 0x20ce <LCD_goToRowColumn+0x6e>
		break;
	case 1:
		address = col | 0xC0; /* first address in second line in LCD = 0x40 */
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	80 6c       	ori	r24, 0xC0	; 192
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	07 c0       	rjmp	.+14     	; 0x20ce <LCD_goToRowColumn+0x6e>
		break;
	case 2:
		address = col | 0x10; /* first address in 3th line in LCD = 0x10 */
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	80 61       	ori	r24, 0x10	; 16
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	03 c0       	rjmp	.+6      	; 0x20ce <LCD_goToRowColumn+0x6e>
		break;
	case 3:
		address = col | 0x50; /* first address in 4th line in LCD = 0x50 */
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	80 65       	ori	r24, 0x50	; 80
    20cc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0x80+Address */
	LCD_sendCommand(address | CURSOR_HOME_LOCATION);
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	80 68       	ori	r24, 0x80	; 128
    20d2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
}
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <LCD_intgerToString>:

/*
 * Function that transform number to string and display to LCD
 */
void LCD_intgerToString(int data) {
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	62 97       	sbiw	r28, 0x12	; 18
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	9a 8b       	std	Y+18, r25	; 0x12
    20fc:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data, buff, 10); /* 10 for decimal */
    20fe:	89 89       	ldd	r24, Y+17	; 0x11
    2100:	9a 89       	ldd	r25, Y+18	; 0x12
    2102:	9e 01       	movw	r18, r28
    2104:	2f 5f       	subi	r18, 0xFF	; 255
    2106:	3f 4f       	sbci	r19, 0xFF	; 255
    2108:	b9 01       	movw	r22, r18
    210a:	4a e0       	ldi	r20, 0x0A	; 10
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	0e 94 31 14 	call	0x2862	; 0x2862 <itoa>
	LCD_displayString(buff);
    2112:	ce 01       	movw	r24, r28
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LCD_displayString>
}
    211a:	62 96       	adiw	r28, 0x12	; 18
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <LCD_creatCustomChar>:

/*
 * Function that Create Custom Character in CGRAM
 */
void LCD_creatCustomChar(uint8 loc, uint8 *msg) {
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <LCD_creatCustomChar+0x6>
    2132:	00 d0       	rcall	.+0      	; 0x2134 <LCD_creatCustomChar+0x8>
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	8a 83       	std	Y+2, r24	; 0x02
    213a:	7c 83       	std	Y+4, r23	; 0x04
    213c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 i;
	if (loc < 8) {
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	88 30       	cpi	r24, 0x08	; 8
    2142:	f8 f4       	brcc	.+62     	; 0x2182 <LCD_creatCustomChar+0x56>
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	80 64       	ori	r24, 0x40	; 64
    2158:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_sendCommand>
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    215c:	19 82       	std	Y+1, r1	; 0x01
    215e:	0e c0       	rjmp	.+28     	; 0x217c <LCD_creatCustomChar+0x50>
			LCD_displayCustomChar(msg[i]);
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	fc 01       	movw	r30, r24
    216c:	e2 0f       	add	r30, r18
    216e:	f3 1f       	adc	r31, r19
    2170:	80 81       	ld	r24, Z
    2172:	0e 94 c8 10 	call	0x2190	; 0x2190 <LCD_displayCustomChar>
void LCD_creatCustomChar(uint8 loc, uint8 *msg) {
	uint8 i;
	if (loc < 8) {
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	8f 5f       	subi	r24, 0xFF	; 255
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	88 30       	cpi	r24, 0x08	; 8
    2180:	78 f3       	brcs	.-34     	; 0x2160 <LCD_creatCustomChar+0x34>
			LCD_displayCustomChar(msg[i]);
		}
	}
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <LCD_displayCustomChar>:

/*
 * Function that Display Custom Character in CGRAM
 */
void LCD_displayCustomChar(uint8 char_data) /* LCD data write function */
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	a7 97       	sbiw	r28, 0x27	; 39
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	8f a3       	std	Y+39, r24	; 0x27

#if(DATA_MODE ==8)
	DATA_OUT = char_data; /* send DATA to LCD to make order */
    21a6:	e5 e3       	ldi	r30, 0x35	; 53
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	8f a1       	ldd	r24, Y+39	; 0x27
    21ac:	80 83       	st	Z, r24

#ifdef LOWER_MODE_BITS
	DATA_OUT = ((char_data) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	RS = SET;/* RS=1 Data reg. */
    21ae:	e2 e3       	ldi	r30, 0x32	; 50
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	80 61       	ori	r24, 0x10	; 16
    21b6:	80 83       	st	Z, r24
	RW = CLEAR; /* RW=0 write operation */
    21b8:	e2 e3       	ldi	r30, 0x32	; 50
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	8f 7d       	andi	r24, 0xDF	; 223
    21c0:	80 83       	st	Z, r24
	E = SET; /* Enable Pulse */
    21c2:	e2 e3       	ldi	r30, 0x32	; 50
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	80 64       	ori	r24, 0x40	; 64
    21ca:	80 83       	st	Z, r24
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e8       	ldi	r26, 0x80	; 128
    21d2:	bf e3       	ldi	r27, 0x3F	; 63
    21d4:	8b a3       	std	Y+35, r24	; 0x23
    21d6:	9c a3       	std	Y+36, r25	; 0x24
    21d8:	ad a3       	std	Y+37, r26	; 0x25
    21da:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21dc:	6b a1       	ldd	r22, Y+35	; 0x23
    21de:	7c a1       	ldd	r23, Y+36	; 0x24
    21e0:	8d a1       	ldd	r24, Y+37	; 0x25
    21e2:	9e a1       	ldd	r25, Y+38	; 0x26
    21e4:	2b ea       	ldi	r18, 0xAB	; 171
    21e6:	3a ea       	ldi	r19, 0xAA	; 170
    21e8:	4a e2       	ldi	r20, 0x2A	; 42
    21ea:	50 e4       	ldi	r21, 0x40	; 64
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8f 8f       	std	Y+31, r24	; 0x1f
    21f6:	98 a3       	std	Y+32, r25	; 0x20
    21f8:	a9 a3       	std	Y+33, r26	; 0x21
    21fa:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    21fc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21fe:	78 a1       	ldd	r23, Y+32	; 0x20
    2200:	89 a1       	ldd	r24, Y+33	; 0x21
    2202:	9a a1       	ldd	r25, Y+34	; 0x22
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	1c f4       	brge	.+6      	; 0x221a <LCD_displayCustomChar+0x8a>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	8e 8f       	std	Y+30, r24	; 0x1e
    2218:	91 c0       	rjmp	.+290    	; 0x233c <LCD_displayCustomChar+0x1ac>
	else if (__tmp > 255)
    221a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    221c:	78 a1       	ldd	r23, Y+32	; 0x20
    221e:	89 a1       	ldd	r24, Y+33	; 0x21
    2220:	9a a1       	ldd	r25, Y+34	; 0x22
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4f e7       	ldi	r20, 0x7F	; 127
    2228:	53 e4       	ldi	r21, 0x43	; 67
    222a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    222e:	18 16       	cp	r1, r24
    2230:	0c f0       	brlt	.+2      	; 0x2234 <LCD_displayCustomChar+0xa4>
    2232:	7b c0       	rjmp	.+246    	; 0x232a <LCD_displayCustomChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2234:	6b a1       	ldd	r22, Y+35	; 0x23
    2236:	7c a1       	ldd	r23, Y+36	; 0x24
    2238:	8d a1       	ldd	r24, Y+37	; 0x25
    223a:	9e a1       	ldd	r25, Y+38	; 0x26
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	4a e7       	ldi	r20, 0x7A	; 122
    2242:	54 e4       	ldi	r21, 0x44	; 68
    2244:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	8a 8f       	std	Y+26, r24	; 0x1a
    224e:	9b 8f       	std	Y+27, r25	; 0x1b
    2250:	ac 8f       	std	Y+28, r26	; 0x1c
    2252:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2254:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2256:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2258:	8c 8d       	ldd	r24, Y+28	; 0x1c
    225a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	4a ef       	ldi	r20, 0xFA	; 250
    2262:	54 e4       	ldi	r21, 0x44	; 68
    2264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8e 8b       	std	Y+22, r24	; 0x16
    226e:	9f 8b       	std	Y+23, r25	; 0x17
    2270:	a8 8f       	std	Y+24, r26	; 0x18
    2272:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2274:	6e 89       	ldd	r22, Y+22	; 0x16
    2276:	7f 89       	ldd	r23, Y+23	; 0x17
    2278:	88 8d       	ldd	r24, Y+24	; 0x18
    227a:	99 8d       	ldd	r25, Y+25	; 0x19
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	2c f4       	brge	.+10     	; 0x2296 <LCD_displayCustomChar+0x106>
		__ticks = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9d 8b       	std	Y+21, r25	; 0x15
    2292:	8c 8b       	std	Y+20, r24	; 0x14
    2294:	3f c0       	rjmp	.+126    	; 0x2314 <LCD_displayCustomChar+0x184>
	else if (__tmp > 65535)
    2296:	6e 89       	ldd	r22, Y+22	; 0x16
    2298:	7f 89       	ldd	r23, Y+23	; 0x17
    229a:	88 8d       	ldd	r24, Y+24	; 0x18
    229c:	99 8d       	ldd	r25, Y+25	; 0x19
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	3f ef       	ldi	r19, 0xFF	; 255
    22a2:	4f e7       	ldi	r20, 0x7F	; 127
    22a4:	57 e4       	ldi	r21, 0x47	; 71
    22a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	4c f5       	brge	.+82     	; 0x2300 <LCD_displayCustomChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ae:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22b0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e2       	ldi	r20, 0x20	; 32
    22bc:	51 e4       	ldi	r21, 0x41	; 65
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9d 8b       	std	Y+21, r25	; 0x15
    22d4:	8c 8b       	std	Y+20, r24	; 0x14
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <LCD_displayCustomChar+0x166>
    22d8:	88 ec       	ldi	r24, 0xC8	; 200
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	9b 8b       	std	Y+19, r25	; 0x13
    22de:	8a 8b       	std	Y+18, r24	; 0x12
    22e0:	8a 89       	ldd	r24, Y+18	; 0x12
    22e2:	9b 89       	ldd	r25, Y+19	; 0x13
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_displayCustomChar+0x154>
    22e8:	9b 8b       	std	Y+19, r25	; 0x13
    22ea:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ec:	8c 89       	ldd	r24, Y+20	; 0x14
    22ee:	9d 89       	ldd	r25, Y+21	; 0x15
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	9d 8b       	std	Y+21, r25	; 0x15
    22f4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f6:	8c 89       	ldd	r24, Y+20	; 0x14
    22f8:	9d 89       	ldd	r25, Y+21	; 0x15
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	69 f7       	brne	.-38     	; 0x22d8 <LCD_displayCustomChar+0x148>
    22fe:	24 c0       	rjmp	.+72     	; 0x2348 <LCD_displayCustomChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2300:	6e 89       	ldd	r22, Y+22	; 0x16
    2302:	7f 89       	ldd	r23, Y+23	; 0x17
    2304:	88 8d       	ldd	r24, Y+24	; 0x18
    2306:	99 8d       	ldd	r25, Y+25	; 0x19
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9d 8b       	std	Y+21, r25	; 0x15
    2312:	8c 8b       	std	Y+20, r24	; 0x14
    2314:	8c 89       	ldd	r24, Y+20	; 0x14
    2316:	9d 89       	ldd	r25, Y+21	; 0x15
    2318:	99 8b       	std	Y+17, r25	; 0x11
    231a:	88 8b       	std	Y+16, r24	; 0x10
    231c:	88 89       	ldd	r24, Y+16	; 0x10
    231e:	99 89       	ldd	r25, Y+17	; 0x11
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LCD_displayCustomChar+0x190>
    2324:	99 8b       	std	Y+17, r25	; 0x11
    2326:	88 8b       	std	Y+16, r24	; 0x10
    2328:	0f c0       	rjmp	.+30     	; 0x2348 <LCD_displayCustomChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    232a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    232c:	78 a1       	ldd	r23, Y+32	; 0x20
    232e:	89 a1       	ldd	r24, Y+33	; 0x21
    2330:	9a a1       	ldd	r25, Y+34	; 0x22
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8e 8f       	std	Y+30, r24	; 0x1e
    233c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    233e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2340:	8f 85       	ldd	r24, Y+15	; 0x0f
    2342:	8a 95       	dec	r24
    2344:	f1 f7       	brne	.-4      	; 0x2342 <LCD_displayCustomChar+0x1b2>
    2346:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	E = CLEAR;
    2348:	e2 e3       	ldi	r30, 0x32	; 50
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	8f 7b       	andi	r24, 0xBF	; 191
    2350:	80 83       	st	Z, r24
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a0 e0       	ldi	r26, 0x00	; 0
    2358:	b0 e4       	ldi	r27, 0x40	; 64
    235a:	8b 87       	std	Y+11, r24	; 0x0b
    235c:	9c 87       	std	Y+12, r25	; 0x0c
    235e:	ad 87       	std	Y+13, r26	; 0x0d
    2360:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2362:	6b 85       	ldd	r22, Y+11	; 0x0b
    2364:	7c 85       	ldd	r23, Y+12	; 0x0c
    2366:	8d 85       	ldd	r24, Y+13	; 0x0d
    2368:	9e 85       	ldd	r25, Y+14	; 0x0e
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	4a ef       	ldi	r20, 0xFA	; 250
    2370:	54 e4       	ldi	r21, 0x44	; 68
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8f 83       	std	Y+7, r24	; 0x07
    237c:	98 87       	std	Y+8, r25	; 0x08
    237e:	a9 87       	std	Y+9, r26	; 0x09
    2380:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2382:	6f 81       	ldd	r22, Y+7	; 0x07
    2384:	78 85       	ldd	r23, Y+8	; 0x08
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	9a 85       	ldd	r25, Y+10	; 0x0a
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	5f e3       	ldi	r21, 0x3F	; 63
    2392:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2396:	88 23       	and	r24, r24
    2398:	2c f4       	brge	.+10     	; 0x23a4 <LCD_displayCustomChar+0x214>
		__ticks = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	3f c0       	rjmp	.+126    	; 0x2422 <LCD_displayCustomChar+0x292>
	else if (__tmp > 65535)
    23a4:	6f 81       	ldd	r22, Y+7	; 0x07
    23a6:	78 85       	ldd	r23, Y+8	; 0x08
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	3f ef       	ldi	r19, 0xFF	; 255
    23b0:	4f e7       	ldi	r20, 0x7F	; 127
    23b2:	57 e4       	ldi	r21, 0x47	; 71
    23b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	4c f5       	brge	.+82     	; 0x240e <LCD_displayCustomChar+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23be:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e2       	ldi	r20, 0x20	; 32
    23ca:	51 e4       	ldi	r21, 0x41	; 65
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <LCD_displayCustomChar+0x274>
    23e6:	88 ec       	ldi	r24, 0xC8	; 200
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9c 83       	std	Y+4, r25	; 0x04
    23ec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_displayCustomChar+0x262>
    23f6:	9c 83       	std	Y+4, r25	; 0x04
    23f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	69 f7       	brne	.-38     	; 0x23e6 <LCD_displayCustomChar+0x256>
    240c:	14 c0       	rjmp	.+40     	; 0x2436 <LCD_displayCustomChar+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240e:	6f 81       	ldd	r22, Y+7	; 0x07
    2410:	78 85       	ldd	r23, Y+8	; 0x08
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9e 83       	std	Y+6, r25	; 0x06
    2420:	8d 83       	std	Y+5, r24	; 0x05
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <LCD_displayCustomChar+0x29e>
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); /* Data write delay */
	return;

}
    2436:	a7 96       	adiw	r28, 0x27	; 39
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <TIMER_init>:
 * 	1. Set the required clock.
 * 	2. Set the required Mode.
 * 	3. Enable the Interrupt for select Mode Timer1.
 * 	4. Initialize Timer1 Registers
 */
void TIMER_init(TIMER_Config *Str){
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	00 d0       	rcall	.+0      	; 0x244e <TIMER_init+0x6>
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A=0;
    2456:	ef e4       	ldi	r30, 0x4F	; 79
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	10 82       	st	Z, r1

	TCCR1B =(TCCR1B & 0xE7) | (Str->mode<<3);
    245c:	ae e4       	ldi	r26, 0x4E	; 78
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	ee e4       	ldi	r30, 0x4E	; 78
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	28 2f       	mov	r18, r24
    2468:	27 7e       	andi	r18, 0xE7	; 231
    246a:	e9 81       	ldd	r30, Y+1	; 0x01
    246c:	fa 81       	ldd	r31, Y+2	; 0x02
    246e:	80 81       	ld	r24, Z
    2470:	88 2f       	mov	r24, r24
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	82 2b       	or	r24, r18
    2482:	8c 93       	st	X, r24

	TCCR1B =(TCCR1B & 0xF8) | (Str->scale);
    2484:	ae e4       	ldi	r26, 0x4E	; 78
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	ee e4       	ldi	r30, 0x4E	; 78
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	98 2f       	mov	r25, r24
    2490:	98 7f       	andi	r25, 0xF8	; 248
    2492:	e9 81       	ldd	r30, Y+1	; 0x01
    2494:	fa 81       	ldd	r31, Y+2	; 0x02
    2496:	81 81       	ldd	r24, Z+1	; 0x01
    2498:	89 2b       	or	r24, r25
    249a:	8c 93       	st	X, r24

	TCNT1=0;
    249c:	ec e4       	ldi	r30, 0x4C	; 76
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	11 82       	std	Z+1, r1	; 0x01
    24a2:	10 82       	st	Z, r1

	if(Str->mode == CTC){
    24a4:	e9 81       	ldd	r30, Y+1	; 0x01
    24a6:	fa 81       	ldd	r31, Y+2	; 0x02
    24a8:	80 81       	ld	r24, Z
    24aa:	81 30       	cpi	r24, 0x01	; 1
    24ac:	89 f4       	brne	.+34     	; 0x24d0 <TIMER_init+0x88>
		OCR1A=(Str->ctc);
    24ae:	aa e4       	ldi	r26, 0x4A	; 74
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e9 81       	ldd	r30, Y+1	; 0x01
    24b4:	fa 81       	ldd	r31, Y+2	; 0x02
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	11 96       	adiw	r26, 0x01	; 1
    24bc:	9c 93       	st	X, r25
    24be:	8e 93       	st	-X, r24
		TIMSK |=(1<<OCIE1A);
    24c0:	a9 e5       	ldi	r26, 0x59	; 89
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e9 e5       	ldi	r30, 0x59	; 89
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	80 61       	ori	r24, 0x10	; 16
    24cc:	8c 93       	st	X, r24
    24ce:	0c c0       	rjmp	.+24     	; 0x24e8 <TIMER_init+0xa0>
	}else if(Str->mode == OVF){
    24d0:	e9 81       	ldd	r30, Y+1	; 0x01
    24d2:	fa 81       	ldd	r31, Y+2	; 0x02
    24d4:	80 81       	ld	r24, Z
    24d6:	88 23       	and	r24, r24
    24d8:	39 f4       	brne	.+14     	; 0x24e8 <TIMER_init+0xa0>
		TIMSK |=(1<<TOIE1);
    24da:	a9 e5       	ldi	r26, 0x59	; 89
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e9 e5       	ldi	r30, 0x59	; 89
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	84 60       	ori	r24, 0x04	; 4
    24e6:	8c 93       	st	X, r24
	}
	SREG |=(1<<7);
    24e8:	af e5       	ldi	r26, 0x5F	; 95
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	ef e5       	ldi	r30, 0x5F	; 95
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	80 68       	ori	r24, 0x80	; 128
    24f4:	8c 93       	st	X, r24

}
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <TIMER_Deinit>:

/*
 * Description: Function to Clear Timer1 Register & active Sleep mode For Timer1.
 */
void TIMER_Deinit(void){
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2508:	ef e4       	ldi	r30, 0x4F	; 79
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	10 82       	st	Z, r1
	TCCR1B=0;
    250e:	ee e4       	ldi	r30, 0x4E	; 78
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	10 82       	st	Z, r1
	TCNT1=0;
    2514:	ec e4       	ldi	r30, 0x4C	; 76
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	11 82       	std	Z+1, r1	; 0x01
    251a:	10 82       	st	Z, r1
	TIMSK=0;
    251c:	e9 e5       	ldi	r30, 0x59	; 89
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	10 82       	st	Z, r1
	OCR1A=0;
    2522:	ea e4       	ldi	r30, 0x4A	; 74
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	11 82       	std	Z+1, r1	; 0x01
    2528:	10 82       	st	Z, r1
}
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <TIMER_SETCTC>:

/*
 * Description: Function to set Compare Value to Timer1 .
 */
void TIMER_SETCTC(uint16 *Ptr_CTC){
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <TIMER_SETCTC+0x6>
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	9a 83       	std	Y+2, r25	; 0x02
    253c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=0;
    253e:	ec e4       	ldi	r30, 0x4C	; 76
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	11 82       	std	Z+1, r1	; 0x01
    2544:	10 82       	st	Z, r1
	OCR1A=*Ptr_CTC;
    2546:	aa e4       	ldi	r26, 0x4A	; 74
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e9 81       	ldd	r30, Y+1	; 0x01
    254c:	fa 81       	ldd	r31, Y+2	; 0x02
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	11 96       	adiw	r26, 0x01	; 1
    2554:	9c 93       	st	X, r25
    2556:	8e 93       	st	-X, r24
}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <TIMER_setCallBack>:

/*
 * Description: Function to set Which Function Called by Timer1  in ISR Vector.
 */
void TIMER_setCallBack(void (*Fun)(void)){
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	00 d0       	rcall	.+0      	; 0x2568 <TIMER_setCallBack+0x6>
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr=Fun;
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	9a 81       	ldd	r25, Y+2	; 0x02
    2574:	90 93 82 01 	sts	0x0182, r25
    2578:	80 93 81 01 	sts	0x0181, r24
}
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    2586:	1f 92       	push	r1
    2588:	0f 92       	push	r0
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	0f 92       	push	r0
    258e:	11 24       	eor	r1, r1
    2590:	2f 93       	push	r18
    2592:	3f 93       	push	r19
    2594:	4f 93       	push	r20
    2596:	5f 93       	push	r21
    2598:	6f 93       	push	r22
    259a:	7f 93       	push	r23
    259c:	8f 93       	push	r24
    259e:	9f 93       	push	r25
    25a0:	af 93       	push	r26
    25a2:	bf 93       	push	r27
    25a4:	ef 93       	push	r30
    25a6:	ff 93       	push	r31
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL)
    25b0:	80 91 81 01 	lds	r24, 0x0181
    25b4:	90 91 82 01 	lds	r25, 0x0182
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	29 f0       	breq	.+10     	; 0x25c6 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_CallBackPtr)();
    25bc:	e0 91 81 01 	lds	r30, 0x0181
    25c0:	f0 91 82 01 	lds	r31, 0x0182
    25c4:	09 95       	icall
	}

}
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	ff 91       	pop	r31
    25cc:	ef 91       	pop	r30
    25ce:	bf 91       	pop	r27
    25d0:	af 91       	pop	r26
    25d2:	9f 91       	pop	r25
    25d4:	8f 91       	pop	r24
    25d6:	7f 91       	pop	r23
    25d8:	6f 91       	pop	r22
    25da:	5f 91       	pop	r21
    25dc:	4f 91       	pop	r20
    25de:	3f 91       	pop	r19
    25e0:	2f 91       	pop	r18
    25e2:	0f 90       	pop	r0
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	0f 90       	pop	r0
    25e8:	1f 90       	pop	r1
    25ea:	18 95       	reti

000025ec <__vector_8>:

ISR(TIMER1_OVF_vect){
    25ec:	1f 92       	push	r1
    25ee:	0f 92       	push	r0
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	0f 92       	push	r0
    25f4:	11 24       	eor	r1, r1
    25f6:	2f 93       	push	r18
    25f8:	3f 93       	push	r19
    25fa:	4f 93       	push	r20
    25fc:	5f 93       	push	r21
    25fe:	6f 93       	push	r22
    2600:	7f 93       	push	r23
    2602:	8f 93       	push	r24
    2604:	9f 93       	push	r25
    2606:	af 93       	push	r26
    2608:	bf 93       	push	r27
    260a:	ef 93       	push	r30
    260c:	ff 93       	push	r31
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL)
    2616:	80 91 81 01 	lds	r24, 0x0181
    261a:	90 91 82 01 	lds	r25, 0x0182
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	29 f0       	breq	.+10     	; 0x262c <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_CallBackPtr)();
    2622:	e0 91 81 01 	lds	r30, 0x0181
    2626:	f0 91 82 01 	lds	r31, 0x0182
    262a:	09 95       	icall
	}
}
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	ff 91       	pop	r31
    2632:	ef 91       	pop	r30
    2634:	bf 91       	pop	r27
    2636:	af 91       	pop	r26
    2638:	9f 91       	pop	r25
    263a:	8f 91       	pop	r24
    263c:	7f 91       	pop	r23
    263e:	6f 91       	pop	r22
    2640:	5f 91       	pop	r21
    2642:	4f 91       	pop	r20
    2644:	3f 91       	pop	r19
    2646:	2f 91       	pop	r18
    2648:	0f 90       	pop	r0
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	0f 90       	pop	r0
    264e:	1f 90       	pop	r1
    2650:	18 95       	reti

00002652 <UART_init>:
 *******************************************************************************/

/*
 * Function responsible to initialize UART module .
 */
void UART_init(void) {
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA, U2X);
    265a:	ab e2       	ldi	r26, 0x2B	; 43
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	eb e2       	ldi	r30, 0x2B	; 43
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	82 60       	ori	r24, 0x02	; 2
    2666:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	SET_BIT(UCSRB, TXEN);
    2668:	aa e2       	ldi	r26, 0x2A	; 42
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	ea e2       	ldi	r30, 0x2A	; 42
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	88 60       	ori	r24, 0x08	; 8
    2674:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);
    2676:	aa e2       	ldi	r26, 0x2A	; 42
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	ea e2       	ldi	r30, 0x2A	; 42
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	80 61       	ori	r24, 0x10	; 16
    2682:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRC, URSEL);
    2684:	a0 e4       	ldi	r26, 0x40	; 64
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e0 e4       	ldi	r30, 0x40	; 64
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	80 68       	ori	r24, 0x80	; 128
    2690:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
    2692:	a0 e4       	ldi	r26, 0x40	; 64
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	e0 e4       	ldi	r30, 0x40	; 64
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	84 60       	ori	r24, 0x04	; 4
    269e:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
    26a0:	a0 e4       	ldi	r26, 0x40	; 64
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	e0 e4       	ldi	r30, 0x40	; 64
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	82 60       	ori	r24, 0x02	; 2
    26ac:	8c 93       	st	X, r24

	/*	select type of parity */
	SET_BIT(UCSRC, UPM1);
    26ae:	a0 e4       	ldi	r26, 0x40	; 64
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e0 e4       	ldi	r30, 0x40	; 64
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	80 62       	ori	r24, 0x20	; 32
    26ba:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = 12 >> 8;
    26bc:	e0 e4       	ldi	r30, 0x40	; 64
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	10 82       	st	Z, r1
	UBRRL = 12;
    26c2:	e9 e2       	ldi	r30, 0x29	; 41
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	8c e0       	ldi	r24, 0x0C	; 12
    26c8:	80 83       	st	Z, r24

}
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <UART_sendByte>:

/*
 * Function responsible to send byte to another device .
 */
void UART_sendByte(const uint8 data) {
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	0f 92       	push	r0
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	89 83       	std	Y+1, r24	; 0x01

	/* UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    26dc:	eb e2       	ldi	r30, 0x2B	; 43
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	80 72       	andi	r24, 0x20	; 32
    26e8:	90 70       	andi	r25, 0x00	; 0
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	b9 f3       	breq	.-18     	; 0x26dc <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    26ee:	ec e2       	ldi	r30, 0x2C	; 44
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	80 83       	st	Z, r24
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/

}
    26f6:	0f 90       	pop	r0
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <UART_recieveByte>:

/*
 * Function responsible to receive byte from another device .
 */
uint8 UART_recieveByte(void) {
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62

	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2706:	eb e2       	ldi	r30, 0x2B	; 43
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	88 23       	and	r24, r24
    270e:	dc f7       	brge	.-10     	; 0x2706 <UART_recieveByte+0x8>
	/* Read the received data from the RX buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    2710:	ec e2       	ldi	r30, 0x2C	; 44
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
}
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <UART_sendString>:

/*
 * Function responsible to send String from another device .
 */
void UART_sendString(const uint8 *Str) {
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	00 d0       	rcall	.+0      	; 0x2722 <UART_sendString+0x6>
    2722:	0f 92       	push	r0
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	9b 83       	std	Y+3, r25	; 0x03
    272a:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    272c:	19 82       	std	Y+1, r1	; 0x01
    272e:	0e c0       	rjmp	.+28     	; 0x274c <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);		/* send string character by character until null character */
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	28 2f       	mov	r18, r24
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	9b 81       	ldd	r25, Y+3	; 0x03
    273a:	fc 01       	movw	r30, r24
    273c:	e2 0f       	add	r30, r18
    273e:	f3 1f       	adc	r31, r19
    2740:	80 81       	ld	r24, Z
    2742:	0e 94 68 13 	call	0x26d0	; 0x26d0 <UART_sendByte>
		i++;
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	8f 5f       	subi	r24, 0xFF	; 255
    274a:	89 83       	std	Y+1, r24	; 0x01
 * Function responsible to send String from another device .
 */
void UART_sendString(const uint8 *Str) {

	uint8 i = 0;
	while(Str[i] != '\0')
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	9b 81       	ldd	r25, Y+3	; 0x03
    2756:	fc 01       	movw	r30, r24
    2758:	e2 0f       	add	r30, r18
    275a:	f3 1f       	adc	r31, r19
    275c:	80 81       	ld	r24, Z
    275e:	88 23       	and	r24, r24
    2760:	39 f7       	brne	.-50     	; 0x2730 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);		/* send string character by character until null character */
		i++;
	}
	UART_sendByte('#');
    2762:	83 e2       	ldi	r24, 0x23	; 35
    2764:	0e 94 68 13 	call	0x26d0	; 0x26d0 <UART_sendByte>
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/

}
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <UART_receiveString>:

/*
 * Function responsible to receive String from another device .
 */
void UART_receiveString(uint8 *Str) {
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	00 d0       	rcall	.+0      	; 0x277e <UART_receiveString+0xa>
    277e:	00 d0       	rcall	.+0      	; 0x2780 <UART_receiveString+0xc>
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	9b 83       	std	Y+3, r25	; 0x03
    2786:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2788:	19 82       	std	Y+1, r1	; 0x01
	do{

		Str[i] = UART_recieveByte();
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	28 2f       	mov	r18, r24
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	9b 81       	ldd	r25, Y+3	; 0x03
    2794:	8c 01       	movw	r16, r24
    2796:	02 0f       	add	r16, r18
    2798:	13 1f       	adc	r17, r19
    279a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_recieveByte>
    279e:	f8 01       	movw	r30, r16
    27a0:	80 83       	st	Z, r24

	}while(Str[i++] != '#');		/* still receive character until '#' symbol  send */
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	28 2f       	mov	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	9b 81       	ldd	r25, Y+3	; 0x03
    27ac:	fc 01       	movw	r30, r24
    27ae:	e2 0f       	add	r30, r18
    27b0:	f3 1f       	adc	r31, r19
    27b2:	80 81       	ld	r24, Z
    27b4:	1c 82       	std	Y+4, r1	; 0x04
    27b6:	83 32       	cpi	r24, 0x23	; 35
    27b8:	11 f0       	breq	.+4      	; 0x27be <UART_receiveString+0x4a>
    27ba:	f1 e0       	ldi	r31, 0x01	; 1
    27bc:	fc 83       	std	Y+4, r31	; 0x04
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	8f 5f       	subi	r24, 0xFF	; 255
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	8c 81       	ldd	r24, Y+4	; 0x04
    27c6:	88 23       	and	r24, r24
    27c8:	01 f7       	brne	.-64     	; 0x278a <UART_receiveString+0x16>

	Str[--i] = '\0';			/* add null character at the end of string */
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	81 50       	subi	r24, 0x01	; 1
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9b 81       	ldd	r25, Y+3	; 0x03
    27da:	fc 01       	movw	r30, r24
    27dc:	e2 0f       	add	r30, r18
    27de:	f3 1f       	adc	r31, r19
    27e0:	10 82       	st	Z, r1

}
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	1f 91       	pop	r17
    27f0:	0f 91       	pop	r16
    27f2:	08 95       	ret

000027f4 <__prologue_saves__>:
    27f4:	2f 92       	push	r2
    27f6:	3f 92       	push	r3
    27f8:	4f 92       	push	r4
    27fa:	5f 92       	push	r5
    27fc:	6f 92       	push	r6
    27fe:	7f 92       	push	r7
    2800:	8f 92       	push	r8
    2802:	9f 92       	push	r9
    2804:	af 92       	push	r10
    2806:	bf 92       	push	r11
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	ca 1b       	sub	r28, r26
    281e:	db 0b       	sbc	r29, r27
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	09 94       	ijmp

0000282c <__epilogue_restores__>:
    282c:	2a 88       	ldd	r2, Y+18	; 0x12
    282e:	39 88       	ldd	r3, Y+17	; 0x11
    2830:	48 88       	ldd	r4, Y+16	; 0x10
    2832:	5f 84       	ldd	r5, Y+15	; 0x0f
    2834:	6e 84       	ldd	r6, Y+14	; 0x0e
    2836:	7d 84       	ldd	r7, Y+13	; 0x0d
    2838:	8c 84       	ldd	r8, Y+12	; 0x0c
    283a:	9b 84       	ldd	r9, Y+11	; 0x0b
    283c:	aa 84       	ldd	r10, Y+10	; 0x0a
    283e:	b9 84       	ldd	r11, Y+9	; 0x09
    2840:	c8 84       	ldd	r12, Y+8	; 0x08
    2842:	df 80       	ldd	r13, Y+7	; 0x07
    2844:	ee 80       	ldd	r14, Y+6	; 0x06
    2846:	fd 80       	ldd	r15, Y+5	; 0x05
    2848:	0c 81       	ldd	r16, Y+4	; 0x04
    284a:	1b 81       	ldd	r17, Y+3	; 0x03
    284c:	aa 81       	ldd	r26, Y+2	; 0x02
    284e:	b9 81       	ldd	r27, Y+1	; 0x01
    2850:	ce 0f       	add	r28, r30
    2852:	d1 1d       	adc	r29, r1
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	ed 01       	movw	r28, r26
    2860:	08 95       	ret

00002862 <itoa>:
    2862:	fb 01       	movw	r30, r22
    2864:	9f 01       	movw	r18, r30
    2866:	e8 94       	clt
    2868:	42 30       	cpi	r20, 0x02	; 2
    286a:	c4 f0       	brlt	.+48     	; 0x289c <itoa+0x3a>
    286c:	45 32       	cpi	r20, 0x25	; 37
    286e:	b4 f4       	brge	.+44     	; 0x289c <itoa+0x3a>
    2870:	4a 30       	cpi	r20, 0x0A	; 10
    2872:	29 f4       	brne	.+10     	; 0x287e <itoa+0x1c>
    2874:	97 fb       	bst	r25, 7
    2876:	1e f4       	brtc	.+6      	; 0x287e <itoa+0x1c>
    2878:	90 95       	com	r25
    287a:	81 95       	neg	r24
    287c:	9f 4f       	sbci	r25, 0xFF	; 255
    287e:	64 2f       	mov	r22, r20
    2880:	77 27       	eor	r23, r23
    2882:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__udivmodhi4>
    2886:	80 5d       	subi	r24, 0xD0	; 208
    2888:	8a 33       	cpi	r24, 0x3A	; 58
    288a:	0c f0       	brlt	.+2      	; 0x288e <itoa+0x2c>
    288c:	89 5d       	subi	r24, 0xD9	; 217
    288e:	81 93       	st	Z+, r24
    2890:	cb 01       	movw	r24, r22
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	a1 f7       	brne	.-24     	; 0x287e <itoa+0x1c>
    2896:	16 f4       	brtc	.+4      	; 0x289c <itoa+0x3a>
    2898:	5d e2       	ldi	r21, 0x2D	; 45
    289a:	51 93       	st	Z+, r21
    289c:	10 82       	st	Z, r1
    289e:	c9 01       	movw	r24, r18
    28a0:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <strrev>

000028a4 <strrev>:
    28a4:	dc 01       	movw	r26, r24
    28a6:	fc 01       	movw	r30, r24
    28a8:	67 2f       	mov	r22, r23
    28aa:	71 91       	ld	r23, Z+
    28ac:	77 23       	and	r23, r23
    28ae:	e1 f7       	brne	.-8      	; 0x28a8 <strrev+0x4>
    28b0:	32 97       	sbiw	r30, 0x02	; 2
    28b2:	04 c0       	rjmp	.+8      	; 0x28bc <strrev+0x18>
    28b4:	7c 91       	ld	r23, X
    28b6:	6d 93       	st	X+, r22
    28b8:	70 83       	st	Z, r23
    28ba:	62 91       	ld	r22, -Z
    28bc:	ae 17       	cp	r26, r30
    28be:	bf 07       	cpc	r27, r31
    28c0:	c8 f3       	brcs	.-14     	; 0x28b4 <strrev+0x10>
    28c2:	08 95       	ret

000028c4 <__udivmodhi4>:
    28c4:	aa 1b       	sub	r26, r26
    28c6:	bb 1b       	sub	r27, r27
    28c8:	51 e1       	ldi	r21, 0x11	; 17
    28ca:	07 c0       	rjmp	.+14     	; 0x28da <__udivmodhi4_ep>

000028cc <__udivmodhi4_loop>:
    28cc:	aa 1f       	adc	r26, r26
    28ce:	bb 1f       	adc	r27, r27
    28d0:	a6 17       	cp	r26, r22
    28d2:	b7 07       	cpc	r27, r23
    28d4:	10 f0       	brcs	.+4      	; 0x28da <__udivmodhi4_ep>
    28d6:	a6 1b       	sub	r26, r22
    28d8:	b7 0b       	sbc	r27, r23

000028da <__udivmodhi4_ep>:
    28da:	88 1f       	adc	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	5a 95       	dec	r21
    28e0:	a9 f7       	brne	.-22     	; 0x28cc <__udivmodhi4_loop>
    28e2:	80 95       	com	r24
    28e4:	90 95       	com	r25
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	08 95       	ret

000028ec <_exit>:
    28ec:	f8 94       	cli

000028ee <__stop_program>:
    28ee:	ff cf       	rjmp	.-2      	; 0x28ee <__stop_program>
