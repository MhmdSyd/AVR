
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c4e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002c4e  00002cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000225c  00000000  00000000  00002cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c4b  00000000  00000000  00004f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a37a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ac08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f1 06 	call	0xde2	; 0xde2 <main>
      7a:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e6       	ldi	r26, 0x6C	; 108
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	8c e6       	ldi	r24, 0x6C	; 108
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6c e6       	ldi	r22, 0x6C	; 108
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <EEPROM_init>:
#include "EEPROM.h"

#include "I2C.h"

void EEPROM_init(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
     c96:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <TWI_init>
}
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <EEPROM_writeByte+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <EEPROM_writeByte+0x8>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     cb2:	0e 94 01 0a 	call	0x1402	; 0x1402 <TWI_start>
    if (TWI_getStatus() != TW_START)
     cb6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
     cba:	88 30       	cpi	r24, 0x08	; 8
     cbc:	11 f0       	breq	.+4      	; 0xcc2 <EEPROM_writeByte+0x22>
        return ERROR;
     cbe:	1c 82       	std	Y+4, r1	; 0x04
     cc0:	28 c0       	rjmp	.+80     	; 0xd12 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	80 70       	andi	r24, 0x00	; 0
     cc8:	97 70       	andi	r25, 0x07	; 7
     cca:	88 0f       	add	r24, r24
     ccc:	89 2f       	mov	r24, r25
     cce:	88 1f       	adc	r24, r24
     cd0:	99 0b       	sbc	r25, r25
     cd2:	91 95       	neg	r25
     cd4:	80 6a       	ori	r24, 0xA0	; 160
     cd6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     cda:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
     cde:	88 31       	cpi	r24, 0x18	; 24
     ce0:	11 f0       	breq	.+4      	; 0xce6 <EEPROM_writeByte+0x46>
        return ERROR; 
     ce2:	1c 82       	std	Y+4, r1	; 0x04
     ce4:	16 c0       	rjmp	.+44     	; 0xd12 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     cec:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
     cf0:	88 32       	cpi	r24, 0x28	; 40
     cf2:	11 f0       	breq	.+4      	; 0xcf8 <EEPROM_writeByte+0x58>
        return ERROR;
     cf4:	1c 82       	std	Y+4, r1	; 0x04
     cf6:	0d c0       	rjmp	.+26     	; 0xd12 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     cfe:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
     d02:	88 32       	cpi	r24, 0x28	; 40
     d04:	11 f0       	breq	.+4      	; 0xd0a <EEPROM_writeByte+0x6a>
        return ERROR;
     d06:	1c 82       	std	Y+4, r1	; 0x04
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     d0a:	0e 94 11 0a 	call	0x1422	; 0x1422 <TWI_stop>
	
    return SUCCESS;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 83       	std	Y+4, r24	; 0x04
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	00 d0       	rcall	.+0      	; 0xd28 <EEPROM_readByte+0x6>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <EEPROM_readByte+0x8>
     d2a:	0f 92       	push	r0
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	9a 83       	std	Y+2, r25	; 0x02
     d32:	89 83       	std	Y+1, r24	; 0x01
     d34:	7c 83       	std	Y+4, r23	; 0x04
     d36:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     d38:	0e 94 01 0a 	call	0x1402	; 0x1402 <TWI_start>
    if (TWI_getStatus() != TW_START)
     d3c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
     d40:	88 30       	cpi	r24, 0x08	; 8
     d42:	11 f0       	breq	.+4      	; 0xd48 <EEPROM_readByte+0x26>
        return ERROR;
     d44:	1d 82       	std	Y+5, r1	; 0x05
     d46:	44 c0       	rjmp	.+136    	; 0xdd0 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	80 70       	andi	r24, 0x00	; 0
     d4e:	97 70       	andi	r25, 0x07	; 7
     d50:	88 0f       	add	r24, r24
     d52:	89 2f       	mov	r24, r25
     d54:	88 1f       	adc	r24, r24
     d56:	99 0b       	sbc	r25, r25
     d58:	91 95       	neg	r25
     d5a:	80 6a       	ori	r24, 0xA0	; 160
     d5c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     d60:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
     d64:	88 31       	cpi	r24, 0x18	; 24
     d66:	11 f0       	breq	.+4      	; 0xd6c <EEPROM_readByte+0x4a>
        return ERROR;
     d68:	1d 82       	std	Y+5, r1	; 0x05
     d6a:	32 c0       	rjmp	.+100    	; 0xdd0 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     d72:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
     d76:	88 32       	cpi	r24, 0x28	; 40
     d78:	11 f0       	breq	.+4      	; 0xd7e <EEPROM_readByte+0x5c>
        return ERROR;
     d7a:	1d 82       	std	Y+5, r1	; 0x05
     d7c:	29 c0       	rjmp	.+82     	; 0xdd0 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     d7e:	0e 94 01 0a 	call	0x1402	; 0x1402 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     d82:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
     d86:	80 31       	cpi	r24, 0x10	; 16
     d88:	11 f0       	breq	.+4      	; 0xd8e <EEPROM_readByte+0x6c>
        return ERROR;
     d8a:	1d 82       	std	Y+5, r1	; 0x05
     d8c:	21 c0       	rjmp	.+66     	; 0xdd0 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	80 70       	andi	r24, 0x00	; 0
     d94:	97 70       	andi	r25, 0x07	; 7
     d96:	88 0f       	add	r24, r24
     d98:	89 2f       	mov	r24, r25
     d9a:	88 1f       	adc	r24, r24
     d9c:	99 0b       	sbc	r25, r25
     d9e:	91 95       	neg	r25
     da0:	81 6a       	ori	r24, 0xA1	; 161
     da2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     da6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
     daa:	80 34       	cpi	r24, 0x40	; 64
     dac:	11 f0       	breq	.+4      	; 0xdb2 <EEPROM_readByte+0x90>
        return ERROR;
     dae:	1d 82       	std	Y+5, r1	; 0x05
     db0:	0f c0       	rjmp	.+30     	; 0xdd0 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     db2:	0e 94 46 0a 	call	0x148c	; 0x148c <TWI_readWithNACK>
     db6:	eb 81       	ldd	r30, Y+3	; 0x03
     db8:	fc 81       	ldd	r31, Y+4	; 0x04
     dba:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     dbc:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
     dc0:	88 35       	cpi	r24, 0x58	; 88
     dc2:	11 f0       	breq	.+4      	; 0xdc8 <EEPROM_readByte+0xa6>
        return ERROR;
     dc4:	1d 82       	std	Y+5, r1	; 0x05
     dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     dc8:	0e 94 11 0a 	call	0x1422	; 0x1422 <TWI_stop>
    return SUCCESS;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	8d 83       	std	Y+5, r24	; 0x05
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
}
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <main>:
#include "Macros.h"
#include "EEPROM.h"
#include "LCD.h"

int main(void)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	c2 54       	subi	r28, 0x42	; 66
     dec:	d0 40       	sbci	r29, 0x00	; 0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     df8:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_init>
	uint8 i;
	uint8 byte =0;
     dfc:	fe 01       	movw	r30, r28
     dfe:	ee 5b       	subi	r30, 0xBE	; 190
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	10 82       	st	Z, r1
	uint32 pass=0;
     e04:	fe 01       	movw	r30, r28
     e06:	fd 96       	adiw	r30, 0x3d	; 61
     e08:	10 82       	st	Z, r1
     e0a:	11 82       	std	Z+1, r1	; 0x01
     e0c:	12 82       	std	Z+2, r1	; 0x02
     e0e:	13 82       	std	Z+3, r1	; 0x03
	uint32 passCheck=0;
     e10:	19 ae       	std	Y+57, r1	; 0x39
     e12:	1a ae       	std	Y+58, r1	; 0x3a
     e14:	1b ae       	std	Y+59, r1	; 0x3b
     e16:	1c ae       	std	Y+60, r1	; 0x3c
	DDRB  = 0xFF;
     e18:	e7 e3       	ldi	r30, 0x37	; 55
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	80 83       	st	Z, r24
	PORTB = 0x00;
     e20:	e8 e3       	ldi	r30, 0x38	; 56
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	10 82       	st	Z, r1

	/* Init EEPROM */
	EEPROM_init();
     e26:	0e 94 47 06 	call	0xc8e	; 0xc8e <EEPROM_init>
	for(i=0;i<4;i++){
     e2a:	fe 01       	movw	r30, r28
     e2c:	ef 5b       	subi	r30, 0xBF	; 191
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	10 82       	st	Z, r1
     e32:	b0 c0       	rjmp	.+352    	; 0xf94 <main+0x1b2>
		EEPROM_readByte((0x0311 + i), &byte);
     e34:	fe 01       	movw	r30, r28
     e36:	ef 5b       	subi	r30, 0xBF	; 191
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	80 81       	ld	r24, Z
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	8f 5e       	subi	r24, 0xEF	; 239
     e42:	9c 4f       	sbci	r25, 0xFC	; 252
     e44:	9e 01       	movw	r18, r28
     e46:	2e 5b       	subi	r18, 0xBE	; 190
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	b9 01       	movw	r22, r18
     e4c:	0e 94 91 06 	call	0xd22	; 0xd22 <EEPROM_readByte>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a0 e2       	ldi	r26, 0x20	; 32
     e56:	b1 e4       	ldi	r27, 0x41	; 65
     e58:	8d ab       	std	Y+53, r24	; 0x35
     e5a:	9e ab       	std	Y+54, r25	; 0x36
     e5c:	af ab       	std	Y+55, r26	; 0x37
     e5e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e60:	6d a9       	ldd	r22, Y+53	; 0x35
     e62:	7e a9       	ldd	r23, Y+54	; 0x36
     e64:	8f a9       	ldd	r24, Y+55	; 0x37
     e66:	98 ad       	ldd	r25, Y+56	; 0x38
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	4a e7       	ldi	r20, 0x7A	; 122
     e6e:	53 e4       	ldi	r21, 0x43	; 67
     e70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	89 ab       	std	Y+49, r24	; 0x31
     e7a:	9a ab       	std	Y+50, r25	; 0x32
     e7c:	ab ab       	std	Y+51, r26	; 0x33
     e7e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e80:	69 a9       	ldd	r22, Y+49	; 0x31
     e82:	7a a9       	ldd	r23, Y+50	; 0x32
     e84:	8b a9       	ldd	r24, Y+51	; 0x33
     e86:	9c a9       	ldd	r25, Y+52	; 0x34
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e8       	ldi	r20, 0x80	; 128
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e94:	88 23       	and	r24, r24
     e96:	2c f4       	brge	.+10     	; 0xea2 <main+0xc0>
		__ticks = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	98 ab       	std	Y+48, r25	; 0x30
     e9e:	8f a7       	std	Y+47, r24	; 0x2f
     ea0:	3f c0       	rjmp	.+126    	; 0xf20 <main+0x13e>
	else if (__tmp > 65535)
     ea2:	69 a9       	ldd	r22, Y+49	; 0x31
     ea4:	7a a9       	ldd	r23, Y+50	; 0x32
     ea6:	8b a9       	ldd	r24, Y+51	; 0x33
     ea8:	9c a9       	ldd	r25, Y+52	; 0x34
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	3f ef       	ldi	r19, 0xFF	; 255
     eae:	4f e7       	ldi	r20, 0x7F	; 127
     eb0:	57 e4       	ldi	r21, 0x47	; 71
     eb2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     eb6:	18 16       	cp	r1, r24
     eb8:	4c f5       	brge	.+82     	; 0xf0c <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eba:	6d a9       	ldd	r22, Y+53	; 0x35
     ebc:	7e a9       	ldd	r23, Y+54	; 0x36
     ebe:	8f a9       	ldd	r24, Y+55	; 0x37
     ec0:	98 ad       	ldd	r25, Y+56	; 0x38
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e2       	ldi	r20, 0x20	; 32
     ec8:	51 e4       	ldi	r21, 0x41	; 65
     eca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	bc 01       	movw	r22, r24
     ed4:	cd 01       	movw	r24, r26
     ed6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	98 ab       	std	Y+48, r25	; 0x30
     ee0:	8f a7       	std	Y+47, r24	; 0x2f
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <main+0x120>
     ee4:	89 e1       	ldi	r24, 0x19	; 25
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9e a7       	std	Y+46, r25	; 0x2e
     eea:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eec:	8d a5       	ldd	r24, Y+45	; 0x2d
     eee:	9e a5       	ldd	r25, Y+46	; 0x2e
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <main+0x10e>
     ef4:	9e a7       	std	Y+46, r25	; 0x2e
     ef6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
     efa:	98 a9       	ldd	r25, Y+48	; 0x30
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	98 ab       	std	Y+48, r25	; 0x30
     f00:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f02:	8f a5       	ldd	r24, Y+47	; 0x2f
     f04:	98 a9       	ldd	r25, Y+48	; 0x30
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	69 f7       	brne	.-38     	; 0xee4 <main+0x102>
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <main+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0c:	69 a9       	ldd	r22, Y+49	; 0x31
     f0e:	7a a9       	ldd	r23, Y+50	; 0x32
     f10:	8b a9       	ldd	r24, Y+51	; 0x33
     f12:	9c a9       	ldd	r25, Y+52	; 0x34
     f14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	98 ab       	std	Y+48, r25	; 0x30
     f1e:	8f a7       	std	Y+47, r24	; 0x2f
     f20:	8f a5       	ldd	r24, Y+47	; 0x2f
     f22:	98 a9       	ldd	r25, Y+48	; 0x30
     f24:	9c a7       	std	Y+44, r25	; 0x2c
     f26:	8b a7       	std	Y+43, r24	; 0x2b
     f28:	8b a5       	ldd	r24, Y+43	; 0x2b
     f2a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <main+0x14a>
     f30:	9c a7       	std	Y+44, r25	; 0x2c
     f32:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		passCheck=(passCheck) | ((uint32)byte<<(8*i));
     f34:	fe 01       	movw	r30, r28
     f36:	ee 5b       	subi	r30, 0xBE	; 190
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	80 81       	ld	r24, Z
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	fe 01       	movw	r30, r28
     f46:	ef 5b       	subi	r30, 0xBF	; 191
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	80 81       	ld	r24, Z
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <main+0x184>
     f5e:	22 0f       	add	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	44 1f       	adc	r20, r20
     f64:	55 1f       	adc	r21, r21
     f66:	8a 95       	dec	r24
     f68:	d2 f7       	brpl	.-12     	; 0xf5e <main+0x17c>
     f6a:	89 ad       	ldd	r24, Y+57	; 0x39
     f6c:	9a ad       	ldd	r25, Y+58	; 0x3a
     f6e:	ab ad       	ldd	r26, Y+59	; 0x3b
     f70:	bc ad       	ldd	r27, Y+60	; 0x3c
     f72:	82 2b       	or	r24, r18
     f74:	93 2b       	or	r25, r19
     f76:	a4 2b       	or	r26, r20
     f78:	b5 2b       	or	r27, r21
     f7a:	89 af       	std	Y+57, r24	; 0x39
     f7c:	9a af       	std	Y+58, r25	; 0x3a
     f7e:	ab af       	std	Y+59, r26	; 0x3b
     f80:	bc af       	std	Y+60, r27	; 0x3c
	DDRB  = 0xFF;
	PORTB = 0x00;

	/* Init EEPROM */
	EEPROM_init();
	for(i=0;i<4;i++){
     f82:	de 01       	movw	r26, r28
     f84:	af 5b       	subi	r26, 0xBF	; 191
     f86:	bf 4f       	sbci	r27, 0xFF	; 255
     f88:	fe 01       	movw	r30, r28
     f8a:	ef 5b       	subi	r30, 0xBF	; 191
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	80 81       	ld	r24, Z
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	8c 93       	st	X, r24
     f94:	fe 01       	movw	r30, r28
     f96:	ef 5b       	subi	r30, 0xBF	; 191
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	80 81       	ld	r24, Z
     f9c:	84 30       	cpi	r24, 0x04	; 4
     f9e:	08 f4       	brcc	.+2      	; 0xfa2 <main+0x1c0>
     fa0:	49 cf       	rjmp	.-366    	; 0xe34 <main+0x52>
		EEPROM_readByte((0x0311 + i), &byte);
		_delay_ms(10);
		passCheck=(passCheck) | ((uint32)byte<<(8*i));
	}
	LCD_displayString("  PASSWORD ");
     fa2:	80 e6       	ldi	r24, 0x60	; 96
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_displayString>
	LCD_goToRowColumn(1, 0);
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_goToRowColumn>
	LCD_intgerToString(passCheck);
     fb2:	89 ad       	ldd	r24, Y+57	; 0x39
     fb4:	9a ad       	ldd	r25, Y+58	; 0x3a
     fb6:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_intgerToString>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	aa ef       	ldi	r26, 0xFA	; 250
     fc0:	b4 e4       	ldi	r27, 0x44	; 68
     fc2:	8f a3       	std	Y+39, r24	; 0x27
     fc4:	98 a7       	std	Y+40, r25	; 0x28
     fc6:	a9 a7       	std	Y+41, r26	; 0x29
     fc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fca:	6f a1       	ldd	r22, Y+39	; 0x27
     fcc:	78 a5       	ldd	r23, Y+40	; 0x28
     fce:	89 a5       	ldd	r24, Y+41	; 0x29
     fd0:	9a a5       	ldd	r25, Y+42	; 0x2a
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	4a e7       	ldi	r20, 0x7A	; 122
     fd8:	53 e4       	ldi	r21, 0x43	; 67
     fda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	8b a3       	std	Y+35, r24	; 0x23
     fe4:	9c a3       	std	Y+36, r25	; 0x24
     fe6:	ad a3       	std	Y+37, r26	; 0x25
     fe8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fea:	6b a1       	ldd	r22, Y+35	; 0x23
     fec:	7c a1       	ldd	r23, Y+36	; 0x24
     fee:	8d a1       	ldd	r24, Y+37	; 0x25
     ff0:	9e a1       	ldd	r25, Y+38	; 0x26
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e8       	ldi	r20, 0x80	; 128
     ff8:	5f e3       	ldi	r21, 0x3F	; 63
     ffa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ffe:	88 23       	and	r24, r24
    1000:	2c f4       	brge	.+10     	; 0x100c <main+0x22a>
		__ticks = 1;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9a a3       	std	Y+34, r25	; 0x22
    1008:	89 a3       	std	Y+33, r24	; 0x21
    100a:	3f c0       	rjmp	.+126    	; 0x108a <main+0x2a8>
	else if (__tmp > 65535)
    100c:	6b a1       	ldd	r22, Y+35	; 0x23
    100e:	7c a1       	ldd	r23, Y+36	; 0x24
    1010:	8d a1       	ldd	r24, Y+37	; 0x25
    1012:	9e a1       	ldd	r25, Y+38	; 0x26
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	57 e4       	ldi	r21, 0x47	; 71
    101c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1020:	18 16       	cp	r1, r24
    1022:	4c f5       	brge	.+82     	; 0x1076 <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1024:	6f a1       	ldd	r22, Y+39	; 0x27
    1026:	78 a5       	ldd	r23, Y+40	; 0x28
    1028:	89 a5       	ldd	r24, Y+41	; 0x29
    102a:	9a a5       	ldd	r25, Y+42	; 0x2a
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	51 e4       	ldi	r21, 0x41	; 65
    1034:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	9a a3       	std	Y+34, r25	; 0x22
    104a:	89 a3       	std	Y+33, r24	; 0x21
    104c:	0f c0       	rjmp	.+30     	; 0x106c <main+0x28a>
    104e:	89 e1       	ldi	r24, 0x19	; 25
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	98 a3       	std	Y+32, r25	; 0x20
    1054:	8f 8f       	std	Y+31, r24	; 0x1f
    1056:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1058:	98 a1       	ldd	r25, Y+32	; 0x20
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <main+0x278>
    105e:	98 a3       	std	Y+32, r25	; 0x20
    1060:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1062:	89 a1       	ldd	r24, Y+33	; 0x21
    1064:	9a a1       	ldd	r25, Y+34	; 0x22
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	9a a3       	std	Y+34, r25	; 0x22
    106a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106c:	89 a1       	ldd	r24, Y+33	; 0x21
    106e:	9a a1       	ldd	r25, Y+34	; 0x22
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	69 f7       	brne	.-38     	; 0x104e <main+0x26c>
    1074:	14 c0       	rjmp	.+40     	; 0x109e <main+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1076:	6b a1       	ldd	r22, Y+35	; 0x23
    1078:	7c a1       	ldd	r23, Y+36	; 0x24
    107a:	8d a1       	ldd	r24, Y+37	; 0x25
    107c:	9e a1       	ldd	r25, Y+38	; 0x26
    107e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	9a a3       	std	Y+34, r25	; 0x22
    1088:	89 a3       	std	Y+33, r24	; 0x21
    108a:	89 a1       	ldd	r24, Y+33	; 0x21
    108c:	9a a1       	ldd	r25, Y+34	; 0x22
    108e:	9e 8f       	std	Y+30, r25	; 0x1e
    1090:	8d 8f       	std	Y+29, r24	; 0x1d
    1092:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1094:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <main+0x2b4>
    109a:	9e 8f       	std	Y+30, r25	; 0x1e
    109c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000);
	pass = 12345;
    109e:	89 e3       	ldi	r24, 0x39	; 57
    10a0:	90 e3       	ldi	r25, 0x30	; 48
    10a2:	a0 e0       	ldi	r26, 0x00	; 0
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	fe 01       	movw	r30, r28
    10a8:	fd 96       	adiw	r30, 0x3d	; 61
    10aa:	80 83       	st	Z, r24
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	a2 83       	std	Z+2, r26	; 0x02
    10b0:	b3 83       	std	Z+3, r27	; 0x03
	for(i=0;i<4;i++){
    10b2:	fe 01       	movw	r30, r28
    10b4:	ef 5b       	subi	r30, 0xBF	; 191
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	10 82       	st	Z, r1
    10ba:	a3 c0       	rjmp	.+326    	; 0x1202 <main+0x420>
		EEPROM_writeByte((0x0311 + i),(pass>>(8*i)));
    10bc:	fe 01       	movw	r30, r28
    10be:	ef 5b       	subi	r30, 0xBF	; 191
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	80 81       	ld	r24, Z
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	8f 5e       	subi	r24, 0xEF	; 239
    10ca:	9c 4f       	sbci	r25, 0xFC	; 252
    10cc:	ac 01       	movw	r20, r24
    10ce:	fe 01       	movw	r30, r28
    10d0:	ef 5b       	subi	r30, 0xBF	; 191
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 81       	ld	r24, Z
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	9c 01       	movw	r18, r24
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	fe 01       	movw	r30, r28
    10ea:	fd 96       	adiw	r30, 0x3d	; 61
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	a2 81       	ldd	r26, Z+2	; 0x02
    10f2:	b3 81       	ldd	r27, Z+3	; 0x03
    10f4:	04 c0       	rjmp	.+8      	; 0x10fe <main+0x31c>
    10f6:	b6 95       	lsr	r27
    10f8:	a7 95       	ror	r26
    10fa:	97 95       	ror	r25
    10fc:	87 95       	ror	r24
    10fe:	2a 95       	dec	r18
    1100:	d2 f7       	brpl	.-12     	; 0x10f6 <main+0x314>
    1102:	28 2f       	mov	r18, r24
    1104:	ca 01       	movw	r24, r20
    1106:	62 2f       	mov	r22, r18
    1108:	0e 94 50 06 	call	0xca0	; 0xca0 <EEPROM_writeByte>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e2       	ldi	r26, 0x20	; 32
    1112:	b1 e4       	ldi	r27, 0x41	; 65
    1114:	89 8f       	std	Y+25, r24	; 0x19
    1116:	9a 8f       	std	Y+26, r25	; 0x1a
    1118:	ab 8f       	std	Y+27, r26	; 0x1b
    111a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111c:	69 8d       	ldd	r22, Y+25	; 0x19
    111e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1120:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1122:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4a e7       	ldi	r20, 0x7A	; 122
    112a:	53 e4       	ldi	r21, 0x43	; 67
    112c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	8d 8b       	std	Y+21, r24	; 0x15
    1136:	9e 8b       	std	Y+22, r25	; 0x16
    1138:	af 8b       	std	Y+23, r26	; 0x17
    113a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    113c:	6d 89       	ldd	r22, Y+21	; 0x15
    113e:	7e 89       	ldd	r23, Y+22	; 0x16
    1140:	8f 89       	ldd	r24, Y+23	; 0x17
    1142:	98 8d       	ldd	r25, Y+24	; 0x18
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e8       	ldi	r20, 0x80	; 128
    114a:	5f e3       	ldi	r21, 0x3F	; 63
    114c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1150:	88 23       	and	r24, r24
    1152:	2c f4       	brge	.+10     	; 0x115e <main+0x37c>
		__ticks = 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	9c 8b       	std	Y+20, r25	; 0x14
    115a:	8b 8b       	std	Y+19, r24	; 0x13
    115c:	3f c0       	rjmp	.+126    	; 0x11dc <main+0x3fa>
	else if (__tmp > 65535)
    115e:	6d 89       	ldd	r22, Y+21	; 0x15
    1160:	7e 89       	ldd	r23, Y+22	; 0x16
    1162:	8f 89       	ldd	r24, Y+23	; 0x17
    1164:	98 8d       	ldd	r25, Y+24	; 0x18
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	57 e4       	ldi	r21, 0x47	; 71
    116e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1172:	18 16       	cp	r1, r24
    1174:	4c f5       	brge	.+82     	; 0x11c8 <main+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1176:	69 8d       	ldd	r22, Y+25	; 0x19
    1178:	7a 8d       	ldd	r23, Y+26	; 0x1a
    117a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    117c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e2       	ldi	r20, 0x20	; 32
    1184:	51 e4       	ldi	r21, 0x41	; 65
    1186:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	bc 01       	movw	r22, r24
    1190:	cd 01       	movw	r24, r26
    1192:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	9c 8b       	std	Y+20, r25	; 0x14
    119c:	8b 8b       	std	Y+19, r24	; 0x13
    119e:	0f c0       	rjmp	.+30     	; 0x11be <main+0x3dc>
    11a0:	89 e1       	ldi	r24, 0x19	; 25
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9a 8b       	std	Y+18, r25	; 0x12
    11a6:	89 8b       	std	Y+17, r24	; 0x11
    11a8:	89 89       	ldd	r24, Y+17	; 0x11
    11aa:	9a 89       	ldd	r25, Y+18	; 0x12
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <main+0x3ca>
    11b0:	9a 8b       	std	Y+18, r25	; 0x12
    11b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b4:	8b 89       	ldd	r24, Y+19	; 0x13
    11b6:	9c 89       	ldd	r25, Y+20	; 0x14
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	9c 8b       	std	Y+20, r25	; 0x14
    11bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11be:	8b 89       	ldd	r24, Y+19	; 0x13
    11c0:	9c 89       	ldd	r25, Y+20	; 0x14
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	69 f7       	brne	.-38     	; 0x11a0 <main+0x3be>
    11c6:	14 c0       	rjmp	.+40     	; 0x11f0 <main+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	6d 89       	ldd	r22, Y+21	; 0x15
    11ca:	7e 89       	ldd	r23, Y+22	; 0x16
    11cc:	8f 89       	ldd	r24, Y+23	; 0x17
    11ce:	98 8d       	ldd	r25, Y+24	; 0x18
    11d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9c 8b       	std	Y+20, r25	; 0x14
    11da:	8b 8b       	std	Y+19, r24	; 0x13
    11dc:	8b 89       	ldd	r24, Y+19	; 0x13
    11de:	9c 89       	ldd	r25, Y+20	; 0x14
    11e0:	98 8b       	std	Y+16, r25	; 0x10
    11e2:	8f 87       	std	Y+15, r24	; 0x0f
    11e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e6:	98 89       	ldd	r25, Y+16	; 0x10
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <main+0x406>
    11ec:	98 8b       	std	Y+16, r25	; 0x10
    11ee:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayString("  PASSWORD ");
	LCD_goToRowColumn(1, 0);
	LCD_intgerToString(passCheck);
	_delay_ms(2000);
	pass = 12345;
	for(i=0;i<4;i++){
    11f0:	de 01       	movw	r26, r28
    11f2:	af 5b       	subi	r26, 0xBF	; 191
    11f4:	bf 4f       	sbci	r27, 0xFF	; 255
    11f6:	fe 01       	movw	r30, r28
    11f8:	ef 5b       	subi	r30, 0xBF	; 191
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	8c 93       	st	X, r24
    1202:	fe 01       	movw	r30, r28
    1204:	ef 5b       	subi	r30, 0xBF	; 191
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 81       	ld	r24, Z
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	08 f4       	brcc	.+2      	; 0x1210 <main+0x42e>
    120e:	56 cf       	rjmp	.-340    	; 0x10bc <main+0x2da>
		EEPROM_writeByte((0x0311 + i),(pass>>(8*i)));
		_delay_ms(10);
	}

	for(i=0;i<4;i++){
    1210:	fe 01       	movw	r30, r28
    1212:	ef 5b       	subi	r30, 0xBF	; 191
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	10 82       	st	Z, r1
    1218:	b0 c0       	rjmp	.+352    	; 0x137a <main+0x598>
		EEPROM_readByte((0x0311 + i), &byte);
    121a:	fe 01       	movw	r30, r28
    121c:	ef 5b       	subi	r30, 0xBF	; 191
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	80 81       	ld	r24, Z
    1222:	88 2f       	mov	r24, r24
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	8f 5e       	subi	r24, 0xEF	; 239
    1228:	9c 4f       	sbci	r25, 0xFC	; 252
    122a:	9e 01       	movw	r18, r28
    122c:	2e 5b       	subi	r18, 0xBE	; 190
    122e:	3f 4f       	sbci	r19, 0xFF	; 255
    1230:	b9 01       	movw	r22, r18
    1232:	0e 94 91 06 	call	0xd22	; 0xd22 <EEPROM_readByte>
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a0 e2       	ldi	r26, 0x20	; 32
    123c:	b1 e4       	ldi	r27, 0x41	; 65
    123e:	8b 87       	std	Y+11, r24	; 0x0b
    1240:	9c 87       	std	Y+12, r25	; 0x0c
    1242:	ad 87       	std	Y+13, r26	; 0x0d
    1244:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1246:	6b 85       	ldd	r22, Y+11	; 0x0b
    1248:	7c 85       	ldd	r23, Y+12	; 0x0c
    124a:	8d 85       	ldd	r24, Y+13	; 0x0d
    124c:	9e 85       	ldd	r25, Y+14	; 0x0e
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	4a e7       	ldi	r20, 0x7A	; 122
    1254:	53 e4       	ldi	r21, 0x43	; 67
    1256:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	8f 83       	std	Y+7, r24	; 0x07
    1260:	98 87       	std	Y+8, r25	; 0x08
    1262:	a9 87       	std	Y+9, r26	; 0x09
    1264:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1266:	6f 81       	ldd	r22, Y+7	; 0x07
    1268:	78 85       	ldd	r23, Y+8	; 0x08
    126a:	89 85       	ldd	r24, Y+9	; 0x09
    126c:	9a 85       	ldd	r25, Y+10	; 0x0a
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	5f e3       	ldi	r21, 0x3F	; 63
    1276:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    127a:	88 23       	and	r24, r24
    127c:	2c f4       	brge	.+10     	; 0x1288 <main+0x4a6>
		__ticks = 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9e 83       	std	Y+6, r25	; 0x06
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	3f c0       	rjmp	.+126    	; 0x1306 <main+0x524>
	else if (__tmp > 65535)
    1288:	6f 81       	ldd	r22, Y+7	; 0x07
    128a:	78 85       	ldd	r23, Y+8	; 0x08
    128c:	89 85       	ldd	r24, Y+9	; 0x09
    128e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	3f ef       	ldi	r19, 0xFF	; 255
    1294:	4f e7       	ldi	r20, 0x7F	; 127
    1296:	57 e4       	ldi	r21, 0x47	; 71
    1298:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    129c:	18 16       	cp	r1, r24
    129e:	4c f5       	brge	.+82     	; 0x12f2 <main+0x510>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e2       	ldi	r20, 0x20	; 32
    12ae:	51 e4       	ldi	r21, 0x41	; 65
    12b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	0f c0       	rjmp	.+30     	; 0x12e8 <main+0x506>
    12ca:	89 e1       	ldi	r24, 0x19	; 25
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <main+0x4f4>
    12da:	9c 83       	std	Y+4, r25	; 0x04
    12dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ea:	9e 81       	ldd	r25, Y+6	; 0x06
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	69 f7       	brne	.-38     	; 0x12ca <main+0x4e8>
    12f0:	14 c0       	rjmp	.+40     	; 0x131a <main+0x538>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f2:	6f 81       	ldd	r22, Y+7	; 0x07
    12f4:	78 85       	ldd	r23, Y+8	; 0x08
    12f6:	89 85       	ldd	r24, Y+9	; 0x09
    12f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <main+0x530>
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		passCheck=(passCheck) | ((uint32)byte<<(8*i));
    131a:	fe 01       	movw	r30, r28
    131c:	ee 5b       	subi	r30, 0xBE	; 190
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	fe 01       	movw	r30, r28
    132c:	ef 5b       	subi	r30, 0xBF	; 191
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	80 81       	ld	r24, Z
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	04 c0       	rjmp	.+8      	; 0x134c <main+0x56a>
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	44 1f       	adc	r20, r20
    134a:	55 1f       	adc	r21, r21
    134c:	8a 95       	dec	r24
    134e:	d2 f7       	brpl	.-12     	; 0x1344 <main+0x562>
    1350:	89 ad       	ldd	r24, Y+57	; 0x39
    1352:	9a ad       	ldd	r25, Y+58	; 0x3a
    1354:	ab ad       	ldd	r26, Y+59	; 0x3b
    1356:	bc ad       	ldd	r27, Y+60	; 0x3c
    1358:	82 2b       	or	r24, r18
    135a:	93 2b       	or	r25, r19
    135c:	a4 2b       	or	r26, r20
    135e:	b5 2b       	or	r27, r21
    1360:	89 af       	std	Y+57, r24	; 0x39
    1362:	9a af       	std	Y+58, r25	; 0x3a
    1364:	ab af       	std	Y+59, r26	; 0x3b
    1366:	bc af       	std	Y+60, r27	; 0x3c
	for(i=0;i<4;i++){
		EEPROM_writeByte((0x0311 + i),(pass>>(8*i)));
		_delay_ms(10);
	}

	for(i=0;i<4;i++){
    1368:	de 01       	movw	r26, r28
    136a:	af 5b       	subi	r26, 0xBF	; 191
    136c:	bf 4f       	sbci	r27, 0xFF	; 255
    136e:	fe 01       	movw	r30, r28
    1370:	ef 5b       	subi	r30, 0xBF	; 191
    1372:	ff 4f       	sbci	r31, 0xFF	; 255
    1374:	80 81       	ld	r24, Z
    1376:	8f 5f       	subi	r24, 0xFF	; 255
    1378:	8c 93       	st	X, r24
    137a:	fe 01       	movw	r30, r28
    137c:	ef 5b       	subi	r30, 0xBF	; 191
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	80 81       	ld	r24, Z
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	08 f4       	brcc	.+2      	; 0x1388 <main+0x5a6>
    1386:	49 cf       	rjmp	.-366    	; 0x121a <main+0x438>
		EEPROM_readByte((0x0311 + i), &byte);
		_delay_ms(10);
		passCheck=(passCheck) | ((uint32)byte<<(8*i));
	}
	LCD_clearScreen();
    1388:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_clearScreen>
	LCD_displayString("  PASSWORD ");
    138c:	80 e6       	ldi	r24, 0x60	; 96
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_goToRowColumn>
	LCD_intgerToString(passCheck);
    139c:	89 ad       	ldd	r24, Y+57	; 0x39
    139e:	9a ad       	ldd	r25, Y+58	; 0x3a
    13a0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_intgerToString>
while(1)
	{
		if(passCheck ==pass){
    13a4:	29 ad       	ldd	r18, Y+57	; 0x39
    13a6:	3a ad       	ldd	r19, Y+58	; 0x3a
    13a8:	4b ad       	ldd	r20, Y+59	; 0x3b
    13aa:	5c ad       	ldd	r21, Y+60	; 0x3c
    13ac:	fe 01       	movw	r30, r28
    13ae:	fd 96       	adiw	r30, 0x3d	; 61
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	a2 81       	ldd	r26, Z+2	; 0x02
    13b6:	b3 81       	ldd	r27, Z+3	; 0x03
    13b8:	28 17       	cp	r18, r24
    13ba:	39 07       	cpc	r19, r25
    13bc:	4a 07       	cpc	r20, r26
    13be:	5b 07       	cpc	r21, r27
    13c0:	29 f4       	brne	.+10     	; 0x13cc <main+0x5ea>
			PORTB= 0xFF;
    13c2:	e8 e3       	ldi	r30, 0x38	; 56
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	80 83       	st	Z, r24
    13ca:	ec cf       	rjmp	.-40     	; 0x13a4 <main+0x5c2>
		}else{
			PORTB = 0x0F;
    13cc:	e8 e3       	ldi	r30, 0x38	; 56
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8f e0       	ldi	r24, 0x0F	; 15
    13d2:	80 83       	st	Z, r24
    13d4:	e7 cf       	rjmp	.-50     	; 0x13a4 <main+0x5c2>

000013d6 <TWI_init>:
 *******************************************************************************/
 
#include "I2C.h"

void TWI_init(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    13de:	e0 e2       	ldi	r30, 0x20	; 32
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	80 83       	st	Z, r24
	TWSR = 0x00;
    13e6:	e1 e2       	ldi	r30, 0x21	; 33
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    13ec:	e2 e2       	ldi	r30, 0x22	; 34
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    13f4:	e6 e5       	ldi	r30, 0x56	; 86
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	84 e0       	ldi	r24, 0x04	; 4
    13fa:	80 83       	st	Z, r24
}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <TWI_start>:

void TWI_start(void)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    140a:	e6 e5       	ldi	r30, 0x56	; 86
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	84 ea       	ldi	r24, 0xA4	; 164
    1410:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1412:	e6 e5       	ldi	r30, 0x56	; 86
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	88 23       	and	r24, r24
    141a:	dc f7       	brge	.-10     	; 0x1412 <TWI_start+0x10>
}
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <TWI_stop>:

void TWI_stop(void)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    142a:	e6 e5       	ldi	r30, 0x56	; 86
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	84 e9       	ldi	r24, 0x94	; 148
    1430:	80 83       	st	Z, r24
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <TWI_write>:

void TWI_write(uint8 data)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1444:	e3 e2       	ldi	r30, 0x23	; 35
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    144c:	e6 e5       	ldi	r30, 0x56	; 86
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	84 e8       	ldi	r24, 0x84	; 132
    1452:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1454:	e6 e5       	ldi	r30, 0x56	; 86
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	88 23       	and	r24, r24
    145c:	dc f7       	brge	.-10     	; 0x1454 <TWI_write+0x1c>
}
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    146e:	e6 e5       	ldi	r30, 0x56	; 86
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	84 ec       	ldi	r24, 0xC4	; 196
    1474:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1476:	e6 e5       	ldi	r30, 0x56	; 86
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	88 23       	and	r24, r24
    147e:	dc f7       	brge	.-10     	; 0x1476 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1480:	e3 e2       	ldi	r30, 0x23	; 35
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
}
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1494:	e6 e5       	ldi	r30, 0x56	; 86
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	84 e8       	ldi	r24, 0x84	; 132
    149a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    149c:	e6 e5       	ldi	r30, 0x56	; 86
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	88 23       	and	r24, r24
    14a4:	dc f7       	brge	.-10     	; 0x149c <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    14a6:	e3 e2       	ldi	r30, 0x23	; 35
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	0f 92       	push	r0
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    14bc:	e1 e2       	ldi	r30, 0x21	; 33
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	88 7f       	andi	r24, 0xF8	; 248
    14c4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <LCD_sendCommand>:
 *******************************************************************************/

/*
 * Function responsible for Send Order to LCD
 */
void LCD_sendCommand(uint8 command) {
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	c5 55       	subi	r28, 0x55	; 85
    14de:	d0 40       	sbci	r29, 0x00	; 0
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	fe 01       	movw	r30, r28
    14ec:	eb 5a       	subi	r30, 0xAB	; 171
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	80 83       	st	Z, r24
	RS = CLEAR; /* tell LCD that data which will send now is command */
    14f2:	e2 e3       	ldi	r30, 0x32	; 50
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 7e       	andi	r24, 0xEF	; 239
    14fa:	80 83       	st	Z, r24
	RW = CLEAR; /* select write Mode on LCD */
    14fc:	e2 e3       	ldi	r30, 0x32	; 50
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	8f 7d       	andi	r24, 0xDF	; 223
    1504:	80 83       	st	Z, r24
    1506:	fe 01       	movw	r30, r28
    1508:	ef 5a       	subi	r30, 0xAF	; 175
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	a0 e8       	ldi	r26, 0x80	; 128
    1512:	bf e3       	ldi	r27, 0x3F	; 63
    1514:	80 83       	st	Z, r24
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	a2 83       	std	Z+2, r26	; 0x02
    151a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151c:	8e 01       	movw	r16, r28
    151e:	03 5b       	subi	r16, 0xB3	; 179
    1520:	1f 4f       	sbci	r17, 0xFF	; 255
    1522:	fe 01       	movw	r30, r28
    1524:	ef 5a       	subi	r30, 0xAF	; 175
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	60 81       	ld	r22, Z
    152a:	71 81       	ldd	r23, Z+1	; 0x01
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	93 81       	ldd	r25, Z+3	; 0x03
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	4a e7       	ldi	r20, 0x7A	; 122
    1536:	53 e4       	ldi	r21, 0x43	; 67
    1538:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	f8 01       	movw	r30, r16
    1542:	80 83       	st	Z, r24
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	a2 83       	std	Z+2, r26	; 0x02
    1548:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    154a:	fe 01       	movw	r30, r28
    154c:	e3 5b       	subi	r30, 0xB3	; 179
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1564:	88 23       	and	r24, r24
    1566:	44 f4       	brge	.+16     	; 0x1578 <LCD_sendCommand+0xa8>
		__ticks = 1;
    1568:	fe 01       	movw	r30, r28
    156a:	e5 5b       	subi	r30, 0xB5	; 181
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
    1576:	64 c0       	rjmp	.+200    	; 0x1640 <LCD_sendCommand+0x170>
	else if (__tmp > 65535)
    1578:	fe 01       	movw	r30, r28
    157a:	e3 5b       	subi	r30, 0xB3	; 179
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	3f ef       	ldi	r19, 0xFF	; 255
    158a:	4f e7       	ldi	r20, 0x7F	; 127
    158c:	57 e4       	ldi	r21, 0x47	; 71
    158e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1592:	18 16       	cp	r1, r24
    1594:	0c f0       	brlt	.+2      	; 0x1598 <LCD_sendCommand+0xc8>
    1596:	43 c0       	rjmp	.+134    	; 0x161e <LCD_sendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1598:	fe 01       	movw	r30, r28
    159a:	ef 5a       	subi	r30, 0xAF	; 175
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e2       	ldi	r20, 0x20	; 32
    15ac:	51 e4       	ldi	r21, 0x41	; 65
    15ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	8e 01       	movw	r16, r28
    15b8:	05 5b       	subi	r16, 0xB5	; 181
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	f8 01       	movw	r30, r16
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
    15ce:	1f c0       	rjmp	.+62     	; 0x160e <LCD_sendCommand+0x13e>
    15d0:	fe 01       	movw	r30, r28
    15d2:	e7 5b       	subi	r30, 0xB7	; 183
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	89 e1       	ldi	r24, 0x19	; 25
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
    15de:	fe 01       	movw	r30, r28
    15e0:	e7 5b       	subi	r30, 0xB7	; 183
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 81       	ld	r24, Z
    15e6:	91 81       	ldd	r25, Z+1	; 0x01
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <LCD_sendCommand+0x118>
    15ec:	fe 01       	movw	r30, r28
    15ee:	e7 5b       	subi	r30, 0xB7	; 183
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f6:	de 01       	movw	r26, r28
    15f8:	a5 5b       	subi	r26, 0xB5	; 181
    15fa:	bf 4f       	sbci	r27, 0xFF	; 255
    15fc:	fe 01       	movw	r30, r28
    15fe:	e5 5b       	subi	r30, 0xB5	; 181
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	11 96       	adiw	r26, 0x01	; 1
    160a:	9c 93       	st	X, r25
    160c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160e:	fe 01       	movw	r30, r28
    1610:	e5 5b       	subi	r30, 0xB5	; 181
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	80 81       	ld	r24, Z
    1616:	91 81       	ldd	r25, Z+1	; 0x01
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	d1 f6       	brne	.-76     	; 0x15d0 <LCD_sendCommand+0x100>
    161c:	27 c0       	rjmp	.+78     	; 0x166c <LCD_sendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161e:	8e 01       	movw	r16, r28
    1620:	05 5b       	subi	r16, 0xB5	; 181
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	fe 01       	movw	r30, r28
    1626:	e3 5b       	subi	r30, 0xB3	; 179
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	60 81       	ld	r22, Z
    162c:	71 81       	ldd	r23, Z+1	; 0x01
    162e:	82 81       	ldd	r24, Z+2	; 0x02
    1630:	93 81       	ldd	r25, Z+3	; 0x03
    1632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	f8 01       	movw	r30, r16
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	80 83       	st	Z, r24
    1640:	de 01       	movw	r26, r28
    1642:	a9 5b       	subi	r26, 0xB9	; 185
    1644:	bf 4f       	sbci	r27, 0xFF	; 255
    1646:	fe 01       	movw	r30, r28
    1648:	e5 5b       	subi	r30, 0xB5	; 181
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	8d 93       	st	X+, r24
    1652:	9c 93       	st	X, r25
    1654:	fe 01       	movw	r30, r28
    1656:	e9 5b       	subi	r30, 0xB9	; 185
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <LCD_sendCommand+0x18e>
    1662:	fe 01       	movw	r30, r28
    1664:	e9 5b       	subi	r30, 0xB9	; 185
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	91 83       	std	Z+1, r25	; 0x01
    166a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
    166c:	e2 e3       	ldi	r30, 0x32	; 50
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 64       	ori	r24, 0x40	; 64
    1674:	80 83       	st	Z, r24
    1676:	fe 01       	movw	r30, r28
    1678:	ed 5b       	subi	r30, 0xBD	; 189
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 e8       	ldi	r26, 0x80	; 128
    1682:	bf e3       	ldi	r27, 0x3F	; 63
    1684:	80 83       	st	Z, r24
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	a2 83       	std	Z+2, r26	; 0x02
    168a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168c:	8e 01       	movw	r16, r28
    168e:	01 5c       	subi	r16, 0xC1	; 193
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	fe 01       	movw	r30, r28
    1694:	ed 5b       	subi	r30, 0xBD	; 189
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4a e7       	ldi	r20, 0x7A	; 122
    16a6:	53 e4       	ldi	r21, 0x43	; 67
    16a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	f8 01       	movw	r30, r16
    16b2:	80 83       	st	Z, r24
    16b4:	91 83       	std	Z+1, r25	; 0x01
    16b6:	a2 83       	std	Z+2, r26	; 0x02
    16b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ba:	fe 01       	movw	r30, r28
    16bc:	ff 96       	adiw	r30, 0x3f	; 63
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <LCD_sendCommand+0x210>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9e af       	std	Y+62, r25	; 0x3e
    16dc:	8d af       	std	Y+61, r24	; 0x3d
    16de:	46 c0       	rjmp	.+140    	; 0x176c <LCD_sendCommand+0x29c>
	else if (__tmp > 65535)
    16e0:	fe 01       	movw	r30, r28
    16e2:	ff 96       	adiw	r30, 0x3f	; 63
    16e4:	60 81       	ld	r22, Z
    16e6:	71 81       	ldd	r23, Z+1	; 0x01
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	4f e7       	ldi	r20, 0x7F	; 127
    16f2:	57 e4       	ldi	r21, 0x47	; 71
    16f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	64 f5       	brge	.+88     	; 0x1754 <LCD_sendCommand+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fc:	fe 01       	movw	r30, r28
    16fe:	ed 5b       	subi	r30, 0xBD	; 189
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e2       	ldi	r20, 0x20	; 32
    1710:	51 e4       	ldi	r21, 0x41	; 65
    1712:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	bc 01       	movw	r22, r24
    171c:	cd 01       	movw	r24, r26
    171e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9e af       	std	Y+62, r25	; 0x3e
    1728:	8d af       	std	Y+61, r24	; 0x3d
    172a:	0f c0       	rjmp	.+30     	; 0x174a <LCD_sendCommand+0x27a>
    172c:	89 e1       	ldi	r24, 0x19	; 25
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9c af       	std	Y+60, r25	; 0x3c
    1732:	8b af       	std	Y+59, r24	; 0x3b
    1734:	8b ad       	ldd	r24, Y+59	; 0x3b
    1736:	9c ad       	ldd	r25, Y+60	; 0x3c
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <LCD_sendCommand+0x268>
    173c:	9c af       	std	Y+60, r25	; 0x3c
    173e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1740:	8d ad       	ldd	r24, Y+61	; 0x3d
    1742:	9e ad       	ldd	r25, Y+62	; 0x3e
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	9e af       	std	Y+62, r25	; 0x3e
    1748:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174a:	8d ad       	ldd	r24, Y+61	; 0x3d
    174c:	9e ad       	ldd	r25, Y+62	; 0x3e
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	69 f7       	brne	.-38     	; 0x172c <LCD_sendCommand+0x25c>
    1752:	16 c0       	rjmp	.+44     	; 0x1780 <LCD_sendCommand+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1754:	fe 01       	movw	r30, r28
    1756:	ff 96       	adiw	r30, 0x3f	; 63
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9e af       	std	Y+62, r25	; 0x3e
    176a:	8d af       	std	Y+61, r24	; 0x3d
    176c:	8d ad       	ldd	r24, Y+61	; 0x3d
    176e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1770:	9a af       	std	Y+58, r25	; 0x3a
    1772:	89 af       	std	Y+57, r24	; 0x39
    1774:	89 ad       	ldd	r24, Y+57	; 0x39
    1776:	9a ad       	ldd	r25, Y+58	; 0x3a
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <LCD_sendCommand+0x2a8>
    177c:	9a af       	std	Y+58, r25	; 0x3a
    177e:	89 af       	std	Y+57, r24	; 0x39
#endif

#if(DATA_MODE ==4)
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required command to the data bus D4 --> D7 */
	DATA_OUT=( command & 0xF0 ) | ( DATA_OUT & 0x0F );
    1780:	a5 e3       	ldi	r26, 0x35	; 53
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	fe 01       	movw	r30, r28
    1786:	eb 5a       	subi	r30, 0xAB	; 171
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	98 2f       	mov	r25, r24
    178e:	90 7f       	andi	r25, 0xF0	; 240
    1790:	e5 e3       	ldi	r30, 0x35	; 53
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	8f 70       	andi	r24, 0x0F	; 15
    1798:	89 2b       	or	r24, r25
    179a:	8c 93       	st	X, r24
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT = ((command >> 4) & 0x0F) | ( DATA_OUT & 0xF0);
#endif

	E = CLEAR; /* close Enable to prevent data share between LCD and AVR */
    179c:	e2 e3       	ldi	r30, 0x32	; 50
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8f 7b       	andi	r24, 0xBF	; 191
    17a4:	80 83       	st	Z, r24
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	a0 e8       	ldi	r26, 0x80	; 128
    17ac:	bf e3       	ldi	r27, 0x3F	; 63
    17ae:	8d ab       	std	Y+53, r24	; 0x35
    17b0:	9e ab       	std	Y+54, r25	; 0x36
    17b2:	af ab       	std	Y+55, r26	; 0x37
    17b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	6d a9       	ldd	r22, Y+53	; 0x35
    17b8:	7e a9       	ldd	r23, Y+54	; 0x36
    17ba:	8f a9       	ldd	r24, Y+55	; 0x37
    17bc:	98 ad       	ldd	r25, Y+56	; 0x38
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a e7       	ldi	r20, 0x7A	; 122
    17c4:	53 e4       	ldi	r21, 0x43	; 67
    17c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	89 ab       	std	Y+49, r24	; 0x31
    17d0:	9a ab       	std	Y+50, r25	; 0x32
    17d2:	ab ab       	std	Y+51, r26	; 0x33
    17d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17d6:	69 a9       	ldd	r22, Y+49	; 0x31
    17d8:	7a a9       	ldd	r23, Y+50	; 0x32
    17da:	8b a9       	ldd	r24, Y+51	; 0x33
    17dc:	9c a9       	ldd	r25, Y+52	; 0x34
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <LCD_sendCommand+0x328>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	98 ab       	std	Y+48, r25	; 0x30
    17f4:	8f a7       	std	Y+47, r24	; 0x2f
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <LCD_sendCommand+0x3a6>
	else if (__tmp > 65535)
    17f8:	69 a9       	ldd	r22, Y+49	; 0x31
    17fa:	7a a9       	ldd	r23, Y+50	; 0x32
    17fc:	8b a9       	ldd	r24, Y+51	; 0x33
    17fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	4c f5       	brge	.+82     	; 0x1862 <LCD_sendCommand+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1810:	6d a9       	ldd	r22, Y+53	; 0x35
    1812:	7e a9       	ldd	r23, Y+54	; 0x36
    1814:	8f a9       	ldd	r24, Y+55	; 0x37
    1816:	98 ad       	ldd	r25, Y+56	; 0x38
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	98 ab       	std	Y+48, r25	; 0x30
    1836:	8f a7       	std	Y+47, r24	; 0x2f
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <LCD_sendCommand+0x388>
    183a:	89 e1       	ldi	r24, 0x19	; 25
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e a7       	std	Y+46, r25	; 0x2e
    1840:	8d a7       	std	Y+45, r24	; 0x2d
    1842:	8d a5       	ldd	r24, Y+45	; 0x2d
    1844:	9e a5       	ldd	r25, Y+46	; 0x2e
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <LCD_sendCommand+0x376>
    184a:	9e a7       	std	Y+46, r25	; 0x2e
    184c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1850:	98 a9       	ldd	r25, Y+48	; 0x30
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	98 ab       	std	Y+48, r25	; 0x30
    1856:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1858:	8f a5       	ldd	r24, Y+47	; 0x2f
    185a:	98 a9       	ldd	r25, Y+48	; 0x30
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	69 f7       	brne	.-38     	; 0x183a <LCD_sendCommand+0x36a>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <LCD_sendCommand+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1862:	69 a9       	ldd	r22, Y+49	; 0x31
    1864:	7a a9       	ldd	r23, Y+50	; 0x32
    1866:	8b a9       	ldd	r24, Y+51	; 0x33
    1868:	9c a9       	ldd	r25, Y+52	; 0x34
    186a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	98 ab       	std	Y+48, r25	; 0x30
    1874:	8f a7       	std	Y+47, r24	; 0x2f
    1876:	8f a5       	ldd	r24, Y+47	; 0x2f
    1878:	98 a9       	ldd	r25, Y+48	; 0x30
    187a:	9c a7       	std	Y+44, r25	; 0x2c
    187c:	8b a7       	std	Y+43, r24	; 0x2b
    187e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1880:	9c a5       	ldd	r25, Y+44	; 0x2c
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <LCD_sendCommand+0x3b2>
    1886:	9c a7       	std	Y+44, r25	; 0x2c
    1888:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable again to send last 4 bits of command */
    188a:	e2 e3       	ldi	r30, 0x32	; 50
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	80 64       	ori	r24, 0x40	; 64
    1892:	80 83       	st	Z, r24
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e8       	ldi	r26, 0x80	; 128
    189a:	bf e3       	ldi	r27, 0x3F	; 63
    189c:	8f a3       	std	Y+39, r24	; 0x27
    189e:	98 a7       	std	Y+40, r25	; 0x28
    18a0:	a9 a7       	std	Y+41, r26	; 0x29
    18a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	6f a1       	ldd	r22, Y+39	; 0x27
    18a6:	78 a5       	ldd	r23, Y+40	; 0x28
    18a8:	89 a5       	ldd	r24, Y+41	; 0x29
    18aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a e7       	ldi	r20, 0x7A	; 122
    18b2:	53 e4       	ldi	r21, 0x43	; 67
    18b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8b a3       	std	Y+35, r24	; 0x23
    18be:	9c a3       	std	Y+36, r25	; 0x24
    18c0:	ad a3       	std	Y+37, r26	; 0x25
    18c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18c4:	6b a1       	ldd	r22, Y+35	; 0x23
    18c6:	7c a1       	ldd	r23, Y+36	; 0x24
    18c8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ca:	9e a1       	ldd	r25, Y+38	; 0x26
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <LCD_sendCommand+0x416>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9a a3       	std	Y+34, r25	; 0x22
    18e2:	89 a3       	std	Y+33, r24	; 0x21
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <LCD_sendCommand+0x494>
	else if (__tmp > 65535)
    18e6:	6b a1       	ldd	r22, Y+35	; 0x23
    18e8:	7c a1       	ldd	r23, Y+36	; 0x24
    18ea:	8d a1       	ldd	r24, Y+37	; 0x25
    18ec:	9e a1       	ldd	r25, Y+38	; 0x26
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <LCD_sendCommand+0x480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1900:	78 a5       	ldd	r23, Y+40	; 0x28
    1902:	89 a5       	ldd	r24, Y+41	; 0x29
    1904:	9a a5       	ldd	r25, Y+42	; 0x2a
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9a a3       	std	Y+34, r25	; 0x22
    1924:	89 a3       	std	Y+33, r24	; 0x21
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <LCD_sendCommand+0x476>
    1928:	89 e1       	ldi	r24, 0x19	; 25
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	98 a3       	std	Y+32, r25	; 0x20
    192e:	8f 8f       	std	Y+31, r24	; 0x1f
    1930:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1932:	98 a1       	ldd	r25, Y+32	; 0x20
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_sendCommand+0x464>
    1938:	98 a3       	std	Y+32, r25	; 0x20
    193a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	89 a1       	ldd	r24, Y+33	; 0x21
    193e:	9a a1       	ldd	r25, Y+34	; 0x22
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9a a3       	std	Y+34, r25	; 0x22
    1944:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	89 a1       	ldd	r24, Y+33	; 0x21
    1948:	9a a1       	ldd	r25, Y+34	; 0x22
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <LCD_sendCommand+0x458>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <LCD_sendCommand+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6b a1       	ldd	r22, Y+35	; 0x23
    1952:	7c a1       	ldd	r23, Y+36	; 0x24
    1954:	8d a1       	ldd	r24, Y+37	; 0x25
    1956:	9e a1       	ldd	r25, Y+38	; 0x26
    1958:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9a a3       	std	Y+34, r25	; 0x22
    1962:	89 a3       	std	Y+33, r24	; 0x21
    1964:	89 a1       	ldd	r24, Y+33	; 0x21
    1966:	9a a1       	ldd	r25, Y+34	; 0x22
    1968:	9e 8f       	std	Y+30, r25	; 0x1e
    196a:	8d 8f       	std	Y+29, r24	; 0x1d
    196c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    196e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_sendCommand+0x4a0>
    1974:	9e 8f       	std	Y+30, r25	; 0x1e
    1976:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#ifdef UPPER_MODE_BITS
	/* send the Least 4 bits of the required command to the data bus D0 --> D3 */
	DATA_OUT=( (command << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
    1978:	a5 e3       	ldi	r26, 0x35	; 53
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	fe 01       	movw	r30, r28
    197e:	eb 5a       	subi	r30, 0xAB	; 171
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	80 81       	ld	r24, Z
    1984:	88 2f       	mov	r24, r24
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	82 95       	swap	r24
    198a:	92 95       	swap	r25
    198c:	90 7f       	andi	r25, 0xF0	; 240
    198e:	98 27       	eor	r25, r24
    1990:	80 7f       	andi	r24, 0xF0	; 240
    1992:	98 27       	eor	r25, r24
    1994:	98 2f       	mov	r25, r24
    1996:	e5 e3       	ldi	r30, 0x35	; 53
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	8f 70       	andi	r24, 0x0F	; 15
    199e:	89 2b       	or	r24, r25
    19a0:	8c 93       	st	X, r24
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a0 e8       	ldi	r26, 0x80	; 128
    19a8:	bf e3       	ldi	r27, 0x3F	; 63
    19aa:	89 8f       	std	Y+25, r24	; 0x19
    19ac:	9a 8f       	std	Y+26, r25	; 0x1a
    19ae:	ab 8f       	std	Y+27, r26	; 0x1b
    19b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	69 8d       	ldd	r22, Y+25	; 0x19
    19b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a e7       	ldi	r20, 0x7A	; 122
    19c0:	53 e4       	ldi	r21, 0x43	; 67
    19c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8d 8b       	std	Y+21, r24	; 0x15
    19cc:	9e 8b       	std	Y+22, r25	; 0x16
    19ce:	af 8b       	std	Y+23, r26	; 0x17
    19d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d2:	6d 89       	ldd	r22, Y+21	; 0x15
    19d4:	7e 89       	ldd	r23, Y+22	; 0x16
    19d6:	8f 89       	ldd	r24, Y+23	; 0x17
    19d8:	98 8d       	ldd	r25, Y+24	; 0x18
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <LCD_sendCommand+0x524>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <LCD_sendCommand+0x5a2>
	else if (__tmp > 65535)
    19f4:	6d 89       	ldd	r22, Y+21	; 0x15
    19f6:	7e 89       	ldd	r23, Y+22	; 0x16
    19f8:	8f 89       	ldd	r24, Y+23	; 0x17
    19fa:	98 8d       	ldd	r25, Y+24	; 0x18
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <LCD_sendCommand+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9c 8b       	std	Y+20, r25	; 0x14
    1a32:	8b 8b       	std	Y+19, r24	; 0x13
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <LCD_sendCommand+0x584>
    1a36:	89 e1       	ldi	r24, 0x19	; 25
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9a 8b       	std	Y+18, r25	; 0x12
    1a3c:	89 8b       	std	Y+17, r24	; 0x11
    1a3e:	89 89       	ldd	r24, Y+17	; 0x11
    1a40:	9a 89       	ldd	r25, Y+18	; 0x12
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_sendCommand+0x572>
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	9c 8b       	std	Y+20, r25	; 0x14
    1a52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8b 89       	ldd	r24, Y+19	; 0x13
    1a56:	9c 89       	ldd	r25, Y+20	; 0x14
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <LCD_sendCommand+0x566>
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <LCD_sendCommand+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a60:	7e 89       	ldd	r23, Y+22	; 0x16
    1a62:	8f 89       	ldd	r24, Y+23	; 0x17
    1a64:	98 8d       	ldd	r25, Y+24	; 0x18
    1a66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9c 8b       	std	Y+20, r25	; 0x14
    1a70:	8b 8b       	std	Y+19, r24	; 0x13
    1a72:	8b 89       	ldd	r24, Y+19	; 0x13
    1a74:	9c 89       	ldd	r25, Y+20	; 0x14
    1a76:	98 8b       	std	Y+16, r25	; 0x10
    1a78:	8f 87       	std	Y+15, r24	; 0x0f
    1a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7c:	98 89       	ldd	r25, Y+16	; 0x10
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_sendCommand+0x5ae>
    1a82:	98 8b       	std	Y+16, r25	; 0x10
    1a84:	8f 87       	std	Y+15, r24	; 0x0f
#ifdef LOWER_MODE_BITS
	DATA_OUT = ((command) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    1a86:	e2 e3       	ldi	r30, 0x32	; 50
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	8f 7b       	andi	r24, 0xBF	; 191
    1a8e:	80 83       	st	Z, r24
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e8       	ldi	r26, 0x80	; 128
    1a96:	bf e3       	ldi	r27, 0x3F	; 63
    1a98:	8b 87       	std	Y+11, r24	; 0x0b
    1a9a:	9c 87       	std	Y+12, r25	; 0x0c
    1a9c:	ad 87       	std	Y+13, r26	; 0x0d
    1a9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	4a e7       	ldi	r20, 0x7A	; 122
    1aae:	53 e4       	ldi	r21, 0x43	; 67
    1ab0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8f 83       	std	Y+7, r24	; 0x07
    1aba:	98 87       	std	Y+8, r25	; 0x08
    1abc:	a9 87       	std	Y+9, r26	; 0x09
    1abe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <LCD_sendCommand+0x612>
		__ticks = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	3f c0       	rjmp	.+126    	; 0x1b60 <LCD_sendCommand+0x690>
	else if (__tmp > 65535)
    1ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae4:	78 85       	ldd	r23, Y+8	; 0x08
    1ae6:	89 85       	ldd	r24, Y+9	; 0x09
    1ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	3f ef       	ldi	r19, 0xFF	; 255
    1aee:	4f e7       	ldi	r20, 0x7F	; 127
    1af0:	57 e4       	ldi	r21, 0x47	; 71
    1af2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1af6:	18 16       	cp	r1, r24
    1af8:	4c f5       	brge	.+82     	; 0x1b4c <LCD_sendCommand+0x67c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e2       	ldi	r20, 0x20	; 32
    1b08:	51 e4       	ldi	r21, 0x41	; 65
    1b0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	0f c0       	rjmp	.+30     	; 0x1b42 <LCD_sendCommand+0x672>
    1b24:	89 e1       	ldi	r24, 0x19	; 25
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <LCD_sendCommand+0x660>
    1b34:	9c 83       	std	Y+4, r25	; 0x04
    1b36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	69 f7       	brne	.-38     	; 0x1b24 <LCD_sendCommand+0x654>
    1b4a:	14 c0       	rjmp	.+40     	; 0x1b74 <LCD_sendCommand+0x6a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4e:	78 85       	ldd	r23, Y+8	; 0x08
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	9e 81       	ldd	r25, Y+6	; 0x06
    1b64:	9a 83       	std	Y+2, r25	; 0x02
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_sendCommand+0x69c>
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
}
    1b74:	cb 5a       	subi	r28, 0xAB	; 171
    1b76:	df 4f       	sbci	r29, 0xFF	; 255
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	08 95       	ret

00001b8c <LCD_displayCharacter>:

/*
 * Function responsible for Display only One character on LCD
 */
void LCD_displayCharacter(uint8 data) {
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	c5 55       	subi	r28, 0x55	; 85
    1b9a:	d0 40       	sbci	r29, 0x00	; 0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	eb 5a       	subi	r30, 0xAB	; 171
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	80 83       	st	Z, r24
	RS = SET; /* tell LCD that data which will send now is DATA */
    1bae:	e2 e3       	ldi	r30, 0x32	; 50
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 61       	ori	r24, 0x10	; 16
    1bb6:	80 83       	st	Z, r24
	RW = CLEAR; /* select write Mode on LCD */
    1bb8:	e2 e3       	ldi	r30, 0x32	; 50
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8f 7d       	andi	r24, 0xDF	; 223
    1bc0:	80 83       	st	Z, r24
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ef 5a       	subi	r30, 0xAF	; 175
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a0 e8       	ldi	r26, 0x80	; 128
    1bce:	bf e3       	ldi	r27, 0x3F	; 63
    1bd0:	80 83       	st	Z, r24
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	a2 83       	std	Z+2, r26	; 0x02
    1bd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd8:	8e 01       	movw	r16, r28
    1bda:	03 5b       	subi	r16, 0xB3	; 179
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bde:	fe 01       	movw	r30, r28
    1be0:	ef 5a       	subi	r30, 0xAF	; 175
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a e7       	ldi	r20, 0x7A	; 122
    1bf2:	53 e4       	ldi	r21, 0x43	; 67
    1bf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	80 83       	st	Z, r24
    1c00:	91 83       	std	Z+1, r25	; 0x01
    1c02:	a2 83       	std	Z+2, r26	; 0x02
    1c04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c06:	fe 01       	movw	r30, r28
    1c08:	e3 5b       	subi	r30, 0xB3	; 179
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e8       	ldi	r20, 0x80	; 128
    1c1a:	5f e3       	ldi	r21, 0x3F	; 63
    1c1c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c20:	88 23       	and	r24, r24
    1c22:	44 f4       	brge	.+16     	; 0x1c34 <LCD_displayCharacter+0xa8>
		__ticks = 1;
    1c24:	fe 01       	movw	r30, r28
    1c26:	e5 5b       	subi	r30, 0xB5	; 181
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	91 83       	std	Z+1, r25	; 0x01
    1c30:	80 83       	st	Z, r24
    1c32:	64 c0       	rjmp	.+200    	; 0x1cfc <LCD_displayCharacter+0x170>
	else if (__tmp > 65535)
    1c34:	fe 01       	movw	r30, r28
    1c36:	e3 5b       	subi	r30, 0xB3	; 179
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	4f e7       	ldi	r20, 0x7F	; 127
    1c48:	57 e4       	ldi	r21, 0x47	; 71
    1c4a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	0c f0       	brlt	.+2      	; 0x1c54 <LCD_displayCharacter+0xc8>
    1c52:	43 c0       	rjmp	.+134    	; 0x1cda <LCD_displayCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c54:	fe 01       	movw	r30, r28
    1c56:	ef 5a       	subi	r30, 0xAF	; 175
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	60 81       	ld	r22, Z
    1c5c:	71 81       	ldd	r23, Z+1	; 0x01
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	8e 01       	movw	r16, r28
    1c74:	05 5b       	subi	r16, 0xB5	; 181
    1c76:	1f 4f       	sbci	r17, 0xFF	; 255
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	f8 01       	movw	r30, r16
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	80 83       	st	Z, r24
    1c8a:	1f c0       	rjmp	.+62     	; 0x1cca <LCD_displayCharacter+0x13e>
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e7 5b       	subi	r30, 0xB7	; 183
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	89 e1       	ldi	r24, 0x19	; 25
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	91 83       	std	Z+1, r25	; 0x01
    1c98:	80 83       	st	Z, r24
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e7 5b       	subi	r30, 0xB7	; 183
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	80 81       	ld	r24, Z
    1ca2:	91 81       	ldd	r25, Z+1	; 0x01
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_displayCharacter+0x118>
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e7 5b       	subi	r30, 0xB7	; 183
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb2:	de 01       	movw	r26, r28
    1cb4:	a5 5b       	subi	r26, 0xB5	; 181
    1cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e5 5b       	subi	r30, 0xB5	; 181
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	80 81       	ld	r24, Z
    1cc0:	91 81       	ldd	r25, Z+1	; 0x01
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	11 96       	adiw	r26, 0x01	; 1
    1cc6:	9c 93       	st	X, r25
    1cc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e5 5b       	subi	r30, 0xB5	; 181
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 81       	ld	r24, Z
    1cd2:	91 81       	ldd	r25, Z+1	; 0x01
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	d1 f6       	brne	.-76     	; 0x1c8c <LCD_displayCharacter+0x100>
    1cd8:	27 c0       	rjmp	.+78     	; 0x1d28 <LCD_displayCharacter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cda:	8e 01       	movw	r16, r28
    1cdc:	05 5b       	subi	r16, 0xB5	; 181
    1cde:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e3 5b       	subi	r30, 0xB3	; 179
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
    1cfc:	de 01       	movw	r26, r28
    1cfe:	a9 5b       	subi	r26, 0xB9	; 185
    1d00:	bf 4f       	sbci	r27, 0xFF	; 255
    1d02:	fe 01       	movw	r30, r28
    1d04:	e5 5b       	subi	r30, 0xB5	; 181
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	8d 93       	st	X+, r24
    1d0e:	9c 93       	st	X, r25
    1d10:	fe 01       	movw	r30, r28
    1d12:	e9 5b       	subi	r30, 0xB9	; 185
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_displayCharacter+0x18e>
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e9 5b       	subi	r30, 0xB9	; 185
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
    1d28:	e2 e3       	ldi	r30, 0x32	; 50
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	80 64       	ori	r24, 0x40	; 64
    1d30:	80 83       	st	Z, r24
    1d32:	fe 01       	movw	r30, r28
    1d34:	ed 5b       	subi	r30, 0xBD	; 189
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a0 e8       	ldi	r26, 0x80	; 128
    1d3e:	bf e3       	ldi	r27, 0x3F	; 63
    1d40:	80 83       	st	Z, r24
    1d42:	91 83       	std	Z+1, r25	; 0x01
    1d44:	a2 83       	std	Z+2, r26	; 0x02
    1d46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d48:	8e 01       	movw	r16, r28
    1d4a:	01 5c       	subi	r16, 0xC1	; 193
    1d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4e:	fe 01       	movw	r30, r28
    1d50:	ed 5b       	subi	r30, 0xBD	; 189
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a e7       	ldi	r20, 0x7A	; 122
    1d62:	53 e4       	ldi	r21, 0x43	; 67
    1d64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	80 83       	st	Z, r24
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	a2 83       	std	Z+2, r26	; 0x02
    1d74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d76:	fe 01       	movw	r30, r28
    1d78:	ff 96       	adiw	r30, 0x3f	; 63
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <LCD_displayCharacter+0x210>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9e af       	std	Y+62, r25	; 0x3e
    1d98:	8d af       	std	Y+61, r24	; 0x3d
    1d9a:	46 c0       	rjmp	.+140    	; 0x1e28 <LCD_displayCharacter+0x29c>
	else if (__tmp > 65535)
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	ff 96       	adiw	r30, 0x3f	; 63
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	4f e7       	ldi	r20, 0x7F	; 127
    1dae:	57 e4       	ldi	r21, 0x47	; 71
    1db0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1db4:	18 16       	cp	r1, r24
    1db6:	64 f5       	brge	.+88     	; 0x1e10 <LCD_displayCharacter+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db8:	fe 01       	movw	r30, r28
    1dba:	ed 5b       	subi	r30, 0xBD	; 189
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	60 81       	ld	r22, Z
    1dc0:	71 81       	ldd	r23, Z+1	; 0x01
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e af       	std	Y+62, r25	; 0x3e
    1de4:	8d af       	std	Y+61, r24	; 0x3d
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LCD_displayCharacter+0x27a>
    1de8:	89 e1       	ldi	r24, 0x19	; 25
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9c af       	std	Y+60, r25	; 0x3c
    1dee:	8b af       	std	Y+59, r24	; 0x3b
    1df0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1df2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_displayCharacter+0x268>
    1df8:	9c af       	std	Y+60, r25	; 0x3c
    1dfa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9e af       	std	Y+62, r25	; 0x3e
    1e04:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e08:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <LCD_displayCharacter+0x25c>
    1e0e:	16 c0       	rjmp	.+44     	; 0x1e3c <LCD_displayCharacter+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	fe 01       	movw	r30, r28
    1e12:	ff 96       	adiw	r30, 0x3f	; 63
    1e14:	60 81       	ld	r22, Z
    1e16:	71 81       	ldd	r23, Z+1	; 0x01
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9e af       	std	Y+62, r25	; 0x3e
    1e26:	8d af       	std	Y+61, r24	; 0x3d
    1e28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e2c:	9a af       	std	Y+58, r25	; 0x3a
    1e2e:	89 af       	std	Y+57, r24	; 0x39
    1e30:	89 ad       	ldd	r24, Y+57	; 0x39
    1e32:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_displayCharacter+0x2a8>
    1e38:	9a af       	std	Y+58, r25	; 0x3a
    1e3a:	89 af       	std	Y+57, r24	; 0x39
#endif

#if(DATA_MODE ==4)
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( data & 0xF0 ) | ( DATA_OUT & 0x0F );
    1e3c:	a5 e3       	ldi	r26, 0x35	; 53
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	fe 01       	movw	r30, r28
    1e42:	eb 5a       	subi	r30, 0xAB	; 171
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	80 81       	ld	r24, Z
    1e48:	98 2f       	mov	r25, r24
    1e4a:	90 7f       	andi	r25, 0xF0	; 240
    1e4c:	e5 e3       	ldi	r30, 0x35	; 53
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	8f 70       	andi	r24, 0x0F	; 15
    1e54:	89 2b       	or	r24, r25
    1e56:	8c 93       	st	X, r24
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT = ((data >> 4) & 0x0F) | ( DATA_OUT & 0xF0);
#endif

	E = CLEAR; /* close Enable to prevent data share between LCD and AVR */
    1e58:	e2 e3       	ldi	r30, 0x32	; 50
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8f 7b       	andi	r24, 0xBF	; 191
    1e60:	80 83       	st	Z, r24
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e8       	ldi	r26, 0x80	; 128
    1e68:	bf e3       	ldi	r27, 0x3F	; 63
    1e6a:	8d ab       	std	Y+53, r24	; 0x35
    1e6c:	9e ab       	std	Y+54, r25	; 0x36
    1e6e:	af ab       	std	Y+55, r26	; 0x37
    1e70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	6d a9       	ldd	r22, Y+53	; 0x35
    1e74:	7e a9       	ldd	r23, Y+54	; 0x36
    1e76:	8f a9       	ldd	r24, Y+55	; 0x37
    1e78:	98 ad       	ldd	r25, Y+56	; 0x38
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a e7       	ldi	r20, 0x7A	; 122
    1e80:	53 e4       	ldi	r21, 0x43	; 67
    1e82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	89 ab       	std	Y+49, r24	; 0x31
    1e8c:	9a ab       	std	Y+50, r25	; 0x32
    1e8e:	ab ab       	std	Y+51, r26	; 0x33
    1e90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e92:	69 a9       	ldd	r22, Y+49	; 0x31
    1e94:	7a a9       	ldd	r23, Y+50	; 0x32
    1e96:	8b a9       	ldd	r24, Y+51	; 0x33
    1e98:	9c a9       	ldd	r25, Y+52	; 0x34
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <LCD_displayCharacter+0x328>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	98 ab       	std	Y+48, r25	; 0x30
    1eb0:	8f a7       	std	Y+47, r24	; 0x2f
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <LCD_displayCharacter+0x3a6>
	else if (__tmp > 65535)
    1eb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eba:	9c a9       	ldd	r25, Y+52	; 0x34
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <LCD_displayCharacter+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ece:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ed2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	98 ab       	std	Y+48, r25	; 0x30
    1ef2:	8f a7       	std	Y+47, r24	; 0x2f
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <LCD_displayCharacter+0x388>
    1ef6:	89 e1       	ldi	r24, 0x19	; 25
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9e a7       	std	Y+46, r25	; 0x2e
    1efc:	8d a7       	std	Y+45, r24	; 0x2d
    1efe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f00:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_displayCharacter+0x376>
    1f06:	9e a7       	std	Y+46, r25	; 0x2e
    1f08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	98 ab       	std	Y+48, r25	; 0x30
    1f12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f16:	98 a9       	ldd	r25, Y+48	; 0x30
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <LCD_displayCharacter+0x36a>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <LCD_displayCharacter+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f20:	7a a9       	ldd	r23, Y+50	; 0x32
    1f22:	8b a9       	ldd	r24, Y+51	; 0x33
    1f24:	9c a9       	ldd	r25, Y+52	; 0x34
    1f26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	98 ab       	std	Y+48, r25	; 0x30
    1f30:	8f a7       	std	Y+47, r24	; 0x2f
    1f32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f34:	98 a9       	ldd	r25, Y+48	; 0x30
    1f36:	9c a7       	std	Y+44, r25	; 0x2c
    1f38:	8b a7       	std	Y+43, r24	; 0x2b
    1f3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_displayCharacter+0x3b2>
    1f42:	9c a7       	std	Y+44, r25	; 0x2c
    1f44:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable again to send last 4 bits of DATA */
    1f46:	e2 e3       	ldi	r30, 0x32	; 50
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	80 64       	ori	r24, 0x40	; 64
    1f4e:	80 83       	st	Z, r24
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a0 e8       	ldi	r26, 0x80	; 128
    1f56:	bf e3       	ldi	r27, 0x3F	; 63
    1f58:	8f a3       	std	Y+39, r24	; 0x27
    1f5a:	98 a7       	std	Y+40, r25	; 0x28
    1f5c:	a9 a7       	std	Y+41, r26	; 0x29
    1f5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f60:	6f a1       	ldd	r22, Y+39	; 0x27
    1f62:	78 a5       	ldd	r23, Y+40	; 0x28
    1f64:	89 a5       	ldd	r24, Y+41	; 0x29
    1f66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a e7       	ldi	r20, 0x7A	; 122
    1f6e:	53 e4       	ldi	r21, 0x43	; 67
    1f70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	8b a3       	std	Y+35, r24	; 0x23
    1f7a:	9c a3       	std	Y+36, r25	; 0x24
    1f7c:	ad a3       	std	Y+37, r26	; 0x25
    1f7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f80:	6b a1       	ldd	r22, Y+35	; 0x23
    1f82:	7c a1       	ldd	r23, Y+36	; 0x24
    1f84:	8d a1       	ldd	r24, Y+37	; 0x25
    1f86:	9e a1       	ldd	r25, Y+38	; 0x26
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e8       	ldi	r20, 0x80	; 128
    1f8e:	5f e3       	ldi	r21, 0x3F	; 63
    1f90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f94:	88 23       	and	r24, r24
    1f96:	2c f4       	brge	.+10     	; 0x1fa2 <LCD_displayCharacter+0x416>
		__ticks = 1;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	9a a3       	std	Y+34, r25	; 0x22
    1f9e:	89 a3       	std	Y+33, r24	; 0x21
    1fa0:	3f c0       	rjmp	.+126    	; 0x2020 <LCD_displayCharacter+0x494>
	else if (__tmp > 65535)
    1fa2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa8:	9e a1       	ldd	r25, Y+38	; 0x26
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	3f ef       	ldi	r19, 0xFF	; 255
    1fae:	4f e7       	ldi	r20, 0x7F	; 127
    1fb0:	57 e4       	ldi	r21, 0x47	; 71
    1fb2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fb6:	18 16       	cp	r1, r24
    1fb8:	4c f5       	brge	.+82     	; 0x200c <LCD_displayCharacter+0x480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fba:	6f a1       	ldd	r22, Y+39	; 0x27
    1fbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1fbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e2       	ldi	r20, 0x20	; 32
    1fc8:	51 e4       	ldi	r21, 0x41	; 65
    1fca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9a a3       	std	Y+34, r25	; 0x22
    1fe0:	89 a3       	std	Y+33, r24	; 0x21
    1fe2:	0f c0       	rjmp	.+30     	; 0x2002 <LCD_displayCharacter+0x476>
    1fe4:	89 e1       	ldi	r24, 0x19	; 25
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	98 a3       	std	Y+32, r25	; 0x20
    1fea:	8f 8f       	std	Y+31, r24	; 0x1f
    1fec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fee:	98 a1       	ldd	r25, Y+32	; 0x20
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <LCD_displayCharacter+0x464>
    1ff4:	98 a3       	std	Y+32, r25	; 0x20
    1ff6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffa:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	9a a3       	std	Y+34, r25	; 0x22
    2000:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2002:	89 a1       	ldd	r24, Y+33	; 0x21
    2004:	9a a1       	ldd	r25, Y+34	; 0x22
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	69 f7       	brne	.-38     	; 0x1fe4 <LCD_displayCharacter+0x458>
    200a:	14 c0       	rjmp	.+40     	; 0x2034 <LCD_displayCharacter+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200c:	6b a1       	ldd	r22, Y+35	; 0x23
    200e:	7c a1       	ldd	r23, Y+36	; 0x24
    2010:	8d a1       	ldd	r24, Y+37	; 0x25
    2012:	9e a1       	ldd	r25, Y+38	; 0x26
    2014:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9a a3       	std	Y+34, r25	; 0x22
    201e:	89 a3       	std	Y+33, r24	; 0x21
    2020:	89 a1       	ldd	r24, Y+33	; 0x21
    2022:	9a a1       	ldd	r25, Y+34	; 0x22
    2024:	9e 8f       	std	Y+30, r25	; 0x1e
    2026:	8d 8f       	std	Y+29, r24	; 0x1d
    2028:	8d 8d       	ldd	r24, Y+29	; 0x1d
    202a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <LCD_displayCharacter+0x4a0>
    2030:	9e 8f       	std	Y+30, r25	; 0x1e
    2032:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#ifdef UPPER_MODE_BITS
	/* send the Least 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( (data << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
    2034:	a5 e3       	ldi	r26, 0x35	; 53
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	fe 01       	movw	r30, r28
    203a:	eb 5a       	subi	r30, 0xAB	; 171
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 81       	ld	r24, Z
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	82 95       	swap	r24
    2046:	92 95       	swap	r25
    2048:	90 7f       	andi	r25, 0xF0	; 240
    204a:	98 27       	eor	r25, r24
    204c:	80 7f       	andi	r24, 0xF0	; 240
    204e:	98 27       	eor	r25, r24
    2050:	98 2f       	mov	r25, r24
    2052:	e5 e3       	ldi	r30, 0x35	; 53
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	8f 70       	andi	r24, 0x0F	; 15
    205a:	89 2b       	or	r24, r25
    205c:	8c 93       	st	X, r24
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a0 e8       	ldi	r26, 0x80	; 128
    2064:	bf e3       	ldi	r27, 0x3F	; 63
    2066:	89 8f       	std	Y+25, r24	; 0x19
    2068:	9a 8f       	std	Y+26, r25	; 0x1a
    206a:	ab 8f       	std	Y+27, r26	; 0x1b
    206c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206e:	69 8d       	ldd	r22, Y+25	; 0x19
    2070:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2072:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2074:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	4a e7       	ldi	r20, 0x7A	; 122
    207c:	53 e4       	ldi	r21, 0x43	; 67
    207e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	8d 8b       	std	Y+21, r24	; 0x15
    2088:	9e 8b       	std	Y+22, r25	; 0x16
    208a:	af 8b       	std	Y+23, r26	; 0x17
    208c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    208e:	6d 89       	ldd	r22, Y+21	; 0x15
    2090:	7e 89       	ldd	r23, Y+22	; 0x16
    2092:	8f 89       	ldd	r24, Y+23	; 0x17
    2094:	98 8d       	ldd	r25, Y+24	; 0x18
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5f e3       	ldi	r21, 0x3F	; 63
    209e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20a2:	88 23       	and	r24, r24
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <LCD_displayCharacter+0x524>
		__ticks = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9c 8b       	std	Y+20, r25	; 0x14
    20ac:	8b 8b       	std	Y+19, r24	; 0x13
    20ae:	3f c0       	rjmp	.+126    	; 0x212e <LCD_displayCharacter+0x5a2>
	else if (__tmp > 65535)
    20b0:	6d 89       	ldd	r22, Y+21	; 0x15
    20b2:	7e 89       	ldd	r23, Y+22	; 0x16
    20b4:	8f 89       	ldd	r24, Y+23	; 0x17
    20b6:	98 8d       	ldd	r25, Y+24	; 0x18
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	3f ef       	ldi	r19, 0xFF	; 255
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	57 e4       	ldi	r21, 0x47	; 71
    20c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	4c f5       	brge	.+82     	; 0x211a <LCD_displayCharacter+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e2       	ldi	r20, 0x20	; 32
    20d6:	51 e4       	ldi	r21, 0x41	; 65
    20d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9c 8b       	std	Y+20, r25	; 0x14
    20ee:	8b 8b       	std	Y+19, r24	; 0x13
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <LCD_displayCharacter+0x584>
    20f2:	89 e1       	ldi	r24, 0x19	; 25
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9a 8b       	std	Y+18, r25	; 0x12
    20f8:	89 8b       	std	Y+17, r24	; 0x11
    20fa:	89 89       	ldd	r24, Y+17	; 0x11
    20fc:	9a 89       	ldd	r25, Y+18	; 0x12
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_displayCharacter+0x572>
    2102:	9a 8b       	std	Y+18, r25	; 0x12
    2104:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2106:	8b 89       	ldd	r24, Y+19	; 0x13
    2108:	9c 89       	ldd	r25, Y+20	; 0x14
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	9c 8b       	std	Y+20, r25	; 0x14
    210e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2110:	8b 89       	ldd	r24, Y+19	; 0x13
    2112:	9c 89       	ldd	r25, Y+20	; 0x14
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	69 f7       	brne	.-38     	; 0x20f2 <LCD_displayCharacter+0x566>
    2118:	14 c0       	rjmp	.+40     	; 0x2142 <LCD_displayCharacter+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211a:	6d 89       	ldd	r22, Y+21	; 0x15
    211c:	7e 89       	ldd	r23, Y+22	; 0x16
    211e:	8f 89       	ldd	r24, Y+23	; 0x17
    2120:	98 8d       	ldd	r25, Y+24	; 0x18
    2122:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9c 8b       	std	Y+20, r25	; 0x14
    212c:	8b 8b       	std	Y+19, r24	; 0x13
    212e:	8b 89       	ldd	r24, Y+19	; 0x13
    2130:	9c 89       	ldd	r25, Y+20	; 0x14
    2132:	98 8b       	std	Y+16, r25	; 0x10
    2134:	8f 87       	std	Y+15, r24	; 0x0f
    2136:	8f 85       	ldd	r24, Y+15	; 0x0f
    2138:	98 89       	ldd	r25, Y+16	; 0x10
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_displayCharacter+0x5ae>
    213e:	98 8b       	std	Y+16, r25	; 0x10
    2140:	8f 87       	std	Y+15, r24	; 0x0f
#ifdef LOWER_MODE_BITS
	DATA_OUT = ((data) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    2142:	e2 e3       	ldi	r30, 0x32	; 50
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 7b       	andi	r24, 0xBF	; 191
    214a:	80 83       	st	Z, r24
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a0 e8       	ldi	r26, 0x80	; 128
    2152:	bf e3       	ldi	r27, 0x3F	; 63
    2154:	8b 87       	std	Y+11, r24	; 0x0b
    2156:	9c 87       	std	Y+12, r25	; 0x0c
    2158:	ad 87       	std	Y+13, r26	; 0x0d
    215a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	6b 85       	ldd	r22, Y+11	; 0x0b
    215e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2160:	8d 85       	ldd	r24, Y+13	; 0x0d
    2162:	9e 85       	ldd	r25, Y+14	; 0x0e
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	4a e7       	ldi	r20, 0x7A	; 122
    216a:	53 e4       	ldi	r21, 0x43	; 67
    216c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	8f 83       	std	Y+7, r24	; 0x07
    2176:	98 87       	std	Y+8, r25	; 0x08
    2178:	a9 87       	std	Y+9, r26	; 0x09
    217a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e8       	ldi	r20, 0x80	; 128
    218a:	5f e3       	ldi	r21, 0x3F	; 63
    218c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2190:	88 23       	and	r24, r24
    2192:	2c f4       	brge	.+10     	; 0x219e <LCD_displayCharacter+0x612>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	3f c0       	rjmp	.+126    	; 0x221c <LCD_displayCharacter+0x690>
	else if (__tmp > 65535)
    219e:	6f 81       	ldd	r22, Y+7	; 0x07
    21a0:	78 85       	ldd	r23, Y+8	; 0x08
    21a2:	89 85       	ldd	r24, Y+9	; 0x09
    21a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	4c f5       	brge	.+82     	; 0x2208 <LCD_displayCharacter+0x67c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    21bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <LCD_displayCharacter+0x672>
    21e0:	89 e1       	ldi	r24, 0x19	; 25
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_displayCharacter+0x660>
    21f0:	9c 83       	std	Y+4, r25	; 0x04
    21f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	8d 81       	ldd	r24, Y+5	; 0x05
    21f6:	9e 81       	ldd	r25, Y+6	; 0x06
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	9e 81       	ldd	r25, Y+6	; 0x06
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	69 f7       	brne	.-38     	; 0x21e0 <LCD_displayCharacter+0x654>
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <LCD_displayCharacter+0x6a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2208:	6f 81       	ldd	r22, Y+7	; 0x07
    220a:	78 85       	ldd	r23, Y+8	; 0x08
    220c:	89 85       	ldd	r24, Y+9	; 0x09
    220e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2210:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_displayCharacter+0x69c>
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
}
    2230:	cb 5a       	subi	r28, 0xAB	; 171
    2232:	df 4f       	sbci	r29, 0xFF	; 255
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	08 95       	ret

00002248 <LCD_displayString>:

/*
 * Function responsible for Display more One character on LCD
 */
void LCD_displayString(const char *Str) {
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	00 d0       	rcall	.+0      	; 0x224e <LCD_displayString+0x6>
    224e:	0f 92       	push	r0
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	9b 83       	std	Y+3, r25	; 0x03
    2256:	8a 83       	std	Y+2, r24	; 0x02
		LCD_displayCharacter(*Str);
		Str++;
	}
	************************************************************/

	 uint8 i = 0;
    2258:	19 82       	std	Y+1, r1	; 0x01
    225a:	0e c0       	rjmp	.+28     	; 0x2278 <LCD_displayString+0x30>
	 while(Str[i] != '\0')
	 {
	 LCD_displayCharacter(Str[i]);
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	9b 81       	ldd	r25, Y+3	; 0x03
    2266:	fc 01       	movw	r30, r24
    2268:	e2 0f       	add	r30, r18
    226a:	f3 1f       	adc	r31, r19
    226c:	80 81       	ld	r24, Z
    226e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_displayCharacter>
	 i++;
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	8f 5f       	subi	r24, 0xFF	; 255
    2276:	89 83       	std	Y+1, r24	; 0x01
		Str++;
	}
	************************************************************/

	 uint8 i = 0;
	 while(Str[i] != '\0')
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	9b 81       	ldd	r25, Y+3	; 0x03
    2282:	fc 01       	movw	r30, r24
    2284:	e2 0f       	add	r30, r18
    2286:	f3 1f       	adc	r31, r19
    2288:	80 81       	ld	r24, Z
    228a:	88 23       	and	r24, r24
    228c:	39 f7       	brne	.-50     	; 0x225c <LCD_displayString+0x14>
	 LCD_displayCharacter(Str[i]);
	 i++;
	 }
	return;

}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <LCD_init>:

/*
 * Function responsible to initialize LCD pins and mode .... etc .
 */
void LCD_init(void) {
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	2e 97       	sbiw	r28, 0x0e	; 14
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
	RS_DIR = SET; /* select RS pin output pin */
    22ae:	e1 e3       	ldi	r30, 0x31	; 49
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	80 61       	ori	r24, 0x10	; 16
    22b6:	80 83       	st	Z, r24
	RW_DIR = SET; /* select RW pin output pin */
    22b8:	e1 e3       	ldi	r30, 0x31	; 49
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	80 62       	ori	r24, 0x20	; 32
    22c0:	80 83       	st	Z, r24
	E_DIR = SET; /* select Enable pin output pin */
    22c2:	e1 e3       	ldi	r30, 0x31	; 49
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	80 64       	ori	r24, 0x40	; 64
    22ca:	80 83       	st	Z, r24
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

#if (DATA_MODE == 4)
	/* LCD Configuration Mode of number of DATA line = 4 lines */
	LCD_sendCommand(FOUR_BITS_MODE); /* initialize LCD in 4-bit mode */
    22cc:	82 e0       	ldi	r24, 0x02	; 2
    22ce:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    22d2:	88 e2       	ldi	r24, 0x28	; 40
    22d4:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_sendCommand>
#ifdef UPPER_MODE_BITS
	DATA_DIR |= 0xF0; /* select highest 4 bits as a output pins */
    22d8:	a4 e3       	ldi	r26, 0x34	; 52
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e4 e3       	ldi	r30, 0x34	; 52
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	80 6f       	ori	r24, 0xF0	; 240
    22e4:	8c 93       	st	X, r24

#ifdef LOWER_MODE_BITS
	DATA_DIR |= 0x0F; /* select first 4 bits as a output pins */
#endif
#endif
	LCD_sendCommand(CURSOR_OFF); /* hide cursor from LCD */
    22e6:	8c e0       	ldi	r24, 0x0C	; 12
    22e8:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_sendCommand>
	LCD_sendCommand(AUTO_INCREMENT); /* hide cursor from LCD */
    22ec:	86 e0       	ldi	r24, 0x06	; 6
    22ee:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_sendCommand>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	a0 e0       	ldi	r26, 0x00	; 0
    22fe:	b0 e4       	ldi	r27, 0x40	; 64
    2300:	8b 87       	std	Y+11, r24	; 0x0b
    2302:	9c 87       	std	Y+12, r25	; 0x0c
    2304:	ad 87       	std	Y+13, r26	; 0x0d
    2306:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2308:	6b 85       	ldd	r22, Y+11	; 0x0b
    230a:	7c 85       	ldd	r23, Y+12	; 0x0c
    230c:	8d 85       	ldd	r24, Y+13	; 0x0d
    230e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4a e7       	ldi	r20, 0x7A	; 122
    2316:	53 e4       	ldi	r21, 0x43	; 67
    2318:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8f 83       	std	Y+7, r24	; 0x07
    2322:	98 87       	std	Y+8, r25	; 0x08
    2324:	a9 87       	std	Y+9, r26	; 0x09
    2326:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2328:	6f 81       	ldd	r22, Y+7	; 0x07
    232a:	78 85       	ldd	r23, Y+8	; 0x08
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    233c:	88 23       	and	r24, r24
    233e:	2c f4       	brge	.+10     	; 0x234a <LCD_init+0xb0>
		__ticks = 1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	3f c0       	rjmp	.+126    	; 0x23c8 <LCD_init+0x12e>
	else if (__tmp > 65535)
    234a:	6f 81       	ldd	r22, Y+7	; 0x07
    234c:	78 85       	ldd	r23, Y+8	; 0x08
    234e:	89 85       	ldd	r24, Y+9	; 0x09
    2350:	9a 85       	ldd	r25, Y+10	; 0x0a
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	3f ef       	ldi	r19, 0xFF	; 255
    2356:	4f e7       	ldi	r20, 0x7F	; 127
    2358:	57 e4       	ldi	r21, 0x47	; 71
    235a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    235e:	18 16       	cp	r1, r24
    2360:	4c f5       	brge	.+82     	; 0x23b4 <LCD_init+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2362:	6b 85       	ldd	r22, Y+11	; 0x0b
    2364:	7c 85       	ldd	r23, Y+12	; 0x0c
    2366:	8d 85       	ldd	r24, Y+13	; 0x0d
    2368:	9e 85       	ldd	r25, Y+14	; 0x0e
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e2       	ldi	r20, 0x20	; 32
    2370:	51 e4       	ldi	r21, 0x41	; 65
    2372:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	bc 01       	movw	r22, r24
    237c:	cd 01       	movw	r24, r26
    237e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	0f c0       	rjmp	.+30     	; 0x23aa <LCD_init+0x110>
    238c:	89 e1       	ldi	r24, 0x19	; 25
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCD_init+0xfe>
    239c:	9c 83       	std	Y+4, r25	; 0x04
    239e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a0:	8d 81       	ldd	r24, Y+5	; 0x05
    23a2:	9e 81       	ldd	r25, Y+6	; 0x06
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	9e 83       	std	Y+6, r25	; 0x06
    23a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23aa:	8d 81       	ldd	r24, Y+5	; 0x05
    23ac:	9e 81       	ldd	r25, Y+6	; 0x06
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	69 f7       	brne	.-38     	; 0x238c <LCD_init+0xf2>
    23b2:	14 c0       	rjmp	.+40     	; 0x23dc <LCD_init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ca:	9e 81       	ldd	r25, Y+6	; 0x06
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <LCD_init+0x13a>
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    23dc:	80 e8       	ldi	r24, 0x80	; 128
    23de:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_sendCommand>
	return;
}
    23e2:	2e 96       	adiw	r28, 0x0e	; 14
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <LCD_clearScreen>:

/*
 * Function responsible to send clear command to LCD
 */
void LCD_clearScreen(void) {
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    2402:	80 e8       	ldi	r24, 0x80	; 128
    2404:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_sendCommand>
	return;
}
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <LCD_displayStringRowColumn>:

/*
 * Function responsible for Display more One character on LCD & select place on screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	00 d0       	rcall	.+0      	; 0x2414 <LCD_displayStringRowColumn+0x6>
    2414:	00 d0       	rcall	.+0      	; 0x2416 <LCD_displayStringRowColumn+0x8>
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	89 83       	std	Y+1, r24	; 0x01
    241c:	6a 83       	std	Y+2, r22	; 0x02
    241e:	5c 83       	std	Y+4, r21	; 0x04
    2420:	4b 83       	std	Y+3, r20	; 0x03
	/* call LCD_goToRowColumn function to select cursor location */
	LCD_goToRowColumn(row, col);
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	6a 81       	ldd	r22, Y+2	; 0x02
    2426:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_goToRowColumn>
	/* call LCD_displayString function to display string on LCD */
	LCD_displayString(Str);
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_displayString>
	return;
}
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <LCD_goToRowColumn>:

/*
 * Function responsible to select place on screen
 */
void LCD_goToRowColumn(uint8 row, uint8 col) {
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	00 d0       	rcall	.+0      	; 0x2446 <LCD_goToRowColumn+0x6>
    2446:	00 d0       	rcall	.+0      	; 0x2448 <LCD_goToRowColumn+0x8>
    2448:	0f 92       	push	r0
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	8a 83       	std	Y+2, r24	; 0x02
    2450:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch (row) {
    2452:	8a 81       	ldd	r24, Y+2	; 0x02
    2454:	28 2f       	mov	r18, r24
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	3d 83       	std	Y+5, r19	; 0x05
    245a:	2c 83       	std	Y+4, r18	; 0x04
    245c:	8c 81       	ldd	r24, Y+4	; 0x04
    245e:	9d 81       	ldd	r25, Y+5	; 0x05
    2460:	81 30       	cpi	r24, 0x01	; 1
    2462:	91 05       	cpc	r25, r1
    2464:	c9 f0       	breq	.+50     	; 0x2498 <LCD_goToRowColumn+0x58>
    2466:	2c 81       	ldd	r18, Y+4	; 0x04
    2468:	3d 81       	ldd	r19, Y+5	; 0x05
    246a:	22 30       	cpi	r18, 0x02	; 2
    246c:	31 05       	cpc	r19, r1
    246e:	2c f4       	brge	.+10     	; 0x247a <LCD_goToRowColumn+0x3a>
    2470:	8c 81       	ldd	r24, Y+4	; 0x04
    2472:	9d 81       	ldd	r25, Y+5	; 0x05
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	61 f0       	breq	.+24     	; 0x2490 <LCD_goToRowColumn+0x50>
    2478:	1a c0       	rjmp	.+52     	; 0x24ae <LCD_goToRowColumn+0x6e>
    247a:	2c 81       	ldd	r18, Y+4	; 0x04
    247c:	3d 81       	ldd	r19, Y+5	; 0x05
    247e:	22 30       	cpi	r18, 0x02	; 2
    2480:	31 05       	cpc	r19, r1
    2482:	71 f0       	breq	.+28     	; 0x24a0 <LCD_goToRowColumn+0x60>
    2484:	8c 81       	ldd	r24, Y+4	; 0x04
    2486:	9d 81       	ldd	r25, Y+5	; 0x05
    2488:	83 30       	cpi	r24, 0x03	; 3
    248a:	91 05       	cpc	r25, r1
    248c:	69 f0       	breq	.+26     	; 0x24a8 <LCD_goToRowColumn+0x68>
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <LCD_goToRowColumn+0x6e>
	case 0:
		address = 0x80 | col; /* first address in first line in LCD = 0x00 */
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	80 68       	ori	r24, 0x80	; 128
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	0b c0       	rjmp	.+22     	; 0x24ae <LCD_goToRowColumn+0x6e>
		break;
	case 1:
		address = col | 0xC0; /* first address in second line in LCD = 0x40 */
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	80 6c       	ori	r24, 0xC0	; 192
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <LCD_goToRowColumn+0x6e>
		break;
	case 2:
		address = col | 0x10; /* first address in 3th line in LCD = 0x10 */
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	80 61       	ori	r24, 0x10	; 16
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	03 c0       	rjmp	.+6      	; 0x24ae <LCD_goToRowColumn+0x6e>
		break;
	case 3:
		address = col | 0x50; /* first address in 4th line in LCD = 0x50 */
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	80 65       	ori	r24, 0x50	; 80
    24ac:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0x80+Address */
	LCD_sendCommand(address | CURSOR_HOME_LOCATION);
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	80 68       	ori	r24, 0x80	; 128
    24b2:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_sendCommand>
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <LCD_intgerToString>:

/*
 * Function that transform number to string and display to LCD
 */
void LCD_intgerToString(int data) {
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	62 97       	sbiw	r28, 0x12	; 18
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	9a 8b       	std	Y+18, r25	; 0x12
    24dc:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data, buff, 10); /* 10 for decimal */
    24de:	89 89       	ldd	r24, Y+17	; 0x11
    24e0:	9a 89       	ldd	r25, Y+18	; 0x12
    24e2:	9e 01       	movw	r18, r28
    24e4:	2f 5f       	subi	r18, 0xFF	; 255
    24e6:	3f 4f       	sbci	r19, 0xFF	; 255
    24e8:	b9 01       	movw	r22, r18
    24ea:	4a e0       	ldi	r20, 0x0A	; 10
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <itoa>
	LCD_displayString(buff);
    24f2:	ce 01       	movw	r24, r28
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_displayString>
}
    24fa:	62 96       	adiw	r28, 0x12	; 18
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <LCD_creatCustomChar>:

/*
 * Function that Create Custom Character in CGRAM
 */
void LCD_creatCustomChar(uint8 loc, uint8 *msg) {
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	00 d0       	rcall	.+0      	; 0x2512 <LCD_creatCustomChar+0x6>
    2512:	00 d0       	rcall	.+0      	; 0x2514 <LCD_creatCustomChar+0x8>
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	8a 83       	std	Y+2, r24	; 0x02
    251a:	7c 83       	std	Y+4, r23	; 0x04
    251c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 i;
	if (loc < 8) {
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	88 30       	cpi	r24, 0x08	; 8
    2522:	f8 f4       	brcc	.+62     	; 0x2562 <LCD_creatCustomChar+0x56>
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	80 64       	ori	r24, 0x40	; 64
    2538:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_sendCommand>
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    253c:	19 82       	std	Y+1, r1	; 0x01
    253e:	0e c0       	rjmp	.+28     	; 0x255c <LCD_creatCustomChar+0x50>
			LCD_displayCustomChar(msg[i]);
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	fc 01       	movw	r30, r24
    254c:	e2 0f       	add	r30, r18
    254e:	f3 1f       	adc	r31, r19
    2550:	80 81       	ld	r24, Z
    2552:	0e 94 b8 12 	call	0x2570	; 0x2570 <LCD_displayCustomChar>
void LCD_creatCustomChar(uint8 loc, uint8 *msg) {
	uint8 i;
	if (loc < 8) {
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	8f 5f       	subi	r24, 0xFF	; 255
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	88 30       	cpi	r24, 0x08	; 8
    2560:	78 f3       	brcs	.-34     	; 0x2540 <LCD_creatCustomChar+0x34>
			LCD_displayCustomChar(msg[i]);
		}
	}
}
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <LCD_displayCustomChar>:

/*
 * Function that Display Custom Character in CGRAM
 */
void LCD_displayCustomChar(uint8 char_data) /* LCD data write function */
{
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	cd 54       	subi	r28, 0x4D	; 77
    257e:	d0 40       	sbci	r29, 0x00	; 0
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	fe 01       	movw	r30, r28
    258c:	e3 5b       	subi	r30, 0xB3	; 179
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	80 83       	st	Z, r24
#endif

#if(DATA_MODE ==4)
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( char_data & 0xF0 ) | ( DATA_OUT & 0x0F );
    2592:	a5 e3       	ldi	r26, 0x35	; 53
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	fe 01       	movw	r30, r28
    2598:	e3 5b       	subi	r30, 0xB3	; 179
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	98 2f       	mov	r25, r24
    25a0:	90 7f       	andi	r25, 0xF0	; 240
    25a2:	e5 e3       	ldi	r30, 0x35	; 53
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	8f 70       	andi	r24, 0x0F	; 15
    25aa:	89 2b       	or	r24, r25
    25ac:	8c 93       	st	X, r24
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT = ((char_data >> 4) & 0x0F) | ( DATA_OUT & 0xF0);
#endif

	RS = SET;/* RS=1 Data reg. */
    25ae:	e2 e3       	ldi	r30, 0x32	; 50
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	80 61       	ori	r24, 0x10	; 16
    25b6:	80 83       	st	Z, r24
	RW = CLEAR; /* RW=0 write operation */
    25b8:	e2 e3       	ldi	r30, 0x32	; 50
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	8f 7d       	andi	r24, 0xDF	; 223
    25c0:	80 83       	st	Z, r24
	E = SET; /* Enable Pulse */
    25c2:	e2 e3       	ldi	r30, 0x32	; 50
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	80 64       	ori	r24, 0x40	; 64
    25ca:	80 83       	st	Z, r24
    25cc:	fe 01       	movw	r30, r28
    25ce:	e7 5b       	subi	r30, 0xB7	; 183
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 e8       	ldi	r26, 0x80	; 128
    25d8:	bf e3       	ldi	r27, 0x3F	; 63
    25da:	80 83       	st	Z, r24
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	a2 83       	std	Z+2, r26	; 0x02
    25e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25e2:	8e 01       	movw	r16, r28
    25e4:	0b 5b       	subi	r16, 0xBB	; 187
    25e6:	1f 4f       	sbci	r17, 0xFF	; 255
    25e8:	fe 01       	movw	r30, r28
    25ea:	e7 5b       	subi	r30, 0xB7	; 183
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	2b ea       	ldi	r18, 0xAB	; 171
    25f8:	3a ea       	ldi	r19, 0xAA	; 170
    25fa:	4a ea       	ldi	r20, 0xAA	; 170
    25fc:	5e e3       	ldi	r21, 0x3E	; 62
    25fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	f8 01       	movw	r30, r16
    2608:	80 83       	st	Z, r24
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	a2 83       	std	Z+2, r26	; 0x02
    260e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2610:	fe 01       	movw	r30, r28
    2612:	eb 5b       	subi	r30, 0xBB	; 187
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	34 f4       	brge	.+12     	; 0x263a <LCD_displayCustomChar+0xca>
		__ticks = 1;
    262e:	fe 01       	movw	r30, r28
    2630:	ec 5b       	subi	r30, 0xBC	; 188
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	80 83       	st	Z, r24
    2638:	a7 c0       	rjmp	.+334    	; 0x2788 <LCD_displayCustomChar+0x218>
	else if (__tmp > 255)
    263a:	fe 01       	movw	r30, r28
    263c:	eb 5b       	subi	r30, 0xBB	; 187
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	4f e7       	ldi	r20, 0x7F	; 127
    264e:	53 e4       	ldi	r21, 0x43	; 67
    2650:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2654:	18 16       	cp	r1, r24
    2656:	0c f0       	brlt	.+2      	; 0x265a <LCD_displayCustomChar+0xea>
    2658:	87 c0       	rjmp	.+270    	; 0x2768 <LCD_displayCustomChar+0x1f8>
	{
		_delay_ms(__us / 1000.0);
    265a:	fe 01       	movw	r30, r28
    265c:	e7 5b       	subi	r30, 0xB7	; 183
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a e7       	ldi	r20, 0x7A	; 122
    266e:	54 e4       	ldi	r21, 0x44	; 68
    2670:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	fe 01       	movw	r30, r28
    267a:	e0 5c       	subi	r30, 0xC0	; 192
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 83       	st	Z, r24
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	a2 83       	std	Z+2, r26	; 0x02
    2684:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2686:	fe 01       	movw	r30, r28
    2688:	e0 5c       	subi	r30, 0xC0	; 192
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	60 81       	ld	r22, Z
    268e:	71 81       	ldd	r23, Z+1	; 0x01
    2690:	82 81       	ldd	r24, Z+2	; 0x02
    2692:	93 81       	ldd	r25, Z+3	; 0x03
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	4a e7       	ldi	r20, 0x7A	; 122
    269a:	53 e4       	ldi	r21, 0x43	; 67
    269c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	8c af       	std	Y+60, r24	; 0x3c
    26a6:	9d af       	std	Y+61, r25	; 0x3d
    26a8:	ae af       	std	Y+62, r26	; 0x3e
    26aa:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    26ac:	6c ad       	ldd	r22, Y+60	; 0x3c
    26ae:	7d ad       	ldd	r23, Y+61	; 0x3d
    26b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    26b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e8       	ldi	r20, 0x80	; 128
    26ba:	5f e3       	ldi	r21, 0x3F	; 63
    26bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26c0:	88 23       	and	r24, r24
    26c2:	2c f4       	brge	.+10     	; 0x26ce <LCD_displayCustomChar+0x15e>
		__ticks = 1;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	9b af       	std	Y+59, r25	; 0x3b
    26ca:	8a af       	std	Y+58, r24	; 0x3a
    26cc:	42 c0       	rjmp	.+132    	; 0x2752 <LCD_displayCustomChar+0x1e2>
	else if (__tmp > 65535)
    26ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    26d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    26d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    26d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	3f ef       	ldi	r19, 0xFF	; 255
    26da:	4f e7       	ldi	r20, 0x7F	; 127
    26dc:	57 e4       	ldi	r21, 0x47	; 71
    26de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26e2:	18 16       	cp	r1, r24
    26e4:	64 f5       	brge	.+88     	; 0x273e <LCD_displayCustomChar+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e6:	fe 01       	movw	r30, r28
    26e8:	e0 5c       	subi	r30, 0xC0	; 192
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e2       	ldi	r20, 0x20	; 32
    26fa:	51 e4       	ldi	r21, 0x41	; 65
    26fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	bc 01       	movw	r22, r24
    2706:	cd 01       	movw	r24, r26
    2708:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	9b af       	std	Y+59, r25	; 0x3b
    2712:	8a af       	std	Y+58, r24	; 0x3a
    2714:	0f c0       	rjmp	.+30     	; 0x2734 <LCD_displayCustomChar+0x1c4>
    2716:	89 e1       	ldi	r24, 0x19	; 25
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	99 af       	std	Y+57, r25	; 0x39
    271c:	88 af       	std	Y+56, r24	; 0x38
    271e:	88 ad       	ldd	r24, Y+56	; 0x38
    2720:	99 ad       	ldd	r25, Y+57	; 0x39
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <LCD_displayCustomChar+0x1b2>
    2726:	99 af       	std	Y+57, r25	; 0x39
    2728:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272a:	8a ad       	ldd	r24, Y+58	; 0x3a
    272c:	9b ad       	ldd	r25, Y+59	; 0x3b
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	9b af       	std	Y+59, r25	; 0x3b
    2732:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2734:	8a ad       	ldd	r24, Y+58	; 0x3a
    2736:	9b ad       	ldd	r25, Y+59	; 0x3b
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	69 f7       	brne	.-38     	; 0x2716 <LCD_displayCustomChar+0x1a6>
    273c:	2e c0       	rjmp	.+92     	; 0x279a <LCD_displayCustomChar+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2740:	7d ad       	ldd	r23, Y+61	; 0x3d
    2742:	8e ad       	ldd	r24, Y+62	; 0x3e
    2744:	9f ad       	ldd	r25, Y+63	; 0x3f
    2746:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9b af       	std	Y+59, r25	; 0x3b
    2750:	8a af       	std	Y+58, r24	; 0x3a
    2752:	8a ad       	ldd	r24, Y+58	; 0x3a
    2754:	9b ad       	ldd	r25, Y+59	; 0x3b
    2756:	9f ab       	std	Y+55, r25	; 0x37
    2758:	8e ab       	std	Y+54, r24	; 0x36
    275a:	8e a9       	ldd	r24, Y+54	; 0x36
    275c:	9f a9       	ldd	r25, Y+55	; 0x37
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <LCD_displayCustomChar+0x1ee>
    2762:	9f ab       	std	Y+55, r25	; 0x37
    2764:	8e ab       	std	Y+54, r24	; 0x36
    2766:	19 c0       	rjmp	.+50     	; 0x279a <LCD_displayCustomChar+0x22a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2768:	8e 01       	movw	r16, r28
    276a:	0c 5b       	subi	r16, 0xBC	; 188
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	fe 01       	movw	r30, r28
    2770:	eb 5b       	subi	r30, 0xBB	; 187
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	f8 01       	movw	r30, r16
    2786:	80 83       	st	Z, r24
    2788:	fe 01       	movw	r30, r28
    278a:	ec 5b       	subi	r30, 0xBC	; 188
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2792:	8d a9       	ldd	r24, Y+53	; 0x35
    2794:	8a 95       	dec	r24
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_displayCustomChar+0x224>
    2798:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(1);
	E = CLEAR;
    279a:	e2 e3       	ldi	r30, 0x32	; 50
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	8f 7b       	andi	r24, 0xBF	; 191
    27a2:	80 83       	st	Z, r24
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	a0 e0       	ldi	r26, 0x00	; 0
    27aa:	b0 e4       	ldi	r27, 0x40	; 64
    27ac:	89 ab       	std	Y+49, r24	; 0x31
    27ae:	9a ab       	std	Y+50, r25	; 0x32
    27b0:	ab ab       	std	Y+51, r26	; 0x33
    27b2:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b4:	69 a9       	ldd	r22, Y+49	; 0x31
    27b6:	7a a9       	ldd	r23, Y+50	; 0x32
    27b8:	8b a9       	ldd	r24, Y+51	; 0x33
    27ba:	9c a9       	ldd	r25, Y+52	; 0x34
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	4a e7       	ldi	r20, 0x7A	; 122
    27c2:	53 e4       	ldi	r21, 0x43	; 67
    27c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	8d a7       	std	Y+45, r24	; 0x2d
    27ce:	9e a7       	std	Y+46, r25	; 0x2e
    27d0:	af a7       	std	Y+47, r26	; 0x2f
    27d2:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    27d4:	6d a5       	ldd	r22, Y+45	; 0x2d
    27d6:	7e a5       	ldd	r23, Y+46	; 0x2e
    27d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27da:	98 a9       	ldd	r25, Y+48	; 0x30
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e8       	ldi	r20, 0x80	; 128
    27e2:	5f e3       	ldi	r21, 0x3F	; 63
    27e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27e8:	88 23       	and	r24, r24
    27ea:	2c f4       	brge	.+10     	; 0x27f6 <LCD_displayCustomChar+0x286>
		__ticks = 1;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9c a7       	std	Y+44, r25	; 0x2c
    27f2:	8b a7       	std	Y+43, r24	; 0x2b
    27f4:	3f c0       	rjmp	.+126    	; 0x2874 <LCD_displayCustomChar+0x304>
	else if (__tmp > 65535)
    27f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    27f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    27fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    27fc:	98 a9       	ldd	r25, Y+48	; 0x30
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	3f ef       	ldi	r19, 0xFF	; 255
    2802:	4f e7       	ldi	r20, 0x7F	; 127
    2804:	57 e4       	ldi	r21, 0x47	; 71
    2806:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    280a:	18 16       	cp	r1, r24
    280c:	4c f5       	brge	.+82     	; 0x2860 <LCD_displayCustomChar+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280e:	69 a9       	ldd	r22, Y+49	; 0x31
    2810:	7a a9       	ldd	r23, Y+50	; 0x32
    2812:	8b a9       	ldd	r24, Y+51	; 0x33
    2814:	9c a9       	ldd	r25, Y+52	; 0x34
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e2       	ldi	r20, 0x20	; 32
    281c:	51 e4       	ldi	r21, 0x41	; 65
    281e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	9c a7       	std	Y+44, r25	; 0x2c
    2834:	8b a7       	std	Y+43, r24	; 0x2b
    2836:	0f c0       	rjmp	.+30     	; 0x2856 <LCD_displayCustomChar+0x2e6>
    2838:	89 e1       	ldi	r24, 0x19	; 25
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	9a a7       	std	Y+42, r25	; 0x2a
    283e:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2840:	89 a5       	ldd	r24, Y+41	; 0x29
    2842:	9a a5       	ldd	r25, Y+42	; 0x2a
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_displayCustomChar+0x2d4>
    2848:	9a a7       	std	Y+42, r25	; 0x2a
    284a:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284c:	8b a5       	ldd	r24, Y+43	; 0x2b
    284e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	9c a7       	std	Y+44, r25	; 0x2c
    2854:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2856:	8b a5       	ldd	r24, Y+43	; 0x2b
    2858:	9c a5       	ldd	r25, Y+44	; 0x2c
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	69 f7       	brne	.-38     	; 0x2838 <LCD_displayCustomChar+0x2c8>
    285e:	14 c0       	rjmp	.+40     	; 0x2888 <LCD_displayCustomChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2860:	6d a5       	ldd	r22, Y+45	; 0x2d
    2862:	7e a5       	ldd	r23, Y+46	; 0x2e
    2864:	8f a5       	ldd	r24, Y+47	; 0x2f
    2866:	98 a9       	ldd	r25, Y+48	; 0x30
    2868:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	9c a7       	std	Y+44, r25	; 0x2c
    2872:	8b a7       	std	Y+43, r24	; 0x2b
    2874:	8b a5       	ldd	r24, Y+43	; 0x2b
    2876:	9c a5       	ldd	r25, Y+44	; 0x2c
    2878:	98 a7       	std	Y+40, r25	; 0x28
    287a:	8f a3       	std	Y+39, r24	; 0x27
    287c:	8f a1       	ldd	r24, Y+39	; 0x27
    287e:	98 a5       	ldd	r25, Y+40	; 0x28
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_displayCustomChar+0x310>
    2884:	98 a7       	std	Y+40, r25	; 0x28
    2886:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(2); /* Data write delay */
#ifdef UPPER_MODE_BITS
	/* send the Least 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( (char_data << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
    2888:	a5 e3       	ldi	r26, 0x35	; 53
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	fe 01       	movw	r30, r28
    288e:	e3 5b       	subi	r30, 0xB3	; 179
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	88 2f       	mov	r24, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	82 95       	swap	r24
    289a:	92 95       	swap	r25
    289c:	90 7f       	andi	r25, 0xF0	; 240
    289e:	98 27       	eor	r25, r24
    28a0:	80 7f       	andi	r24, 0xF0	; 240
    28a2:	98 27       	eor	r25, r24
    28a4:	98 2f       	mov	r25, r24
    28a6:	e5 e3       	ldi	r30, 0x35	; 53
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	8f 70       	andi	r24, 0x0F	; 15
    28ae:	89 2b       	or	r24, r25
    28b0:	8c 93       	st	X, r24

#ifdef LOWER_MODE_BITS
	DATA_OUT = ((char_data) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	RS = SET;/* RS=1 Data reg. */
    28b2:	e2 e3       	ldi	r30, 0x32	; 50
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	80 61       	ori	r24, 0x10	; 16
    28ba:	80 83       	st	Z, r24
	RW = CLEAR; /* RW=0 write operation */
    28bc:	e2 e3       	ldi	r30, 0x32	; 50
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8f 7d       	andi	r24, 0xDF	; 223
    28c4:	80 83       	st	Z, r24
	E = SET; /* Enable Pulse */
    28c6:	e2 e3       	ldi	r30, 0x32	; 50
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	80 64       	ori	r24, 0x40	; 64
    28ce:	80 83       	st	Z, r24
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a0 e8       	ldi	r26, 0x80	; 128
    28d6:	bf e3       	ldi	r27, 0x3F	; 63
    28d8:	8b a3       	std	Y+35, r24	; 0x23
    28da:	9c a3       	std	Y+36, r25	; 0x24
    28dc:	ad a3       	std	Y+37, r26	; 0x25
    28de:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28e0:	6b a1       	ldd	r22, Y+35	; 0x23
    28e2:	7c a1       	ldd	r23, Y+36	; 0x24
    28e4:	8d a1       	ldd	r24, Y+37	; 0x25
    28e6:	9e a1       	ldd	r25, Y+38	; 0x26
    28e8:	2b ea       	ldi	r18, 0xAB	; 171
    28ea:	3a ea       	ldi	r19, 0xAA	; 170
    28ec:	4a ea       	ldi	r20, 0xAA	; 170
    28ee:	5e e3       	ldi	r21, 0x3E	; 62
    28f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	8f 8f       	std	Y+31, r24	; 0x1f
    28fa:	98 a3       	std	Y+32, r25	; 0x20
    28fc:	a9 a3       	std	Y+33, r26	; 0x21
    28fe:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2900:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2902:	78 a1       	ldd	r23, Y+32	; 0x20
    2904:	89 a1       	ldd	r24, Y+33	; 0x21
    2906:	9a a1       	ldd	r25, Y+34	; 0x22
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e8       	ldi	r20, 0x80	; 128
    290e:	5f e3       	ldi	r21, 0x3F	; 63
    2910:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2914:	88 23       	and	r24, r24
    2916:	1c f4       	brge	.+6      	; 0x291e <LCD_displayCustomChar+0x3ae>
		__ticks = 1;
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	8e 8f       	std	Y+30, r24	; 0x1e
    291c:	91 c0       	rjmp	.+290    	; 0x2a40 <LCD_displayCustomChar+0x4d0>
	else if (__tmp > 255)
    291e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2920:	78 a1       	ldd	r23, Y+32	; 0x20
    2922:	89 a1       	ldd	r24, Y+33	; 0x21
    2924:	9a a1       	ldd	r25, Y+34	; 0x22
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4f e7       	ldi	r20, 0x7F	; 127
    292c:	53 e4       	ldi	r21, 0x43	; 67
    292e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2932:	18 16       	cp	r1, r24
    2934:	0c f0       	brlt	.+2      	; 0x2938 <LCD_displayCustomChar+0x3c8>
    2936:	7b c0       	rjmp	.+246    	; 0x2a2e <LCD_displayCustomChar+0x4be>
	{
		_delay_ms(__us / 1000.0);
    2938:	6b a1       	ldd	r22, Y+35	; 0x23
    293a:	7c a1       	ldd	r23, Y+36	; 0x24
    293c:	8d a1       	ldd	r24, Y+37	; 0x25
    293e:	9e a1       	ldd	r25, Y+38	; 0x26
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a e7       	ldi	r20, 0x7A	; 122
    2946:	54 e4       	ldi	r21, 0x44	; 68
    2948:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	8a 8f       	std	Y+26, r24	; 0x1a
    2952:	9b 8f       	std	Y+27, r25	; 0x1b
    2954:	ac 8f       	std	Y+28, r26	; 0x1c
    2956:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2958:	6a 8d       	ldd	r22, Y+26	; 0x1a
    295a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    295c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    295e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	4a e7       	ldi	r20, 0x7A	; 122
    2966:	53 e4       	ldi	r21, 0x43	; 67
    2968:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	8e 8b       	std	Y+22, r24	; 0x16
    2972:	9f 8b       	std	Y+23, r25	; 0x17
    2974:	a8 8f       	std	Y+24, r26	; 0x18
    2976:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2978:	6e 89       	ldd	r22, Y+22	; 0x16
    297a:	7f 89       	ldd	r23, Y+23	; 0x17
    297c:	88 8d       	ldd	r24, Y+24	; 0x18
    297e:	99 8d       	ldd	r25, Y+25	; 0x19
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    298c:	88 23       	and	r24, r24
    298e:	2c f4       	brge	.+10     	; 0x299a <LCD_displayCustomChar+0x42a>
		__ticks = 1;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9d 8b       	std	Y+21, r25	; 0x15
    2996:	8c 8b       	std	Y+20, r24	; 0x14
    2998:	3f c0       	rjmp	.+126    	; 0x2a18 <LCD_displayCustomChar+0x4a8>
	else if (__tmp > 65535)
    299a:	6e 89       	ldd	r22, Y+22	; 0x16
    299c:	7f 89       	ldd	r23, Y+23	; 0x17
    299e:	88 8d       	ldd	r24, Y+24	; 0x18
    29a0:	99 8d       	ldd	r25, Y+25	; 0x19
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	3f ef       	ldi	r19, 0xFF	; 255
    29a6:	4f e7       	ldi	r20, 0x7F	; 127
    29a8:	57 e4       	ldi	r21, 0x47	; 71
    29aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29ae:	18 16       	cp	r1, r24
    29b0:	4c f5       	brge	.+82     	; 0x2a04 <LCD_displayCustomChar+0x494>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    29b4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    29b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	bc 01       	movw	r22, r24
    29cc:	cd 01       	movw	r24, r26
    29ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	9d 8b       	std	Y+21, r25	; 0x15
    29d8:	8c 8b       	std	Y+20, r24	; 0x14
    29da:	0f c0       	rjmp	.+30     	; 0x29fa <LCD_displayCustomChar+0x48a>
    29dc:	89 e1       	ldi	r24, 0x19	; 25
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9b 8b       	std	Y+19, r25	; 0x13
    29e2:	8a 8b       	std	Y+18, r24	; 0x12
    29e4:	8a 89       	ldd	r24, Y+18	; 0x12
    29e6:	9b 89       	ldd	r25, Y+19	; 0x13
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <LCD_displayCustomChar+0x478>
    29ec:	9b 8b       	std	Y+19, r25	; 0x13
    29ee:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f0:	8c 89       	ldd	r24, Y+20	; 0x14
    29f2:	9d 89       	ldd	r25, Y+21	; 0x15
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	9d 8b       	std	Y+21, r25	; 0x15
    29f8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fa:	8c 89       	ldd	r24, Y+20	; 0x14
    29fc:	9d 89       	ldd	r25, Y+21	; 0x15
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	69 f7       	brne	.-38     	; 0x29dc <LCD_displayCustomChar+0x46c>
    2a02:	24 c0       	rjmp	.+72     	; 0x2a4c <LCD_displayCustomChar+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a04:	6e 89       	ldd	r22, Y+22	; 0x16
    2a06:	7f 89       	ldd	r23, Y+23	; 0x17
    2a08:	88 8d       	ldd	r24, Y+24	; 0x18
    2a0a:	99 8d       	ldd	r25, Y+25	; 0x19
    2a0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	9d 8b       	std	Y+21, r25	; 0x15
    2a16:	8c 8b       	std	Y+20, r24	; 0x14
    2a18:	8c 89       	ldd	r24, Y+20	; 0x14
    2a1a:	9d 89       	ldd	r25, Y+21	; 0x15
    2a1c:	99 8b       	std	Y+17, r25	; 0x11
    2a1e:	88 8b       	std	Y+16, r24	; 0x10
    2a20:	88 89       	ldd	r24, Y+16	; 0x10
    2a22:	99 89       	ldd	r25, Y+17	; 0x11
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <LCD_displayCustomChar+0x4b4>
    2a28:	99 8b       	std	Y+17, r25	; 0x11
    2a2a:	88 8b       	std	Y+16, r24	; 0x10
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <LCD_displayCustomChar+0x4dc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a2e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a30:	78 a1       	ldd	r23, Y+32	; 0x20
    2a32:	89 a1       	ldd	r24, Y+33	; 0x21
    2a34:	9a a1       	ldd	r25, Y+34	; 0x22
    2a36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	8e 8f       	std	Y+30, r24	; 0x1e
    2a40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a42:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a46:	8a 95       	dec	r24
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <LCD_displayCustomChar+0x4d6>
    2a4a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	E = CLEAR;
    2a4c:	e2 e3       	ldi	r30, 0x32	; 50
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	8f 7b       	andi	r24, 0xBF	; 191
    2a54:	80 83       	st	Z, r24
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	a0 e0       	ldi	r26, 0x00	; 0
    2a5c:	b0 e4       	ldi	r27, 0x40	; 64
    2a5e:	8b 87       	std	Y+11, r24	; 0x0b
    2a60:	9c 87       	std	Y+12, r25	; 0x0c
    2a62:	ad 87       	std	Y+13, r26	; 0x0d
    2a64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	4a e7       	ldi	r20, 0x7A	; 122
    2a74:	53 e4       	ldi	r21, 0x43	; 67
    2a76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	8f 83       	std	Y+7, r24	; 0x07
    2a80:	98 87       	std	Y+8, r25	; 0x08
    2a82:	a9 87       	std	Y+9, r26	; 0x09
    2a84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a86:	6f 81       	ldd	r22, Y+7	; 0x07
    2a88:	78 85       	ldd	r23, Y+8	; 0x08
    2a8a:	89 85       	ldd	r24, Y+9	; 0x09
    2a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e8       	ldi	r20, 0x80	; 128
    2a94:	5f e3       	ldi	r21, 0x3F	; 63
    2a96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a9a:	88 23       	and	r24, r24
    2a9c:	2c f4       	brge	.+10     	; 0x2aa8 <LCD_displayCustomChar+0x538>
		__ticks = 1;
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9e 83       	std	Y+6, r25	; 0x06
    2aa4:	8d 83       	std	Y+5, r24	; 0x05
    2aa6:	3f c0       	rjmp	.+126    	; 0x2b26 <LCD_displayCustomChar+0x5b6>
	else if (__tmp > 65535)
    2aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aaa:	78 85       	ldd	r23, Y+8	; 0x08
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	3f ef       	ldi	r19, 0xFF	; 255
    2ab4:	4f e7       	ldi	r20, 0x7F	; 127
    2ab6:	57 e4       	ldi	r21, 0x47	; 71
    2ab8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2abc:	18 16       	cp	r1, r24
    2abe:	4c f5       	brge	.+82     	; 0x2b12 <LCD_displayCustomChar+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	40 e2       	ldi	r20, 0x20	; 32
    2ace:	51 e4       	ldi	r21, 0x41	; 65
    2ad0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	bc 01       	movw	r22, r24
    2ada:	cd 01       	movw	r24, r26
    2adc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
    2ae8:	0f c0       	rjmp	.+30     	; 0x2b08 <LCD_displayCustomChar+0x598>
    2aea:	89 e1       	ldi	r24, 0x19	; 25
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	9c 83       	std	Y+4, r25	; 0x04
    2af0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	9c 81       	ldd	r25, Y+4	; 0x04
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <LCD_displayCustomChar+0x586>
    2afa:	9c 83       	std	Y+4, r25	; 0x04
    2afc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afe:	8d 81       	ldd	r24, Y+5	; 0x05
    2b00:	9e 81       	ldd	r25, Y+6	; 0x06
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	9e 83       	std	Y+6, r25	; 0x06
    2b06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b08:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0c:	00 97       	sbiw	r24, 0x00	; 0
    2b0e:	69 f7       	brne	.-38     	; 0x2aea <LCD_displayCustomChar+0x57a>
    2b10:	14 c0       	rjmp	.+40     	; 0x2b3a <LCD_displayCustomChar+0x5ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b12:	6f 81       	ldd	r22, Y+7	; 0x07
    2b14:	78 85       	ldd	r23, Y+8	; 0x08
    2b16:	89 85       	ldd	r24, Y+9	; 0x09
    2b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	9e 83       	std	Y+6, r25	; 0x06
    2b24:	8d 83       	std	Y+5, r24	; 0x05
    2b26:	8d 81       	ldd	r24, Y+5	; 0x05
    2b28:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	9a 81       	ldd	r25, Y+2	; 0x02
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <LCD_displayCustomChar+0x5c2>
    2b36:	9a 83       	std	Y+2, r25	; 0x02
    2b38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); /* Data write delay */
	return;

}
    2b3a:	c3 5b       	subi	r28, 0xB3	; 179
    2b3c:	df 4f       	sbci	r29, 0xFF	; 255
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	08 95       	ret

00002b52 <__prologue_saves__>:
    2b52:	2f 92       	push	r2
    2b54:	3f 92       	push	r3
    2b56:	4f 92       	push	r4
    2b58:	5f 92       	push	r5
    2b5a:	6f 92       	push	r6
    2b5c:	7f 92       	push	r7
    2b5e:	8f 92       	push	r8
    2b60:	9f 92       	push	r9
    2b62:	af 92       	push	r10
    2b64:	bf 92       	push	r11
    2b66:	cf 92       	push	r12
    2b68:	df 92       	push	r13
    2b6a:	ef 92       	push	r14
    2b6c:	ff 92       	push	r15
    2b6e:	0f 93       	push	r16
    2b70:	1f 93       	push	r17
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	ca 1b       	sub	r28, r26
    2b7c:	db 0b       	sbc	r29, r27
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	09 94       	ijmp

00002b8a <__epilogue_restores__>:
    2b8a:	2a 88       	ldd	r2, Y+18	; 0x12
    2b8c:	39 88       	ldd	r3, Y+17	; 0x11
    2b8e:	48 88       	ldd	r4, Y+16	; 0x10
    2b90:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b92:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b94:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b96:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b98:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b9c:	b9 84       	ldd	r11, Y+9	; 0x09
    2b9e:	c8 84       	ldd	r12, Y+8	; 0x08
    2ba0:	df 80       	ldd	r13, Y+7	; 0x07
    2ba2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ba4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ba6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ba8:	1b 81       	ldd	r17, Y+3	; 0x03
    2baa:	aa 81       	ldd	r26, Y+2	; 0x02
    2bac:	b9 81       	ldd	r27, Y+1	; 0x01
    2bae:	ce 0f       	add	r28, r30
    2bb0:	d1 1d       	adc	r29, r1
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	ed 01       	movw	r28, r26
    2bbe:	08 95       	ret

00002bc0 <itoa>:
    2bc0:	fb 01       	movw	r30, r22
    2bc2:	9f 01       	movw	r18, r30
    2bc4:	e8 94       	clt
    2bc6:	42 30       	cpi	r20, 0x02	; 2
    2bc8:	c4 f0       	brlt	.+48     	; 0x2bfa <itoa+0x3a>
    2bca:	45 32       	cpi	r20, 0x25	; 37
    2bcc:	b4 f4       	brge	.+44     	; 0x2bfa <itoa+0x3a>
    2bce:	4a 30       	cpi	r20, 0x0A	; 10
    2bd0:	29 f4       	brne	.+10     	; 0x2bdc <itoa+0x1c>
    2bd2:	97 fb       	bst	r25, 7
    2bd4:	1e f4       	brtc	.+6      	; 0x2bdc <itoa+0x1c>
    2bd6:	90 95       	com	r25
    2bd8:	81 95       	neg	r24
    2bda:	9f 4f       	sbci	r25, 0xFF	; 255
    2bdc:	64 2f       	mov	r22, r20
    2bde:	77 27       	eor	r23, r23
    2be0:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__udivmodhi4>
    2be4:	80 5d       	subi	r24, 0xD0	; 208
    2be6:	8a 33       	cpi	r24, 0x3A	; 58
    2be8:	0c f0       	brlt	.+2      	; 0x2bec <itoa+0x2c>
    2bea:	89 5d       	subi	r24, 0xD9	; 217
    2bec:	81 93       	st	Z+, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	a1 f7       	brne	.-24     	; 0x2bdc <itoa+0x1c>
    2bf4:	16 f4       	brtc	.+4      	; 0x2bfa <itoa+0x3a>
    2bf6:	5d e2       	ldi	r21, 0x2D	; 45
    2bf8:	51 93       	st	Z+, r21
    2bfa:	10 82       	st	Z, r1
    2bfc:	c9 01       	movw	r24, r18
    2bfe:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <strrev>

00002c02 <strrev>:
    2c02:	dc 01       	movw	r26, r24
    2c04:	fc 01       	movw	r30, r24
    2c06:	67 2f       	mov	r22, r23
    2c08:	71 91       	ld	r23, Z+
    2c0a:	77 23       	and	r23, r23
    2c0c:	e1 f7       	brne	.-8      	; 0x2c06 <strrev+0x4>
    2c0e:	32 97       	sbiw	r30, 0x02	; 2
    2c10:	04 c0       	rjmp	.+8      	; 0x2c1a <strrev+0x18>
    2c12:	7c 91       	ld	r23, X
    2c14:	6d 93       	st	X+, r22
    2c16:	70 83       	st	Z, r23
    2c18:	62 91       	ld	r22, -Z
    2c1a:	ae 17       	cp	r26, r30
    2c1c:	bf 07       	cpc	r27, r31
    2c1e:	c8 f3       	brcs	.-14     	; 0x2c12 <strrev+0x10>
    2c20:	08 95       	ret

00002c22 <__udivmodhi4>:
    2c22:	aa 1b       	sub	r26, r26
    2c24:	bb 1b       	sub	r27, r27
    2c26:	51 e1       	ldi	r21, 0x11	; 17
    2c28:	07 c0       	rjmp	.+14     	; 0x2c38 <__udivmodhi4_ep>

00002c2a <__udivmodhi4_loop>:
    2c2a:	aa 1f       	adc	r26, r26
    2c2c:	bb 1f       	adc	r27, r27
    2c2e:	a6 17       	cp	r26, r22
    2c30:	b7 07       	cpc	r27, r23
    2c32:	10 f0       	brcs	.+4      	; 0x2c38 <__udivmodhi4_ep>
    2c34:	a6 1b       	sub	r26, r22
    2c36:	b7 0b       	sbc	r27, r23

00002c38 <__udivmodhi4_ep>:
    2c38:	88 1f       	adc	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	5a 95       	dec	r21
    2c3e:	a9 f7       	brne	.-22     	; 0x2c2a <__udivmodhi4_loop>
    2c40:	80 95       	com	r24
    2c42:	90 95       	com	r25
    2c44:	bc 01       	movw	r22, r24
    2c46:	cd 01       	movw	r24, r26
    2c48:	08 95       	ret

00002c4a <_exit>:
    2c4a:	f8 94       	cli

00002c4c <__stop_program>:
    2c4c:	ff cf       	rjmp	.-2      	; 0x2c4c <__stop_program>
