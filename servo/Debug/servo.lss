
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000348  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000067f  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 16000000
#include <avr/io.h>
#include <util/delay.h>
#include "Macros.h"
void main()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRB &=~(1<<PB1);
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8d 7f       	andi	r24, 0xFD	; 253
  80:	8c 93       	st	X, r24
  //FOR TIMER1
   TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  82:	af e4       	ldi	r26, 0x4F	; 79
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ef e4       	ldi	r30, 0x4F	; 79
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	82 6a       	ori	r24, 0xA2	; 162
  8e:	8c 93       	st	X, r24
   TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
  90:	ae e4       	ldi	r26, 0x4E	; 78
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	ee e4       	ldi	r30, 0x4E	; 78
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8b 61       	ori	r24, 0x1B	; 27
  9c:	8c 93       	st	X, r24
   ICR1=4999;  //fPWM=50Hz
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	87 e8       	ldi	r24, 0x87	; 135
  a4:	93 e1       	ldi	r25, 0x13	; 19
  a6:	91 83       	std	Z+1, r25	; 0x01
  a8:	80 83       	st	Z, r24
   DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Output
  aa:	a1 e3       	ldi	r26, 0x31	; 49
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	e1 e3       	ldi	r30, 0x31	; 49
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 63       	ori	r24, 0x30	; 48
  b6:	8c 93       	st	X, r24
   while(1)
   {
	   if(BIT_IS_SET(PINB,1) ){
  b8:	e6 e3       	ldi	r30, 0x36	; 54
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 2f       	mov	r24, r24
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	82 70       	andi	r24, 0x02	; 2
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	00 97       	sbiw	r24, 0x00	; 0
  c8:	39 f0       	breq	.+14     	; 0xd8 <main+0x6c>
      OCR1A=316;  //90 degree
  ca:	ea e4       	ldi	r30, 0x4A	; 74
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	8c e3       	ldi	r24, 0x3C	; 60
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	91 83       	std	Z+1, r25	; 0x01
  d4:	80 83       	st	Z, r24
  d6:	f0 cf       	rjmp	.-32     	; 0xb8 <main+0x4c>
	   }else{
      OCR1A=97;   //0 degree
  d8:	ea e4       	ldi	r30, 0x4A	; 74
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	81 e6       	ldi	r24, 0x61	; 97
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	91 83       	std	Z+1, r25	; 0x01
  e2:	80 83       	st	Z, r24
  e4:	e9 cf       	rjmp	.-46     	; 0xb8 <main+0x4c>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
