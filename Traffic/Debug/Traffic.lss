
Traffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000003c6  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  00000460  2**0
                  ALLOC
  3 .stab         00000e04  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001046  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000022aa  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000022bc  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000060  00000000  00000000  000022f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000005a0  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000523  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000019a  00000000  00000000  00002e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000020d  00000000  00000000  00002fb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  8a:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER_init>:
 * 	1. Set the required clock.
 * 	2. Set the required Mode.
 * 	3. Enable the Interrupt for select Mode Timer1.
 * 	4. Initialize Timer1 Registers
 */
void TIMER_init(TIMER_Config *Str){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <TIMER_init+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	9a 83       	std	Y+2, r25	; 0x02
  9e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A=0;
  a0:	8f e4       	ldi	r24, 0x4F	; 79
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	fc 01       	movw	r30, r24
  a6:	10 82       	st	Z, r1

	TCCR1B =(TCCR1B & 0xE7) | (Str->mode<<3);
  a8:	8e e4       	ldi	r24, 0x4E	; 78
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	fc 01       	movw	r30, r24
  ae:	80 81       	ld	r24, Z
  b0:	28 2f       	mov	r18, r24
  b2:	27 7e       	andi	r18, 0xE7	; 231
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	9a 81       	ldd	r25, Y+2	; 0x02
  b8:	fc 01       	movw	r30, r24
  ba:	80 81       	ld	r24, Z
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	28 2b       	or	r18, r24
  ce:	8e e4       	ldi	r24, 0x4E	; 78
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18

	TCCR1B =(TCCR1B & 0xF8) | (Str->scale);
  d6:	8e e4       	ldi	r24, 0x4E	; 78
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	80 81       	ld	r24, Z
  de:	28 2f       	mov	r18, r24
  e0:	28 7f       	andi	r18, 0xF8	; 248
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	fc 01       	movw	r30, r24
  e8:	81 81       	ldd	r24, Z+1	; 0x01
  ea:	28 2b       	or	r18, r24
  ec:	8e e4       	ldi	r24, 0x4E	; 78
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18

	TCNT1=0;
  f4:	8c e4       	ldi	r24, 0x4C	; 76
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	fc 01       	movw	r30, r24
  fa:	11 82       	std	Z+1, r1	; 0x01
  fc:	10 82       	st	Z, r1

	if(Str->mode == CTC){
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	fc 01       	movw	r30, r24
 104:	80 81       	ld	r24, Z
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	a1 f4       	brne	.+40     	; 0x132 <TIMER_init+0xa0>
		OCR1A=(Str->ctc);
 10a:	8a e4       	ldi	r24, 0x4A	; 74
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	29 81       	ldd	r18, Y+1	; 0x01
 110:	3a 81       	ldd	r19, Y+2	; 0x02
 112:	f9 01       	movw	r30, r18
 114:	22 81       	ldd	r18, Z+2	; 0x02
 116:	33 81       	ldd	r19, Z+3	; 0x03
 118:	fc 01       	movw	r30, r24
 11a:	31 83       	std	Z+1, r19	; 0x01
 11c:	20 83       	st	Z, r18
		TIMSK |=(1<<OCIE1A);
 11e:	89 e5       	ldi	r24, 0x59	; 89
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	20 81       	ld	r18, Z
 126:	89 e5       	ldi	r24, 0x59	; 89
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	20 61       	ori	r18, 0x10	; 16
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	0f c0       	rjmp	.+30     	; 0x150 <TIMER_init+0xbe>
	}else if(Str->mode == OVF){
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	49 f4       	brne	.+18     	; 0x150 <TIMER_init+0xbe>
		TIMSK |=(1<<TOIE1);
 13e:	89 e5       	ldi	r24, 0x59	; 89
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	fc 01       	movw	r30, r24
 144:	20 81       	ld	r18, Z
 146:	89 e5       	ldi	r24, 0x59	; 89
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	24 60       	ori	r18, 0x04	; 4
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
	}
	SREG |=(1<<7);
 150:	8f e5       	ldi	r24, 0x5F	; 95
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	20 81       	ld	r18, Z
 158:	8f e5       	ldi	r24, 0x5F	; 95
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	20 68       	ori	r18, 0x80	; 128
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18

}
 162:	00 00       	nop
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <TIMER_Deinit>:

/*
 * Description: Function to Clear Timer1 Register & active Sleep mode For Timer1.
 */
void TIMER_Deinit(void){
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
 176:	8f e4       	ldi	r24, 0x4F	; 79
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	fc 01       	movw	r30, r24
 17c:	10 82       	st	Z, r1
	TCCR1B=0;
 17e:	8e e4       	ldi	r24, 0x4E	; 78
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fc 01       	movw	r30, r24
 184:	10 82       	st	Z, r1
	TCNT1=0;
 186:	8c e4       	ldi	r24, 0x4C	; 76
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	11 82       	std	Z+1, r1	; 0x01
 18e:	10 82       	st	Z, r1
	TIMSK=0;
 190:	89 e5       	ldi	r24, 0x59	; 89
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	fc 01       	movw	r30, r24
 196:	10 82       	st	Z, r1
	OCR1A=0;
 198:	8a e4       	ldi	r24, 0x4A	; 74
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	fc 01       	movw	r30, r24
 19e:	11 82       	std	Z+1, r1	; 0x01
 1a0:	10 82       	st	Z, r1
}
 1a2:	00 00       	nop
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <TIMER_SETCTC>:

/*
 * Description: Function to set Compare Value to Timer1 .
 */
void TIMER_SETCTC(uint16 *Ptr_CTC){
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <TIMER_SETCTC+0x6>
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=0;
 1b8:	8c e4       	ldi	r24, 0x4C	; 76
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	11 82       	std	Z+1, r1	; 0x01
 1c0:	10 82       	st	Z, r1
	OCR1A=*Ptr_CTC;
 1c2:	8a e4       	ldi	r24, 0x4A	; 74
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	29 81       	ldd	r18, Y+1	; 0x01
 1c8:	3a 81       	ldd	r19, Y+2	; 0x02
 1ca:	f9 01       	movw	r30, r18
 1cc:	20 81       	ld	r18, Z
 1ce:	31 81       	ldd	r19, Z+1	; 0x01
 1d0:	fc 01       	movw	r30, r24
 1d2:	31 83       	std	Z+1, r19	; 0x01
 1d4:	20 83       	st	Z, r18
}
 1d6:	00 00       	nop
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <TIMER_setCallBack>:

/*
 * Description: Function to set Which Function Called by Timer1  in ISR Vector.
 */
void TIMER_setCallBack(void (*Fun)(void)){
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <TIMER_setCallBack+0x6>
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	9a 83       	std	Y+2, r25	; 0x02
 1ee:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr=Fun;
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 1f8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
}
 1fc:	00 00       	nop
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <__vector_6>:

ISR(TIMER1_COMPA_vect){
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	4f 93       	push	r20
 218:	5f 93       	push	r21
 21a:	6f 93       	push	r22
 21c:	7f 93       	push	r23
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	af 93       	push	r26
 224:	bf 93       	push	r27
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL)
 232:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 236:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 23a:	89 2b       	or	r24, r25
 23c:	31 f0       	breq	.+12     	; 0x24a <__vector_6+0x42>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_CallBackPtr)();
 23e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 242:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 246:	fc 01       	movw	r30, r24
 248:	09 95       	icall
	}

}
 24a:	00 00       	nop
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <__vector_8>:

ISR(TIMER1_OVF_vect){
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL)
 29c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 2a0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 2a4:	89 2b       	or	r24, r25
 2a6:	31 f0       	breq	.+12     	; 0x2b4 <__vector_8+0x42>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_CallBackPtr)();
 2a8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 2ac:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 2b0:	fc 01       	movw	r30, r24
 2b2:	09 95       	icall
	}
}
 2b4:	00 00       	nop
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <main>:

uint8 pinOut[4]={0x21,0x33,0x0C,0x1E};



uint8 main(void){
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	DDRC |=0x3F;
 2e4:	84 e3       	ldi	r24, 0x34	; 52
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 81       	ld	r18, Z
 2ec:	84 e3       	ldi	r24, 0x34	; 52
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	2f 63       	ori	r18, 0x3F	; 63
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18
	PORTC=0x21;
 2f6:	85 e3       	ldi	r24, 0x35	; 53
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	21 e2       	ldi	r18, 0x21	; 33
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
	TIMER_init(&setTimer);
 300:	80 e6       	ldi	r24, 0x60	; 96
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 49 00 	call	0x92	; 0x92 <TIMER_init>
	TIMER_setCallBack(trafficToggelLed);
 308:	89 e8       	ldi	r24, 0x89	; 137
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <TIMER_setCallBack>

	while(1){
 310:	ff cf       	rjmp	.-2      	; 0x310 <main+0x34>

00000312 <trafficToggelLed>:

	}
	return 0;
}

void trafficToggelLed(void){
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
	index =(++index)%6;
 31a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <index>
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <index>
 324:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <index>
 328:	8b ea       	ldi	r24, 0xAB	; 171
 32a:	28 9f       	mul	r18, r24
 32c:	81 2d       	mov	r24, r1
 32e:	11 24       	eor	r1, r1
 330:	98 2f       	mov	r25, r24
 332:	96 95       	lsr	r25
 334:	96 95       	lsr	r25
 336:	89 2f       	mov	r24, r25
 338:	88 0f       	add	r24, r24
 33a:	89 0f       	add	r24, r25
 33c:	88 0f       	add	r24, r24
 33e:	92 2f       	mov	r25, r18
 340:	98 1b       	sub	r25, r24
 342:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <index>
	if((index == 5)&&(mode == RED)){
 346:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <index>
 34a:	85 30       	cpi	r24, 0x05	; 5
 34c:	41 f4       	brne	.+16     	; 0x35e <trafficToggelLed+0x4c>
 34e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <mode>
 352:	88 23       	and	r24, r24
 354:	21 f4       	brne	.+8      	; 0x35e <trafficToggelLed+0x4c>
		mode = RED_YELLOW;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <mode>
 35c:	22 c0       	rjmp	.+68     	; 0x3a2 <trafficToggelLed+0x90>
	}else if((index == 5)&&(mode == GREEN)){
 35e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <index>
 362:	85 30       	cpi	r24, 0x05	; 5
 364:	41 f4       	brne	.+16     	; 0x376 <trafficToggelLed+0x64>
 366:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <mode>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	21 f4       	brne	.+8      	; 0x376 <trafficToggelLed+0x64>
		mode = GREEN_YELLOW;
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <mode>
 374:	16 c0       	rjmp	.+44     	; 0x3a2 <trafficToggelLed+0x90>
	}else if((index == 1)&&(mode == RED_YELLOW)){
 376:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <index>
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	41 f4       	brne	.+16     	; 0x38e <trafficToggelLed+0x7c>
 37e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <mode>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	21 f4       	brne	.+8      	; 0x38e <trafficToggelLed+0x7c>
		mode = GREEN;
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <mode>
 38c:	0a c0       	rjmp	.+20     	; 0x3a2 <trafficToggelLed+0x90>
	}else if((index == 1)&&(mode == GREEN_YELLOW)){
 38e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <index>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	31 f4       	brne	.+12     	; 0x3a2 <trafficToggelLed+0x90>
 396:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <mode>
 39a:	83 30       	cpi	r24, 0x03	; 3
 39c:	11 f4       	brne	.+4      	; 0x3a2 <trafficToggelLed+0x90>
		mode = RED;
 39e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <mode>
	}
	PORTC=pinOut[mode];
 3a2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <mode>
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	85 e3       	ldi	r24, 0x35	; 53
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	2e 59       	subi	r18, 0x9E	; 158
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	f9 01       	movw	r30, r18
 3b4:	20 81       	ld	r18, Z
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
}
 3ba:	00 00       	nop
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
