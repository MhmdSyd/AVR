
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000054e  00800060  00002c32  00002cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008005ae  008005ae  00003214  2**0
                  ALLOC
  3 .stab         00001b6c  00000000  00000000  00003214  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d2a  00000000  00000000  00004d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00005c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00005e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008490  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000995e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000ac6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000ae4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000b153  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__vector_1>
       8:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 11 	call	0x2370	; 0x2370 <main>
      8a:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ec 58       	subi	r30, 0x8C	; 140
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <LCD_sendCommand>:
 *******************************************************************************/

/*
 * Function responsible for Send Order to LCD
 */
void LCD_sendCommand(uint8 command) {
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	c5 55       	subi	r28, 0x55	; 85
     ef8:	d0 40       	sbci	r29, 0x00	; 0
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	fe 01       	movw	r30, r28
     f06:	eb 5a       	subi	r30, 0xAB	; 171
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 83       	st	Z, r24
	RS = CLEAR; /* tell LCD that data which will send now is command */
     f0c:	e2 e3       	ldi	r30, 0x32	; 50
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8f 7e       	andi	r24, 0xEF	; 239
     f14:	80 83       	st	Z, r24
	RW = CLEAR; /* select write Mode on LCD */
     f16:	e2 e3       	ldi	r30, 0x32	; 50
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8f 7d       	andi	r24, 0xDF	; 223
     f1e:	80 83       	st	Z, r24
     f20:	fe 01       	movw	r30, r28
     f22:	ef 5a       	subi	r30, 0xAF	; 175
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a0 e8       	ldi	r26, 0x80	; 128
     f2c:	bf e3       	ldi	r27, 0x3F	; 63
     f2e:	80 83       	st	Z, r24
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	a2 83       	std	Z+2, r26	; 0x02
     f34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f36:	8e 01       	movw	r16, r28
     f38:	03 5b       	subi	r16, 0xB3	; 179
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
     f3c:	fe 01       	movw	r30, r28
     f3e:	ef 5a       	subi	r30, 0xAF	; 175
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	60 81       	ld	r22, Z
     f44:	71 81       	ldd	r23, Z+1	; 0x01
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	93 81       	ldd	r25, Z+3	; 0x03
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	4a ef       	ldi	r20, 0xFA	; 250
     f50:	54 e4       	ldi	r21, 0x44	; 68
     f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	f8 01       	movw	r30, r16
     f5c:	80 83       	st	Z, r24
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	a2 83       	std	Z+2, r26	; 0x02
     f62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f64:	fe 01       	movw	r30, r28
     f66:	e3 5b       	subi	r30, 0xB3	; 179
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e8       	ldi	r20, 0x80	; 128
     f78:	5f e3       	ldi	r21, 0x3F	; 63
     f7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f7e:	88 23       	and	r24, r24
     f80:	44 f4       	brge	.+16     	; 0xf92 <LCD_sendCommand+0xa8>
		__ticks = 1;
     f82:	fe 01       	movw	r30, r28
     f84:	e5 5b       	subi	r30, 0xB5	; 181
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
     f90:	64 c0       	rjmp	.+200    	; 0x105a <LCD_sendCommand+0x170>
	else if (__tmp > 65535)
     f92:	fe 01       	movw	r30, r28
     f94:	e3 5b       	subi	r30, 0xB3	; 179
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	60 81       	ld	r22, Z
     f9a:	71 81       	ldd	r23, Z+1	; 0x01
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	4f e7       	ldi	r20, 0x7F	; 127
     fa6:	57 e4       	ldi	r21, 0x47	; 71
     fa8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fac:	18 16       	cp	r1, r24
     fae:	0c f0       	brlt	.+2      	; 0xfb2 <LCD_sendCommand+0xc8>
     fb0:	43 c0       	rjmp	.+134    	; 0x1038 <LCD_sendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb2:	fe 01       	movw	r30, r28
     fb4:	ef 5a       	subi	r30, 0xAF	; 175
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	60 81       	ld	r22, Z
     fba:	71 81       	ldd	r23, Z+1	; 0x01
     fbc:	82 81       	ldd	r24, Z+2	; 0x02
     fbe:	93 81       	ldd	r25, Z+3	; 0x03
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e2       	ldi	r20, 0x20	; 32
     fc6:	51 e4       	ldi	r21, 0x41	; 65
     fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	8e 01       	movw	r16, r28
     fd2:	05 5b       	subi	r16, 0xB5	; 181
     fd4:	1f 4f       	sbci	r17, 0xFF	; 255
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	f8 01       	movw	r30, r16
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	80 83       	st	Z, r24
     fe8:	1f c0       	rjmp	.+62     	; 0x1028 <LCD_sendCommand+0x13e>
     fea:	fe 01       	movw	r30, r28
     fec:	e7 5b       	subi	r30, 0xB7	; 183
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	88 ec       	ldi	r24, 0xC8	; 200
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	91 83       	std	Z+1, r25	; 0x01
     ff6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ff8:	fe 01       	movw	r30, r28
     ffa:	e7 5b       	subi	r30, 0xB7	; 183
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <LCD_sendCommand+0x118>
    1006:	fe 01       	movw	r30, r28
    1008:	e7 5b       	subi	r30, 0xB7	; 183
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1010:	de 01       	movw	r26, r28
    1012:	a5 5b       	subi	r26, 0xB5	; 181
    1014:	bf 4f       	sbci	r27, 0xFF	; 255
    1016:	fe 01       	movw	r30, r28
    1018:	e5 5b       	subi	r30, 0xB5	; 181
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	80 81       	ld	r24, Z
    101e:	91 81       	ldd	r25, Z+1	; 0x01
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	11 96       	adiw	r26, 0x01	; 1
    1024:	9c 93       	st	X, r25
    1026:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1028:	fe 01       	movw	r30, r28
    102a:	e5 5b       	subi	r30, 0xB5	; 181
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	80 81       	ld	r24, Z
    1030:	91 81       	ldd	r25, Z+1	; 0x01
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	d1 f6       	brne	.-76     	; 0xfea <LCD_sendCommand+0x100>
    1036:	27 c0       	rjmp	.+78     	; 0x1086 <LCD_sendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1038:	8e 01       	movw	r16, r28
    103a:	05 5b       	subi	r16, 0xB5	; 181
    103c:	1f 4f       	sbci	r17, 0xFF	; 255
    103e:	fe 01       	movw	r30, r28
    1040:	e3 5b       	subi	r30, 0xB3	; 179
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	60 81       	ld	r22, Z
    1046:	71 81       	ldd	r23, Z+1	; 0x01
    1048:	82 81       	ldd	r24, Z+2	; 0x02
    104a:	93 81       	ldd	r25, Z+3	; 0x03
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	f8 01       	movw	r30, r16
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	80 83       	st	Z, r24
    105a:	de 01       	movw	r26, r28
    105c:	a9 5b       	subi	r26, 0xB9	; 185
    105e:	bf 4f       	sbci	r27, 0xFF	; 255
    1060:	fe 01       	movw	r30, r28
    1062:	e5 5b       	subi	r30, 0xB5	; 181
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	8d 93       	st	X+, r24
    106c:	9c 93       	st	X, r25
    106e:	fe 01       	movw	r30, r28
    1070:	e9 5b       	subi	r30, 0xB9	; 185
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <LCD_sendCommand+0x18e>
    107c:	fe 01       	movw	r30, r28
    107e:	e9 5b       	subi	r30, 0xB9	; 185
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
    1086:	e2 e3       	ldi	r30, 0x32	; 50
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 64       	ori	r24, 0x40	; 64
    108e:	80 83       	st	Z, r24
    1090:	fe 01       	movw	r30, r28
    1092:	ed 5b       	subi	r30, 0xBD	; 189
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 e8       	ldi	r26, 0x80	; 128
    109c:	bf e3       	ldi	r27, 0x3F	; 63
    109e:	80 83       	st	Z, r24
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	a2 83       	std	Z+2, r26	; 0x02
    10a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a6:	8e 01       	movw	r16, r28
    10a8:	01 5c       	subi	r16, 0xC1	; 193
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	fe 01       	movw	r30, r28
    10ae:	ed 5b       	subi	r30, 0xBD	; 189
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	60 81       	ld	r22, Z
    10b4:	71 81       	ldd	r23, Z+1	; 0x01
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	93 81       	ldd	r25, Z+3	; 0x03
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	4a ef       	ldi	r20, 0xFA	; 250
    10c0:	54 e4       	ldi	r21, 0x44	; 68
    10c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	f8 01       	movw	r30, r16
    10cc:	80 83       	st	Z, r24
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	a2 83       	std	Z+2, r26	; 0x02
    10d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10d4:	fe 01       	movw	r30, r28
    10d6:	ff 96       	adiw	r30, 0x3f	; 63
    10d8:	60 81       	ld	r22, Z
    10da:	71 81       	ldd	r23, Z+1	; 0x01
    10dc:	82 81       	ldd	r24, Z+2	; 0x02
    10de:	93 81       	ldd	r25, Z+3	; 0x03
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e8       	ldi	r20, 0x80	; 128
    10e6:	5f e3       	ldi	r21, 0x3F	; 63
    10e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10ec:	88 23       	and	r24, r24
    10ee:	2c f4       	brge	.+10     	; 0x10fa <LCD_sendCommand+0x210>
		__ticks = 1;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9e af       	std	Y+62, r25	; 0x3e
    10f6:	8d af       	std	Y+61, r24	; 0x3d
    10f8:	46 c0       	rjmp	.+140    	; 0x1186 <LCD_sendCommand+0x29c>
	else if (__tmp > 65535)
    10fa:	fe 01       	movw	r30, r28
    10fc:	ff 96       	adiw	r30, 0x3f	; 63
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	3f ef       	ldi	r19, 0xFF	; 255
    110a:	4f e7       	ldi	r20, 0x7F	; 127
    110c:	57 e4       	ldi	r21, 0x47	; 71
    110e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1112:	18 16       	cp	r1, r24
    1114:	64 f5       	brge	.+88     	; 0x116e <LCD_sendCommand+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1116:	fe 01       	movw	r30, r28
    1118:	ed 5b       	subi	r30, 0xBD	; 189
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	60 81       	ld	r22, Z
    111e:	71 81       	ldd	r23, Z+1	; 0x01
    1120:	82 81       	ldd	r24, Z+2	; 0x02
    1122:	93 81       	ldd	r25, Z+3	; 0x03
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e2       	ldi	r20, 0x20	; 32
    112a:	51 e4       	ldi	r21, 0x41	; 65
    112c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	9e af       	std	Y+62, r25	; 0x3e
    1142:	8d af       	std	Y+61, r24	; 0x3d
    1144:	0f c0       	rjmp	.+30     	; 0x1164 <LCD_sendCommand+0x27a>
    1146:	88 ec       	ldi	r24, 0xC8	; 200
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	9c af       	std	Y+60, r25	; 0x3c
    114c:	8b af       	std	Y+59, r24	; 0x3b
    114e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1150:	9c ad       	ldd	r25, Y+60	; 0x3c
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <LCD_sendCommand+0x268>
    1156:	9c af       	std	Y+60, r25	; 0x3c
    1158:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115a:	8d ad       	ldd	r24, Y+61	; 0x3d
    115c:	9e ad       	ldd	r25, Y+62	; 0x3e
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	9e af       	std	Y+62, r25	; 0x3e
    1162:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1164:	8d ad       	ldd	r24, Y+61	; 0x3d
    1166:	9e ad       	ldd	r25, Y+62	; 0x3e
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	69 f7       	brne	.-38     	; 0x1146 <LCD_sendCommand+0x25c>
    116c:	16 c0       	rjmp	.+44     	; 0x119a <LCD_sendCommand+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116e:	fe 01       	movw	r30, r28
    1170:	ff 96       	adiw	r30, 0x3f	; 63
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	9e af       	std	Y+62, r25	; 0x3e
    1184:	8d af       	std	Y+61, r24	; 0x3d
    1186:	8d ad       	ldd	r24, Y+61	; 0x3d
    1188:	9e ad       	ldd	r25, Y+62	; 0x3e
    118a:	9a af       	std	Y+58, r25	; 0x3a
    118c:	89 af       	std	Y+57, r24	; 0x39
    118e:	89 ad       	ldd	r24, Y+57	; 0x39
    1190:	9a ad       	ldd	r25, Y+58	; 0x3a
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <LCD_sendCommand+0x2a8>
    1196:	9a af       	std	Y+58, r25	; 0x3a
    1198:	89 af       	std	Y+57, r24	; 0x39
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required command to the data bus D4 --> D7 */
	DATA_OUT=( command  & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT=( (command >>4 ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    119a:	a8 e3       	ldi	r26, 0x38	; 56
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	fe 01       	movw	r30, r28
    11a0:	eb 5a       	subi	r30, 0xAB	; 171
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	80 81       	ld	r24, Z
    11a6:	82 95       	swap	r24
    11a8:	8f 70       	andi	r24, 0x0F	; 15
    11aa:	98 2f       	mov	r25, r24
    11ac:	e8 e3       	ldi	r30, 0x38	; 56
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	80 7f       	andi	r24, 0xF0	; 240
    11b4:	89 2b       	or	r24, r25
    11b6:	8c 93       	st	X, r24
#endif

	E = CLEAR;	 /* close Enable to prevent data share between LCD and AVR */
    11b8:	e2 e3       	ldi	r30, 0x32	; 50
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8f 7b       	andi	r24, 0xBF	; 191
    11c0:	80 83       	st	Z, r24
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a0 e8       	ldi	r26, 0x80	; 128
    11c8:	bf e3       	ldi	r27, 0x3F	; 63
    11ca:	8d ab       	std	Y+53, r24	; 0x35
    11cc:	9e ab       	std	Y+54, r25	; 0x36
    11ce:	af ab       	std	Y+55, r26	; 0x37
    11d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d2:	6d a9       	ldd	r22, Y+53	; 0x35
    11d4:	7e a9       	ldd	r23, Y+54	; 0x36
    11d6:	8f a9       	ldd	r24, Y+55	; 0x37
    11d8:	98 ad       	ldd	r25, Y+56	; 0x38
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	4a ef       	ldi	r20, 0xFA	; 250
    11e0:	54 e4       	ldi	r21, 0x44	; 68
    11e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	89 ab       	std	Y+49, r24	; 0x31
    11ec:	9a ab       	std	Y+50, r25	; 0x32
    11ee:	ab ab       	std	Y+51, r26	; 0x33
    11f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11f2:	69 a9       	ldd	r22, Y+49	; 0x31
    11f4:	7a a9       	ldd	r23, Y+50	; 0x32
    11f6:	8b a9       	ldd	r24, Y+51	; 0x33
    11f8:	9c a9       	ldd	r25, Y+52	; 0x34
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e8       	ldi	r20, 0x80	; 128
    1200:	5f e3       	ldi	r21, 0x3F	; 63
    1202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1206:	88 23       	and	r24, r24
    1208:	2c f4       	brge	.+10     	; 0x1214 <LCD_sendCommand+0x32a>
		__ticks = 1;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	98 ab       	std	Y+48, r25	; 0x30
    1210:	8f a7       	std	Y+47, r24	; 0x2f
    1212:	3f c0       	rjmp	.+126    	; 0x1292 <LCD_sendCommand+0x3a8>
	else if (__tmp > 65535)
    1214:	69 a9       	ldd	r22, Y+49	; 0x31
    1216:	7a a9       	ldd	r23, Y+50	; 0x32
    1218:	8b a9       	ldd	r24, Y+51	; 0x33
    121a:	9c a9       	ldd	r25, Y+52	; 0x34
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	3f ef       	ldi	r19, 0xFF	; 255
    1220:	4f e7       	ldi	r20, 0x7F	; 127
    1222:	57 e4       	ldi	r21, 0x47	; 71
    1224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1228:	18 16       	cp	r1, r24
    122a:	4c f5       	brge	.+82     	; 0x127e <LCD_sendCommand+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122c:	6d a9       	ldd	r22, Y+53	; 0x35
    122e:	7e a9       	ldd	r23, Y+54	; 0x36
    1230:	8f a9       	ldd	r24, Y+55	; 0x37
    1232:	98 ad       	ldd	r25, Y+56	; 0x38
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e2       	ldi	r20, 0x20	; 32
    123a:	51 e4       	ldi	r21, 0x41	; 65
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	bc 01       	movw	r22, r24
    1246:	cd 01       	movw	r24, r26
    1248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	98 ab       	std	Y+48, r25	; 0x30
    1252:	8f a7       	std	Y+47, r24	; 0x2f
    1254:	0f c0       	rjmp	.+30     	; 0x1274 <LCD_sendCommand+0x38a>
    1256:	88 ec       	ldi	r24, 0xC8	; 200
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9e a7       	std	Y+46, r25	; 0x2e
    125c:	8d a7       	std	Y+45, r24	; 0x2d
    125e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1260:	9e a5       	ldd	r25, Y+46	; 0x2e
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <LCD_sendCommand+0x378>
    1266:	9e a7       	std	Y+46, r25	; 0x2e
    1268:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126a:	8f a5       	ldd	r24, Y+47	; 0x2f
    126c:	98 a9       	ldd	r25, Y+48	; 0x30
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	98 ab       	std	Y+48, r25	; 0x30
    1272:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1274:	8f a5       	ldd	r24, Y+47	; 0x2f
    1276:	98 a9       	ldd	r25, Y+48	; 0x30
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	69 f7       	brne	.-38     	; 0x1256 <LCD_sendCommand+0x36c>
    127c:	14 c0       	rjmp	.+40     	; 0x12a6 <LCD_sendCommand+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127e:	69 a9       	ldd	r22, Y+49	; 0x31
    1280:	7a a9       	ldd	r23, Y+50	; 0x32
    1282:	8b a9       	ldd	r24, Y+51	; 0x33
    1284:	9c a9       	ldd	r25, Y+52	; 0x34
    1286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	98 ab       	std	Y+48, r25	; 0x30
    1290:	8f a7       	std	Y+47, r24	; 0x2f
    1292:	8f a5       	ldd	r24, Y+47	; 0x2f
    1294:	98 a9       	ldd	r25, Y+48	; 0x30
    1296:	9c a7       	std	Y+44, r25	; 0x2c
    1298:	8b a7       	std	Y+43, r24	; 0x2b
    129a:	8b a5       	ldd	r24, Y+43	; 0x2b
    129c:	9c a5       	ldd	r25, Y+44	; 0x2c
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <LCD_sendCommand+0x3b4>
    12a2:	9c a7       	std	Y+44, r25	; 0x2c
    12a4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	E = SET;		/* open Enable again to send last 4 bits of command */
    12a6:	e2 e3       	ldi	r30, 0x32	; 50
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	80 64       	ori	r24, 0x40	; 64
    12ae:	80 83       	st	Z, r24
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a0 e8       	ldi	r26, 0x80	; 128
    12b6:	bf e3       	ldi	r27, 0x3F	; 63
    12b8:	8f a3       	std	Y+39, r24	; 0x27
    12ba:	98 a7       	std	Y+40, r25	; 0x28
    12bc:	a9 a7       	std	Y+41, r26	; 0x29
    12be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c0:	6f a1       	ldd	r22, Y+39	; 0x27
    12c2:	78 a5       	ldd	r23, Y+40	; 0x28
    12c4:	89 a5       	ldd	r24, Y+41	; 0x29
    12c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	4a ef       	ldi	r20, 0xFA	; 250
    12ce:	54 e4       	ldi	r21, 0x44	; 68
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	8b a3       	std	Y+35, r24	; 0x23
    12da:	9c a3       	std	Y+36, r25	; 0x24
    12dc:	ad a3       	std	Y+37, r26	; 0x25
    12de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12e0:	6b a1       	ldd	r22, Y+35	; 0x23
    12e2:	7c a1       	ldd	r23, Y+36	; 0x24
    12e4:	8d a1       	ldd	r24, Y+37	; 0x25
    12e6:	9e a1       	ldd	r25, Y+38	; 0x26
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e8       	ldi	r20, 0x80	; 128
    12ee:	5f e3       	ldi	r21, 0x3F	; 63
    12f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12f4:	88 23       	and	r24, r24
    12f6:	2c f4       	brge	.+10     	; 0x1302 <LCD_sendCommand+0x418>
		__ticks = 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9a a3       	std	Y+34, r25	; 0x22
    12fe:	89 a3       	std	Y+33, r24	; 0x21
    1300:	3f c0       	rjmp	.+126    	; 0x1380 <LCD_sendCommand+0x496>
	else if (__tmp > 65535)
    1302:	6b a1       	ldd	r22, Y+35	; 0x23
    1304:	7c a1       	ldd	r23, Y+36	; 0x24
    1306:	8d a1       	ldd	r24, Y+37	; 0x25
    1308:	9e a1       	ldd	r25, Y+38	; 0x26
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	3f ef       	ldi	r19, 0xFF	; 255
    130e:	4f e7       	ldi	r20, 0x7F	; 127
    1310:	57 e4       	ldi	r21, 0x47	; 71
    1312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1316:	18 16       	cp	r1, r24
    1318:	4c f5       	brge	.+82     	; 0x136c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131a:	6f a1       	ldd	r22, Y+39	; 0x27
    131c:	78 a5       	ldd	r23, Y+40	; 0x28
    131e:	89 a5       	ldd	r24, Y+41	; 0x29
    1320:	9a a5       	ldd	r25, Y+42	; 0x2a
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e2       	ldi	r20, 0x20	; 32
    1328:	51 e4       	ldi	r21, 0x41	; 65
    132a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	bc 01       	movw	r22, r24
    1334:	cd 01       	movw	r24, r26
    1336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	9a a3       	std	Y+34, r25	; 0x22
    1340:	89 a3       	std	Y+33, r24	; 0x21
    1342:	0f c0       	rjmp	.+30     	; 0x1362 <LCD_sendCommand+0x478>
    1344:	88 ec       	ldi	r24, 0xC8	; 200
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	98 a3       	std	Y+32, r25	; 0x20
    134a:	8f 8f       	std	Y+31, r24	; 0x1f
    134c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    134e:	98 a1       	ldd	r25, Y+32	; 0x20
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <LCD_sendCommand+0x466>
    1354:	98 a3       	std	Y+32, r25	; 0x20
    1356:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1358:	89 a1       	ldd	r24, Y+33	; 0x21
    135a:	9a a1       	ldd	r25, Y+34	; 0x22
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	9a a3       	std	Y+34, r25	; 0x22
    1360:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1362:	89 a1       	ldd	r24, Y+33	; 0x21
    1364:	9a a1       	ldd	r25, Y+34	; 0x22
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	69 f7       	brne	.-38     	; 0x1344 <LCD_sendCommand+0x45a>
    136a:	14 c0       	rjmp	.+40     	; 0x1394 <LCD_sendCommand+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136c:	6b a1       	ldd	r22, Y+35	; 0x23
    136e:	7c a1       	ldd	r23, Y+36	; 0x24
    1370:	8d a1       	ldd	r24, Y+37	; 0x25
    1372:	9e a1       	ldd	r25, Y+38	; 0x26
    1374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9a a3       	std	Y+34, r25	; 0x22
    137e:	89 a3       	std	Y+33, r24	; 0x21
    1380:	89 a1       	ldd	r24, Y+33	; 0x21
    1382:	9a a1       	ldd	r25, Y+34	; 0x22
    1384:	9e 8f       	std	Y+30, r25	; 0x1e
    1386:	8d 8f       	std	Y+29, r24	; 0x1d
    1388:	8d 8d       	ldd	r24, Y+29	; 0x1d
    138a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <LCD_sendCommand+0x4a2>
    1390:	9e 8f       	std	Y+30, r25	; 0x1e
    1392:	8d 8f       	std	Y+29, r24	; 0x1d
	/* send the Least 4 bits of the required command to the data bus D0 --> D3 */
	DATA_OUT=( (command << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif

#ifdef LOWER_MODE_BITS
	DATA_OUT=( (command ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    1394:	a8 e3       	ldi	r26, 0x38	; 56
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	fe 01       	movw	r30, r28
    139a:	eb 5a       	subi	r30, 0xAB	; 171
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 81       	ld	r24, Z
    13a0:	98 2f       	mov	r25, r24
    13a2:	9f 70       	andi	r25, 0x0F	; 15
    13a4:	e8 e3       	ldi	r30, 0x38	; 56
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	80 7f       	andi	r24, 0xF0	; 240
    13ac:	89 2b       	or	r24, r25
    13ae:	8c 93       	st	X, r24
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a0 e8       	ldi	r26, 0x80	; 128
    13b6:	bf e3       	ldi	r27, 0x3F	; 63
    13b8:	89 8f       	std	Y+25, r24	; 0x19
    13ba:	9a 8f       	std	Y+26, r25	; 0x1a
    13bc:	ab 8f       	std	Y+27, r26	; 0x1b
    13be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c0:	69 8d       	ldd	r22, Y+25	; 0x19
    13c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	4a ef       	ldi	r20, 0xFA	; 250
    13ce:	54 e4       	ldi	r21, 0x44	; 68
    13d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	8d 8b       	std	Y+21, r24	; 0x15
    13da:	9e 8b       	std	Y+22, r25	; 0x16
    13dc:	af 8b       	std	Y+23, r26	; 0x17
    13de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13e0:	6d 89       	ldd	r22, Y+21	; 0x15
    13e2:	7e 89       	ldd	r23, Y+22	; 0x16
    13e4:	8f 89       	ldd	r24, Y+23	; 0x17
    13e6:	98 8d       	ldd	r25, Y+24	; 0x18
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e8       	ldi	r20, 0x80	; 128
    13ee:	5f e3       	ldi	r21, 0x3F	; 63
    13f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13f4:	88 23       	and	r24, r24
    13f6:	2c f4       	brge	.+10     	; 0x1402 <LCD_sendCommand+0x518>
		__ticks = 1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9c 8b       	std	Y+20, r25	; 0x14
    13fe:	8b 8b       	std	Y+19, r24	; 0x13
    1400:	3f c0       	rjmp	.+126    	; 0x1480 <LCD_sendCommand+0x596>
	else if (__tmp > 65535)
    1402:	6d 89       	ldd	r22, Y+21	; 0x15
    1404:	7e 89       	ldd	r23, Y+22	; 0x16
    1406:	8f 89       	ldd	r24, Y+23	; 0x17
    1408:	98 8d       	ldd	r25, Y+24	; 0x18
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	3f ef       	ldi	r19, 0xFF	; 255
    140e:	4f e7       	ldi	r20, 0x7F	; 127
    1410:	57 e4       	ldi	r21, 0x47	; 71
    1412:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1416:	18 16       	cp	r1, r24
    1418:	4c f5       	brge	.+82     	; 0x146c <LCD_sendCommand+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141a:	69 8d       	ldd	r22, Y+25	; 0x19
    141c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e2       	ldi	r20, 0x20	; 32
    1428:	51 e4       	ldi	r21, 0x41	; 65
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9c 8b       	std	Y+20, r25	; 0x14
    1440:	8b 8b       	std	Y+19, r24	; 0x13
    1442:	0f c0       	rjmp	.+30     	; 0x1462 <LCD_sendCommand+0x578>
    1444:	88 ec       	ldi	r24, 0xC8	; 200
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	9a 8b       	std	Y+18, r25	; 0x12
    144a:	89 8b       	std	Y+17, r24	; 0x11
    144c:	89 89       	ldd	r24, Y+17	; 0x11
    144e:	9a 89       	ldd	r25, Y+18	; 0x12
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <LCD_sendCommand+0x566>
    1454:	9a 8b       	std	Y+18, r25	; 0x12
    1456:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1458:	8b 89       	ldd	r24, Y+19	; 0x13
    145a:	9c 89       	ldd	r25, Y+20	; 0x14
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	9c 8b       	std	Y+20, r25	; 0x14
    1460:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1462:	8b 89       	ldd	r24, Y+19	; 0x13
    1464:	9c 89       	ldd	r25, Y+20	; 0x14
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	69 f7       	brne	.-38     	; 0x1444 <LCD_sendCommand+0x55a>
    146a:	14 c0       	rjmp	.+40     	; 0x1494 <LCD_sendCommand+0x5aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146c:	6d 89       	ldd	r22, Y+21	; 0x15
    146e:	7e 89       	ldd	r23, Y+22	; 0x16
    1470:	8f 89       	ldd	r24, Y+23	; 0x17
    1472:	98 8d       	ldd	r25, Y+24	; 0x18
    1474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9c 8b       	std	Y+20, r25	; 0x14
    147e:	8b 8b       	std	Y+19, r24	; 0x13
    1480:	8b 89       	ldd	r24, Y+19	; 0x13
    1482:	9c 89       	ldd	r25, Y+20	; 0x14
    1484:	98 8b       	std	Y+16, r25	; 0x10
    1486:	8f 87       	std	Y+15, r24	; 0x0f
    1488:	8f 85       	ldd	r24, Y+15	; 0x0f
    148a:	98 89       	ldd	r25, Y+16	; 0x10
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <LCD_sendCommand+0x5a2>
    1490:	98 8b       	std	Y+16, r25	; 0x10
    1492:	8f 87       	std	Y+15, r24	; 0x0f
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    1494:	e2 e3       	ldi	r30, 0x32	; 50
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8f 7b       	andi	r24, 0xBF	; 191
    149c:	80 83       	st	Z, r24
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a0 e8       	ldi	r26, 0x80	; 128
    14a4:	bf e3       	ldi	r27, 0x3F	; 63
    14a6:	8b 87       	std	Y+11, r24	; 0x0b
    14a8:	9c 87       	std	Y+12, r25	; 0x0c
    14aa:	ad 87       	std	Y+13, r26	; 0x0d
    14ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	4a ef       	ldi	r20, 0xFA	; 250
    14bc:	54 e4       	ldi	r21, 0x44	; 68
    14be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	8f 83       	std	Y+7, r24	; 0x07
    14c8:	98 87       	std	Y+8, r25	; 0x08
    14ca:	a9 87       	std	Y+9, r26	; 0x09
    14cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e8       	ldi	r20, 0x80	; 128
    14dc:	5f e3       	ldi	r21, 0x3F	; 63
    14de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e2:	88 23       	and	r24, r24
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <LCD_sendCommand+0x606>
		__ticks = 1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	8d 83       	std	Y+5, r24	; 0x05
    14ee:	3f c0       	rjmp	.+126    	; 0x156e <LCD_sendCommand+0x684>
	else if (__tmp > 65535)
    14f0:	6f 81       	ldd	r22, Y+7	; 0x07
    14f2:	78 85       	ldd	r23, Y+8	; 0x08
    14f4:	89 85       	ldd	r24, Y+9	; 0x09
    14f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	3f ef       	ldi	r19, 0xFF	; 255
    14fc:	4f e7       	ldi	r20, 0x7F	; 127
    14fe:	57 e4       	ldi	r21, 0x47	; 71
    1500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1504:	18 16       	cp	r1, r24
    1506:	4c f5       	brge	.+82     	; 0x155a <LCD_sendCommand+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1508:	6b 85       	ldd	r22, Y+11	; 0x0b
    150a:	7c 85       	ldd	r23, Y+12	; 0x0c
    150c:	8d 85       	ldd	r24, Y+13	; 0x0d
    150e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e2       	ldi	r20, 0x20	; 32
    1516:	51 e4       	ldi	r21, 0x41	; 65
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	bc 01       	movw	r22, r24
    1522:	cd 01       	movw	r24, r26
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	8d 83       	std	Y+5, r24	; 0x05
    1530:	0f c0       	rjmp	.+30     	; 0x1550 <LCD_sendCommand+0x666>
    1532:	88 ec       	ldi	r24, 0xC8	; 200
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	9c 83       	std	Y+4, r25	; 0x04
    1538:	8b 83       	std	Y+3, r24	; 0x03
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <LCD_sendCommand+0x654>
    1542:	9c 83       	std	Y+4, r25	; 0x04
    1544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	69 f7       	brne	.-38     	; 0x1532 <LCD_sendCommand+0x648>
    1558:	14 c0       	rjmp	.+40     	; 0x1582 <LCD_sendCommand+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155a:	6f 81       	ldd	r22, Y+7	; 0x07
    155c:	78 85       	ldd	r23, Y+8	; 0x08
    155e:	89 85       	ldd	r24, Y+9	; 0x09
    1560:	9a 85       	ldd	r25, Y+10	; 0x0a
    1562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	9a 83       	std	Y+2, r25	; 0x02
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	9a 81       	ldd	r25, Y+2	; 0x02
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD_sendCommand+0x690>
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
}
    1582:	cb 5a       	subi	r28, 0xAB	; 171
    1584:	df 4f       	sbci	r29, 0xFF	; 255
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	08 95       	ret

0000159a <LCD_displayCharacter>:

/*
 * Function responsible for Display only One character on LCD
 */
void LCD_displayCharacter(uint8 data) {
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	c5 55       	subi	r28, 0x55	; 85
    15a8:	d0 40       	sbci	r29, 0x00	; 0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	fe 01       	movw	r30, r28
    15b6:	eb 5a       	subi	r30, 0xAB	; 171
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	80 83       	st	Z, r24
	RS = SET; /* tell LCD that data which will send now is DATA */
    15bc:	e2 e3       	ldi	r30, 0x32	; 50
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	80 61       	ori	r24, 0x10	; 16
    15c4:	80 83       	st	Z, r24
	RW = CLEAR; /* select write Mode on LCD */
    15c6:	e2 e3       	ldi	r30, 0x32	; 50
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8f 7d       	andi	r24, 0xDF	; 223
    15ce:	80 83       	st	Z, r24
    15d0:	fe 01       	movw	r30, r28
    15d2:	ef 5a       	subi	r30, 0xAF	; 175
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a0 e8       	ldi	r26, 0x80	; 128
    15dc:	bf e3       	ldi	r27, 0x3F	; 63
    15de:	80 83       	st	Z, r24
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	a2 83       	std	Z+2, r26	; 0x02
    15e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e6:	8e 01       	movw	r16, r28
    15e8:	03 5b       	subi	r16, 0xB3	; 179
    15ea:	1f 4f       	sbci	r17, 0xFF	; 255
    15ec:	fe 01       	movw	r30, r28
    15ee:	ef 5a       	subi	r30, 0xAF	; 175
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	60 81       	ld	r22, Z
    15f4:	71 81       	ldd	r23, Z+1	; 0x01
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	93 81       	ldd	r25, Z+3	; 0x03
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	4a ef       	ldi	r20, 0xFA	; 250
    1600:	54 e4       	ldi	r21, 0x44	; 68
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	f8 01       	movw	r30, r16
    160c:	80 83       	st	Z, r24
    160e:	91 83       	std	Z+1, r25	; 0x01
    1610:	a2 83       	std	Z+2, r26	; 0x02
    1612:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1614:	fe 01       	movw	r30, r28
    1616:	e3 5b       	subi	r30, 0xB3	; 179
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    162e:	88 23       	and	r24, r24
    1630:	44 f4       	brge	.+16     	; 0x1642 <LCD_displayCharacter+0xa8>
		__ticks = 1;
    1632:	fe 01       	movw	r30, r28
    1634:	e5 5b       	subi	r30, 0xB5	; 181
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	80 83       	st	Z, r24
    1640:	64 c0       	rjmp	.+200    	; 0x170a <LCD_displayCharacter+0x170>
	else if (__tmp > 65535)
    1642:	fe 01       	movw	r30, r28
    1644:	e3 5b       	subi	r30, 0xB3	; 179
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	3f ef       	ldi	r19, 0xFF	; 255
    1654:	4f e7       	ldi	r20, 0x7F	; 127
    1656:	57 e4       	ldi	r21, 0x47	; 71
    1658:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    165c:	18 16       	cp	r1, r24
    165e:	0c f0       	brlt	.+2      	; 0x1662 <LCD_displayCharacter+0xc8>
    1660:	43 c0       	rjmp	.+134    	; 0x16e8 <LCD_displayCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1662:	fe 01       	movw	r30, r28
    1664:	ef 5a       	subi	r30, 0xAF	; 175
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	60 81       	ld	r22, Z
    166a:	71 81       	ldd	r23, Z+1	; 0x01
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e2       	ldi	r20, 0x20	; 32
    1676:	51 e4       	ldi	r21, 0x41	; 65
    1678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	8e 01       	movw	r16, r28
    1682:	05 5b       	subi	r16, 0xB5	; 181
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	f8 01       	movw	r30, r16
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	80 83       	st	Z, r24
    1698:	1f c0       	rjmp	.+62     	; 0x16d8 <LCD_displayCharacter+0x13e>
    169a:	fe 01       	movw	r30, r28
    169c:	e7 5b       	subi	r30, 0xB7	; 183
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	88 ec       	ldi	r24, 0xC8	; 200
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	80 83       	st	Z, r24
    16a8:	fe 01       	movw	r30, r28
    16aa:	e7 5b       	subi	r30, 0xB7	; 183
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	80 81       	ld	r24, Z
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <LCD_displayCharacter+0x118>
    16b6:	fe 01       	movw	r30, r28
    16b8:	e7 5b       	subi	r30, 0xB7	; 183
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	91 83       	std	Z+1, r25	; 0x01
    16be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c0:	de 01       	movw	r26, r28
    16c2:	a5 5b       	subi	r26, 0xB5	; 181
    16c4:	bf 4f       	sbci	r27, 0xFF	; 255
    16c6:	fe 01       	movw	r30, r28
    16c8:	e5 5b       	subi	r30, 0xB5	; 181
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	11 96       	adiw	r26, 0x01	; 1
    16d4:	9c 93       	st	X, r25
    16d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d8:	fe 01       	movw	r30, r28
    16da:	e5 5b       	subi	r30, 0xB5	; 181
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	80 81       	ld	r24, Z
    16e0:	91 81       	ldd	r25, Z+1	; 0x01
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	d1 f6       	brne	.-76     	; 0x169a <LCD_displayCharacter+0x100>
    16e6:	27 c0       	rjmp	.+78     	; 0x1736 <LCD_displayCharacter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e8:	8e 01       	movw	r16, r28
    16ea:	05 5b       	subi	r16, 0xB5	; 181
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
    16ee:	fe 01       	movw	r30, r28
    16f0:	e3 5b       	subi	r30, 0xB3	; 179
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	82 81       	ldd	r24, Z+2	; 0x02
    16fa:	93 81       	ldd	r25, Z+3	; 0x03
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	f8 01       	movw	r30, r16
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
    170a:	de 01       	movw	r26, r28
    170c:	a9 5b       	subi	r26, 0xB9	; 185
    170e:	bf 4f       	sbci	r27, 0xFF	; 255
    1710:	fe 01       	movw	r30, r28
    1712:	e5 5b       	subi	r30, 0xB5	; 181
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	80 81       	ld	r24, Z
    1718:	91 81       	ldd	r25, Z+1	; 0x01
    171a:	8d 93       	st	X+, r24
    171c:	9c 93       	st	X, r25
    171e:	fe 01       	movw	r30, r28
    1720:	e9 5b       	subi	r30, 0xB9	; 185
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <LCD_displayCharacter+0x18e>
    172c:	fe 01       	movw	r30, r28
    172e:	e9 5b       	subi	r30, 0xB9	; 185
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
    1736:	e2 e3       	ldi	r30, 0x32	; 50
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 64       	ori	r24, 0x40	; 64
    173e:	80 83       	st	Z, r24
    1740:	fe 01       	movw	r30, r28
    1742:	ed 5b       	subi	r30, 0xBD	; 189
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a0 e8       	ldi	r26, 0x80	; 128
    174c:	bf e3       	ldi	r27, 0x3F	; 63
    174e:	80 83       	st	Z, r24
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	a2 83       	std	Z+2, r26	; 0x02
    1754:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1756:	8e 01       	movw	r16, r28
    1758:	01 5c       	subi	r16, 0xC1	; 193
    175a:	1f 4f       	sbci	r17, 0xFF	; 255
    175c:	fe 01       	movw	r30, r28
    175e:	ed 5b       	subi	r30, 0xBD	; 189
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a ef       	ldi	r20, 0xFA	; 250
    1770:	54 e4       	ldi	r21, 0x44	; 68
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	f8 01       	movw	r30, r16
    177c:	80 83       	st	Z, r24
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	a2 83       	std	Z+2, r26	; 0x02
    1782:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1784:	fe 01       	movw	r30, r28
    1786:	ff 96       	adiw	r30, 0x3f	; 63
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e8       	ldi	r20, 0x80	; 128
    1796:	5f e3       	ldi	r21, 0x3F	; 63
    1798:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    179c:	88 23       	and	r24, r24
    179e:	2c f4       	brge	.+10     	; 0x17aa <LCD_displayCharacter+0x210>
		__ticks = 1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9e af       	std	Y+62, r25	; 0x3e
    17a6:	8d af       	std	Y+61, r24	; 0x3d
    17a8:	46 c0       	rjmp	.+140    	; 0x1836 <LCD_displayCharacter+0x29c>
	else if (__tmp > 65535)
    17aa:	fe 01       	movw	r30, r28
    17ac:	ff 96       	adiw	r30, 0x3f	; 63
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	3f ef       	ldi	r19, 0xFF	; 255
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	57 e4       	ldi	r21, 0x47	; 71
    17be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	64 f5       	brge	.+88     	; 0x181e <LCD_displayCharacter+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c6:	fe 01       	movw	r30, r28
    17c8:	ed 5b       	subi	r30, 0xBD	; 189
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	93 81       	ldd	r25, Z+3	; 0x03
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e af       	std	Y+62, r25	; 0x3e
    17f2:	8d af       	std	Y+61, r24	; 0x3d
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <LCD_displayCharacter+0x27a>
    17f6:	88 ec       	ldi	r24, 0xC8	; 200
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9c af       	std	Y+60, r25	; 0x3c
    17fc:	8b af       	std	Y+59, r24	; 0x3b
    17fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    1800:	9c ad       	ldd	r25, Y+60	; 0x3c
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_displayCharacter+0x268>
    1806:	9c af       	std	Y+60, r25	; 0x3c
    1808:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	8d ad       	ldd	r24, Y+61	; 0x3d
    180c:	9e ad       	ldd	r25, Y+62	; 0x3e
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9e af       	std	Y+62, r25	; 0x3e
    1812:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	8d ad       	ldd	r24, Y+61	; 0x3d
    1816:	9e ad       	ldd	r25, Y+62	; 0x3e
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <LCD_displayCharacter+0x25c>
    181c:	16 c0       	rjmp	.+44     	; 0x184a <LCD_displayCharacter+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	fe 01       	movw	r30, r28
    1820:	ff 96       	adiw	r30, 0x3f	; 63
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9e af       	std	Y+62, r25	; 0x3e
    1834:	8d af       	std	Y+61, r24	; 0x3d
    1836:	8d ad       	ldd	r24, Y+61	; 0x3d
    1838:	9e ad       	ldd	r25, Y+62	; 0x3e
    183a:	9a af       	std	Y+58, r25	; 0x3a
    183c:	89 af       	std	Y+57, r24	; 0x39
    183e:	89 ad       	ldd	r24, Y+57	; 0x39
    1840:	9a ad       	ldd	r25, Y+58	; 0x3a
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <LCD_displayCharacter+0x2a8>
    1846:	9a af       	std	Y+58, r25	; 0x3a
    1848:	89 af       	std	Y+57, r24	; 0x39
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( data  & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT=( (data >>4 ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    184a:	a8 e3       	ldi	r26, 0x38	; 56
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	fe 01       	movw	r30, r28
    1850:	eb 5a       	subi	r30, 0xAB	; 171
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	82 95       	swap	r24
    1858:	8f 70       	andi	r24, 0x0F	; 15
    185a:	98 2f       	mov	r25, r24
    185c:	e8 e3       	ldi	r30, 0x38	; 56
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 7f       	andi	r24, 0xF0	; 240
    1864:	89 2b       	or	r24, r25
    1866:	8c 93       	st	X, r24
#endif

	E = CLEAR;	 /* close Enable to prevent data share between LCD and AVR */
    1868:	e2 e3       	ldi	r30, 0x32	; 50
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	8f 7b       	andi	r24, 0xBF	; 191
    1870:	80 83       	st	Z, r24
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a0 e8       	ldi	r26, 0x80	; 128
    1878:	bf e3       	ldi	r27, 0x3F	; 63
    187a:	8d ab       	std	Y+53, r24	; 0x35
    187c:	9e ab       	std	Y+54, r25	; 0x36
    187e:	af ab       	std	Y+55, r26	; 0x37
    1880:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1882:	6d a9       	ldd	r22, Y+53	; 0x35
    1884:	7e a9       	ldd	r23, Y+54	; 0x36
    1886:	8f a9       	ldd	r24, Y+55	; 0x37
    1888:	98 ad       	ldd	r25, Y+56	; 0x38
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a ef       	ldi	r20, 0xFA	; 250
    1890:	54 e4       	ldi	r21, 0x44	; 68
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	89 ab       	std	Y+49, r24	; 0x31
    189c:	9a ab       	std	Y+50, r25	; 0x32
    189e:	ab ab       	std	Y+51, r26	; 0x33
    18a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18a2:	69 a9       	ldd	r22, Y+49	; 0x31
    18a4:	7a a9       	ldd	r23, Y+50	; 0x32
    18a6:	8b a9       	ldd	r24, Y+51	; 0x33
    18a8:	9c a9       	ldd	r25, Y+52	; 0x34
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <LCD_displayCharacter+0x32a>
		__ticks = 1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	98 ab       	std	Y+48, r25	; 0x30
    18c0:	8f a7       	std	Y+47, r24	; 0x2f
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <LCD_displayCharacter+0x3a8>
	else if (__tmp > 65535)
    18c4:	69 a9       	ldd	r22, Y+49	; 0x31
    18c6:	7a a9       	ldd	r23, Y+50	; 0x32
    18c8:	8b a9       	ldd	r24, Y+51	; 0x33
    18ca:	9c a9       	ldd	r25, Y+52	; 0x34
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	3f ef       	ldi	r19, 0xFF	; 255
    18d0:	4f e7       	ldi	r20, 0x7F	; 127
    18d2:	57 e4       	ldi	r21, 0x47	; 71
    18d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18d8:	18 16       	cp	r1, r24
    18da:	4c f5       	brge	.+82     	; 0x192e <LCD_displayCharacter+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18dc:	6d a9       	ldd	r22, Y+53	; 0x35
    18de:	7e a9       	ldd	r23, Y+54	; 0x36
    18e0:	8f a9       	ldd	r24, Y+55	; 0x37
    18e2:	98 ad       	ldd	r25, Y+56	; 0x38
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e2       	ldi	r20, 0x20	; 32
    18ea:	51 e4       	ldi	r21, 0x41	; 65
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	98 ab       	std	Y+48, r25	; 0x30
    1902:	8f a7       	std	Y+47, r24	; 0x2f
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <LCD_displayCharacter+0x38a>
    1906:	88 ec       	ldi	r24, 0xC8	; 200
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9e a7       	std	Y+46, r25	; 0x2e
    190c:	8d a7       	std	Y+45, r24	; 0x2d
    190e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1910:	9e a5       	ldd	r25, Y+46	; 0x2e
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	f1 f7       	brne	.-4      	; 0x1912 <LCD_displayCharacter+0x378>
    1916:	9e a7       	std	Y+46, r25	; 0x2e
    1918:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191a:	8f a5       	ldd	r24, Y+47	; 0x2f
    191c:	98 a9       	ldd	r25, Y+48	; 0x30
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	98 ab       	std	Y+48, r25	; 0x30
    1922:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	8f a5       	ldd	r24, Y+47	; 0x2f
    1926:	98 a9       	ldd	r25, Y+48	; 0x30
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	69 f7       	brne	.-38     	; 0x1906 <LCD_displayCharacter+0x36c>
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <LCD_displayCharacter+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192e:	69 a9       	ldd	r22, Y+49	; 0x31
    1930:	7a a9       	ldd	r23, Y+50	; 0x32
    1932:	8b a9       	ldd	r24, Y+51	; 0x33
    1934:	9c a9       	ldd	r25, Y+52	; 0x34
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	98 ab       	std	Y+48, r25	; 0x30
    1940:	8f a7       	std	Y+47, r24	; 0x2f
    1942:	8f a5       	ldd	r24, Y+47	; 0x2f
    1944:	98 a9       	ldd	r25, Y+48	; 0x30
    1946:	9c a7       	std	Y+44, r25	; 0x2c
    1948:	8b a7       	std	Y+43, r24	; 0x2b
    194a:	8b a5       	ldd	r24, Y+43	; 0x2b
    194c:	9c a5       	ldd	r25, Y+44	; 0x2c
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <LCD_displayCharacter+0x3b4>
    1952:	9c a7       	std	Y+44, r25	; 0x2c
    1954:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	E = SET;		/* open Enable again to send last 4 bits of DATA */
    1956:	e2 e3       	ldi	r30, 0x32	; 50
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 64       	ori	r24, 0x40	; 64
    195e:	80 83       	st	Z, r24
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	a0 e8       	ldi	r26, 0x80	; 128
    1966:	bf e3       	ldi	r27, 0x3F	; 63
    1968:	8f a3       	std	Y+39, r24	; 0x27
    196a:	98 a7       	std	Y+40, r25	; 0x28
    196c:	a9 a7       	std	Y+41, r26	; 0x29
    196e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1970:	6f a1       	ldd	r22, Y+39	; 0x27
    1972:	78 a5       	ldd	r23, Y+40	; 0x28
    1974:	89 a5       	ldd	r24, Y+41	; 0x29
    1976:	9a a5       	ldd	r25, Y+42	; 0x2a
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	4a ef       	ldi	r20, 0xFA	; 250
    197e:	54 e4       	ldi	r21, 0x44	; 68
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	8b a3       	std	Y+35, r24	; 0x23
    198a:	9c a3       	std	Y+36, r25	; 0x24
    198c:	ad a3       	std	Y+37, r26	; 0x25
    198e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1990:	6b a1       	ldd	r22, Y+35	; 0x23
    1992:	7c a1       	ldd	r23, Y+36	; 0x24
    1994:	8d a1       	ldd	r24, Y+37	; 0x25
    1996:	9e a1       	ldd	r25, Y+38	; 0x26
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e8       	ldi	r20, 0x80	; 128
    199e:	5f e3       	ldi	r21, 0x3F	; 63
    19a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19a4:	88 23       	and	r24, r24
    19a6:	2c f4       	brge	.+10     	; 0x19b2 <LCD_displayCharacter+0x418>
		__ticks = 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9a a3       	std	Y+34, r25	; 0x22
    19ae:	89 a3       	std	Y+33, r24	; 0x21
    19b0:	3f c0       	rjmp	.+126    	; 0x1a30 <LCD_displayCharacter+0x496>
	else if (__tmp > 65535)
    19b2:	6b a1       	ldd	r22, Y+35	; 0x23
    19b4:	7c a1       	ldd	r23, Y+36	; 0x24
    19b6:	8d a1       	ldd	r24, Y+37	; 0x25
    19b8:	9e a1       	ldd	r25, Y+38	; 0x26
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	3f ef       	ldi	r19, 0xFF	; 255
    19be:	4f e7       	ldi	r20, 0x7F	; 127
    19c0:	57 e4       	ldi	r21, 0x47	; 71
    19c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19c6:	18 16       	cp	r1, r24
    19c8:	4c f5       	brge	.+82     	; 0x1a1c <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ca:	6f a1       	ldd	r22, Y+39	; 0x27
    19cc:	78 a5       	ldd	r23, Y+40	; 0x28
    19ce:	89 a5       	ldd	r24, Y+41	; 0x29
    19d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e2       	ldi	r20, 0x20	; 32
    19d8:	51 e4       	ldi	r21, 0x41	; 65
    19da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	bc 01       	movw	r22, r24
    19e4:	cd 01       	movw	r24, r26
    19e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9a a3       	std	Y+34, r25	; 0x22
    19f0:	89 a3       	std	Y+33, r24	; 0x21
    19f2:	0f c0       	rjmp	.+30     	; 0x1a12 <LCD_displayCharacter+0x478>
    19f4:	88 ec       	ldi	r24, 0xC8	; 200
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	98 a3       	std	Y+32, r25	; 0x20
    19fa:	8f 8f       	std	Y+31, r24	; 0x1f
    19fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <LCD_displayCharacter+0x466>
    1a04:	98 a3       	std	Y+32, r25	; 0x20
    1a06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a08:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	9a a3       	std	Y+34, r25	; 0x22
    1a10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a12:	89 a1       	ldd	r24, Y+33	; 0x21
    1a14:	9a a1       	ldd	r25, Y+34	; 0x22
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	69 f7       	brne	.-38     	; 0x19f4 <LCD_displayCharacter+0x45a>
    1a1a:	14 c0       	rjmp	.+40     	; 0x1a44 <LCD_displayCharacter+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a20:	8d a1       	ldd	r24, Y+37	; 0x25
    1a22:	9e a1       	ldd	r25, Y+38	; 0x26
    1a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9a a3       	std	Y+34, r25	; 0x22
    1a2e:	89 a3       	std	Y+33, r24	; 0x21
    1a30:	89 a1       	ldd	r24, Y+33	; 0x21
    1a32:	9a a1       	ldd	r25, Y+34	; 0x22
    1a34:	9e 8f       	std	Y+30, r25	; 0x1e
    1a36:	8d 8f       	std	Y+29, r24	; 0x1d
    1a38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_displayCharacter+0x4a2>
    1a40:	9e 8f       	std	Y+30, r25	; 0x1e
    1a42:	8d 8f       	std	Y+29, r24	; 0x1d
	/* send the Least 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( (data << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif

#ifdef LOWER_MODE_BITS
	DATA_OUT=( (data ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    1a44:	a8 e3       	ldi	r26, 0x38	; 56
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	fe 01       	movw	r30, r28
    1a4a:	eb 5a       	subi	r30, 0xAB	; 171
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	98 2f       	mov	r25, r24
    1a52:	9f 70       	andi	r25, 0x0F	; 15
    1a54:	e8 e3       	ldi	r30, 0x38	; 56
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	80 7f       	andi	r24, 0xF0	; 240
    1a5c:	89 2b       	or	r24, r25
    1a5e:	8c 93       	st	X, r24
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 e8       	ldi	r26, 0x80	; 128
    1a66:	bf e3       	ldi	r27, 0x3F	; 63
    1a68:	89 8f       	std	Y+25, r24	; 0x19
    1a6a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a6c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a70:	69 8d       	ldd	r22, Y+25	; 0x19
    1a72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	4a ef       	ldi	r20, 0xFA	; 250
    1a7e:	54 e4       	ldi	r21, 0x44	; 68
    1a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	8d 8b       	std	Y+21, r24	; 0x15
    1a8a:	9e 8b       	std	Y+22, r25	; 0x16
    1a8c:	af 8b       	std	Y+23, r26	; 0x17
    1a8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a90:	6d 89       	ldd	r22, Y+21	; 0x15
    1a92:	7e 89       	ldd	r23, Y+22	; 0x16
    1a94:	8f 89       	ldd	r24, Y+23	; 0x17
    1a96:	98 8d       	ldd	r25, Y+24	; 0x18
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	2c f4       	brge	.+10     	; 0x1ab2 <LCD_displayCharacter+0x518>
		__ticks = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9c 8b       	std	Y+20, r25	; 0x14
    1aae:	8b 8b       	std	Y+19, r24	; 0x13
    1ab0:	3f c0       	rjmp	.+126    	; 0x1b30 <LCD_displayCharacter+0x596>
	else if (__tmp > 65535)
    1ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	3f ef       	ldi	r19, 0xFF	; 255
    1abe:	4f e7       	ldi	r20, 0x7F	; 127
    1ac0:	57 e4       	ldi	r21, 0x47	; 71
    1ac2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac6:	18 16       	cp	r1, r24
    1ac8:	4c f5       	brge	.+82     	; 0x1b1c <LCD_displayCharacter+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aca:	69 8d       	ldd	r22, Y+25	; 0x19
    1acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e2       	ldi	r20, 0x20	; 32
    1ad8:	51 e4       	ldi	r21, 0x41	; 65
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	9c 8b       	std	Y+20, r25	; 0x14
    1af0:	8b 8b       	std	Y+19, r24	; 0x13
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <LCD_displayCharacter+0x578>
    1af4:	88 ec       	ldi	r24, 0xC8	; 200
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9a 8b       	std	Y+18, r25	; 0x12
    1afa:	89 8b       	std	Y+17, r24	; 0x11
    1afc:	89 89       	ldd	r24, Y+17	; 0x11
    1afe:	9a 89       	ldd	r25, Y+18	; 0x12
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <LCD_displayCharacter+0x566>
    1b04:	9a 8b       	std	Y+18, r25	; 0x12
    1b06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	9c 8b       	std	Y+20, r25	; 0x14
    1b10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b12:	8b 89       	ldd	r24, Y+19	; 0x13
    1b14:	9c 89       	ldd	r25, Y+20	; 0x14
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	69 f7       	brne	.-38     	; 0x1af4 <LCD_displayCharacter+0x55a>
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <LCD_displayCharacter+0x5aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b20:	8f 89       	ldd	r24, Y+23	; 0x17
    1b22:	98 8d       	ldd	r25, Y+24	; 0x18
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9c 8b       	std	Y+20, r25	; 0x14
    1b2e:	8b 8b       	std	Y+19, r24	; 0x13
    1b30:	8b 89       	ldd	r24, Y+19	; 0x13
    1b32:	9c 89       	ldd	r25, Y+20	; 0x14
    1b34:	98 8b       	std	Y+16, r25	; 0x10
    1b36:	8f 87       	std	Y+15, r24	; 0x0f
    1b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3a:	98 89       	ldd	r25, Y+16	; 0x10
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <LCD_displayCharacter+0x5a2>
    1b40:	98 8b       	std	Y+16, r25	; 0x10
    1b42:	8f 87       	std	Y+15, r24	; 0x0f
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    1b44:	e2 e3       	ldi	r30, 0x32	; 50
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	8f 7b       	andi	r24, 0xBF	; 191
    1b4c:	80 83       	st	Z, r24
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e8       	ldi	r26, 0x80	; 128
    1b54:	bf e3       	ldi	r27, 0x3F	; 63
    1b56:	8b 87       	std	Y+11, r24	; 0x0b
    1b58:	9c 87       	std	Y+12, r25	; 0x0c
    1b5a:	ad 87       	std	Y+13, r26	; 0x0d
    1b5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	4a ef       	ldi	r20, 0xFA	; 250
    1b6c:	54 e4       	ldi	r21, 0x44	; 68
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8f 83       	std	Y+7, r24	; 0x07
    1b78:	98 87       	std	Y+8, r25	; 0x08
    1b7a:	a9 87       	std	Y+9, r26	; 0x09
    1b7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <LCD_displayCharacter+0x606>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	3f c0       	rjmp	.+126    	; 0x1c1e <LCD_displayCharacter+0x684>
	else if (__tmp > 65535)
    1ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba2:	78 85       	ldd	r23, Y+8	; 0x08
    1ba4:	89 85       	ldd	r24, Y+9	; 0x09
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <LCD_displayCharacter+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e2       	ldi	r20, 0x20	; 32
    1bc6:	51 e4       	ldi	r21, 0x41	; 65
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <LCD_displayCharacter+0x666>
    1be2:	88 ec       	ldi	r24, 0xC8	; 200
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9c 83       	std	Y+4, r25	; 0x04
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD_displayCharacter+0x654>
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	69 f7       	brne	.-38     	; 0x1be2 <LCD_displayCharacter+0x648>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <LCD_displayCharacter+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_displayCharacter+0x690>
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
}
    1c32:	cb 5a       	subi	r28, 0xAB	; 171
    1c34:	df 4f       	sbci	r29, 0xFF	; 255
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	08 95       	ret

00001c4a <LCD_displayString>:

/*
 * Function responsible for Display more One character on LCD
 */
void LCD_displayString(const sint8 *Str) {
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <LCD_displayString+0x6>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	0a c0       	rjmp	.+20     	; 0x1c6e <LCD_displayString+0x24>
	while (*Str != '\0') {
		LCD_displayCharacter(*Str);
    1c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5e:	80 81       	ld	r24, Z
    1c60:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayCharacter>
		Str++;
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	9a 81       	ldd	r25, Y+2	; 0x02
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01

/*
 * Function responsible for Display more One character on LCD
 */
void LCD_displayString(const sint8 *Str) {
	while (*Str != '\0') {
    1c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c70:	fa 81       	ldd	r31, Y+2	; 0x02
    1c72:	80 81       	ld	r24, Z
    1c74:	88 23       	and	r24, r24
    1c76:	89 f7       	brne	.-30     	; 0x1c5a <LCD_displayString+0x10>
	 }
	 ************************************************************/

	return;

}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <LCD_init>:

/*
 * Function responsible to initialize LCD pins and mode .... etc .
 */
void LCD_init(void) {
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
	RS_DIR = 1; /* select RS pin output pin */
    1c96:	e1 e3       	ldi	r30, 0x31	; 49
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	80 61       	ori	r24, 0x10	; 16
    1c9e:	80 83       	st	Z, r24
	RW_DIR = 1; /* select RW pin output pin */
    1ca0:	e1 e3       	ldi	r30, 0x31	; 49
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	80 62       	ori	r24, 0x20	; 32
    1ca8:	80 83       	st	Z, r24
	E_DIR = 1; /* select Enable pin output pin */
    1caa:	e1 e3       	ldi	r30, 0x31	; 49
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	80 64       	ori	r24, 0x40	; 64
    1cb2:	80 83       	st	Z, r24
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

#if (DATA_MODE == 4)
	/* LCD Configuration Mode of number of DATA line = 4 lines */
	LCD_sendCommand(FOUR_BITS_MODE); /* initialize LCD in 4-bit mode */
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    1cba:	88 e2       	ldi	r24, 0x28	; 40
    1cbc:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_sendCommand>
#ifdef UPPER_MODE_BITS
	DATA_DIR |= 0xF0; /* select highest 4 bits as a output pins */
#endif

#ifdef LOWER_MODE_BITS
	DATA_DIR |= 0x0F;	/* select first 4 bits as a output pins */
    1cc0:	a7 e3       	ldi	r26, 0x37	; 55
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e7 e3       	ldi	r30, 0x37	; 55
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	8f 60       	ori	r24, 0x0F	; 15
    1ccc:	8c 93       	st	X, r24
#endif
#endif
	LCD_sendCommand(CURSOR_OFF); /* hide cursor from LCD */
    1cce:	8c e0       	ldi	r24, 0x0C	; 12
    1cd0:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_sendCommand>
	LCD_sendCommand(AUTO_INCREMENT); /* hide cursor from LCD */
    1cd4:	86 e0       	ldi	r24, 0x06	; 6
    1cd6:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_sendCommand>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a0 e0       	ldi	r26, 0x00	; 0
    1ce6:	b0 e4       	ldi	r27, 0x40	; 64
    1ce8:	8b 87       	std	Y+11, r24	; 0x0b
    1cea:	9c 87       	std	Y+12, r25	; 0x0c
    1cec:	ad 87       	std	Y+13, r26	; 0x0d
    1cee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	4a ef       	ldi	r20, 0xFA	; 250
    1cfe:	54 e4       	ldi	r21, 0x44	; 68
    1d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	8f 83       	std	Y+7, r24	; 0x07
    1d0a:	98 87       	std	Y+8, r25	; 0x08
    1d0c:	a9 87       	std	Y+9, r26	; 0x09
    1d0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	2c f4       	brge	.+10     	; 0x1d32 <LCD_init+0xb0>
		__ticks = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	3f c0       	rjmp	.+126    	; 0x1db0 <LCD_init+0x12e>
	else if (__tmp > 65535)
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	3f ef       	ldi	r19, 0xFF	; 255
    1d3e:	4f e7       	ldi	r20, 0x7F	; 127
    1d40:	57 e4       	ldi	r21, 0x47	; 71
    1d42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d46:	18 16       	cp	r1, r24
    1d48:	4c f5       	brge	.+82     	; 0x1d9c <LCD_init+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e2       	ldi	r20, 0x20	; 32
    1d58:	51 e4       	ldi	r21, 0x41	; 65
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <LCD_init+0x110>
    1d74:	88 ec       	ldi	r24, 0xC8	; 200
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9c 83       	std	Y+4, r25	; 0x04
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <LCD_init+0xfe>
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	69 f7       	brne	.-38     	; 0x1d74 <LCD_init+0xf2>
    1d9a:	14 c0       	rjmp	.+40     	; 0x1dc4 <LCD_init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	9a 83       	std	Y+2, r25	; 0x02
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_init+0x13a>
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    1dc4:	80 e8       	ldi	r24, 0x80	; 128
    1dc6:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_sendCommand>
	return;
}
    1dca:	2e 96       	adiw	r28, 0x0e	; 14
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <LCD_clearScreen>:

/*
 * Function responsible to send clear command to LCD
 */
void LCD_clearScreen(void) {
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_sendCommand>
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    1dea:	80 e8       	ldi	r24, 0x80	; 128
    1dec:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_sendCommand>
	return;
}
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <LCD_displayStringRowColumn>:

/*
 * Function responsible for Display more One character on LCD & select place on screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const sint8 *Str) {
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <LCD_displayStringRowColumn+0x6>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <LCD_displayStringRowColumn+0x8>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	6a 83       	std	Y+2, r22	; 0x02
    1e06:	5c 83       	std	Y+4, r21	; 0x04
    1e08:	4b 83       	std	Y+3, r20	; 0x03
	/* call LCD_goToRowColumn function to select cursor location */
	LCD_goToRowColumn(row, col);
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	6a 81       	ldd	r22, Y+2	; 0x02
    1e0e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_goToRowColumn>
	/* call LCD_displayString function to display string on LCD */
	LCD_displayString(Str);
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	9c 81       	ldd	r25, Y+4	; 0x04
    1e16:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_displayString>
	return;
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <LCD_goToRowColumn>:

/*
 * Function responsible to select place on screen
 */
void LCD_goToRowColumn(uint8 row, uint8 col) {
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <LCD_goToRowColumn+0x6>
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <LCD_goToRowColumn+0x8>
    1e30:	0f 92       	push	r0
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	8a 83       	std	Y+2, r24	; 0x02
    1e38:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch (row) {
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	3d 83       	std	Y+5, r19	; 0x05
    1e42:	2c 83       	std	Y+4, r18	; 0x04
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	9d 81       	ldd	r25, Y+5	; 0x05
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	c9 f0       	breq	.+50     	; 0x1e80 <LCD_goToRowColumn+0x58>
    1e4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e50:	3d 81       	ldd	r19, Y+5	; 0x05
    1e52:	22 30       	cpi	r18, 0x02	; 2
    1e54:	31 05       	cpc	r19, r1
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <LCD_goToRowColumn+0x3a>
    1e58:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	61 f0       	breq	.+24     	; 0x1e78 <LCD_goToRowColumn+0x50>
    1e60:	1a c0       	rjmp	.+52     	; 0x1e96 <LCD_goToRowColumn+0x6e>
    1e62:	2c 81       	ldd	r18, Y+4	; 0x04
    1e64:	3d 81       	ldd	r19, Y+5	; 0x05
    1e66:	22 30       	cpi	r18, 0x02	; 2
    1e68:	31 05       	cpc	r19, r1
    1e6a:	71 f0       	breq	.+28     	; 0x1e88 <LCD_goToRowColumn+0x60>
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e70:	83 30       	cpi	r24, 0x03	; 3
    1e72:	91 05       	cpc	r25, r1
    1e74:	69 f0       	breq	.+26     	; 0x1e90 <LCD_goToRowColumn+0x68>
    1e76:	0f c0       	rjmp	.+30     	; 0x1e96 <LCD_goToRowColumn+0x6e>
	case 0:
		address =0x80 | col; /* first address in first line in LCD = 0x00 */
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	80 68       	ori	r24, 0x80	; 128
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	0b c0       	rjmp	.+22     	; 0x1e96 <LCD_goToRowColumn+0x6e>
		break;
	case 1:
		address = col | 0xC0; /* first address in second line in LCD = 0x40 */
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	80 6c       	ori	r24, 0xC0	; 192
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	07 c0       	rjmp	.+14     	; 0x1e96 <LCD_goToRowColumn+0x6e>
		break;
	case 2:
		address = col | 0x10; /* first address in 3th line in LCD = 0x10 */
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	80 61       	ori	r24, 0x10	; 16
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	03 c0       	rjmp	.+6      	; 0x1e96 <LCD_goToRowColumn+0x6e>
		break;
	case 3:
		address = col | 0x50; /* first address in 4th line in LCD = 0x50 */
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	80 65       	ori	r24, 0x50	; 80
    1e94:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0x80+Address */
	LCD_sendCommand(address | CURSOR_HOME_LOCATION);
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	80 68       	ori	r24, 0x80	; 128
    1e9a:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_sendCommand>
}
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <LCD_intgerToString>:

/*
 * Function that transform number to string and display to LCD
 */
void LCD_intgerToString(sint32 data) {
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	6c 97       	sbiw	r28, 0x1c	; 28
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	69 8f       	std	Y+25, r22	; 0x19
    1ec4:	7a 8f       	std	Y+26, r23	; 0x1a
    1ec6:	8b 8f       	std	Y+27, r24	; 0x1b
    1ec8:	9c 8f       	std	Y+28, r25	; 0x1c
	char buff[24]; /* String to hold the ASCII result */
	ltoa(data, buff, 10); /* 10 for decimal */
    1eca:	89 8d       	ldd	r24, Y+25	; 0x19
    1ecc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ece:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1ed0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	9e 01       	movw	r18, r28
    1ed8:	2f 5f       	subi	r18, 0xFF	; 255
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	a9 01       	movw	r20, r18
    1ede:	2a e0       	ldi	r18, 0x0A	; 10
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <ltoa>
	LCD_displayString(buff);
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	01 96       	adiw	r24, 0x01	; 1
    1eea:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_displayString>

}
    1eee:	6c 96       	adiw	r28, 0x1c	; 28
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <LCD_floatToString>:

void LCD_floatToString(float32 data) {
    1f00:	ef 92       	push	r14
    1f02:	ff 92       	push	r15
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	6e 97       	sbiw	r28, 0x1e	; 30
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	69 8f       	std	Y+25, r22	; 0x19
    1f1e:	7a 8f       	std	Y+26, r23	; 0x1a
    1f20:	8b 8f       	std	Y+27, r24	; 0x1b
    1f22:	9c 8f       	std	Y+28, r25	; 0x1c
	y=data*1000;
    1f24:	69 8d       	ldd	r22, Y+25	; 0x19
    1f26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a e7       	ldi	r20, 0x7A	; 122
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	80 93 ba 05 	sts	0x05BA, r24
    1f40:	90 93 bb 05 	sts	0x05BB, r25
    1f44:	a0 93 bc 05 	sts	0x05BC, r26
    1f48:	b0 93 bd 05 	sts	0x05BD, r27
	y=y-((sint32)data*1000);
    1f4c:	e0 90 ba 05 	lds	r14, 0x05BA
    1f50:	f0 90 bb 05 	lds	r15, 0x05BB
    1f54:	00 91 bc 05 	lds	r16, 0x05BC
    1f58:	10 91 bd 05 	lds	r17, 0x05BD
    1f5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f64:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	28 ee       	ldi	r18, 0xE8	; 232
    1f6e:	33 e0       	ldi	r19, 0x03	; 3
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__mulsi3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1f88:	9b 01       	movw	r18, r22
    1f8a:	ac 01       	movw	r20, r24
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	b7 01       	movw	r22, r14
    1f90:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	80 93 ba 05 	sts	0x05BA, r24
    1f9c:	90 93 bb 05 	sts	0x05BB, r25
    1fa0:	a0 93 bc 05 	sts	0x05BC, r26
    1fa4:	b0 93 bd 05 	sts	0x05BD, r27
	char buff[24]; /* String to hold the ASCII result */
	ltoa((sint32)data, buff, 10); /* 10 for decimal */
    1fa8:	69 8d       	ldd	r22, Y+25	; 0x19
    1faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb0:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	9e 01       	movw	r18, r28
    1fbe:	2f 5f       	subi	r18, 0xFF	; 255
    1fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc2:	a9 01       	movw	r20, r18
    1fc4:	2a e0       	ldi	r18, 0x0A	; 10
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <ltoa>
	LCD_displayString(buff);
    1fcc:	ce 01       	movw	r24, r28
    1fce:	01 96       	adiw	r24, 0x01	; 1
    1fd0:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_displayString>
	LCD_displayCharacter('.');
    1fd4:	8e e2       	ldi	r24, 0x2E	; 46
    1fd6:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayCharacter>
	ltoa((sint32)(abs(y)), buff, 10); /* 10 for decimal */
    1fda:	80 91 ba 05 	lds	r24, 0x05BA
    1fde:	90 91 bb 05 	lds	r25, 0x05BB
    1fe2:	a0 91 bc 05 	lds	r26, 0x05BC
    1fe6:	b0 91 bd 05 	lds	r27, 0x05BD
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ff8:	8d 8f       	std	Y+29, r24	; 0x1d
    1ffa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1ffc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1ffe:	33 23       	and	r19, r19
    2000:	3c f4       	brge	.+14     	; 0x2010 <LCD_floatToString+0x110>
    2002:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2004:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2006:	90 95       	com	r25
    2008:	81 95       	neg	r24
    200a:	9f 4f       	sbci	r25, 0xFF	; 255
    200c:	9e 8f       	std	Y+30, r25	; 0x1e
    200e:	8d 8f       	std	Y+29, r24	; 0x1d
    2010:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2012:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2014:	c9 01       	movw	r24, r18
    2016:	aa 27       	eor	r26, r26
    2018:	97 fd       	sbrc	r25, 7
    201a:	a0 95       	com	r26
    201c:	ba 2f       	mov	r27, r26
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	9e 01       	movw	r18, r28
    2024:	2f 5f       	subi	r18, 0xFF	; 255
    2026:	3f 4f       	sbci	r19, 0xFF	; 255
    2028:	a9 01       	movw	r20, r18
    202a:	2a e0       	ldi	r18, 0x0A	; 10
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <ltoa>
	LCD_displayString(buff);
    2032:	ce 01       	movw	r24, r28
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_displayString>
}
    203a:	6e 96       	adiw	r28, 0x1e	; 30
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	08 95       	ret

00002054 <LCD_creatCustomChar>:

/*
* Function that Create Custom Character in CGRAM
*/
void LCD_creatCustomChar(unsigned char loc, unsigned char *msg) {
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	00 d0       	rcall	.+0      	; 0x205a <LCD_creatCustomChar+0x6>
    205a:	00 d0       	rcall	.+0      	; 0x205c <LCD_creatCustomChar+0x8>
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	8a 83       	std	Y+2, r24	; 0x02
    2062:	7c 83       	std	Y+4, r23	; 0x04
    2064:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char i;
	if (loc < 8) {
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	88 30       	cpi	r24, 0x08	; 8
    206a:	f8 f4       	brcc	.+62     	; 0x20aa <LCD_creatCustomChar+0x56>
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	80 64       	ori	r24, 0x40	; 64
    2080:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_sendCommand>
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    2084:	19 82       	std	Y+1, r1	; 0x01
    2086:	0e c0       	rjmp	.+28     	; 0x20a4 <LCD_creatCustomChar+0x50>
			LCD_displayCustomChar(msg[i]);
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	fc 01       	movw	r30, r24
    2094:	e2 0f       	add	r30, r18
    2096:	f3 1f       	adc	r31, r19
    2098:	80 81       	ld	r24, Z
    209a:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayCustomChar>
void LCD_creatCustomChar(unsigned char loc, unsigned char *msg) {
	unsigned char i;
	if (loc < 8) {
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	8f 5f       	subi	r24, 0xFF	; 255
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	88 30       	cpi	r24, 0x08	; 8
    20a8:	78 f3       	brcs	.-34     	; 0x2088 <LCD_creatCustomChar+0x34>
			LCD_displayCustomChar(msg[i]);
		}
	}
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <LCD_displayCustomChar>:

/*
* Function that Display Custom Character in CGRAM
*/
void LCD_displayCustomChar(unsigned char char_data) /* LCD data write function */
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	a7 97       	sbiw	r28, 0x27	; 39
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	8f a3       	std	Y+39, r24	; 0x27
	DATA_OUT = char_data;
    20ce:	e8 e3       	ldi	r30, 0x38	; 56
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	8f a1       	ldd	r24, Y+39	; 0x27
    20d4:	80 83       	st	Z, r24
	RS = 1;/* RS=1 Data reg. */
    20d6:	e2 e3       	ldi	r30, 0x32	; 50
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	80 61       	ori	r24, 0x10	; 16
    20de:	80 83       	st	Z, r24
	RW = 0; /* RW=0 write operation */
    20e0:	e2 e3       	ldi	r30, 0x32	; 50
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	8f 7d       	andi	r24, 0xDF	; 223
    20e8:	80 83       	st	Z, r24
	E = 1; /* Enable Pulse */
    20ea:	e2 e3       	ldi	r30, 0x32	; 50
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	80 64       	ori	r24, 0x40	; 64
    20f2:	80 83       	st	Z, r24
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 e8       	ldi	r26, 0x80	; 128
    20fa:	bf e3       	ldi	r27, 0x3F	; 63
    20fc:	8b a3       	std	Y+35, r24	; 0x23
    20fe:	9c a3       	std	Y+36, r25	; 0x24
    2100:	ad a3       	std	Y+37, r26	; 0x25
    2102:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2104:	6b a1       	ldd	r22, Y+35	; 0x23
    2106:	7c a1       	ldd	r23, Y+36	; 0x24
    2108:	8d a1       	ldd	r24, Y+37	; 0x25
    210a:	9e a1       	ldd	r25, Y+38	; 0x26
    210c:	2b ea       	ldi	r18, 0xAB	; 171
    210e:	3a ea       	ldi	r19, 0xAA	; 170
    2110:	4a e2       	ldi	r20, 0x2A	; 42
    2112:	50 e4       	ldi	r21, 0x40	; 64
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8f 8f       	std	Y+31, r24	; 0x1f
    211e:	98 a3       	std	Y+32, r25	; 0x20
    2120:	a9 a3       	std	Y+33, r26	; 0x21
    2122:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2124:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2126:	78 a1       	ldd	r23, Y+32	; 0x20
    2128:	89 a1       	ldd	r24, Y+33	; 0x21
    212a:	9a a1       	ldd	r25, Y+34	; 0x22
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	1c f4       	brge	.+6      	; 0x2142 <LCD_displayCustomChar+0x8a>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	8e 8f       	std	Y+30, r24	; 0x1e
    2140:	91 c0       	rjmp	.+290    	; 0x2264 <LCD_displayCustomChar+0x1ac>
	else if (__tmp > 255)
    2142:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2144:	78 a1       	ldd	r23, Y+32	; 0x20
    2146:	89 a1       	ldd	r24, Y+33	; 0x21
    2148:	9a a1       	ldd	r25, Y+34	; 0x22
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	53 e4       	ldi	r21, 0x43	; 67
    2152:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	0c f0       	brlt	.+2      	; 0x215c <LCD_displayCustomChar+0xa4>
    215a:	7b c0       	rjmp	.+246    	; 0x2252 <LCD_displayCustomChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    215c:	6b a1       	ldd	r22, Y+35	; 0x23
    215e:	7c a1       	ldd	r23, Y+36	; 0x24
    2160:	8d a1       	ldd	r24, Y+37	; 0x25
    2162:	9e a1       	ldd	r25, Y+38	; 0x26
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	4a e7       	ldi	r20, 0x7A	; 122
    216a:	54 e4       	ldi	r21, 0x44	; 68
    216c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	8a 8f       	std	Y+26, r24	; 0x1a
    2176:	9b 8f       	std	Y+27, r25	; 0x1b
    2178:	ac 8f       	std	Y+28, r26	; 0x1c
    217a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    217e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2180:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2182:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a ef       	ldi	r20, 0xFA	; 250
    218a:	54 e4       	ldi	r21, 0x44	; 68
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8e 8b       	std	Y+22, r24	; 0x16
    2196:	9f 8b       	std	Y+23, r25	; 0x17
    2198:	a8 8f       	std	Y+24, r26	; 0x18
    219a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    219c:	6e 89       	ldd	r22, Y+22	; 0x16
    219e:	7f 89       	ldd	r23, Y+23	; 0x17
    21a0:	88 8d       	ldd	r24, Y+24	; 0x18
    21a2:	99 8d       	ldd	r25, Y+25	; 0x19
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	2c f4       	brge	.+10     	; 0x21be <LCD_displayCustomChar+0x106>
		__ticks = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9d 8b       	std	Y+21, r25	; 0x15
    21ba:	8c 8b       	std	Y+20, r24	; 0x14
    21bc:	3f c0       	rjmp	.+126    	; 0x223c <LCD_displayCustomChar+0x184>
	else if (__tmp > 65535)
    21be:	6e 89       	ldd	r22, Y+22	; 0x16
    21c0:	7f 89       	ldd	r23, Y+23	; 0x17
    21c2:	88 8d       	ldd	r24, Y+24	; 0x18
    21c4:	99 8d       	ldd	r25, Y+25	; 0x19
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	4c f5       	brge	.+82     	; 0x2228 <LCD_displayCustomChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21d8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e2       	ldi	r20, 0x20	; 32
    21e4:	51 e4       	ldi	r21, 0x41	; 65
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9d 8b       	std	Y+21, r25	; 0x15
    21fc:	8c 8b       	std	Y+20, r24	; 0x14
    21fe:	0f c0       	rjmp	.+30     	; 0x221e <LCD_displayCustomChar+0x166>
    2200:	88 ec       	ldi	r24, 0xC8	; 200
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9b 8b       	std	Y+19, r25	; 0x13
    2206:	8a 8b       	std	Y+18, r24	; 0x12
    2208:	8a 89       	ldd	r24, Y+18	; 0x12
    220a:	9b 89       	ldd	r25, Y+19	; 0x13
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <LCD_displayCustomChar+0x154>
    2210:	9b 8b       	std	Y+19, r25	; 0x13
    2212:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2214:	8c 89       	ldd	r24, Y+20	; 0x14
    2216:	9d 89       	ldd	r25, Y+21	; 0x15
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	9d 8b       	std	Y+21, r25	; 0x15
    221c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221e:	8c 89       	ldd	r24, Y+20	; 0x14
    2220:	9d 89       	ldd	r25, Y+21	; 0x15
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	69 f7       	brne	.-38     	; 0x2200 <LCD_displayCustomChar+0x148>
    2226:	24 c0       	rjmp	.+72     	; 0x2270 <LCD_displayCustomChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	6e 89       	ldd	r22, Y+22	; 0x16
    222a:	7f 89       	ldd	r23, Y+23	; 0x17
    222c:	88 8d       	ldd	r24, Y+24	; 0x18
    222e:	99 8d       	ldd	r25, Y+25	; 0x19
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9d 8b       	std	Y+21, r25	; 0x15
    223a:	8c 8b       	std	Y+20, r24	; 0x14
    223c:	8c 89       	ldd	r24, Y+20	; 0x14
    223e:	9d 89       	ldd	r25, Y+21	; 0x15
    2240:	99 8b       	std	Y+17, r25	; 0x11
    2242:	88 8b       	std	Y+16, r24	; 0x10
    2244:	88 89       	ldd	r24, Y+16	; 0x10
    2246:	99 89       	ldd	r25, Y+17	; 0x11
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <LCD_displayCustomChar+0x190>
    224c:	99 8b       	std	Y+17, r25	; 0x11
    224e:	88 8b       	std	Y+16, r24	; 0x10
    2250:	0f c0       	rjmp	.+30     	; 0x2270 <LCD_displayCustomChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2252:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2254:	78 a1       	ldd	r23, Y+32	; 0x20
    2256:	89 a1       	ldd	r24, Y+33	; 0x21
    2258:	9a a1       	ldd	r25, Y+34	; 0x22
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8e 8f       	std	Y+30, r24	; 0x1e
    2264:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2266:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2268:	8f 85       	ldd	r24, Y+15	; 0x0f
    226a:	8a 95       	dec	r24
    226c:	f1 f7       	brne	.-4      	; 0x226a <LCD_displayCustomChar+0x1b2>
    226e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	E = 0;
    2270:	e2 e3       	ldi	r30, 0x32	; 50
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	8f 7b       	andi	r24, 0xBF	; 191
    2278:	80 83       	st	Z, r24
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e0       	ldi	r26, 0x00	; 0
    2280:	b0 e4       	ldi	r27, 0x40	; 64
    2282:	8b 87       	std	Y+11, r24	; 0x0b
    2284:	9c 87       	std	Y+12, r25	; 0x0c
    2286:	ad 87       	std	Y+13, r26	; 0x0d
    2288:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228a:	6b 85       	ldd	r22, Y+11	; 0x0b
    228c:	7c 85       	ldd	r23, Y+12	; 0x0c
    228e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2290:	9e 85       	ldd	r25, Y+14	; 0x0e
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	4a ef       	ldi	r20, 0xFA	; 250
    2298:	54 e4       	ldi	r21, 0x44	; 68
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	8f 83       	std	Y+7, r24	; 0x07
    22a4:	98 87       	std	Y+8, r25	; 0x08
    22a6:	a9 87       	std	Y+9, r26	; 0x09
    22a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22aa:	6f 81       	ldd	r22, Y+7	; 0x07
    22ac:	78 85       	ldd	r23, Y+8	; 0x08
    22ae:	89 85       	ldd	r24, Y+9	; 0x09
    22b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22be:	88 23       	and	r24, r24
    22c0:	2c f4       	brge	.+10     	; 0x22cc <LCD_displayCustomChar+0x214>
		__ticks = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
    22ca:	3f c0       	rjmp	.+126    	; 0x234a <LCD_displayCustomChar+0x292>
	else if (__tmp > 65535)
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	3f ef       	ldi	r19, 0xFF	; 255
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	57 e4       	ldi	r21, 0x47	; 71
    22dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	4c f5       	brge	.+82     	; 0x2336 <LCD_displayCustomChar+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e2       	ldi	r20, 0x20	; 32
    22f2:	51 e4       	ldi	r21, 0x41	; 65
    22f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
    230c:	0f c0       	rjmp	.+30     	; 0x232c <LCD_displayCustomChar+0x274>
    230e:	88 ec       	ldi	r24, 0xC8	; 200
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	9c 83       	std	Y+4, r25	; 0x04
    2314:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <LCD_displayCustomChar+0x262>
    231e:	9c 83       	std	Y+4, r25	; 0x04
    2320:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	69 f7       	brne	.-38     	; 0x230e <LCD_displayCustomChar+0x256>
    2334:	14 c0       	rjmp	.+40     	; 0x235e <LCD_displayCustomChar+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	8d 81       	ldd	r24, Y+5	; 0x05
    234c:	9e 81       	ldd	r25, Y+6	; 0x06
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	9a 81       	ldd	r25, Y+2	; 0x02
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <LCD_displayCustomChar+0x29e>
    235a:	9a 83       	std	Y+2, r25	; 0x02
    235c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); /* Data write delay */
}
    235e:	a7 96       	adiw	r28, 0x27	; 39
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <main>:
uint32 speed = 0;

void INT1_Init(void);
void INT0_Init(void);

int main(void) {
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	6a 97       	sbiw	r28, 0x1a	; 26
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61

	INT0_Init();
    2384:	0e 94 cb 13 	call	0x2796	; 0x2796 <INT0_Init>
	INT1_Init();
    2388:	0e 94 f5 13 	call	0x27ea	; 0x27ea <INT1_Init>
	timeCycle = 1000000 /(uint32) Freq;
    238c:	80 91 ac 05 	lds	r24, 0x05AC
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	80 e4       	ldi	r24, 0x40	; 64
    239a:	92 e4       	ldi	r25, 0x42	; 66
    239c:	af e0       	ldi	r26, 0x0F	; 15
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    23a8:	da 01       	movw	r26, r20
    23aa:	c9 01       	movw	r24, r18
    23ac:	80 93 ae 05 	sts	0x05AE, r24
    23b0:	90 93 af 05 	sts	0x05AF, r25
    23b4:	a0 93 b0 05 	sts	0x05B0, r26
    23b8:	b0 93 b1 05 	sts	0x05B1, r27
	delayTime = timeCycle / 360;
    23bc:	80 91 ae 05 	lds	r24, 0x05AE
    23c0:	90 91 af 05 	lds	r25, 0x05AF
    23c4:	a0 91 b0 05 	lds	r26, 0x05B0
    23c8:	b0 91 b1 05 	lds	r27, 0x05B1
    23cc:	28 e6       	ldi	r18, 0x68	; 104
    23ce:	31 e0       	ldi	r19, 0x01	; 1
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	50 e0       	ldi	r21, 0x00	; 0
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    23dc:	da 01       	movw	r26, r20
    23de:	c9 01       	movw	r24, r18
    23e0:	80 93 b2 05 	sts	0x05B2, r24
    23e4:	90 93 b3 05 	sts	0x05B3, r25
    23e8:	a0 93 b4 05 	sts	0x05B4, r26
    23ec:	b0 93 b5 05 	sts	0x05B5, r27
	speed = ((100 - slip) * ((uint32) Freq * Ns)) / (Fbase * 100);
    23f0:	80 91 ac 05 	lds	r24, 0x05AC
    23f4:	88 2f       	mov	r24, r24
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 e0       	ldi	r26, 0x00	; 0
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	37 e7       	ldi	r19, 0x77	; 119
    2400:	41 e0       	ldi	r20, 0x01	; 1
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__mulsi3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	28 e8       	ldi	r18, 0x88	; 136
    2412:	33 e1       	ldi	r19, 0x13	; 19
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    2420:	da 01       	movw	r26, r20
    2422:	c9 01       	movw	r24, r18
    2424:	80 93 b6 05 	sts	0x05B6, r24
    2428:	90 93 b7 05 	sts	0x05B7, r25
    242c:	a0 93 b8 05 	sts	0x05B8, r26
    2430:	b0 93 b9 05 	sts	0x05B9, r27
	LCD_init();
    2434:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <LCD_init>
	LCD_clearScreen();
    2438:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_clearScreen>
	LCD_displayString("Freq = ");
    243c:	80 e6       	ldi	r24, 0x60	; 96
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_displayString>
	LCD_intgerToString(Freq);
    2444:	80 91 ac 05 	lds	r24, 0x05AC
    2448:	88 2f       	mov	r24, r24
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	a0 e0       	ldi	r26, 0x00	; 0
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_intgerToString>
	LCD_displayString(" HZ");
    2458:	88 e6       	ldi	r24, 0x68	; 104
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_displayString>
	LCD_goToRowColumn(1, 0);
	LCD_displayString("Speed = ");
	LCD_intgerToString(speed);
	LCD_displayString(" RPM");*/

	SET_BIT(DDRC, 0);
    2460:	a4 e3       	ldi	r26, 0x34	; 52
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e4 e3       	ldi	r30, 0x34	; 52
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	81 60       	ori	r24, 0x01	; 1
    246c:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, 0);
    246e:	a5 e3       	ldi	r26, 0x35	; 53
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e5 e3       	ldi	r30, 0x35	; 53
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	8e 7f       	andi	r24, 0xFE	; 254
    247a:	8c 93       	st	X, r24
	SET_BIT(DDRC, 1);
    247c:	a4 e3       	ldi	r26, 0x34	; 52
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e4 e3       	ldi	r30, 0x34	; 52
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	82 60       	ori	r24, 0x02	; 2
    2488:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, 1);
    248a:	a5 e3       	ldi	r26, 0x35	; 53
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e5 e3       	ldi	r30, 0x35	; 53
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	8d 7f       	andi	r24, 0xFD	; 253
    2496:	8c 93       	st	X, r24
	SET_BIT(DDRC, 2);
    2498:	a4 e3       	ldi	r26, 0x34	; 52
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e4 e3       	ldi	r30, 0x34	; 52
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	84 60       	ori	r24, 0x04	; 4
    24a4:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, 2);
    24a6:	a5 e3       	ldi	r26, 0x35	; 53
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e5 e3       	ldi	r30, 0x35	; 53
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	8b 7f       	andi	r24, 0xFB	; 251
    24b2:	8c 93       	st	X, r24
	SET_BIT(DDRC, 3);
    24b4:	a4 e3       	ldi	r26, 0x34	; 52
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e4 e3       	ldi	r30, 0x34	; 52
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	88 60       	ori	r24, 0x08	; 8
    24c0:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, 3);
    24c2:	a5 e3       	ldi	r26, 0x35	; 53
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e5 e3       	ldi	r30, 0x35	; 53
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	87 7f       	andi	r24, 0xF7	; 247
    24ce:	8c 93       	st	X, r24
	SET_BIT(DDRC, 4);
    24d0:	a4 e3       	ldi	r26, 0x34	; 52
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e4 e3       	ldi	r30, 0x34	; 52
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	80 61       	ori	r24, 0x10	; 16
    24dc:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, 4);
    24de:	a5 e3       	ldi	r26, 0x35	; 53
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e5 e3       	ldi	r30, 0x35	; 53
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	8f 7e       	andi	r24, 0xEF	; 239
    24ea:	8c 93       	st	X, r24
	SET_BIT(DDRC, 5);
    24ec:	a4 e3       	ldi	r26, 0x34	; 52
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e4 e3       	ldi	r30, 0x34	; 52
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	80 62       	ori	r24, 0x20	; 32
    24f8:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, 5);
    24fa:	a5 e3       	ldi	r26, 0x35	; 53
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e5 e3       	ldi	r30, 0x35	; 53
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	8f 7d       	andi	r24, 0xDF	; 223
    2506:	8c 93       	st	X, r24
	while (1) {
		for (int i = 0; i < 360; i++) {
    2508:	1a 8e       	std	Y+26, r1	; 0x1a
    250a:	19 8e       	std	Y+25, r1	; 0x19
    250c:	3c c1       	rjmp	.+632    	; 0x2786 <main+0x416>
			if (arrSinU[i] == 0) {
    250e:	89 8d       	ldd	r24, Y+25	; 0x19
    2510:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2512:	fc 01       	movw	r30, r24
    2514:	ec 58       	subi	r30, 0x8C	; 140
    2516:	fe 4f       	sbci	r31, 0xFE	; 254
    2518:	80 81       	ld	r24, Z
    251a:	88 23       	and	r24, r24
    251c:	79 f4       	brne	.+30     	; 0x253c <main+0x1cc>
				CLEAR_BIT(PORTC, 0);
    251e:	a5 e3       	ldi	r26, 0x35	; 53
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e5 e3       	ldi	r30, 0x35	; 53
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8e 7f       	andi	r24, 0xFE	; 254
    252a:	8c 93       	st	X, r24
				SET_BIT(PORTC, 1);
    252c:	a5 e3       	ldi	r26, 0x35	; 53
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e5 e3       	ldi	r30, 0x35	; 53
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	82 60       	ori	r24, 0x02	; 2
    2538:	8c 93       	st	X, r24
    253a:	0e c0       	rjmp	.+28     	; 0x2558 <main+0x1e8>
			} else {
				CLEAR_BIT(PORTC, 1);
    253c:	a5 e3       	ldi	r26, 0x35	; 53
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e5 e3       	ldi	r30, 0x35	; 53
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	8d 7f       	andi	r24, 0xFD	; 253
    2548:	8c 93       	st	X, r24
				SET_BIT(PORTC, 0);
    254a:	a5 e3       	ldi	r26, 0x35	; 53
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e5 e3       	ldi	r30, 0x35	; 53
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	81 60       	ori	r24, 0x01	; 1
    2556:	8c 93       	st	X, r24
			}
			if (arrSinV[i] == 0) {
    2558:	89 8d       	ldd	r24, Y+25	; 0x19
    255a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    255c:	fc 01       	movw	r30, r24
    255e:	e4 52       	subi	r30, 0x24	; 36
    2560:	fd 4f       	sbci	r31, 0xFD	; 253
    2562:	80 81       	ld	r24, Z
    2564:	88 23       	and	r24, r24
    2566:	79 f4       	brne	.+30     	; 0x2586 <main+0x216>
				CLEAR_BIT(PORTC, 2);
    2568:	a5 e3       	ldi	r26, 0x35	; 53
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e5 e3       	ldi	r30, 0x35	; 53
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8b 7f       	andi	r24, 0xFB	; 251
    2574:	8c 93       	st	X, r24
				SET_BIT(PORTC, 3);
    2576:	a5 e3       	ldi	r26, 0x35	; 53
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e5 e3       	ldi	r30, 0x35	; 53
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	88 60       	ori	r24, 0x08	; 8
    2582:	8c 93       	st	X, r24
    2584:	0e c0       	rjmp	.+28     	; 0x25a2 <main+0x232>
			} else {
				CLEAR_BIT(PORTC, 3);
    2586:	a5 e3       	ldi	r26, 0x35	; 53
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e5 e3       	ldi	r30, 0x35	; 53
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	87 7f       	andi	r24, 0xF7	; 247
    2592:	8c 93       	st	X, r24
				SET_BIT(PORTC, 2);
    2594:	a5 e3       	ldi	r26, 0x35	; 53
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e5 e3       	ldi	r30, 0x35	; 53
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	84 60       	ori	r24, 0x04	; 4
    25a0:	8c 93       	st	X, r24
			}
			if (arrSinW[i] == 0) {
    25a2:	89 8d       	ldd	r24, Y+25	; 0x19
    25a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25a6:	fc 01       	movw	r30, r24
    25a8:	ec 5b       	subi	r30, 0xBC	; 188
    25aa:	fb 4f       	sbci	r31, 0xFB	; 251
    25ac:	80 81       	ld	r24, Z
    25ae:	88 23       	and	r24, r24
    25b0:	79 f4       	brne	.+30     	; 0x25d0 <main+0x260>
				CLEAR_BIT(PORTC, 4);
    25b2:	a5 e3       	ldi	r26, 0x35	; 53
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e5 e3       	ldi	r30, 0x35	; 53
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	8f 7e       	andi	r24, 0xEF	; 239
    25be:	8c 93       	st	X, r24
				SET_BIT(PORTC, 5);
    25c0:	a5 e3       	ldi	r26, 0x35	; 53
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e5 e3       	ldi	r30, 0x35	; 53
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	80 62       	ori	r24, 0x20	; 32
    25cc:	8c 93       	st	X, r24
    25ce:	0e c0       	rjmp	.+28     	; 0x25ec <main+0x27c>
			} else {
				CLEAR_BIT(PORTC, 5);
    25d0:	a5 e3       	ldi	r26, 0x35	; 53
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e5 e3       	ldi	r30, 0x35	; 53
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	8f 7d       	andi	r24, 0xDF	; 223
    25dc:	8c 93       	st	X, r24
				SET_BIT(PORTC, 4);
    25de:	a5 e3       	ldi	r26, 0x35	; 53
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e5 e3       	ldi	r30, 0x35	; 53
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	80 61       	ori	r24, 0x10	; 16
    25ea:	8c 93       	st	X, r24
			}
			_delay_us(delayTime);
    25ec:	80 91 b2 05 	lds	r24, 0x05B2
    25f0:	90 91 b3 05 	lds	r25, 0x05B3
    25f4:	a0 91 b4 05 	lds	r26, 0x05B4
    25f8:	b0 91 b5 05 	lds	r27, 0x05B5
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	8d 8b       	std	Y+21, r24	; 0x15
    260a:	9e 8b       	std	Y+22, r25	; 0x16
    260c:	af 8b       	std	Y+23, r26	; 0x17
    260e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2610:	6d 89       	ldd	r22, Y+21	; 0x15
    2612:	7e 89       	ldd	r23, Y+22	; 0x16
    2614:	8f 89       	ldd	r24, Y+23	; 0x17
    2616:	98 8d       	ldd	r25, Y+24	; 0x18
    2618:	2b ea       	ldi	r18, 0xAB	; 171
    261a:	3a ea       	ldi	r19, 0xAA	; 170
    261c:	4a e2       	ldi	r20, 0x2A	; 42
    261e:	50 e4       	ldi	r21, 0x40	; 64
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	89 8b       	std	Y+17, r24	; 0x11
    262a:	9a 8b       	std	Y+18, r25	; 0x12
    262c:	ab 8b       	std	Y+19, r26	; 0x13
    262e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2630:	69 89       	ldd	r22, Y+17	; 0x11
    2632:	7a 89       	ldd	r23, Y+18	; 0x12
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	1c f4       	brge	.+6      	; 0x264e <main+0x2de>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	88 8b       	std	Y+16, r24	; 0x10
    264c:	91 c0       	rjmp	.+290    	; 0x2770 <main+0x400>
	else if (__tmp > 255)
    264e:	69 89       	ldd	r22, Y+17	; 0x11
    2650:	7a 89       	ldd	r23, Y+18	; 0x12
    2652:	8b 89       	ldd	r24, Y+19	; 0x13
    2654:	9c 89       	ldd	r25, Y+20	; 0x14
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	4f e7       	ldi	r20, 0x7F	; 127
    265c:	53 e4       	ldi	r21, 0x43	; 67
    265e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2662:	18 16       	cp	r1, r24
    2664:	0c f0       	brlt	.+2      	; 0x2668 <main+0x2f8>
    2666:	7b c0       	rjmp	.+246    	; 0x275e <main+0x3ee>
	{
		_delay_ms(__us / 1000.0);
    2668:	6d 89       	ldd	r22, Y+21	; 0x15
    266a:	7e 89       	ldd	r23, Y+22	; 0x16
    266c:	8f 89       	ldd	r24, Y+23	; 0x17
    266e:	98 8d       	ldd	r25, Y+24	; 0x18
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4a e7       	ldi	r20, 0x7A	; 122
    2676:	54 e4       	ldi	r21, 0x44	; 68
    2678:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	8c 87       	std	Y+12, r24	; 0x0c
    2682:	9d 87       	std	Y+13, r25	; 0x0d
    2684:	ae 87       	std	Y+14, r26	; 0x0e
    2686:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2688:	6c 85       	ldd	r22, Y+12	; 0x0c
    268a:	7d 85       	ldd	r23, Y+13	; 0x0d
    268c:	8e 85       	ldd	r24, Y+14	; 0x0e
    268e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	4a ef       	ldi	r20, 0xFA	; 250
    2696:	54 e4       	ldi	r21, 0x44	; 68
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	88 87       	std	Y+8, r24	; 0x08
    26a2:	99 87       	std	Y+9, r25	; 0x09
    26a4:	aa 87       	std	Y+10, r26	; 0x0a
    26a6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    26a8:	68 85       	ldd	r22, Y+8	; 0x08
    26aa:	79 85       	ldd	r23, Y+9	; 0x09
    26ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    26ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e8       	ldi	r20, 0x80	; 128
    26b6:	5f e3       	ldi	r21, 0x3F	; 63
    26b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26bc:	88 23       	and	r24, r24
    26be:	2c f4       	brge	.+10     	; 0x26ca <main+0x35a>
		__ticks = 1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9f 83       	std	Y+7, r25	; 0x07
    26c6:	8e 83       	std	Y+6, r24	; 0x06
    26c8:	3f c0       	rjmp	.+126    	; 0x2748 <main+0x3d8>
	else if (__tmp > 65535)
    26ca:	68 85       	ldd	r22, Y+8	; 0x08
    26cc:	79 85       	ldd	r23, Y+9	; 0x09
    26ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    26d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	3f ef       	ldi	r19, 0xFF	; 255
    26d6:	4f e7       	ldi	r20, 0x7F	; 127
    26d8:	57 e4       	ldi	r21, 0x47	; 71
    26da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26de:	18 16       	cp	r1, r24
    26e0:	4c f5       	brge	.+82     	; 0x2734 <main+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    26e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    26e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e2       	ldi	r20, 0x20	; 32
    26f0:	51 e4       	ldi	r21, 0x41	; 65
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9f 83       	std	Y+7, r25	; 0x07
    2708:	8e 83       	std	Y+6, r24	; 0x06
    270a:	0f c0       	rjmp	.+30     	; 0x272a <main+0x3ba>
    270c:	88 ec       	ldi	r24, 0xC8	; 200
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9d 83       	std	Y+5, r25	; 0x05
    2712:	8c 83       	std	Y+4, r24	; 0x04
    2714:	8c 81       	ldd	r24, Y+4	; 0x04
    2716:	9d 81       	ldd	r25, Y+5	; 0x05
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <main+0x3a8>
    271c:	9d 83       	std	Y+5, r25	; 0x05
    271e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2720:	8e 81       	ldd	r24, Y+6	; 0x06
    2722:	9f 81       	ldd	r25, Y+7	; 0x07
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	9f 83       	std	Y+7, r25	; 0x07
    2728:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272a:	8e 81       	ldd	r24, Y+6	; 0x06
    272c:	9f 81       	ldd	r25, Y+7	; 0x07
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	69 f7       	brne	.-38     	; 0x270c <main+0x39c>
    2732:	24 c0       	rjmp	.+72     	; 0x277c <main+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2734:	68 85       	ldd	r22, Y+8	; 0x08
    2736:	79 85       	ldd	r23, Y+9	; 0x09
    2738:	8a 85       	ldd	r24, Y+10	; 0x0a
    273a:	9b 85       	ldd	r25, Y+11	; 0x0b
    273c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	9f 83       	std	Y+7, r25	; 0x07
    2746:	8e 83       	std	Y+6, r24	; 0x06
    2748:	8e 81       	ldd	r24, Y+6	; 0x06
    274a:	9f 81       	ldd	r25, Y+7	; 0x07
    274c:	9b 83       	std	Y+3, r25	; 0x03
    274e:	8a 83       	std	Y+2, r24	; 0x02
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	9b 81       	ldd	r25, Y+3	; 0x03
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <main+0x3e4>
    2758:	9b 83       	std	Y+3, r25	; 0x03
    275a:	8a 83       	std	Y+2, r24	; 0x02
    275c:	0f c0       	rjmp	.+30     	; 0x277c <main+0x40c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    275e:	69 89       	ldd	r22, Y+17	; 0x11
    2760:	7a 89       	ldd	r23, Y+18	; 0x12
    2762:	8b 89       	ldd	r24, Y+19	; 0x13
    2764:	9c 89       	ldd	r25, Y+20	; 0x14
    2766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	88 8b       	std	Y+16, r24	; 0x10
    2770:	88 89       	ldd	r24, Y+16	; 0x10
    2772:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	8a 95       	dec	r24
    2778:	f1 f7       	brne	.-4      	; 0x2776 <main+0x406>
    277a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(DDRC, 4);
	CLEAR_BIT(PORTC, 4);
	SET_BIT(DDRC, 5);
	CLEAR_BIT(PORTC, 5);
	while (1) {
		for (int i = 0; i < 360; i++) {
    277c:	89 8d       	ldd	r24, Y+25	; 0x19
    277e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2780:	01 96       	adiw	r24, 0x01	; 1
    2782:	9a 8f       	std	Y+26, r25	; 0x1a
    2784:	89 8f       	std	Y+25, r24	; 0x19
    2786:	89 8d       	ldd	r24, Y+25	; 0x19
    2788:	9a 8d       	ldd	r25, Y+26	; 0x1a
    278a:	21 e0       	ldi	r18, 0x01	; 1
    278c:	88 36       	cpi	r24, 0x68	; 104
    278e:	92 07       	cpc	r25, r18
    2790:	0c f4       	brge	.+2      	; 0x2794 <main+0x424>
    2792:	bd ce       	rjmp	.-646    	; 0x250e <main+0x19e>
    2794:	b9 ce       	rjmp	.-654    	; 0x2508 <main+0x198>

00002796 <INT0_Init>:
	}
	return 0;
}

/* External INT0 enable and configuration function */
void INT0_Init(void) {
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
	SREG &= ~(1 << 7);                   // Disable interrupts by clearing I-bit
    279e:	af e5       	ldi	r26, 0x5F	; 95
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	ef e5       	ldi	r30, 0x5F	; 95
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	8f 77       	andi	r24, 0x7F	; 127
    27aa:	8c 93       	st	X, r24
	DDRD &= (~(1 << PD2));               // Configure INT0/PD2 as input pin
    27ac:	a1 e3       	ldi	r26, 0x31	; 49
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	e1 e3       	ldi	r30, 0x31	; 49
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	8b 7f       	andi	r24, 0xFB	; 251
    27b8:	8c 93       	st	X, r24
	GICR |= (1 << INT0);                 // Enable external interrupt pin INT0
    27ba:	ab e5       	ldi	r26, 0x5B	; 91
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	eb e5       	ldi	r30, 0x5B	; 91
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	80 64       	ori	r24, 0x40	; 64
    27c6:	8c 93       	st	X, r24
	MCUCR |= (1 << ISC00) | (1 << ISC01);  // Trigger INT0 with the raising edge
    27c8:	a5 e5       	ldi	r26, 0x55	; 85
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e5 e5       	ldi	r30, 0x55	; 85
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	83 60       	ori	r24, 0x03	; 3
    27d4:	8c 93       	st	X, r24
	SREG |= (1 << 7);                    // Enable interrupts by setting I-bit
    27d6:	af e5       	ldi	r26, 0x5F	; 95
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	ef e5       	ldi	r30, 0x5F	; 95
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	80 68       	ori	r24, 0x80	; 128
    27e2:	8c 93       	st	X, r24
}
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <INT1_Init>:

/* External INT1 enable and configuration function */
void INT1_Init(void) {
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
	SREG &= ~(1 << 7);      // Disable interrupts by clearing I-bit
    27f2:	af e5       	ldi	r26, 0x5F	; 95
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	ef e5       	ldi	r30, 0x5F	; 95
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	8f 77       	andi	r24, 0x7F	; 127
    27fe:	8c 93       	st	X, r24
	DDRD &= (~(1 << PD3));  // Configure INT1/PD3 as input pin
    2800:	a1 e3       	ldi	r26, 0x31	; 49
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e1 e3       	ldi	r30, 0x31	; 49
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	87 7f       	andi	r24, 0xF7	; 247
    280c:	8c 93       	st	X, r24
	GICR |= (1 << INT1);    // Enable external interrupt pin INT1
    280e:	ab e5       	ldi	r26, 0x5B	; 91
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	eb e5       	ldi	r30, 0x5B	; 91
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	80 68       	ori	r24, 0x80	; 128
    281a:	8c 93       	st	X, r24
	MCUCR |= (1 << ISC11) | (1 << ISC10);	// Trigger INT1 with the Rise edge
    281c:	a5 e5       	ldi	r26, 0x55	; 85
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e5 e5       	ldi	r30, 0x55	; 85
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	8c 60       	ori	r24, 0x0C	; 12
    2828:	8c 93       	st	X, r24
	SREG |= (1 << 7);       // Enable interrupts by setting I-bit
    282a:	af e5       	ldi	r26, 0x5F	; 95
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	ef e5       	ldi	r30, 0x5F	; 95
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	80 68       	ori	r24, 0x80	; 128
    2836:	8c 93       	st	X, r24
}
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <__vector_1>:

/* External INT0 Interrupt Service Routine */
ISR(INT0_vect) {
    283e:	1f 92       	push	r1
    2840:	0f 92       	push	r0
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	0f 92       	push	r0
    2846:	11 24       	eor	r1, r1
    2848:	2f 93       	push	r18
    284a:	3f 93       	push	r19
    284c:	4f 93       	push	r20
    284e:	5f 93       	push	r21
    2850:	6f 93       	push	r22
    2852:	7f 93       	push	r23
    2854:	8f 93       	push	r24
    2856:	9f 93       	push	r25
    2858:	af 93       	push	r26
    285a:	bf 93       	push	r27
    285c:	ef 93       	push	r30
    285e:	ff 93       	push	r31
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
	Freq -= 5;
    2868:	80 91 ac 05 	lds	r24, 0x05AC
    286c:	85 50       	subi	r24, 0x05	; 5
    286e:	80 93 ac 05 	sts	0x05AC, r24
	if(Freq <= 5) Freq= 5;
    2872:	80 91 ac 05 	lds	r24, 0x05AC
    2876:	86 30       	cpi	r24, 0x06	; 6
    2878:	18 f4       	brcc	.+6      	; 0x2880 <__vector_1+0x42>
    287a:	85 e0       	ldi	r24, 0x05	; 5
    287c:	80 93 ac 05 	sts	0x05AC, r24
	timeCycle = 1000000 /(uint32) Freq;
    2880:	80 91 ac 05 	lds	r24, 0x05AC
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e0       	ldi	r20, 0x00	; 0
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	80 e4       	ldi	r24, 0x40	; 64
    288e:	92 e4       	ldi	r25, 0x42	; 66
    2890:	af e0       	ldi	r26, 0x0F	; 15
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    289c:	da 01       	movw	r26, r20
    289e:	c9 01       	movw	r24, r18
    28a0:	80 93 ae 05 	sts	0x05AE, r24
    28a4:	90 93 af 05 	sts	0x05AF, r25
    28a8:	a0 93 b0 05 	sts	0x05B0, r26
    28ac:	b0 93 b1 05 	sts	0x05B1, r27
	delayTime = timeCycle / 360;
    28b0:	80 91 ae 05 	lds	r24, 0x05AE
    28b4:	90 91 af 05 	lds	r25, 0x05AF
    28b8:	a0 91 b0 05 	lds	r26, 0x05B0
    28bc:	b0 91 b1 05 	lds	r27, 0x05B1
    28c0:	28 e6       	ldi	r18, 0x68	; 104
    28c2:	31 e0       	ldi	r19, 0x01	; 1
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    28d0:	da 01       	movw	r26, r20
    28d2:	c9 01       	movw	r24, r18
    28d4:	80 93 b2 05 	sts	0x05B2, r24
    28d8:	90 93 b3 05 	sts	0x05B3, r25
    28dc:	a0 93 b4 05 	sts	0x05B4, r26
    28e0:	b0 93 b5 05 	sts	0x05B5, r27
	speed = ((100 - slip) * ((uint32) Freq * Ns)) / (Fbase * 100);
    28e4:	80 91 ac 05 	lds	r24, 0x05AC
    28e8:	88 2f       	mov	r24, r24
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	a0 e0       	ldi	r26, 0x00	; 0
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	37 e7       	ldi	r19, 0x77	; 119
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__mulsi3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	28 e8       	ldi	r18, 0x88	; 136
    2906:	33 e1       	ldi	r19, 0x13	; 19
    2908:	40 e0       	ldi	r20, 0x00	; 0
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	bc 01       	movw	r22, r24
    290e:	cd 01       	movw	r24, r26
    2910:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    2914:	da 01       	movw	r26, r20
    2916:	c9 01       	movw	r24, r18
    2918:	80 93 b6 05 	sts	0x05B6, r24
    291c:	90 93 b7 05 	sts	0x05B7, r25
    2920:	a0 93 b8 05 	sts	0x05B8, r26
    2924:	b0 93 b9 05 	sts	0x05B9, r27
	LCD_clearScreen();
    2928:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_clearScreen>
	LCD_displayString("Freq = ");
    292c:	80 e6       	ldi	r24, 0x60	; 96
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_displayString>
	LCD_intgerToString(Freq);
    2934:	80 91 ac 05 	lds	r24, 0x05AC
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	a0 e0       	ldi	r26, 0x00	; 0
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_intgerToString>
	LCD_displayString(" HZ");
    2948:	88 e6       	ldi	r24, 0x68	; 104
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_displayString>
	/*
	LCD_goToRowColumn(1, 0);
	LCD_displayString("Speed = ");
	LCD_intgerToString(speed);
	LCD_displayString(" RPM");*/
}
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	ff 91       	pop	r31
    2956:	ef 91       	pop	r30
    2958:	bf 91       	pop	r27
    295a:	af 91       	pop	r26
    295c:	9f 91       	pop	r25
    295e:	8f 91       	pop	r24
    2960:	7f 91       	pop	r23
    2962:	6f 91       	pop	r22
    2964:	5f 91       	pop	r21
    2966:	4f 91       	pop	r20
    2968:	3f 91       	pop	r19
    296a:	2f 91       	pop	r18
    296c:	0f 90       	pop	r0
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	0f 90       	pop	r0
    2972:	1f 90       	pop	r1
    2974:	18 95       	reti

00002976 <__vector_2>:

/* External INT1 Interrupt Service Routine */
ISR(INT1_vect) {
    2976:	1f 92       	push	r1
    2978:	0f 92       	push	r0
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	0f 92       	push	r0
    297e:	11 24       	eor	r1, r1
    2980:	2f 93       	push	r18
    2982:	3f 93       	push	r19
    2984:	4f 93       	push	r20
    2986:	5f 93       	push	r21
    2988:	6f 93       	push	r22
    298a:	7f 93       	push	r23
    298c:	8f 93       	push	r24
    298e:	9f 93       	push	r25
    2990:	af 93       	push	r26
    2992:	bf 93       	push	r27
    2994:	ef 93       	push	r30
    2996:	ff 93       	push	r31
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
	Freq += 5;
    29a0:	80 91 ac 05 	lds	r24, 0x05AC
    29a4:	8b 5f       	subi	r24, 0xFB	; 251
    29a6:	80 93 ac 05 	sts	0x05AC, r24
	if(Freq >= Fbase) Freq= Fbase;
    29aa:	80 91 ac 05 	lds	r24, 0x05AC
    29ae:	82 33       	cpi	r24, 0x32	; 50
    29b0:	18 f0       	brcs	.+6      	; 0x29b8 <__vector_2+0x42>
    29b2:	82 e3       	ldi	r24, 0x32	; 50
    29b4:	80 93 ac 05 	sts	0x05AC, r24
	timeCycle = 1000000 / (uint32)Freq;
    29b8:	80 91 ac 05 	lds	r24, 0x05AC
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	80 e4       	ldi	r24, 0x40	; 64
    29c6:	92 e4       	ldi	r25, 0x42	; 66
    29c8:	af e0       	ldi	r26, 0x0F	; 15
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    29d4:	da 01       	movw	r26, r20
    29d6:	c9 01       	movw	r24, r18
    29d8:	80 93 ae 05 	sts	0x05AE, r24
    29dc:	90 93 af 05 	sts	0x05AF, r25
    29e0:	a0 93 b0 05 	sts	0x05B0, r26
    29e4:	b0 93 b1 05 	sts	0x05B1, r27
	delayTime = timeCycle / 360;
    29e8:	80 91 ae 05 	lds	r24, 0x05AE
    29ec:	90 91 af 05 	lds	r25, 0x05AF
    29f0:	a0 91 b0 05 	lds	r26, 0x05B0
    29f4:	b0 91 b1 05 	lds	r27, 0x05B1
    29f8:	28 e6       	ldi	r18, 0x68	; 104
    29fa:	31 e0       	ldi	r19, 0x01	; 1
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    2a08:	da 01       	movw	r26, r20
    2a0a:	c9 01       	movw	r24, r18
    2a0c:	80 93 b2 05 	sts	0x05B2, r24
    2a10:	90 93 b3 05 	sts	0x05B3, r25
    2a14:	a0 93 b4 05 	sts	0x05B4, r26
    2a18:	b0 93 b5 05 	sts	0x05B5, r27
	speed = ((100 - slip) * ((uint32) Freq * Ns)) / (Fbase * 100);
    2a1c:	80 91 ac 05 	lds	r24, 0x05AC
    2a20:	88 2f       	mov	r24, r24
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	a0 e0       	ldi	r26, 0x00	; 0
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	37 e7       	ldi	r19, 0x77	; 119
    2a2c:	41 e0       	ldi	r20, 0x01	; 1
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__mulsi3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	28 e8       	ldi	r18, 0x88	; 136
    2a3e:	33 e1       	ldi	r19, 0x13	; 19
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	50 e0       	ldi	r21, 0x00	; 0
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    2a4c:	da 01       	movw	r26, r20
    2a4e:	c9 01       	movw	r24, r18
    2a50:	80 93 b6 05 	sts	0x05B6, r24
    2a54:	90 93 b7 05 	sts	0x05B7, r25
    2a58:	a0 93 b8 05 	sts	0x05B8, r26
    2a5c:	b0 93 b9 05 	sts	0x05B9, r27
	LCD_clearScreen();
    2a60:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_clearScreen>
	LCD_displayString("Freq = ");
    2a64:	80 e6       	ldi	r24, 0x60	; 96
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_displayString>
	LCD_intgerToString(Freq);
    2a6c:	80 91 ac 05 	lds	r24, 0x05AC
    2a70:	88 2f       	mov	r24, r24
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a0 e0       	ldi	r26, 0x00	; 0
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	bc 01       	movw	r22, r24
    2a7a:	cd 01       	movw	r24, r26
    2a7c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_intgerToString>
	LCD_displayString(" HZ");
    2a80:	88 e6       	ldi	r24, 0x68	; 104
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_goToRowColumn>
	/*
	LCD_displayString("Speed = ");
	LCD_intgerToString(speed);
	LCD_displayString(" RPM");*/
}
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	ff 91       	pop	r31
    2a96:	ef 91       	pop	r30
    2a98:	bf 91       	pop	r27
    2a9a:	af 91       	pop	r26
    2a9c:	9f 91       	pop	r25
    2a9e:	8f 91       	pop	r24
    2aa0:	7f 91       	pop	r23
    2aa2:	6f 91       	pop	r22
    2aa4:	5f 91       	pop	r21
    2aa6:	4f 91       	pop	r20
    2aa8:	3f 91       	pop	r19
    2aaa:	2f 91       	pop	r18
    2aac:	0f 90       	pop	r0
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	0f 90       	pop	r0
    2ab2:	1f 90       	pop	r1
    2ab4:	18 95       	reti

00002ab6 <__mulsi3>:
    2ab6:	62 9f       	mul	r22, r18
    2ab8:	d0 01       	movw	r26, r0
    2aba:	73 9f       	mul	r23, r19
    2abc:	f0 01       	movw	r30, r0
    2abe:	82 9f       	mul	r24, r18
    2ac0:	e0 0d       	add	r30, r0
    2ac2:	f1 1d       	adc	r31, r1
    2ac4:	64 9f       	mul	r22, r20
    2ac6:	e0 0d       	add	r30, r0
    2ac8:	f1 1d       	adc	r31, r1
    2aca:	92 9f       	mul	r25, r18
    2acc:	f0 0d       	add	r31, r0
    2ace:	83 9f       	mul	r24, r19
    2ad0:	f0 0d       	add	r31, r0
    2ad2:	74 9f       	mul	r23, r20
    2ad4:	f0 0d       	add	r31, r0
    2ad6:	65 9f       	mul	r22, r21
    2ad8:	f0 0d       	add	r31, r0
    2ada:	99 27       	eor	r25, r25
    2adc:	72 9f       	mul	r23, r18
    2ade:	b0 0d       	add	r27, r0
    2ae0:	e1 1d       	adc	r30, r1
    2ae2:	f9 1f       	adc	r31, r25
    2ae4:	63 9f       	mul	r22, r19
    2ae6:	b0 0d       	add	r27, r0
    2ae8:	e1 1d       	adc	r30, r1
    2aea:	f9 1f       	adc	r31, r25
    2aec:	bd 01       	movw	r22, r26
    2aee:	cf 01       	movw	r24, r30
    2af0:	11 24       	eor	r1, r1
    2af2:	08 95       	ret

00002af4 <__udivmodsi4>:
    2af4:	a1 e2       	ldi	r26, 0x21	; 33
    2af6:	1a 2e       	mov	r1, r26
    2af8:	aa 1b       	sub	r26, r26
    2afa:	bb 1b       	sub	r27, r27
    2afc:	fd 01       	movw	r30, r26
    2afe:	0d c0       	rjmp	.+26     	; 0x2b1a <__udivmodsi4_ep>

00002b00 <__udivmodsi4_loop>:
    2b00:	aa 1f       	adc	r26, r26
    2b02:	bb 1f       	adc	r27, r27
    2b04:	ee 1f       	adc	r30, r30
    2b06:	ff 1f       	adc	r31, r31
    2b08:	a2 17       	cp	r26, r18
    2b0a:	b3 07       	cpc	r27, r19
    2b0c:	e4 07       	cpc	r30, r20
    2b0e:	f5 07       	cpc	r31, r21
    2b10:	20 f0       	brcs	.+8      	; 0x2b1a <__udivmodsi4_ep>
    2b12:	a2 1b       	sub	r26, r18
    2b14:	b3 0b       	sbc	r27, r19
    2b16:	e4 0b       	sbc	r30, r20
    2b18:	f5 0b       	sbc	r31, r21

00002b1a <__udivmodsi4_ep>:
    2b1a:	66 1f       	adc	r22, r22
    2b1c:	77 1f       	adc	r23, r23
    2b1e:	88 1f       	adc	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	1a 94       	dec	r1
    2b24:	69 f7       	brne	.-38     	; 0x2b00 <__udivmodsi4_loop>
    2b26:	60 95       	com	r22
    2b28:	70 95       	com	r23
    2b2a:	80 95       	com	r24
    2b2c:	90 95       	com	r25
    2b2e:	9b 01       	movw	r18, r22
    2b30:	ac 01       	movw	r20, r24
    2b32:	bd 01       	movw	r22, r26
    2b34:	cf 01       	movw	r24, r30
    2b36:	08 95       	ret

00002b38 <__prologue_saves__>:
    2b38:	2f 92       	push	r2
    2b3a:	3f 92       	push	r3
    2b3c:	4f 92       	push	r4
    2b3e:	5f 92       	push	r5
    2b40:	6f 92       	push	r6
    2b42:	7f 92       	push	r7
    2b44:	8f 92       	push	r8
    2b46:	9f 92       	push	r9
    2b48:	af 92       	push	r10
    2b4a:	bf 92       	push	r11
    2b4c:	cf 92       	push	r12
    2b4e:	df 92       	push	r13
    2b50:	ef 92       	push	r14
    2b52:	ff 92       	push	r15
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	ca 1b       	sub	r28, r26
    2b62:	db 0b       	sbc	r29, r27
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	09 94       	ijmp

00002b70 <__epilogue_restores__>:
    2b70:	2a 88       	ldd	r2, Y+18	; 0x12
    2b72:	39 88       	ldd	r3, Y+17	; 0x11
    2b74:	48 88       	ldd	r4, Y+16	; 0x10
    2b76:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b78:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b80:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b82:	b9 84       	ldd	r11, Y+9	; 0x09
    2b84:	c8 84       	ldd	r12, Y+8	; 0x08
    2b86:	df 80       	ldd	r13, Y+7	; 0x07
    2b88:	ee 80       	ldd	r14, Y+6	; 0x06
    2b8a:	fd 80       	ldd	r15, Y+5	; 0x05
    2b8c:	0c 81       	ldd	r16, Y+4	; 0x04
    2b8e:	1b 81       	ldd	r17, Y+3	; 0x03
    2b90:	aa 81       	ldd	r26, Y+2	; 0x02
    2b92:	b9 81       	ldd	r27, Y+1	; 0x01
    2b94:	ce 0f       	add	r28, r30
    2b96:	d1 1d       	adc	r29, r1
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	ed 01       	movw	r28, r26
    2ba4:	08 95       	ret

00002ba6 <ltoa>:
    2ba6:	fa 01       	movw	r30, r20
    2ba8:	cf 93       	push	r28
    2baa:	ff 93       	push	r31
    2bac:	ef 93       	push	r30
    2bae:	22 30       	cpi	r18, 0x02	; 2
    2bb0:	44 f1       	brlt	.+80     	; 0x2c02 <ltoa+0x5c>
    2bb2:	25 32       	cpi	r18, 0x25	; 37
    2bb4:	34 f5       	brge	.+76     	; 0x2c02 <ltoa+0x5c>
    2bb6:	c2 2f       	mov	r28, r18
    2bb8:	e8 94       	clt
    2bba:	ca 30       	cpi	r28, 0x0A	; 10
    2bbc:	49 f4       	brne	.+18     	; 0x2bd0 <ltoa+0x2a>
    2bbe:	97 fb       	bst	r25, 7
    2bc0:	3e f4       	brtc	.+14     	; 0x2bd0 <ltoa+0x2a>
    2bc2:	90 95       	com	r25
    2bc4:	80 95       	com	r24
    2bc6:	70 95       	com	r23
    2bc8:	61 95       	neg	r22
    2bca:	7f 4f       	sbci	r23, 0xFF	; 255
    2bcc:	8f 4f       	sbci	r24, 0xFF	; 255
    2bce:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd0:	2c 2f       	mov	r18, r28
    2bd2:	33 27       	eor	r19, r19
    2bd4:	44 27       	eor	r20, r20
    2bd6:	55 27       	eor	r21, r21
    2bd8:	ff 93       	push	r31
    2bda:	ef 93       	push	r30
    2bdc:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    2be0:	ef 91       	pop	r30
    2be2:	ff 91       	pop	r31
    2be4:	60 5d       	subi	r22, 0xD0	; 208
    2be6:	6a 33       	cpi	r22, 0x3A	; 58
    2be8:	0c f0       	brlt	.+2      	; 0x2bec <ltoa+0x46>
    2bea:	69 5d       	subi	r22, 0xD9	; 217
    2bec:	61 93       	st	Z+, r22
    2bee:	b9 01       	movw	r22, r18
    2bf0:	ca 01       	movw	r24, r20
    2bf2:	60 50       	subi	r22, 0x00	; 0
    2bf4:	70 40       	sbci	r23, 0x00	; 0
    2bf6:	80 40       	sbci	r24, 0x00	; 0
    2bf8:	90 40       	sbci	r25, 0x00	; 0
    2bfa:	51 f7       	brne	.-44     	; 0x2bd0 <ltoa+0x2a>
    2bfc:	16 f4       	brtc	.+4      	; 0x2c02 <ltoa+0x5c>
    2bfe:	cd e2       	ldi	r28, 0x2D	; 45
    2c00:	c1 93       	st	Z+, r28
    2c02:	10 82       	st	Z, r1
    2c04:	8f 91       	pop	r24
    2c06:	9f 91       	pop	r25
    2c08:	cf 91       	pop	r28
    2c0a:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <strrev>

00002c0e <strrev>:
    2c0e:	dc 01       	movw	r26, r24
    2c10:	fc 01       	movw	r30, r24
    2c12:	67 2f       	mov	r22, r23
    2c14:	71 91       	ld	r23, Z+
    2c16:	77 23       	and	r23, r23
    2c18:	e1 f7       	brne	.-8      	; 0x2c12 <strrev+0x4>
    2c1a:	32 97       	sbiw	r30, 0x02	; 2
    2c1c:	04 c0       	rjmp	.+8      	; 0x2c26 <strrev+0x18>
    2c1e:	7c 91       	ld	r23, X
    2c20:	6d 93       	st	X+, r22
    2c22:	70 83       	st	Z, r23
    2c24:	62 91       	ld	r22, -Z
    2c26:	ae 17       	cp	r26, r30
    2c28:	bf 07       	cpc	r27, r31
    2c2a:	c8 f3       	brcs	.-14     	; 0x2c1e <strrev+0x10>
    2c2c:	08 95       	ret

00002c2e <_exit>:
    2c2e:	f8 94       	cli

00002c30 <__stop_program>:
    2c30:	ff cf       	rjmp	.-2      	; 0x2c30 <__stop_program>
