
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002b10  00002ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800070  00800070  00002bb4  2**0
                  ALLOC
  3 .stab         00001f80  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eb2  00000000  00000000  00004b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000059e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b0  00000000  00000000  00005b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f47  00000000  00000000  00005d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010c7  00000000  00000000  00007c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f5b  00000000  00000000  00008d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  00009e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009be  00000000  00000000  0000a0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a1 06 	call	0xd42	; 0xd42 <main>
      8a:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__ashldi3>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	60 97       	sbiw	r28, 0x10	; 16
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	a8 2f       	mov	r26, r24
     1ac:	00 23       	and	r16, r16
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <__ashldi3+0x22>
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__ashldi3+0xe4>
     1b2:	7e 01       	movw	r14, r28
     1b4:	08 94       	sec
     1b6:	e1 1c       	adc	r14, r1
     1b8:	f1 1c       	adc	r15, r1
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	f7 01       	movw	r30, r14
     1be:	11 92       	st	Z+, r1
     1c0:	8a 95       	dec	r24
     1c2:	e9 f7       	brne	.-6      	; 0x1be <__ashldi3+0x2e>
     1c4:	29 83       	std	Y+1, r18	; 0x01
     1c6:	3a 83       	std	Y+2, r19	; 0x02
     1c8:	4b 83       	std	Y+3, r20	; 0x03
     1ca:	5c 83       	std	Y+4, r21	; 0x04
     1cc:	6d 83       	std	Y+5, r22	; 0x05
     1ce:	7e 83       	std	Y+6, r23	; 0x06
     1d0:	af 83       	std	Y+7, r26	; 0x07
     1d2:	98 87       	std	Y+8, r25	; 0x08
     1d4:	80 e2       	ldi	r24, 0x20	; 32
     1d6:	80 1b       	sub	r24, r16
     1d8:	e8 2f       	mov	r30, r24
     1da:	ff 27       	eor	r31, r31
     1dc:	e7 fd       	sbrc	r30, 7
     1de:	f0 95       	com	r31
     1e0:	49 81       	ldd	r20, Y+1	; 0x01
     1e2:	5a 81       	ldd	r21, Y+2	; 0x02
     1e4:	6b 81       	ldd	r22, Y+3	; 0x03
     1e6:	7c 81       	ldd	r23, Y+4	; 0x04
     1e8:	18 16       	cp	r1, r24
     1ea:	84 f0       	brlt	.+32     	; 0x20c <__ashldi3+0x7c>
     1ec:	19 86       	std	Y+9, r1	; 0x09
     1ee:	1a 86       	std	Y+10, r1	; 0x0a
     1f0:	1b 86       	std	Y+11, r1	; 0x0b
     1f2:	1c 86       	std	Y+12, r1	; 0x0c
     1f4:	88 27       	eor	r24, r24
     1f6:	99 27       	eor	r25, r25
     1f8:	8e 1b       	sub	r24, r30
     1fa:	9f 0b       	sbc	r25, r31
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__ashldi3+0x76>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	66 1f       	adc	r22, r22
     204:	77 1f       	adc	r23, r23
     206:	8a 95       	dec	r24
     208:	d2 f7       	brpl	.-12     	; 0x1fe <__ashldi3+0x6e>
     20a:	28 c0       	rjmp	.+80     	; 0x25c <__ashldi3+0xcc>
     20c:	20 2f       	mov	r18, r16
     20e:	33 27       	eor	r19, r19
     210:	27 fd       	sbrc	r18, 7
     212:	30 95       	com	r19
     214:	db 01       	movw	r26, r22
     216:	ca 01       	movw	r24, r20
     218:	02 2e       	mov	r0, r18
     21a:	04 c0       	rjmp	.+8      	; 0x224 <__ashldi3+0x94>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	aa 1f       	adc	r26, r26
     222:	bb 1f       	adc	r27, r27
     224:	0a 94       	dec	r0
     226:	d2 f7       	brpl	.-12     	; 0x21c <__ashldi3+0x8c>
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	9a 87       	std	Y+10, r25	; 0x0a
     22c:	ab 87       	std	Y+11, r26	; 0x0b
     22e:	bc 87       	std	Y+12, r27	; 0x0c
     230:	04 c0       	rjmp	.+8      	; 0x23a <__ashldi3+0xaa>
     232:	76 95       	lsr	r23
     234:	67 95       	ror	r22
     236:	57 95       	ror	r21
     238:	47 95       	ror	r20
     23a:	ea 95       	dec	r30
     23c:	d2 f7       	brpl	.-12     	; 0x232 <__ashldi3+0xa2>
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	9e 81       	ldd	r25, Y+6	; 0x06
     242:	af 81       	ldd	r26, Y+7	; 0x07
     244:	b8 85       	ldd	r27, Y+8	; 0x08
     246:	04 c0       	rjmp	.+8      	; 0x250 <__ashldi3+0xc0>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
     250:	2a 95       	dec	r18
     252:	d2 f7       	brpl	.-12     	; 0x248 <__ashldi3+0xb8>
     254:	48 2b       	or	r20, r24
     256:	59 2b       	or	r21, r25
     258:	6a 2b       	or	r22, r26
     25a:	7b 2b       	or	r23, r27
     25c:	4d 87       	std	Y+13, r20	; 0x0d
     25e:	5e 87       	std	Y+14, r21	; 0x0e
     260:	6f 87       	std	Y+15, r22	; 0x0f
     262:	78 8b       	std	Y+16, r23	; 0x10
     264:	29 85       	ldd	r18, Y+9	; 0x09
     266:	3a 85       	ldd	r19, Y+10	; 0x0a
     268:	4b 85       	ldd	r20, Y+11	; 0x0b
     26a:	5c 85       	ldd	r21, Y+12	; 0x0c
     26c:	6d 85       	ldd	r22, Y+13	; 0x0d
     26e:	7e 85       	ldd	r23, Y+14	; 0x0e
     270:	af 85       	ldd	r26, Y+15	; 0x0f
     272:	98 89       	ldd	r25, Y+16	; 0x10
     274:	8a 2f       	mov	r24, r26
     276:	60 96       	adiw	r28, 0x10	; 16
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	08 95       	ret

0000028e <__fixunssfsi>:
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	7b 01       	movw	r14, r22
     298:	8c 01       	movw	r16, r24
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e4       	ldi	r21, 0x4F	; 79
     2a2:	0e 94 47 04 	call	0x88e	; 0x88e <__gesf2>
     2a6:	88 23       	and	r24, r24
     2a8:	8c f0       	brlt	.+34     	; 0x2cc <__fixunssfsi+0x3e>
     2aa:	c8 01       	movw	r24, r16
     2ac:	b7 01       	movw	r22, r14
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	5f e4       	ldi	r21, 0x4F	; 79
     2b6:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
     2ba:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixsfsi>
     2be:	9b 01       	movw	r18, r22
     2c0:	ac 01       	movw	r20, r24
     2c2:	20 50       	subi	r18, 0x00	; 0
     2c4:	30 40       	sbci	r19, 0x00	; 0
     2c6:	40 40       	sbci	r20, 0x00	; 0
     2c8:	50 48       	sbci	r21, 0x80	; 128
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <__fixunssfsi+0x4a>
     2cc:	c8 01       	movw	r24, r16
     2ce:	b7 01       	movw	r22, r14
     2d0:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixsfsi>
     2d4:	9b 01       	movw	r18, r22
     2d6:	ac 01       	movw	r20, r24
     2d8:	b9 01       	movw	r22, r18
     2da:	ca 01       	movw	r24, r20
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	08 95       	ret

000002e6 <_fpadd_parts>:
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e9 e7       	ldi	r30, 0x79	; 121
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__prologue_saves__>
     2f2:	dc 01       	movw	r26, r24
     2f4:	2b 01       	movw	r4, r22
     2f6:	fa 01       	movw	r30, r20
     2f8:	9c 91       	ld	r25, X
     2fa:	92 30       	cpi	r25, 0x02	; 2
     2fc:	08 f4       	brcc	.+2      	; 0x300 <_fpadd_parts+0x1a>
     2fe:	39 c1       	rjmp	.+626    	; 0x572 <__stack+0x113>
     300:	eb 01       	movw	r28, r22
     302:	88 81       	ld	r24, Y
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	08 f4       	brcc	.+2      	; 0x30a <_fpadd_parts+0x24>
     308:	33 c1       	rjmp	.+614    	; 0x570 <__stack+0x111>
     30a:	94 30       	cpi	r25, 0x04	; 4
     30c:	69 f4       	brne	.+26     	; 0x328 <_fpadd_parts+0x42>
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	09 f0       	breq	.+2      	; 0x314 <_fpadd_parts+0x2e>
     312:	2f c1       	rjmp	.+606    	; 0x572 <__stack+0x113>
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	9c 91       	ld	r25, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	98 17       	cp	r25, r24
     31e:	09 f4       	brne	.+2      	; 0x322 <_fpadd_parts+0x3c>
     320:	28 c1       	rjmp	.+592    	; 0x572 <__stack+0x113>
     322:	a0 e6       	ldi	r26, 0x60	; 96
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	25 c1       	rjmp	.+586    	; 0x572 <__stack+0x113>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	09 f4       	brne	.+2      	; 0x32e <_fpadd_parts+0x48>
     32c:	21 c1       	rjmp	.+578    	; 0x570 <__stack+0x111>
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	a9 f4       	brne	.+42     	; 0x35c <_fpadd_parts+0x76>
     332:	92 30       	cpi	r25, 0x02	; 2
     334:	09 f0       	breq	.+2      	; 0x338 <_fpadd_parts+0x52>
     336:	1d c1       	rjmp	.+570    	; 0x572 <__stack+0x113>
     338:	9a 01       	movw	r18, r20
     33a:	ad 01       	movw	r20, r26
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	ea 01       	movw	r28, r20
     340:	09 90       	ld	r0, Y+
     342:	ae 01       	movw	r20, r28
     344:	e9 01       	movw	r28, r18
     346:	09 92       	st	Y+, r0
     348:	9e 01       	movw	r18, r28
     34a:	81 50       	subi	r24, 0x01	; 1
     34c:	c1 f7       	brne	.-16     	; 0x33e <_fpadd_parts+0x58>
     34e:	e2 01       	movw	r28, r4
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	11 96       	adiw	r26, 0x01	; 1
     354:	9c 91       	ld	r25, X
     356:	89 23       	and	r24, r25
     358:	81 83       	std	Z+1, r24	; 0x01
     35a:	08 c1       	rjmp	.+528    	; 0x56c <__stack+0x10d>
     35c:	92 30       	cpi	r25, 0x02	; 2
     35e:	09 f4       	brne	.+2      	; 0x362 <_fpadd_parts+0x7c>
     360:	07 c1       	rjmp	.+526    	; 0x570 <__stack+0x111>
     362:	12 96       	adiw	r26, 0x02	; 2
     364:	2d 90       	ld	r2, X+
     366:	3c 90       	ld	r3, X
     368:	13 97       	sbiw	r26, 0x03	; 3
     36a:	eb 01       	movw	r28, r22
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	9b 81       	ldd	r25, Y+3	; 0x03
     370:	14 96       	adiw	r26, 0x04	; 4
     372:	ad 90       	ld	r10, X+
     374:	bd 90       	ld	r11, X+
     376:	cd 90       	ld	r12, X+
     378:	dc 90       	ld	r13, X
     37a:	17 97       	sbiw	r26, 0x07	; 7
     37c:	ec 80       	ldd	r14, Y+4	; 0x04
     37e:	fd 80       	ldd	r15, Y+5	; 0x05
     380:	0e 81       	ldd	r16, Y+6	; 0x06
     382:	1f 81       	ldd	r17, Y+7	; 0x07
     384:	91 01       	movw	r18, r2
     386:	28 1b       	sub	r18, r24
     388:	39 0b       	sbc	r19, r25
     38a:	b9 01       	movw	r22, r18
     38c:	37 ff       	sbrs	r19, 7
     38e:	04 c0       	rjmp	.+8      	; 0x398 <_fpadd_parts+0xb2>
     390:	66 27       	eor	r22, r22
     392:	77 27       	eor	r23, r23
     394:	62 1b       	sub	r22, r18
     396:	73 0b       	sbc	r23, r19
     398:	60 32       	cpi	r22, 0x20	; 32
     39a:	71 05       	cpc	r23, r1
     39c:	0c f0       	brlt	.+2      	; 0x3a0 <_fpadd_parts+0xba>
     39e:	61 c0       	rjmp	.+194    	; 0x462 <__stack+0x3>
     3a0:	12 16       	cp	r1, r18
     3a2:	13 06       	cpc	r1, r19
     3a4:	6c f5       	brge	.+90     	; 0x400 <_fpadd_parts+0x11a>
     3a6:	37 01       	movw	r6, r14
     3a8:	48 01       	movw	r8, r16
     3aa:	06 2e       	mov	r0, r22
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <_fpadd_parts+0xd0>
     3ae:	96 94       	lsr	r9
     3b0:	87 94       	ror	r8
     3b2:	77 94       	ror	r7
     3b4:	67 94       	ror	r6
     3b6:	0a 94       	dec	r0
     3b8:	d2 f7       	brpl	.-12     	; 0x3ae <_fpadd_parts+0xc8>
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	04 c0       	rjmp	.+8      	; 0x3cc <_fpadd_parts+0xe6>
     3c4:	22 0f       	add	r18, r18
     3c6:	33 1f       	adc	r19, r19
     3c8:	44 1f       	adc	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	6a 95       	dec	r22
     3ce:	d2 f7       	brpl	.-12     	; 0x3c4 <_fpadd_parts+0xde>
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	30 40       	sbci	r19, 0x00	; 0
     3d4:	40 40       	sbci	r20, 0x00	; 0
     3d6:	50 40       	sbci	r21, 0x00	; 0
     3d8:	2e 21       	and	r18, r14
     3da:	3f 21       	and	r19, r15
     3dc:	40 23       	and	r20, r16
     3de:	51 23       	and	r21, r17
     3e0:	21 15       	cp	r18, r1
     3e2:	31 05       	cpc	r19, r1
     3e4:	41 05       	cpc	r20, r1
     3e6:	51 05       	cpc	r21, r1
     3e8:	21 f0       	breq	.+8      	; 0x3f2 <_fpadd_parts+0x10c>
     3ea:	21 e0       	ldi	r18, 0x01	; 1
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	79 01       	movw	r14, r18
     3f4:	8a 01       	movw	r16, r20
     3f6:	e6 28       	or	r14, r6
     3f8:	f7 28       	or	r15, r7
     3fa:	08 29       	or	r16, r8
     3fc:	19 29       	or	r17, r9
     3fe:	3c c0       	rjmp	.+120    	; 0x478 <__stack+0x19>
     400:	23 2b       	or	r18, r19
     402:	d1 f1       	breq	.+116    	; 0x478 <__stack+0x19>
     404:	26 0e       	add	r2, r22
     406:	37 1e       	adc	r3, r23
     408:	35 01       	movw	r6, r10
     40a:	46 01       	movw	r8, r12
     40c:	06 2e       	mov	r0, r22
     40e:	04 c0       	rjmp	.+8      	; 0x418 <_fpadd_parts+0x132>
     410:	96 94       	lsr	r9
     412:	87 94       	ror	r8
     414:	77 94       	ror	r7
     416:	67 94       	ror	r6
     418:	0a 94       	dec	r0
     41a:	d2 f7       	brpl	.-12     	; 0x410 <_fpadd_parts+0x12a>
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	04 c0       	rjmp	.+8      	; 0x42e <_fpadd_parts+0x148>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	44 1f       	adc	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	6a 95       	dec	r22
     430:	d2 f7       	brpl	.-12     	; 0x426 <_fpadd_parts+0x140>
     432:	21 50       	subi	r18, 0x01	; 1
     434:	30 40       	sbci	r19, 0x00	; 0
     436:	40 40       	sbci	r20, 0x00	; 0
     438:	50 40       	sbci	r21, 0x00	; 0
     43a:	2a 21       	and	r18, r10
     43c:	3b 21       	and	r19, r11
     43e:	4c 21       	and	r20, r12
     440:	5d 21       	and	r21, r13
     442:	21 15       	cp	r18, r1
     444:	31 05       	cpc	r19, r1
     446:	41 05       	cpc	r20, r1
     448:	51 05       	cpc	r21, r1
     44a:	21 f0       	breq	.+8      	; 0x454 <_fpadd_parts+0x16e>
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	59 01       	movw	r10, r18
     456:	6a 01       	movw	r12, r20
     458:	a6 28       	or	r10, r6
     45a:	b7 28       	or	r11, r7
     45c:	c8 28       	or	r12, r8
     45e:	d9 28       	or	r13, r9
     460:	0b c0       	rjmp	.+22     	; 0x478 <__stack+0x19>
     462:	82 15       	cp	r24, r2
     464:	93 05       	cpc	r25, r3
     466:	2c f0       	brlt	.+10     	; 0x472 <__stack+0x13>
     468:	1c 01       	movw	r2, r24
     46a:	aa 24       	eor	r10, r10
     46c:	bb 24       	eor	r11, r11
     46e:	65 01       	movw	r12, r10
     470:	03 c0       	rjmp	.+6      	; 0x478 <__stack+0x19>
     472:	ee 24       	eor	r14, r14
     474:	ff 24       	eor	r15, r15
     476:	87 01       	movw	r16, r14
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	9c 91       	ld	r25, X
     47c:	d2 01       	movw	r26, r4
     47e:	11 96       	adiw	r26, 0x01	; 1
     480:	8c 91       	ld	r24, X
     482:	98 17       	cp	r25, r24
     484:	09 f4       	brne	.+2      	; 0x488 <__stack+0x29>
     486:	45 c0       	rjmp	.+138    	; 0x512 <__stack+0xb3>
     488:	99 23       	and	r25, r25
     48a:	39 f0       	breq	.+14     	; 0x49a <__stack+0x3b>
     48c:	a8 01       	movw	r20, r16
     48e:	97 01       	movw	r18, r14
     490:	2a 19       	sub	r18, r10
     492:	3b 09       	sbc	r19, r11
     494:	4c 09       	sbc	r20, r12
     496:	5d 09       	sbc	r21, r13
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <__stack+0x47>
     49a:	a6 01       	movw	r20, r12
     49c:	95 01       	movw	r18, r10
     49e:	2e 19       	sub	r18, r14
     4a0:	3f 09       	sbc	r19, r15
     4a2:	40 0b       	sbc	r20, r16
     4a4:	51 0b       	sbc	r21, r17
     4a6:	57 fd       	sbrc	r21, 7
     4a8:	08 c0       	rjmp	.+16     	; 0x4ba <__stack+0x5b>
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	33 82       	std	Z+3, r3	; 0x03
     4ae:	22 82       	std	Z+2, r2	; 0x02
     4b0:	24 83       	std	Z+4, r18	; 0x04
     4b2:	35 83       	std	Z+5, r19	; 0x05
     4b4:	46 83       	std	Z+6, r20	; 0x06
     4b6:	57 83       	std	Z+7, r21	; 0x07
     4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <__stack+0x95>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	81 83       	std	Z+1, r24	; 0x01
     4be:	33 82       	std	Z+3, r3	; 0x03
     4c0:	22 82       	std	Z+2, r2	; 0x02
     4c2:	88 27       	eor	r24, r24
     4c4:	99 27       	eor	r25, r25
     4c6:	dc 01       	movw	r26, r24
     4c8:	82 1b       	sub	r24, r18
     4ca:	93 0b       	sbc	r25, r19
     4cc:	a4 0b       	sbc	r26, r20
     4ce:	b5 0b       	sbc	r27, r21
     4d0:	84 83       	std	Z+4, r24	; 0x04
     4d2:	95 83       	std	Z+5, r25	; 0x05
     4d4:	a6 83       	std	Z+6, r26	; 0x06
     4d6:	b7 83       	std	Z+7, r27	; 0x07
     4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <__stack+0x95>
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	44 1f       	adc	r20, r20
     4e0:	55 1f       	adc	r21, r21
     4e2:	24 83       	std	Z+4, r18	; 0x04
     4e4:	35 83       	std	Z+5, r19	; 0x05
     4e6:	46 83       	std	Z+6, r20	; 0x06
     4e8:	57 83       	std	Z+7, r21	; 0x07
     4ea:	82 81       	ldd	r24, Z+2	; 0x02
     4ec:	93 81       	ldd	r25, Z+3	; 0x03
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	93 83       	std	Z+3, r25	; 0x03
     4f2:	82 83       	std	Z+2, r24	; 0x02
     4f4:	24 81       	ldd	r18, Z+4	; 0x04
     4f6:	35 81       	ldd	r19, Z+5	; 0x05
     4f8:	46 81       	ldd	r20, Z+6	; 0x06
     4fa:	57 81       	ldd	r21, Z+7	; 0x07
     4fc:	da 01       	movw	r26, r20
     4fe:	c9 01       	movw	r24, r18
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	a1 09       	sbc	r26, r1
     504:	b1 09       	sbc	r27, r1
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	9f 4f       	sbci	r25, 0xFF	; 255
     50a:	af 4f       	sbci	r26, 0xFF	; 255
     50c:	bf 43       	sbci	r27, 0x3F	; 63
     50e:	28 f3       	brcs	.-54     	; 0x4da <__stack+0x7b>
     510:	0b c0       	rjmp	.+22     	; 0x528 <__stack+0xc9>
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	33 82       	std	Z+3, r3	; 0x03
     516:	22 82       	std	Z+2, r2	; 0x02
     518:	ea 0c       	add	r14, r10
     51a:	fb 1c       	adc	r15, r11
     51c:	0c 1d       	adc	r16, r12
     51e:	1d 1d       	adc	r17, r13
     520:	e4 82       	std	Z+4, r14	; 0x04
     522:	f5 82       	std	Z+5, r15	; 0x05
     524:	06 83       	std	Z+6, r16	; 0x06
     526:	17 83       	std	Z+7, r17	; 0x07
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	80 83       	st	Z, r24
     52c:	24 81       	ldd	r18, Z+4	; 0x04
     52e:	35 81       	ldd	r19, Z+5	; 0x05
     530:	46 81       	ldd	r20, Z+6	; 0x06
     532:	57 81       	ldd	r21, Z+7	; 0x07
     534:	57 ff       	sbrs	r21, 7
     536:	1a c0       	rjmp	.+52     	; 0x56c <__stack+0x10d>
     538:	c9 01       	movw	r24, r18
     53a:	aa 27       	eor	r26, r26
     53c:	97 fd       	sbrc	r25, 7
     53e:	a0 95       	com	r26
     540:	ba 2f       	mov	r27, r26
     542:	81 70       	andi	r24, 0x01	; 1
     544:	90 70       	andi	r25, 0x00	; 0
     546:	a0 70       	andi	r26, 0x00	; 0
     548:	b0 70       	andi	r27, 0x00	; 0
     54a:	56 95       	lsr	r21
     54c:	47 95       	ror	r20
     54e:	37 95       	ror	r19
     550:	27 95       	ror	r18
     552:	82 2b       	or	r24, r18
     554:	93 2b       	or	r25, r19
     556:	a4 2b       	or	r26, r20
     558:	b5 2b       	or	r27, r21
     55a:	84 83       	std	Z+4, r24	; 0x04
     55c:	95 83       	std	Z+5, r25	; 0x05
     55e:	a6 83       	std	Z+6, r26	; 0x06
     560:	b7 83       	std	Z+7, r27	; 0x07
     562:	82 81       	ldd	r24, Z+2	; 0x02
     564:	93 81       	ldd	r25, Z+3	; 0x03
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	93 83       	std	Z+3, r25	; 0x03
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	df 01       	movw	r26, r30
     56e:	01 c0       	rjmp	.+2      	; 0x572 <__stack+0x113>
     570:	d2 01       	movw	r26, r4
     572:	cd 01       	movw	r24, r26
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	e2 e1       	ldi	r30, 0x12	; 18
     57a:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__epilogue_restores__>

0000057e <__subsf3>:
     57e:	a0 e2       	ldi	r26, 0x20	; 32
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	e5 ec       	ldi	r30, 0xC5	; 197
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__prologue_saves__+0x18>
     58a:	69 83       	std	Y+1, r22	; 0x01
     58c:	7a 83       	std	Y+2, r23	; 0x02
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	9c 83       	std	Y+4, r25	; 0x04
     592:	2d 83       	std	Y+5, r18	; 0x05
     594:	3e 83       	std	Y+6, r19	; 0x06
     596:	4f 83       	std	Y+7, r20	; 0x07
     598:	58 87       	std	Y+8, r21	; 0x08
     59a:	e9 e0       	ldi	r30, 0x09	; 9
     59c:	ee 2e       	mov	r14, r30
     59e:	f1 2c       	mov	r15, r1
     5a0:	ec 0e       	add	r14, r28
     5a2:	fd 1e       	adc	r15, r29
     5a4:	ce 01       	movw	r24, r28
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	b7 01       	movw	r22, r14
     5aa:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     5ae:	8e 01       	movw	r16, r28
     5b0:	0f 5e       	subi	r16, 0xEF	; 239
     5b2:	1f 4f       	sbci	r17, 0xFF	; 255
     5b4:	ce 01       	movw	r24, r28
     5b6:	05 96       	adiw	r24, 0x05	; 5
     5b8:	b8 01       	movw	r22, r16
     5ba:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     5be:	8a 89       	ldd	r24, Y+18	; 0x12
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	89 27       	eor	r24, r25
     5c4:	8a 8b       	std	Y+18, r24	; 0x12
     5c6:	c7 01       	movw	r24, r14
     5c8:	b8 01       	movw	r22, r16
     5ca:	ae 01       	movw	r20, r28
     5cc:	47 5e       	subi	r20, 0xE7	; 231
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     5d4:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__pack_f>
     5d8:	a0 96       	adiw	r28, 0x20	; 32
     5da:	e6 e0       	ldi	r30, 0x06	; 6
     5dc:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__+0x18>

000005e0 <__addsf3>:
     5e0:	a0 e2       	ldi	r26, 0x20	; 32
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e6 ef       	ldi	r30, 0xF6	; 246
     5e6:	f2 e0       	ldi	r31, 0x02	; 2
     5e8:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__prologue_saves__+0x18>
     5ec:	69 83       	std	Y+1, r22	; 0x01
     5ee:	7a 83       	std	Y+2, r23	; 0x02
     5f0:	8b 83       	std	Y+3, r24	; 0x03
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	2d 83       	std	Y+5, r18	; 0x05
     5f6:	3e 83       	std	Y+6, r19	; 0x06
     5f8:	4f 83       	std	Y+7, r20	; 0x07
     5fa:	58 87       	std	Y+8, r21	; 0x08
     5fc:	f9 e0       	ldi	r31, 0x09	; 9
     5fe:	ef 2e       	mov	r14, r31
     600:	f1 2c       	mov	r15, r1
     602:	ec 0e       	add	r14, r28
     604:	fd 1e       	adc	r15, r29
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	b7 01       	movw	r22, r14
     60c:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     610:	8e 01       	movw	r16, r28
     612:	0f 5e       	subi	r16, 0xEF	; 239
     614:	1f 4f       	sbci	r17, 0xFF	; 255
     616:	ce 01       	movw	r24, r28
     618:	05 96       	adiw	r24, 0x05	; 5
     61a:	b8 01       	movw	r22, r16
     61c:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     620:	c7 01       	movw	r24, r14
     622:	b8 01       	movw	r22, r16
     624:	ae 01       	movw	r20, r28
     626:	47 5e       	subi	r20, 0xE7	; 231
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     62e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__pack_f>
     632:	a0 96       	adiw	r28, 0x20	; 32
     634:	e6 e0       	ldi	r30, 0x06	; 6
     636:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__+0x18>

0000063a <__mulsf3>:
     63a:	a0 e2       	ldi	r26, 0x20	; 32
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	e3 e2       	ldi	r30, 0x23	; 35
     640:	f3 e0       	ldi	r31, 0x03	; 3
     642:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__prologue_saves__>
     646:	69 83       	std	Y+1, r22	; 0x01
     648:	7a 83       	std	Y+2, r23	; 0x02
     64a:	8b 83       	std	Y+3, r24	; 0x03
     64c:	9c 83       	std	Y+4, r25	; 0x04
     64e:	2d 83       	std	Y+5, r18	; 0x05
     650:	3e 83       	std	Y+6, r19	; 0x06
     652:	4f 83       	std	Y+7, r20	; 0x07
     654:	58 87       	std	Y+8, r21	; 0x08
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	be 01       	movw	r22, r28
     65c:	67 5f       	subi	r22, 0xF7	; 247
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     664:	ce 01       	movw	r24, r28
     666:	05 96       	adiw	r24, 0x05	; 5
     668:	be 01       	movw	r22, r28
     66a:	6f 5e       	subi	r22, 0xEF	; 239
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     672:	99 85       	ldd	r25, Y+9	; 0x09
     674:	92 30       	cpi	r25, 0x02	; 2
     676:	88 f0       	brcs	.+34     	; 0x69a <__mulsf3+0x60>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	c8 f0       	brcs	.+50     	; 0x6b0 <__mulsf3+0x76>
     67e:	94 30       	cpi	r25, 0x04	; 4
     680:	19 f4       	brne	.+6      	; 0x688 <__mulsf3+0x4e>
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	51 f4       	brne	.+20     	; 0x69a <__mulsf3+0x60>
     686:	04 c0       	rjmp	.+8      	; 0x690 <__mulsf3+0x56>
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	29 f4       	brne	.+10     	; 0x696 <__mulsf3+0x5c>
     68c:	92 30       	cpi	r25, 0x02	; 2
     68e:	81 f4       	brne	.+32     	; 0x6b0 <__mulsf3+0x76>
     690:	80 e6       	ldi	r24, 0x60	; 96
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	c6 c0       	rjmp	.+396    	; 0x822 <__mulsf3+0x1e8>
     696:	92 30       	cpi	r25, 0x02	; 2
     698:	49 f4       	brne	.+18     	; 0x6ac <__mulsf3+0x72>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	9a 85       	ldd	r25, Y+10	; 0x0a
     69e:	8a 89       	ldd	r24, Y+18	; 0x12
     6a0:	98 13       	cpse	r25, r24
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	2a 87       	std	Y+10, r18	; 0x0a
     6a6:	ce 01       	movw	r24, r28
     6a8:	09 96       	adiw	r24, 0x09	; 9
     6aa:	bb c0       	rjmp	.+374    	; 0x822 <__mulsf3+0x1e8>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	49 f4       	brne	.+18     	; 0x6c2 <__mulsf3+0x88>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b4:	8a 89       	ldd	r24, Y+18	; 0x12
     6b6:	98 13       	cpse	r25, r24
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	2a 8b       	std	Y+18, r18	; 0x12
     6bc:	ce 01       	movw	r24, r28
     6be:	41 96       	adiw	r24, 0x11	; 17
     6c0:	b0 c0       	rjmp	.+352    	; 0x822 <__mulsf3+0x1e8>
     6c2:	2d 84       	ldd	r2, Y+13	; 0x0d
     6c4:	3e 84       	ldd	r3, Y+14	; 0x0e
     6c6:	4f 84       	ldd	r4, Y+15	; 0x0f
     6c8:	58 88       	ldd	r5, Y+16	; 0x10
     6ca:	6d 88       	ldd	r6, Y+21	; 0x15
     6cc:	7e 88       	ldd	r7, Y+22	; 0x16
     6ce:	8f 88       	ldd	r8, Y+23	; 0x17
     6d0:	98 8c       	ldd	r9, Y+24	; 0x18
     6d2:	ee 24       	eor	r14, r14
     6d4:	ff 24       	eor	r15, r15
     6d6:	87 01       	movw	r16, r14
     6d8:	aa 24       	eor	r10, r10
     6da:	bb 24       	eor	r11, r11
     6dc:	65 01       	movw	r12, r10
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	e0 e0       	ldi	r30, 0x00	; 0
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	c1 01       	movw	r24, r2
     6ec:	81 70       	andi	r24, 0x01	; 1
     6ee:	90 70       	andi	r25, 0x00	; 0
     6f0:	89 2b       	or	r24, r25
     6f2:	e9 f0       	breq	.+58     	; 0x72e <__mulsf3+0xf4>
     6f4:	e6 0c       	add	r14, r6
     6f6:	f7 1c       	adc	r15, r7
     6f8:	08 1d       	adc	r16, r8
     6fa:	19 1d       	adc	r17, r9
     6fc:	9a 01       	movw	r18, r20
     6fe:	ab 01       	movw	r20, r22
     700:	2a 0d       	add	r18, r10
     702:	3b 1d       	adc	r19, r11
     704:	4c 1d       	adc	r20, r12
     706:	5d 1d       	adc	r21, r13
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	e6 14       	cp	r14, r6
     712:	f7 04       	cpc	r15, r7
     714:	08 05       	cpc	r16, r8
     716:	19 05       	cpc	r17, r9
     718:	20 f4       	brcc	.+8      	; 0x722 <__mulsf3+0xe8>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	ba 01       	movw	r22, r20
     724:	a9 01       	movw	r20, r18
     726:	48 0f       	add	r20, r24
     728:	59 1f       	adc	r21, r25
     72a:	6a 1f       	adc	r22, r26
     72c:	7b 1f       	adc	r23, r27
     72e:	aa 0c       	add	r10, r10
     730:	bb 1c       	adc	r11, r11
     732:	cc 1c       	adc	r12, r12
     734:	dd 1c       	adc	r13, r13
     736:	97 fe       	sbrs	r9, 7
     738:	08 c0       	rjmp	.+16     	; 0x74a <__mulsf3+0x110>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	a0 e0       	ldi	r26, 0x00	; 0
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	a8 2a       	or	r10, r24
     744:	b9 2a       	or	r11, r25
     746:	ca 2a       	or	r12, r26
     748:	db 2a       	or	r13, r27
     74a:	31 96       	adiw	r30, 0x01	; 1
     74c:	e0 32       	cpi	r30, 0x20	; 32
     74e:	f1 05       	cpc	r31, r1
     750:	49 f0       	breq	.+18     	; 0x764 <__mulsf3+0x12a>
     752:	66 0c       	add	r6, r6
     754:	77 1c       	adc	r7, r7
     756:	88 1c       	adc	r8, r8
     758:	99 1c       	adc	r9, r9
     75a:	56 94       	lsr	r5
     75c:	47 94       	ror	r4
     75e:	37 94       	ror	r3
     760:	27 94       	ror	r2
     762:	c3 cf       	rjmp	.-122    	; 0x6ea <__mulsf3+0xb0>
     764:	fa 85       	ldd	r31, Y+10	; 0x0a
     766:	ea 89       	ldd	r30, Y+18	; 0x12
     768:	2b 89       	ldd	r18, Y+19	; 0x13
     76a:	3c 89       	ldd	r19, Y+20	; 0x14
     76c:	8b 85       	ldd	r24, Y+11	; 0x0b
     76e:	9c 85       	ldd	r25, Y+12	; 0x0c
     770:	28 0f       	add	r18, r24
     772:	39 1f       	adc	r19, r25
     774:	2e 5f       	subi	r18, 0xFE	; 254
     776:	3f 4f       	sbci	r19, 0xFF	; 255
     778:	17 c0       	rjmp	.+46     	; 0x7a8 <__mulsf3+0x16e>
     77a:	ca 01       	movw	r24, r20
     77c:	81 70       	andi	r24, 0x01	; 1
     77e:	90 70       	andi	r25, 0x00	; 0
     780:	89 2b       	or	r24, r25
     782:	61 f0       	breq	.+24     	; 0x79c <__mulsf3+0x162>
     784:	16 95       	lsr	r17
     786:	07 95       	ror	r16
     788:	f7 94       	ror	r15
     78a:	e7 94       	ror	r14
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a0 e0       	ldi	r26, 0x00	; 0
     792:	b0 e8       	ldi	r27, 0x80	; 128
     794:	e8 2a       	or	r14, r24
     796:	f9 2a       	or	r15, r25
     798:	0a 2b       	or	r16, r26
     79a:	1b 2b       	or	r17, r27
     79c:	76 95       	lsr	r23
     79e:	67 95       	ror	r22
     7a0:	57 95       	ror	r21
     7a2:	47 95       	ror	r20
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	77 fd       	sbrc	r23, 7
     7aa:	e7 cf       	rjmp	.-50     	; 0x77a <__mulsf3+0x140>
     7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <__mulsf3+0x18c>
     7ae:	44 0f       	add	r20, r20
     7b0:	55 1f       	adc	r21, r21
     7b2:	66 1f       	adc	r22, r22
     7b4:	77 1f       	adc	r23, r23
     7b6:	17 fd       	sbrc	r17, 7
     7b8:	41 60       	ori	r20, 0x01	; 1
     7ba:	ee 0c       	add	r14, r14
     7bc:	ff 1c       	adc	r15, r15
     7be:	00 1f       	adc	r16, r16
     7c0:	11 1f       	adc	r17, r17
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	30 40       	sbci	r19, 0x00	; 0
     7c6:	40 30       	cpi	r20, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	59 07       	cpc	r21, r25
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	69 07       	cpc	r22, r25
     7d0:	90 e4       	ldi	r25, 0x40	; 64
     7d2:	79 07       	cpc	r23, r25
     7d4:	60 f3       	brcs	.-40     	; 0x7ae <__mulsf3+0x174>
     7d6:	2b 8f       	std	Y+27, r18	; 0x1b
     7d8:	3c 8f       	std	Y+28, r19	; 0x1c
     7da:	db 01       	movw	r26, r22
     7dc:	ca 01       	movw	r24, r20
     7de:	8f 77       	andi	r24, 0x7F	; 127
     7e0:	90 70       	andi	r25, 0x00	; 0
     7e2:	a0 70       	andi	r26, 0x00	; 0
     7e4:	b0 70       	andi	r27, 0x00	; 0
     7e6:	80 34       	cpi	r24, 0x40	; 64
     7e8:	91 05       	cpc	r25, r1
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
     7ee:	61 f4       	brne	.+24     	; 0x808 <__mulsf3+0x1ce>
     7f0:	47 fd       	sbrc	r20, 7
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <__mulsf3+0x1ce>
     7f4:	e1 14       	cp	r14, r1
     7f6:	f1 04       	cpc	r15, r1
     7f8:	01 05       	cpc	r16, r1
     7fa:	11 05       	cpc	r17, r1
     7fc:	29 f0       	breq	.+10     	; 0x808 <__mulsf3+0x1ce>
     7fe:	40 5c       	subi	r20, 0xC0	; 192
     800:	5f 4f       	sbci	r21, 0xFF	; 255
     802:	6f 4f       	sbci	r22, 0xFF	; 255
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	40 78       	andi	r20, 0x80	; 128
     808:	1a 8e       	std	Y+26, r1	; 0x1a
     80a:	fe 17       	cp	r31, r30
     80c:	11 f0       	breq	.+4      	; 0x812 <__mulsf3+0x1d8>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	8a 8f       	std	Y+26, r24	; 0x1a
     812:	4d 8f       	std	Y+29, r20	; 0x1d
     814:	5e 8f       	std	Y+30, r21	; 0x1e
     816:	6f 8f       	std	Y+31, r22	; 0x1f
     818:	78 a3       	std	Y+32, r23	; 0x20
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 8f       	std	Y+25, r24	; 0x19
     81e:	ce 01       	movw	r24, r28
     820:	49 96       	adiw	r24, 0x19	; 25
     822:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__pack_f>
     826:	a0 96       	adiw	r28, 0x20	; 32
     828:	e2 e1       	ldi	r30, 0x12	; 18
     82a:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__epilogue_restores__>

0000082e <__gtsf2>:
     82e:	a8 e1       	ldi	r26, 0x18	; 24
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	ed e1       	ldi	r30, 0x1D	; 29
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__prologue_saves__+0x18>
     83a:	69 83       	std	Y+1, r22	; 0x01
     83c:	7a 83       	std	Y+2, r23	; 0x02
     83e:	8b 83       	std	Y+3, r24	; 0x03
     840:	9c 83       	std	Y+4, r25	; 0x04
     842:	2d 83       	std	Y+5, r18	; 0x05
     844:	3e 83       	std	Y+6, r19	; 0x06
     846:	4f 83       	std	Y+7, r20	; 0x07
     848:	58 87       	std	Y+8, r21	; 0x08
     84a:	89 e0       	ldi	r24, 0x09	; 9
     84c:	e8 2e       	mov	r14, r24
     84e:	f1 2c       	mov	r15, r1
     850:	ec 0e       	add	r14, r28
     852:	fd 1e       	adc	r15, r29
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	b7 01       	movw	r22, r14
     85a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     85e:	8e 01       	movw	r16, r28
     860:	0f 5e       	subi	r16, 0xEF	; 239
     862:	1f 4f       	sbci	r17, 0xFF	; 255
     864:	ce 01       	movw	r24, r28
     866:	05 96       	adiw	r24, 0x05	; 5
     868:	b8 01       	movw	r22, r16
     86a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     86e:	89 85       	ldd	r24, Y+9	; 0x09
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	40 f0       	brcs	.+16     	; 0x884 <__gtsf2+0x56>
     874:	89 89       	ldd	r24, Y+17	; 0x11
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	28 f0       	brcs	.+10     	; 0x884 <__gtsf2+0x56>
     87a:	c7 01       	movw	r24, r14
     87c:	b8 01       	movw	r22, r16
     87e:	0e 94 48 06 	call	0xc90	; 0xc90 <__fpcmp_parts_f>
     882:	01 c0       	rjmp	.+2      	; 0x886 <__gtsf2+0x58>
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	68 96       	adiw	r28, 0x18	; 24
     888:	e6 e0       	ldi	r30, 0x06	; 6
     88a:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__+0x18>

0000088e <__gesf2>:
     88e:	a8 e1       	ldi	r26, 0x18	; 24
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	ed e4       	ldi	r30, 0x4D	; 77
     894:	f4 e0       	ldi	r31, 0x04	; 4
     896:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__prologue_saves__+0x18>
     89a:	69 83       	std	Y+1, r22	; 0x01
     89c:	7a 83       	std	Y+2, r23	; 0x02
     89e:	8b 83       	std	Y+3, r24	; 0x03
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	2d 83       	std	Y+5, r18	; 0x05
     8a4:	3e 83       	std	Y+6, r19	; 0x06
     8a6:	4f 83       	std	Y+7, r20	; 0x07
     8a8:	58 87       	std	Y+8, r21	; 0x08
     8aa:	89 e0       	ldi	r24, 0x09	; 9
     8ac:	e8 2e       	mov	r14, r24
     8ae:	f1 2c       	mov	r15, r1
     8b0:	ec 0e       	add	r14, r28
     8b2:	fd 1e       	adc	r15, r29
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	b7 01       	movw	r22, r14
     8ba:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     8be:	8e 01       	movw	r16, r28
     8c0:	0f 5e       	subi	r16, 0xEF	; 239
     8c2:	1f 4f       	sbci	r17, 0xFF	; 255
     8c4:	ce 01       	movw	r24, r28
     8c6:	05 96       	adiw	r24, 0x05	; 5
     8c8:	b8 01       	movw	r22, r16
     8ca:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     8ce:	89 85       	ldd	r24, Y+9	; 0x09
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	40 f0       	brcs	.+16     	; 0x8e4 <__gesf2+0x56>
     8d4:	89 89       	ldd	r24, Y+17	; 0x11
     8d6:	82 30       	cpi	r24, 0x02	; 2
     8d8:	28 f0       	brcs	.+10     	; 0x8e4 <__gesf2+0x56>
     8da:	c7 01       	movw	r24, r14
     8dc:	b8 01       	movw	r22, r16
     8de:	0e 94 48 06 	call	0xc90	; 0xc90 <__fpcmp_parts_f>
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <__gesf2+0x58>
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	68 96       	adiw	r28, 0x18	; 24
     8e8:	e6 e0       	ldi	r30, 0x06	; 6
     8ea:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__+0x18>

000008ee <__ltsf2>:
     8ee:	a8 e1       	ldi	r26, 0x18	; 24
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	ed e7       	ldi	r30, 0x7D	; 125
     8f4:	f4 e0       	ldi	r31, 0x04	; 4
     8f6:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__prologue_saves__+0x18>
     8fa:	69 83       	std	Y+1, r22	; 0x01
     8fc:	7a 83       	std	Y+2, r23	; 0x02
     8fe:	8b 83       	std	Y+3, r24	; 0x03
     900:	9c 83       	std	Y+4, r25	; 0x04
     902:	2d 83       	std	Y+5, r18	; 0x05
     904:	3e 83       	std	Y+6, r19	; 0x06
     906:	4f 83       	std	Y+7, r20	; 0x07
     908:	58 87       	std	Y+8, r21	; 0x08
     90a:	89 e0       	ldi	r24, 0x09	; 9
     90c:	e8 2e       	mov	r14, r24
     90e:	f1 2c       	mov	r15, r1
     910:	ec 0e       	add	r14, r28
     912:	fd 1e       	adc	r15, r29
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	b7 01       	movw	r22, r14
     91a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     91e:	8e 01       	movw	r16, r28
     920:	0f 5e       	subi	r16, 0xEF	; 239
     922:	1f 4f       	sbci	r17, 0xFF	; 255
     924:	ce 01       	movw	r24, r28
     926:	05 96       	adiw	r24, 0x05	; 5
     928:	b8 01       	movw	r22, r16
     92a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     92e:	89 85       	ldd	r24, Y+9	; 0x09
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	40 f0       	brcs	.+16     	; 0x944 <__ltsf2+0x56>
     934:	89 89       	ldd	r24, Y+17	; 0x11
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	28 f0       	brcs	.+10     	; 0x944 <__ltsf2+0x56>
     93a:	c7 01       	movw	r24, r14
     93c:	b8 01       	movw	r22, r16
     93e:	0e 94 48 06 	call	0xc90	; 0xc90 <__fpcmp_parts_f>
     942:	01 c0       	rjmp	.+2      	; 0x946 <__ltsf2+0x58>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	68 96       	adiw	r28, 0x18	; 24
     948:	e6 e0       	ldi	r30, 0x06	; 6
     94a:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__+0x18>

0000094e <__fixsfsi>:
     94e:	ac e0       	ldi	r26, 0x0C	; 12
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	ed ea       	ldi	r30, 0xAD	; 173
     954:	f4 e0       	ldi	r31, 0x04	; 4
     956:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__prologue_saves__+0x20>
     95a:	69 83       	std	Y+1, r22	; 0x01
     95c:	7a 83       	std	Y+2, r23	; 0x02
     95e:	8b 83       	std	Y+3, r24	; 0x03
     960:	9c 83       	std	Y+4, r25	; 0x04
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	be 01       	movw	r22, r28
     968:	6b 5f       	subi	r22, 0xFB	; 251
     96a:	7f 4f       	sbci	r23, 0xFF	; 255
     96c:	0e 94 d0 05 	call	0xba0	; 0xba0 <__unpack_f>
     970:	8d 81       	ldd	r24, Y+5	; 0x05
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	61 f1       	breq	.+88     	; 0x9ce <__fixsfsi+0x80>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	50 f1       	brcs	.+84     	; 0x9ce <__fixsfsi+0x80>
     97a:	84 30       	cpi	r24, 0x04	; 4
     97c:	21 f4       	brne	.+8      	; 0x986 <__fixsfsi+0x38>
     97e:	8e 81       	ldd	r24, Y+6	; 0x06
     980:	88 23       	and	r24, r24
     982:	51 f1       	breq	.+84     	; 0x9d8 <__fixsfsi+0x8a>
     984:	2e c0       	rjmp	.+92     	; 0x9e2 <__fixsfsi+0x94>
     986:	2f 81       	ldd	r18, Y+7	; 0x07
     988:	38 85       	ldd	r19, Y+8	; 0x08
     98a:	37 fd       	sbrc	r19, 7
     98c:	20 c0       	rjmp	.+64     	; 0x9ce <__fixsfsi+0x80>
     98e:	6e 81       	ldd	r22, Y+6	; 0x06
     990:	2f 31       	cpi	r18, 0x1F	; 31
     992:	31 05       	cpc	r19, r1
     994:	1c f0       	brlt	.+6      	; 0x99c <__fixsfsi+0x4e>
     996:	66 23       	and	r22, r22
     998:	f9 f0       	breq	.+62     	; 0x9d8 <__fixsfsi+0x8a>
     99a:	23 c0       	rjmp	.+70     	; 0x9e2 <__fixsfsi+0x94>
     99c:	8e e1       	ldi	r24, 0x1E	; 30
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	82 1b       	sub	r24, r18
     9a2:	93 0b       	sbc	r25, r19
     9a4:	29 85       	ldd	r18, Y+9	; 0x09
     9a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a8:	4b 85       	ldd	r20, Y+11	; 0x0b
     9aa:	5c 85       	ldd	r21, Y+12	; 0x0c
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <__fixsfsi+0x68>
     9ae:	56 95       	lsr	r21
     9b0:	47 95       	ror	r20
     9b2:	37 95       	ror	r19
     9b4:	27 95       	ror	r18
     9b6:	8a 95       	dec	r24
     9b8:	d2 f7       	brpl	.-12     	; 0x9ae <__fixsfsi+0x60>
     9ba:	66 23       	and	r22, r22
     9bc:	b1 f0       	breq	.+44     	; 0x9ea <__fixsfsi+0x9c>
     9be:	50 95       	com	r21
     9c0:	40 95       	com	r20
     9c2:	30 95       	com	r19
     9c4:	21 95       	neg	r18
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	4f 4f       	sbci	r20, 0xFF	; 255
     9ca:	5f 4f       	sbci	r21, 0xFF	; 255
     9cc:	0e c0       	rjmp	.+28     	; 0x9ea <__fixsfsi+0x9c>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	09 c0       	rjmp	.+18     	; 0x9ea <__fixsfsi+0x9c>
     9d8:	2f ef       	ldi	r18, 0xFF	; 255
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	4f ef       	ldi	r20, 0xFF	; 255
     9de:	5f e7       	ldi	r21, 0x7F	; 127
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__fixsfsi+0x9c>
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	50 e8       	ldi	r21, 0x80	; 128
     9ea:	b9 01       	movw	r22, r18
     9ec:	ca 01       	movw	r24, r20
     9ee:	2c 96       	adiw	r28, 0x0c	; 12
     9f0:	e2 e0       	ldi	r30, 0x02	; 2
     9f2:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__epilogue_restores__+0x20>

000009f6 <__pack_f>:
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	fc 01       	movw	r30, r24
     a02:	e4 80       	ldd	r14, Z+4	; 0x04
     a04:	f5 80       	ldd	r15, Z+5	; 0x05
     a06:	06 81       	ldd	r16, Z+6	; 0x06
     a08:	17 81       	ldd	r17, Z+7	; 0x07
     a0a:	d1 80       	ldd	r13, Z+1	; 0x01
     a0c:	80 81       	ld	r24, Z
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	48 f4       	brcc	.+18     	; 0xa24 <__pack_f+0x2e>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	a0 e1       	ldi	r26, 0x10	; 16
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e8 2a       	or	r14, r24
     a1c:	f9 2a       	or	r15, r25
     a1e:	0a 2b       	or	r16, r26
     a20:	1b 2b       	or	r17, r27
     a22:	a5 c0       	rjmp	.+330    	; 0xb6e <__pack_f+0x178>
     a24:	84 30       	cpi	r24, 0x04	; 4
     a26:	09 f4       	brne	.+2      	; 0xa2a <__pack_f+0x34>
     a28:	9f c0       	rjmp	.+318    	; 0xb68 <__pack_f+0x172>
     a2a:	82 30       	cpi	r24, 0x02	; 2
     a2c:	21 f4       	brne	.+8      	; 0xa36 <__pack_f+0x40>
     a2e:	ee 24       	eor	r14, r14
     a30:	ff 24       	eor	r15, r15
     a32:	87 01       	movw	r16, r14
     a34:	05 c0       	rjmp	.+10     	; 0xa40 <__pack_f+0x4a>
     a36:	e1 14       	cp	r14, r1
     a38:	f1 04       	cpc	r15, r1
     a3a:	01 05       	cpc	r16, r1
     a3c:	11 05       	cpc	r17, r1
     a3e:	19 f4       	brne	.+6      	; 0xa46 <__pack_f+0x50>
     a40:	e0 e0       	ldi	r30, 0x00	; 0
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	96 c0       	rjmp	.+300    	; 0xb72 <__pack_f+0x17c>
     a46:	62 81       	ldd	r22, Z+2	; 0x02
     a48:	73 81       	ldd	r23, Z+3	; 0x03
     a4a:	9f ef       	ldi	r25, 0xFF	; 255
     a4c:	62 38       	cpi	r22, 0x82	; 130
     a4e:	79 07       	cpc	r23, r25
     a50:	0c f0       	brlt	.+2      	; 0xa54 <__pack_f+0x5e>
     a52:	5b c0       	rjmp	.+182    	; 0xb0a <__pack_f+0x114>
     a54:	22 e8       	ldi	r18, 0x82	; 130
     a56:	3f ef       	ldi	r19, 0xFF	; 255
     a58:	26 1b       	sub	r18, r22
     a5a:	37 0b       	sbc	r19, r23
     a5c:	2a 31       	cpi	r18, 0x1A	; 26
     a5e:	31 05       	cpc	r19, r1
     a60:	2c f0       	brlt	.+10     	; 0xa6c <__pack_f+0x76>
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	2a c0       	rjmp	.+84     	; 0xac0 <__pack_f+0xca>
     a6c:	b8 01       	movw	r22, r16
     a6e:	a7 01       	movw	r20, r14
     a70:	02 2e       	mov	r0, r18
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__pack_f+0x86>
     a74:	76 95       	lsr	r23
     a76:	67 95       	ror	r22
     a78:	57 95       	ror	r21
     a7a:	47 95       	ror	r20
     a7c:	0a 94       	dec	r0
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__pack_f+0x7e>
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <__pack_f+0x9c>
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	aa 1f       	adc	r26, r26
     a90:	bb 1f       	adc	r27, r27
     a92:	2a 95       	dec	r18
     a94:	d2 f7       	brpl	.-12     	; 0xa8a <__pack_f+0x94>
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	a1 09       	sbc	r26, r1
     a9a:	b1 09       	sbc	r27, r1
     a9c:	8e 21       	and	r24, r14
     a9e:	9f 21       	and	r25, r15
     aa0:	a0 23       	and	r26, r16
     aa2:	b1 23       	and	r27, r17
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	a1 05       	cpc	r26, r1
     aa8:	b1 05       	cpc	r27, r1
     aaa:	21 f0       	breq	.+8      	; 0xab4 <__pack_f+0xbe>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	9a 01       	movw	r18, r20
     ab6:	ab 01       	movw	r20, r22
     ab8:	28 2b       	or	r18, r24
     aba:	39 2b       	or	r19, r25
     abc:	4a 2b       	or	r20, r26
     abe:	5b 2b       	or	r21, r27
     ac0:	da 01       	movw	r26, r20
     ac2:	c9 01       	movw	r24, r18
     ac4:	8f 77       	andi	r24, 0x7F	; 127
     ac6:	90 70       	andi	r25, 0x00	; 0
     ac8:	a0 70       	andi	r26, 0x00	; 0
     aca:	b0 70       	andi	r27, 0x00	; 0
     acc:	80 34       	cpi	r24, 0x40	; 64
     ace:	91 05       	cpc	r25, r1
     ad0:	a1 05       	cpc	r26, r1
     ad2:	b1 05       	cpc	r27, r1
     ad4:	39 f4       	brne	.+14     	; 0xae4 <__pack_f+0xee>
     ad6:	27 ff       	sbrs	r18, 7
     ad8:	09 c0       	rjmp	.+18     	; 0xaec <__pack_f+0xf6>
     ada:	20 5c       	subi	r18, 0xC0	; 192
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	4f 4f       	sbci	r20, 0xFF	; 255
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__pack_f+0xf6>
     ae4:	21 5c       	subi	r18, 0xC1	; 193
     ae6:	3f 4f       	sbci	r19, 0xFF	; 255
     ae8:	4f 4f       	sbci	r20, 0xFF	; 255
     aea:	5f 4f       	sbci	r21, 0xFF	; 255
     aec:	e0 e0       	ldi	r30, 0x00	; 0
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	20 30       	cpi	r18, 0x00	; 0
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	3a 07       	cpc	r19, r26
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	4a 07       	cpc	r20, r26
     afa:	a0 e4       	ldi	r26, 0x40	; 64
     afc:	5a 07       	cpc	r21, r26
     afe:	10 f0       	brcs	.+4      	; 0xb04 <__pack_f+0x10e>
     b00:	e1 e0       	ldi	r30, 0x01	; 1
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	79 01       	movw	r14, r18
     b06:	8a 01       	movw	r16, r20
     b08:	27 c0       	rjmp	.+78     	; 0xb58 <__pack_f+0x162>
     b0a:	60 38       	cpi	r22, 0x80	; 128
     b0c:	71 05       	cpc	r23, r1
     b0e:	64 f5       	brge	.+88     	; 0xb68 <__pack_f+0x172>
     b10:	fb 01       	movw	r30, r22
     b12:	e1 58       	subi	r30, 0x81	; 129
     b14:	ff 4f       	sbci	r31, 0xFF	; 255
     b16:	d8 01       	movw	r26, r16
     b18:	c7 01       	movw	r24, r14
     b1a:	8f 77       	andi	r24, 0x7F	; 127
     b1c:	90 70       	andi	r25, 0x00	; 0
     b1e:	a0 70       	andi	r26, 0x00	; 0
     b20:	b0 70       	andi	r27, 0x00	; 0
     b22:	80 34       	cpi	r24, 0x40	; 64
     b24:	91 05       	cpc	r25, r1
     b26:	a1 05       	cpc	r26, r1
     b28:	b1 05       	cpc	r27, r1
     b2a:	39 f4       	brne	.+14     	; 0xb3a <__pack_f+0x144>
     b2c:	e7 fe       	sbrs	r14, 7
     b2e:	0d c0       	rjmp	.+26     	; 0xb4a <__pack_f+0x154>
     b30:	80 e4       	ldi	r24, 0x40	; 64
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__pack_f+0x14c>
     b3a:	8f e3       	ldi	r24, 0x3F	; 63
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e8 0e       	add	r14, r24
     b44:	f9 1e       	adc	r15, r25
     b46:	0a 1f       	adc	r16, r26
     b48:	1b 1f       	adc	r17, r27
     b4a:	17 ff       	sbrs	r17, 7
     b4c:	05 c0       	rjmp	.+10     	; 0xb58 <__pack_f+0x162>
     b4e:	16 95       	lsr	r17
     b50:	07 95       	ror	r16
     b52:	f7 94       	ror	r15
     b54:	e7 94       	ror	r14
     b56:	31 96       	adiw	r30, 0x01	; 1
     b58:	87 e0       	ldi	r24, 0x07	; 7
     b5a:	16 95       	lsr	r17
     b5c:	07 95       	ror	r16
     b5e:	f7 94       	ror	r15
     b60:	e7 94       	ror	r14
     b62:	8a 95       	dec	r24
     b64:	d1 f7       	brne	.-12     	; 0xb5a <__pack_f+0x164>
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <__pack_f+0x17c>
     b68:	ee 24       	eor	r14, r14
     b6a:	ff 24       	eor	r15, r15
     b6c:	87 01       	movw	r16, r14
     b6e:	ef ef       	ldi	r30, 0xFF	; 255
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	6e 2f       	mov	r22, r30
     b74:	67 95       	ror	r22
     b76:	66 27       	eor	r22, r22
     b78:	67 95       	ror	r22
     b7a:	90 2f       	mov	r25, r16
     b7c:	9f 77       	andi	r25, 0x7F	; 127
     b7e:	d7 94       	ror	r13
     b80:	dd 24       	eor	r13, r13
     b82:	d7 94       	ror	r13
     b84:	8e 2f       	mov	r24, r30
     b86:	86 95       	lsr	r24
     b88:	49 2f       	mov	r20, r25
     b8a:	46 2b       	or	r20, r22
     b8c:	58 2f       	mov	r21, r24
     b8e:	5d 29       	or	r21, r13
     b90:	b7 01       	movw	r22, r14
     b92:	ca 01       	movw	r24, r20
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	08 95       	ret

00000ba0 <__unpack_f>:
     ba0:	fc 01       	movw	r30, r24
     ba2:	db 01       	movw	r26, r22
     ba4:	40 81       	ld	r20, Z
     ba6:	51 81       	ldd	r21, Z+1	; 0x01
     ba8:	22 81       	ldd	r18, Z+2	; 0x02
     baa:	62 2f       	mov	r22, r18
     bac:	6f 77       	andi	r22, 0x7F	; 127
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	22 1f       	adc	r18, r18
     bb2:	22 27       	eor	r18, r18
     bb4:	22 1f       	adc	r18, r18
     bb6:	93 81       	ldd	r25, Z+3	; 0x03
     bb8:	89 2f       	mov	r24, r25
     bba:	88 0f       	add	r24, r24
     bbc:	82 2b       	or	r24, r18
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	99 1f       	adc	r25, r25
     bc4:	99 27       	eor	r25, r25
     bc6:	99 1f       	adc	r25, r25
     bc8:	11 96       	adiw	r26, 0x01	; 1
     bca:	9c 93       	st	X, r25
     bcc:	11 97       	sbiw	r26, 0x01	; 1
     bce:	21 15       	cp	r18, r1
     bd0:	31 05       	cpc	r19, r1
     bd2:	a9 f5       	brne	.+106    	; 0xc3e <__unpack_f+0x9e>
     bd4:	41 15       	cp	r20, r1
     bd6:	51 05       	cpc	r21, r1
     bd8:	61 05       	cpc	r22, r1
     bda:	71 05       	cpc	r23, r1
     bdc:	11 f4       	brne	.+4      	; 0xbe2 <__unpack_f+0x42>
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	37 c0       	rjmp	.+110    	; 0xc50 <__unpack_f+0xb0>
     be2:	82 e8       	ldi	r24, 0x82	; 130
     be4:	9f ef       	ldi	r25, 0xFF	; 255
     be6:	13 96       	adiw	r26, 0x03	; 3
     be8:	9c 93       	st	X, r25
     bea:	8e 93       	st	-X, r24
     bec:	12 97       	sbiw	r26, 0x02	; 2
     bee:	9a 01       	movw	r18, r20
     bf0:	ab 01       	movw	r20, r22
     bf2:	67 e0       	ldi	r22, 0x07	; 7
     bf4:	22 0f       	add	r18, r18
     bf6:	33 1f       	adc	r19, r19
     bf8:	44 1f       	adc	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	6a 95       	dec	r22
     bfe:	d1 f7       	brne	.-12     	; 0xbf4 <__unpack_f+0x54>
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	8c 93       	st	X, r24
     c04:	0d c0       	rjmp	.+26     	; 0xc20 <__unpack_f+0x80>
     c06:	22 0f       	add	r18, r18
     c08:	33 1f       	adc	r19, r19
     c0a:	44 1f       	adc	r20, r20
     c0c:	55 1f       	adc	r21, r21
     c0e:	12 96       	adiw	r26, 0x02	; 2
     c10:	8d 91       	ld	r24, X+
     c12:	9c 91       	ld	r25, X
     c14:	13 97       	sbiw	r26, 0x03	; 3
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	13 96       	adiw	r26, 0x03	; 3
     c1a:	9c 93       	st	X, r25
     c1c:	8e 93       	st	-X, r24
     c1e:	12 97       	sbiw	r26, 0x02	; 2
     c20:	20 30       	cpi	r18, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	38 07       	cpc	r19, r24
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	48 07       	cpc	r20, r24
     c2a:	80 e4       	ldi	r24, 0x40	; 64
     c2c:	58 07       	cpc	r21, r24
     c2e:	58 f3       	brcs	.-42     	; 0xc06 <__unpack_f+0x66>
     c30:	14 96       	adiw	r26, 0x04	; 4
     c32:	2d 93       	st	X+, r18
     c34:	3d 93       	st	X+, r19
     c36:	4d 93       	st	X+, r20
     c38:	5c 93       	st	X, r21
     c3a:	17 97       	sbiw	r26, 0x07	; 7
     c3c:	08 95       	ret
     c3e:	2f 3f       	cpi	r18, 0xFF	; 255
     c40:	31 05       	cpc	r19, r1
     c42:	79 f4       	brne	.+30     	; 0xc62 <__unpack_f+0xc2>
     c44:	41 15       	cp	r20, r1
     c46:	51 05       	cpc	r21, r1
     c48:	61 05       	cpc	r22, r1
     c4a:	71 05       	cpc	r23, r1
     c4c:	19 f4       	brne	.+6      	; 0xc54 <__unpack_f+0xb4>
     c4e:	84 e0       	ldi	r24, 0x04	; 4
     c50:	8c 93       	st	X, r24
     c52:	08 95       	ret
     c54:	64 ff       	sbrs	r22, 4
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <__unpack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	8c 93       	st	X, r24
     c5c:	12 c0       	rjmp	.+36     	; 0xc82 <__unpack_f+0xe2>
     c5e:	1c 92       	st	X, r1
     c60:	10 c0       	rjmp	.+32     	; 0xc82 <__unpack_f+0xe2>
     c62:	2f 57       	subi	r18, 0x7F	; 127
     c64:	30 40       	sbci	r19, 0x00	; 0
     c66:	13 96       	adiw	r26, 0x03	; 3
     c68:	3c 93       	st	X, r19
     c6a:	2e 93       	st	-X, r18
     c6c:	12 97       	sbiw	r26, 0x02	; 2
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	8c 93       	st	X, r24
     c72:	87 e0       	ldi	r24, 0x07	; 7
     c74:	44 0f       	add	r20, r20
     c76:	55 1f       	adc	r21, r21
     c78:	66 1f       	adc	r22, r22
     c7a:	77 1f       	adc	r23, r23
     c7c:	8a 95       	dec	r24
     c7e:	d1 f7       	brne	.-12     	; 0xc74 <__unpack_f+0xd4>
     c80:	70 64       	ori	r23, 0x40	; 64
     c82:	14 96       	adiw	r26, 0x04	; 4
     c84:	4d 93       	st	X+, r20
     c86:	5d 93       	st	X+, r21
     c88:	6d 93       	st	X+, r22
     c8a:	7c 93       	st	X, r23
     c8c:	17 97       	sbiw	r26, 0x07	; 7
     c8e:	08 95       	ret

00000c90 <__fpcmp_parts_f>:
     c90:	1f 93       	push	r17
     c92:	dc 01       	movw	r26, r24
     c94:	fb 01       	movw	r30, r22
     c96:	9c 91       	ld	r25, X
     c98:	92 30       	cpi	r25, 0x02	; 2
     c9a:	08 f4       	brcc	.+2      	; 0xc9e <__fpcmp_parts_f+0xe>
     c9c:	47 c0       	rjmp	.+142    	; 0xd2c <__fpcmp_parts_f+0x9c>
     c9e:	80 81       	ld	r24, Z
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	08 f4       	brcc	.+2      	; 0xca6 <__fpcmp_parts_f+0x16>
     ca4:	43 c0       	rjmp	.+134    	; 0xd2c <__fpcmp_parts_f+0x9c>
     ca6:	94 30       	cpi	r25, 0x04	; 4
     ca8:	51 f4       	brne	.+20     	; 0xcbe <__fpcmp_parts_f+0x2e>
     caa:	11 96       	adiw	r26, 0x01	; 1
     cac:	1c 91       	ld	r17, X
     cae:	84 30       	cpi	r24, 0x04	; 4
     cb0:	99 f5       	brne	.+102    	; 0xd18 <__fpcmp_parts_f+0x88>
     cb2:	81 81       	ldd	r24, Z+1	; 0x01
     cb4:	68 2f       	mov	r22, r24
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	61 1b       	sub	r22, r17
     cba:	71 09       	sbc	r23, r1
     cbc:	3f c0       	rjmp	.+126    	; 0xd3c <__fpcmp_parts_f+0xac>
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	21 f0       	breq	.+8      	; 0xcca <__fpcmp_parts_f+0x3a>
     cc2:	92 30       	cpi	r25, 0x02	; 2
     cc4:	31 f4       	brne	.+12     	; 0xcd2 <__fpcmp_parts_f+0x42>
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	b9 f1       	breq	.+110    	; 0xd38 <__fpcmp_parts_f+0xa8>
     cca:	81 81       	ldd	r24, Z+1	; 0x01
     ccc:	88 23       	and	r24, r24
     cce:	89 f1       	breq	.+98     	; 0xd32 <__fpcmp_parts_f+0xa2>
     cd0:	2d c0       	rjmp	.+90     	; 0xd2c <__fpcmp_parts_f+0x9c>
     cd2:	11 96       	adiw	r26, 0x01	; 1
     cd4:	1c 91       	ld	r17, X
     cd6:	11 97       	sbiw	r26, 0x01	; 1
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	f1 f0       	breq	.+60     	; 0xd18 <__fpcmp_parts_f+0x88>
     cdc:	81 81       	ldd	r24, Z+1	; 0x01
     cde:	18 17       	cp	r17, r24
     ce0:	d9 f4       	brne	.+54     	; 0xd18 <__fpcmp_parts_f+0x88>
     ce2:	12 96       	adiw	r26, 0x02	; 2
     ce4:	2d 91       	ld	r18, X+
     ce6:	3c 91       	ld	r19, X
     ce8:	13 97       	sbiw	r26, 0x03	; 3
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	82 17       	cp	r24, r18
     cf0:	93 07       	cpc	r25, r19
     cf2:	94 f0       	brlt	.+36     	; 0xd18 <__fpcmp_parts_f+0x88>
     cf4:	28 17       	cp	r18, r24
     cf6:	39 07       	cpc	r19, r25
     cf8:	bc f0       	brlt	.+46     	; 0xd28 <__fpcmp_parts_f+0x98>
     cfa:	14 96       	adiw	r26, 0x04	; 4
     cfc:	8d 91       	ld	r24, X+
     cfe:	9d 91       	ld	r25, X+
     d00:	0d 90       	ld	r0, X+
     d02:	bc 91       	ld	r27, X
     d04:	a0 2d       	mov	r26, r0
     d06:	24 81       	ldd	r18, Z+4	; 0x04
     d08:	35 81       	ldd	r19, Z+5	; 0x05
     d0a:	46 81       	ldd	r20, Z+6	; 0x06
     d0c:	57 81       	ldd	r21, Z+7	; 0x07
     d0e:	28 17       	cp	r18, r24
     d10:	39 07       	cpc	r19, r25
     d12:	4a 07       	cpc	r20, r26
     d14:	5b 07       	cpc	r21, r27
     d16:	18 f4       	brcc	.+6      	; 0xd1e <__fpcmp_parts_f+0x8e>
     d18:	11 23       	and	r17, r17
     d1a:	41 f0       	breq	.+16     	; 0xd2c <__fpcmp_parts_f+0x9c>
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <__fpcmp_parts_f+0xa2>
     d1e:	82 17       	cp	r24, r18
     d20:	93 07       	cpc	r25, r19
     d22:	a4 07       	cpc	r26, r20
     d24:	b5 07       	cpc	r27, r21
     d26:	40 f4       	brcc	.+16     	; 0xd38 <__fpcmp_parts_f+0xa8>
     d28:	11 23       	and	r17, r17
     d2a:	19 f0       	breq	.+6      	; 0xd32 <__fpcmp_parts_f+0xa2>
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	05 c0       	rjmp	.+10     	; 0xd3c <__fpcmp_parts_f+0xac>
     d32:	6f ef       	ldi	r22, 0xFF	; 255
     d34:	7f ef       	ldi	r23, 0xFF	; 255
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <__fpcmp_parts_f+0xac>
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	cb 01       	movw	r24, r22
     d3e:	1f 91       	pop	r17
     d40:	08 95       	ret

00000d42 <main>:

/*                                 	Control_ECU Header File                                                      */
#include "Control_ECU.h"

/*				main Control_ECU Function		*/
int main(void) {
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	6c 97       	sbiw	r28, 0x1c	; 28
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(DDRA,1);
     d56:	aa e3       	ldi	r26, 0x3A	; 58
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ea e3       	ldi	r30, 0x3A	; 58
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	82 60       	ori	r24, 0x02	; 2
     d62:	8c 93       	st	X, r24
	CLEAR_BIT(PORTA,1);
     d64:	ab e3       	ldi	r26, 0x3B	; 59
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	eb e3       	ldi	r30, 0x3B	; 59
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8d 7f       	andi	r24, 0xFD	; 253
     d70:	8c 93       	st	X, r24
	SET_BIT(DDRB,1);
     d72:	a7 e3       	ldi	r26, 0x37	; 55
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e7 e3       	ldi	r30, 0x37	; 55
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	82 60       	ori	r24, 0x02	; 2
     d7e:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,1);
     d80:	a8 e3       	ldi	r26, 0x38	; 56
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e8 e3       	ldi	r30, 0x38	; 56
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8d 7f       	andi	r24, 0xFD	; 253
     d8c:	8c 93       	st	X, r24

	/* initialize EEPROM module  */
	EEPROM_init();
     d8e:	0e 94 52 12 	call	0x24a4	; 0x24a4 <EEPROM_init>
	UART_init(); /* initialize UART module  */
     d92:	0e 94 7e 14 	call	0x28fc	; 0x28fc <UART_init>

	/*		Determined function that call Back by Timer 	*/
	TIMER_setCallBack(TimerControl);
     d96:	8c e0       	ldi	r24, 0x0C	; 12
     d98:	9a e0       	ldi	r25, 0x0A	; 10
     d9a:	0e 94 06 14 	call	0x280c	; 0x280c <TIMER_setCallBack>

	/*		initial last three pins in PORTD (  Motor & Buzzer Pins )	*/
	DDRD |= 0xE0;
     d9e:	a1 e3       	ldi	r26, 0x31	; 49
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e1 e3       	ldi	r30, 0x31	; 49
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	80 6e       	ori	r24, 0xE0	; 224
     daa:	8c 93       	st	X, r24
	PORTD &= 0x1F;
     dac:	a2 e3       	ldi	r26, 0x32	; 50
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e2 e3       	ldi	r30, 0x32	; 50
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8f 71       	andi	r24, 0x1F	; 31
     db8:	8c 93       	st	X, r24
	/*  active this line when you want to reset the system */
	 //writePassInEEPROM(&addPass, &g_pass);


	/*  read password from EEPROM */
	readPassFromEEPROM(&addPass, &g_passCheck);
     dba:	8d e6       	ldi	r24, 0x6D	; 109
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	29 e7       	ldi	r18, 0x79	; 121
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	b9 01       	movw	r22, r18
     dc4:	0e 94 4f 11 	call	0x229e	; 0x229e <readPassFromEEPROM>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	aa e7       	ldi	r26, 0x7A	; 122
     dce:	b4 e4       	ldi	r27, 0x44	; 68
     dd0:	89 8f       	std	Y+25, r24	; 0x19
     dd2:	9a 8f       	std	Y+26, r25	; 0x1a
     dd4:	ab 8f       	std	Y+27, r26	; 0x1b
     dd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd8:	69 8d       	ldd	r22, Y+25	; 0x19
     dda:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ddc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dde:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	4a ef       	ldi	r20, 0xFA	; 250
     de6:	54 e4       	ldi	r21, 0x44	; 68
     de8:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	8d 8b       	std	Y+21, r24	; 0x15
     df2:	9e 8b       	std	Y+22, r25	; 0x16
     df4:	af 8b       	std	Y+23, r26	; 0x17
     df6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     df8:	6d 89       	ldd	r22, Y+21	; 0x15
     dfa:	7e 89       	ldd	r23, Y+22	; 0x16
     dfc:	8f 89       	ldd	r24, Y+23	; 0x17
     dfe:	98 8d       	ldd	r25, Y+24	; 0x18
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e8       	ldi	r20, 0x80	; 128
     e06:	5f e3       	ldi	r21, 0x3F	; 63
     e08:	0e 94 77 04 	call	0x8ee	; 0x8ee <__ltsf2>
     e0c:	88 23       	and	r24, r24
     e0e:	2c f4       	brge	.+10     	; 0xe1a <main+0xd8>
		__ticks = 1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	9c 8b       	std	Y+20, r25	; 0x14
     e16:	8b 8b       	std	Y+19, r24	; 0x13
     e18:	3f c0       	rjmp	.+126    	; 0xe98 <main+0x156>
	else if (__tmp > 65535)
     e1a:	6d 89       	ldd	r22, Y+21	; 0x15
     e1c:	7e 89       	ldd	r23, Y+22	; 0x16
     e1e:	8f 89       	ldd	r24, Y+23	; 0x17
     e20:	98 8d       	ldd	r25, Y+24	; 0x18
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	3f ef       	ldi	r19, 0xFF	; 255
     e26:	4f e7       	ldi	r20, 0x7F	; 127
     e28:	57 e4       	ldi	r21, 0x47	; 71
     e2a:	0e 94 17 04 	call	0x82e	; 0x82e <__gtsf2>
     e2e:	18 16       	cp	r1, r24
     e30:	4c f5       	brge	.+82     	; 0xe84 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e32:	69 8d       	ldd	r22, Y+25	; 0x19
     e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e2       	ldi	r20, 0x20	; 32
     e40:	51 e4       	ldi	r21, 0x41	; 65
     e42:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	9c 8b       	std	Y+20, r25	; 0x14
     e58:	8b 8b       	std	Y+19, r24	; 0x13
     e5a:	0f c0       	rjmp	.+30     	; 0xe7a <main+0x138>
     e5c:	88 ec       	ldi	r24, 0xC8	; 200
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9a 8b       	std	Y+18, r25	; 0x12
     e62:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e64:	89 89       	ldd	r24, Y+17	; 0x11
     e66:	9a 89       	ldd	r25, Y+18	; 0x12
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <main+0x126>
     e6c:	9a 8b       	std	Y+18, r25	; 0x12
     e6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e70:	8b 89       	ldd	r24, Y+19	; 0x13
     e72:	9c 89       	ldd	r25, Y+20	; 0x14
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	9c 8b       	std	Y+20, r25	; 0x14
     e78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7a:	8b 89       	ldd	r24, Y+19	; 0x13
     e7c:	9c 89       	ldd	r25, Y+20	; 0x14
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	69 f7       	brne	.-38     	; 0xe5c <main+0x11a>
     e82:	14 c0       	rjmp	.+40     	; 0xeac <main+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e84:	6d 89       	ldd	r22, Y+21	; 0x15
     e86:	7e 89       	ldd	r23, Y+22	; 0x16
     e88:	8f 89       	ldd	r24, Y+23	; 0x17
     e8a:	98 8d       	ldd	r25, Y+24	; 0x18
     e8c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9c 8b       	std	Y+20, r25	; 0x14
     e96:	8b 8b       	std	Y+19, r24	; 0x13
     e98:	8b 89       	ldd	r24, Y+19	; 0x13
     e9a:	9c 89       	ldd	r25, Y+20	; 0x14
     e9c:	98 8b       	std	Y+16, r25	; 0x10
     e9e:	8f 87       	std	Y+15, r24	; 0x0f
     ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea2:	98 89       	ldd	r25, Y+16	; 0x10
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <main+0x162>
     ea8:	98 8b       	std	Y+16, r25	; 0x10
     eaa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000); /*	wait one second to synchronize with HMI-ECU */

	UART_sendByte('#'); /* tells MC1 that MC2 become ready & start communication with MC1 */
     eac:	83 e2       	ldi	r24, 0x23	; 35
     eae:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>

	/*  check that first time used or used before that time */
	if (g_passCheck == 0) {
     eb2:	20 91 79 00 	lds	r18, 0x0079
     eb6:	30 91 7a 00 	lds	r19, 0x007A
     eba:	40 91 7b 00 	lds	r20, 0x007B
     ebe:	50 91 7c 00 	lds	r21, 0x007C
     ec2:	60 91 7d 00 	lds	r22, 0x007D
     ec6:	70 91 7e 00 	lds	r23, 0x007E
     eca:	80 91 7f 00 	lds	r24, 0x007F
     ece:	90 91 80 00 	lds	r25, 0x0080
     ed2:	e2 2f       	mov	r30, r18
     ed4:	e3 2b       	or	r30, r19
     ed6:	e4 2b       	or	r30, r20
     ed8:	e5 2b       	or	r30, r21
     eda:	e6 2b       	or	r30, r22
     edc:	e7 2b       	or	r30, r23
     ede:	e8 2b       	or	r30, r24
     ee0:	e9 2b       	or	r30, r25
     ee2:	ee 23       	and	r30, r30
     ee4:	31 f4       	brne	.+12     	; 0xef2 <main+0x1b0>
		UART_sendByte(SUCCESS);/*  tells MC1 that time is first used for that module */
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
		createNewPass();/*  start to create password */
     eec:	0e 94 00 08 	call	0x1000	; 0x1000 <createNewPass>
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <main+0x1b6>
	} else {
		UART_sendByte(ERROR);/*  tells MC1 that module used before that time*/
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
	}
	/* Start of infinity loop */
	while (1) {

		g_byte = UART_recieveByte(); /*  wait until receive number of pressed key */
     ef8:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <UART_recieveByte>
     efc:	80 93 83 00 	sts	0x0083, r24

		/* check that pressed key is '+' key to start open door mode*/
		if (g_byte == '+') {
     f00:	80 91 83 00 	lds	r24, 0x0083
     f04:	8b 32       	cpi	r24, 0x2B	; 43
     f06:	19 f4       	brne	.+6      	; 0xf0e <main+0x1cc>
			openDoor();/*  start open door mode */
     f08:	0e 94 65 0e 	call	0x1cca	; 0x1cca <openDoor>
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <main+0x1d8>
		} else if (g_byte == '-') { /* check that pressed key is '-' key to start change password mode*/
     f0e:	80 91 83 00 	lds	r24, 0x0083
     f12:	8d 32       	cpi	r24, 0x2D	; 45
     f14:	11 f4       	brne	.+4      	; 0xf1a <main+0x1d8>
			changePass(); /*  start change password mode */
     f16:	0e 94 5d 09 	call	0x12ba	; 0x12ba <changePass>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	aa ef       	ldi	r26, 0xFA	; 250
     f20:	b3 e4       	ldi	r27, 0x43	; 67
     f22:	8b 87       	std	Y+11, r24	; 0x0b
     f24:	9c 87       	std	Y+12, r25	; 0x0c
     f26:	ad 87       	std	Y+13, r26	; 0x0d
     f28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f30:	9e 85       	ldd	r25, Y+14	; 0x0e
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	4a ef       	ldi	r20, 0xFA	; 250
     f38:	54 e4       	ldi	r21, 0x44	; 68
     f3a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	8f 83       	std	Y+7, r24	; 0x07
     f44:	98 87       	std	Y+8, r25	; 0x08
     f46:	a9 87       	std	Y+9, r26	; 0x09
     f48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f4a:	6f 81       	ldd	r22, Y+7	; 0x07
     f4c:	78 85       	ldd	r23, Y+8	; 0x08
     f4e:	89 85       	ldd	r24, Y+9	; 0x09
     f50:	9a 85       	ldd	r25, Y+10	; 0x0a
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e8       	ldi	r20, 0x80	; 128
     f58:	5f e3       	ldi	r21, 0x3F	; 63
     f5a:	0e 94 77 04 	call	0x8ee	; 0x8ee <__ltsf2>
     f5e:	88 23       	and	r24, r24
     f60:	2c f4       	brge	.+10     	; 0xf6c <main+0x22a>
		__ticks = 1;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9e 83       	std	Y+6, r25	; 0x06
     f68:	8d 83       	std	Y+5, r24	; 0x05
     f6a:	3f c0       	rjmp	.+126    	; 0xfea <main+0x2a8>
	else if (__tmp > 65535)
     f6c:	6f 81       	ldd	r22, Y+7	; 0x07
     f6e:	78 85       	ldd	r23, Y+8	; 0x08
     f70:	89 85       	ldd	r24, Y+9	; 0x09
     f72:	9a 85       	ldd	r25, Y+10	; 0x0a
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	3f ef       	ldi	r19, 0xFF	; 255
     f78:	4f e7       	ldi	r20, 0x7F	; 127
     f7a:	57 e4       	ldi	r21, 0x47	; 71
     f7c:	0e 94 17 04 	call	0x82e	; 0x82e <__gtsf2>
     f80:	18 16       	cp	r1, r24
     f82:	4c f5       	brge	.+82     	; 0xfd6 <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f84:	6b 85       	ldd	r22, Y+11	; 0x0b
     f86:	7c 85       	ldd	r23, Y+12	; 0x0c
     f88:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e2       	ldi	r20, 0x20	; 32
     f92:	51 e4       	ldi	r21, 0x41	; 65
     f94:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	bc 01       	movw	r22, r24
     f9e:	cd 01       	movw	r24, r26
     fa0:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	9e 83       	std	Y+6, r25	; 0x06
     faa:	8d 83       	std	Y+5, r24	; 0x05
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <main+0x28a>
     fae:	88 ec       	ldi	r24, 0xC8	; 200
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9c 83       	std	Y+4, r25	; 0x04
     fb4:	8b 83       	std	Y+3, r24	; 0x03
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <main+0x278>
     fbe:	9c 83       	std	Y+4, r25	; 0x04
     fc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	9e 83       	std	Y+6, r25	; 0x06
     fca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	69 f7       	brne	.-38     	; 0xfae <main+0x26c>
     fd4:	91 cf       	rjmp	.-222    	; 0xef8 <main+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd6:	6f 81       	ldd	r22, Y+7	; 0x07
     fd8:	78 85       	ldd	r23, Y+8	; 0x08
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fde:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	9e 83       	std	Y+6, r25	; 0x06
     fe8:	8d 83       	std	Y+5, r24	; 0x05
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <main+0x2b4>
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	7c cf       	rjmp	.-264    	; 0xef8 <main+0x1b6>

00001000 <createNewPass>:


/*
 * Description: Function to create password at first used or change password .
 */
void createNewPass(void) {
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	ae 97       	sbiw	r28, 0x2e	; 46
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
	do {
		enterPass(&g_pass); /* receive first password*/
    1014:	81 e7       	ldi	r24, 0x71	; 113
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <enterPass>
		enterPass(&g_passCheck); /* receive second password*/
    101c:	89 e7       	ldi	r24, 0x79	; 121
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <enterPass>
		if (g_pass == g_passCheck && g_pass != 0) { /* check that two password equal and pass not equal zero*/
    1024:	80 91 71 00 	lds	r24, 0x0071
    1028:	8f a3       	std	Y+39, r24	; 0x27
    102a:	90 91 72 00 	lds	r25, 0x0072
    102e:	98 a7       	std	Y+40, r25	; 0x28
    1030:	80 91 73 00 	lds	r24, 0x0073
    1034:	89 a7       	std	Y+41, r24	; 0x29
    1036:	90 91 74 00 	lds	r25, 0x0074
    103a:	9a a7       	std	Y+42, r25	; 0x2a
    103c:	80 91 75 00 	lds	r24, 0x0075
    1040:	8b a7       	std	Y+43, r24	; 0x2b
    1042:	90 91 76 00 	lds	r25, 0x0076
    1046:	9c a7       	std	Y+44, r25	; 0x2c
    1048:	80 91 77 00 	lds	r24, 0x0077
    104c:	8d a7       	std	Y+45, r24	; 0x2d
    104e:	90 91 78 00 	lds	r25, 0x0078
    1052:	9e a7       	std	Y+46, r25	; 0x2e
    1054:	80 91 79 00 	lds	r24, 0x0079
    1058:	8f 8f       	std	Y+31, r24	; 0x1f
    105a:	90 91 7a 00 	lds	r25, 0x007A
    105e:	98 a3       	std	Y+32, r25	; 0x20
    1060:	80 91 7b 00 	lds	r24, 0x007B
    1064:	89 a3       	std	Y+33, r24	; 0x21
    1066:	90 91 7c 00 	lds	r25, 0x007C
    106a:	9a a3       	std	Y+34, r25	; 0x22
    106c:	80 91 7d 00 	lds	r24, 0x007D
    1070:	8b a3       	std	Y+35, r24	; 0x23
    1072:	90 91 7e 00 	lds	r25, 0x007E
    1076:	9c a3       	std	Y+36, r25	; 0x24
    1078:	80 91 7f 00 	lds	r24, 0x007F
    107c:	8d a3       	std	Y+37, r24	; 0x25
    107e:	90 91 80 00 	lds	r25, 0x0080
    1082:	9e a3       	std	Y+38, r25	; 0x26
    1084:	8f a1       	ldd	r24, Y+39	; 0x27
    1086:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1088:	89 17       	cp	r24, r25
    108a:	d1 f5       	brne	.+116    	; 0x1100 <createNewPass+0x100>
    108c:	88 a5       	ldd	r24, Y+40	; 0x28
    108e:	98 a1       	ldd	r25, Y+32	; 0x20
    1090:	89 17       	cp	r24, r25
    1092:	b1 f5       	brne	.+108    	; 0x1100 <createNewPass+0x100>
    1094:	89 a5       	ldd	r24, Y+41	; 0x29
    1096:	99 a1       	ldd	r25, Y+33	; 0x21
    1098:	89 17       	cp	r24, r25
    109a:	91 f5       	brne	.+100    	; 0x1100 <createNewPass+0x100>
    109c:	8a a5       	ldd	r24, Y+42	; 0x2a
    109e:	9a a1       	ldd	r25, Y+34	; 0x22
    10a0:	89 17       	cp	r24, r25
    10a2:	71 f5       	brne	.+92     	; 0x1100 <createNewPass+0x100>
    10a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    10a6:	9b a1       	ldd	r25, Y+35	; 0x23
    10a8:	89 17       	cp	r24, r25
    10aa:	51 f5       	brne	.+84     	; 0x1100 <createNewPass+0x100>
    10ac:	8c a5       	ldd	r24, Y+44	; 0x2c
    10ae:	9c a1       	ldd	r25, Y+36	; 0x24
    10b0:	89 17       	cp	r24, r25
    10b2:	31 f5       	brne	.+76     	; 0x1100 <createNewPass+0x100>
    10b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    10b6:	9d a1       	ldd	r25, Y+37	; 0x25
    10b8:	89 17       	cp	r24, r25
    10ba:	11 f5       	brne	.+68     	; 0x1100 <createNewPass+0x100>
    10bc:	8e a5       	ldd	r24, Y+46	; 0x2e
    10be:	9e a1       	ldd	r25, Y+38	; 0x26
    10c0:	89 17       	cp	r24, r25
    10c2:	f1 f4       	brne	.+60     	; 0x1100 <createNewPass+0x100>
    10c4:	20 91 71 00 	lds	r18, 0x0071
    10c8:	30 91 72 00 	lds	r19, 0x0072
    10cc:	40 91 73 00 	lds	r20, 0x0073
    10d0:	50 91 74 00 	lds	r21, 0x0074
    10d4:	60 91 75 00 	lds	r22, 0x0075
    10d8:	70 91 76 00 	lds	r23, 0x0076
    10dc:	80 91 77 00 	lds	r24, 0x0077
    10e0:	90 91 78 00 	lds	r25, 0x0078
    10e4:	e2 2f       	mov	r30, r18
    10e6:	e3 2b       	or	r30, r19
    10e8:	e4 2b       	or	r30, r20
    10ea:	e5 2b       	or	r30, r21
    10ec:	e6 2b       	or	r30, r22
    10ee:	e7 2b       	or	r30, r23
    10f0:	e8 2b       	or	r30, r24
    10f2:	e9 2b       	or	r30, r25
    10f4:	ee 23       	and	r30, r30
    10f6:	21 f0       	breq	.+8      	; 0x1100 <createNewPass+0x100>
			UART_sendByte(SUCCESS); /* tells MC1 that password is accepted & store in EEPROm*/
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
    10fe:	03 c0       	rjmp	.+6      	; 0x1106 <createNewPass+0x106>
		} else {
			UART_sendByte(ERROR);/* tells MC1 that password is not accepted */
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	aa e7       	ldi	r26, 0x7A	; 122
    110c:	b4 e4       	ldi	r27, 0x44	; 68
    110e:	8b 87       	std	Y+11, r24	; 0x0b
    1110:	9c 87       	std	Y+12, r25	; 0x0c
    1112:	ad 87       	std	Y+13, r26	; 0x0d
    1114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1116:	6b 85       	ldd	r22, Y+11	; 0x0b
    1118:	7c 85       	ldd	r23, Y+12	; 0x0c
    111a:	8d 85       	ldd	r24, Y+13	; 0x0d
    111c:	9e 85       	ldd	r25, Y+14	; 0x0e
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a ef       	ldi	r20, 0xFA	; 250
    1124:	54 e4       	ldi	r21, 0x44	; 68
    1126:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8f 83       	std	Y+7, r24	; 0x07
    1130:	98 87       	std	Y+8, r25	; 0x08
    1132:	a9 87       	std	Y+9, r26	; 0x09
    1134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	0e 94 77 04 	call	0x8ee	; 0x8ee <__ltsf2>
    114a:	88 23       	and	r24, r24
    114c:	2c f4       	brge	.+10     	; 0x1158 <createNewPass+0x158>
		__ticks = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9e 83       	std	Y+6, r25	; 0x06
    1154:	8d 83       	std	Y+5, r24	; 0x05
    1156:	3f c0       	rjmp	.+126    	; 0x11d6 <createNewPass+0x1d6>
	else if (__tmp > 65535)
    1158:	6f 81       	ldd	r22, Y+7	; 0x07
    115a:	78 85       	ldd	r23, Y+8	; 0x08
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	57 e4       	ldi	r21, 0x47	; 71
    1168:	0e 94 17 04 	call	0x82e	; 0x82e <__gtsf2>
    116c:	18 16       	cp	r1, r24
    116e:	4c f5       	brge	.+82     	; 0x11c2 <createNewPass+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1170:	6b 85       	ldd	r22, Y+11	; 0x0b
    1172:	7c 85       	ldd	r23, Y+12	; 0x0c
    1174:	8d 85       	ldd	r24, Y+13	; 0x0d
    1176:	9e 85       	ldd	r25, Y+14	; 0x0e
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e2       	ldi	r20, 0x20	; 32
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <createNewPass+0x1b8>
    119a:	88 ec       	ldi	r24, 0xC8	; 200
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <createNewPass+0x1a6>
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f7       	brne	.-38     	; 0x119a <createNewPass+0x19a>
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <createNewPass+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <createNewPass+0x1e2>
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(1000); /*	wait one-half second to synchronize with HMI-ECU */
	} while (g_pass != g_passCheck); /* while password not accepted do that again*/
    11ea:	80 91 71 00 	lds	r24, 0x0071
    11ee:	8f 8b       	std	Y+23, r24	; 0x17
    11f0:	90 91 72 00 	lds	r25, 0x0072
    11f4:	98 8f       	std	Y+24, r25	; 0x18
    11f6:	80 91 73 00 	lds	r24, 0x0073
    11fa:	89 8f       	std	Y+25, r24	; 0x19
    11fc:	90 91 74 00 	lds	r25, 0x0074
    1200:	9a 8f       	std	Y+26, r25	; 0x1a
    1202:	80 91 75 00 	lds	r24, 0x0075
    1206:	8b 8f       	std	Y+27, r24	; 0x1b
    1208:	90 91 76 00 	lds	r25, 0x0076
    120c:	9c 8f       	std	Y+28, r25	; 0x1c
    120e:	80 91 77 00 	lds	r24, 0x0077
    1212:	8d 8f       	std	Y+29, r24	; 0x1d
    1214:	90 91 78 00 	lds	r25, 0x0078
    1218:	9e 8f       	std	Y+30, r25	; 0x1e
    121a:	80 91 79 00 	lds	r24, 0x0079
    121e:	8f 87       	std	Y+15, r24	; 0x0f
    1220:	90 91 7a 00 	lds	r25, 0x007A
    1224:	98 8b       	std	Y+16, r25	; 0x10
    1226:	80 91 7b 00 	lds	r24, 0x007B
    122a:	89 8b       	std	Y+17, r24	; 0x11
    122c:	90 91 7c 00 	lds	r25, 0x007C
    1230:	9a 8b       	std	Y+18, r25	; 0x12
    1232:	80 91 7d 00 	lds	r24, 0x007D
    1236:	8b 8b       	std	Y+19, r24	; 0x13
    1238:	90 91 7e 00 	lds	r25, 0x007E
    123c:	9c 8b       	std	Y+20, r25	; 0x14
    123e:	80 91 7f 00 	lds	r24, 0x007F
    1242:	8d 8b       	std	Y+21, r24	; 0x15
    1244:	90 91 80 00 	lds	r25, 0x0080
    1248:	9e 8b       	std	Y+22, r25	; 0x16
    124a:	8f 89       	ldd	r24, Y+23	; 0x17
    124c:	9f 85       	ldd	r25, Y+15	; 0x0f
    124e:	89 17       	cp	r24, r25
    1250:	09 f0       	breq	.+2      	; 0x1254 <createNewPass+0x254>
    1252:	e0 ce       	rjmp	.-576    	; 0x1014 <createNewPass+0x14>
    1254:	88 8d       	ldd	r24, Y+24	; 0x18
    1256:	98 89       	ldd	r25, Y+16	; 0x10
    1258:	89 17       	cp	r24, r25
    125a:	09 f0       	breq	.+2      	; 0x125e <createNewPass+0x25e>
    125c:	db ce       	rjmp	.-586    	; 0x1014 <createNewPass+0x14>
    125e:	89 8d       	ldd	r24, Y+25	; 0x19
    1260:	99 89       	ldd	r25, Y+17	; 0x11
    1262:	89 17       	cp	r24, r25
    1264:	09 f0       	breq	.+2      	; 0x1268 <createNewPass+0x268>
    1266:	d6 ce       	rjmp	.-596    	; 0x1014 <createNewPass+0x14>
    1268:	8a 8d       	ldd	r24, Y+26	; 0x1a
    126a:	9a 89       	ldd	r25, Y+18	; 0x12
    126c:	89 17       	cp	r24, r25
    126e:	09 f0       	breq	.+2      	; 0x1272 <createNewPass+0x272>
    1270:	d1 ce       	rjmp	.-606    	; 0x1014 <createNewPass+0x14>
    1272:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1274:	9b 89       	ldd	r25, Y+19	; 0x13
    1276:	89 17       	cp	r24, r25
    1278:	09 f0       	breq	.+2      	; 0x127c <createNewPass+0x27c>
    127a:	cc ce       	rjmp	.-616    	; 0x1014 <createNewPass+0x14>
    127c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    127e:	9c 89       	ldd	r25, Y+20	; 0x14
    1280:	89 17       	cp	r24, r25
    1282:	09 f0       	breq	.+2      	; 0x1286 <createNewPass+0x286>
    1284:	c7 ce       	rjmp	.-626    	; 0x1014 <createNewPass+0x14>
    1286:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1288:	9d 89       	ldd	r25, Y+21	; 0x15
    128a:	89 17       	cp	r24, r25
    128c:	09 f0       	breq	.+2      	; 0x1290 <createNewPass+0x290>
    128e:	c2 ce       	rjmp	.-636    	; 0x1014 <createNewPass+0x14>
    1290:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1292:	9e 89       	ldd	r25, Y+22	; 0x16
    1294:	89 17       	cp	r24, r25
    1296:	09 f0       	breq	.+2      	; 0x129a <createNewPass+0x29a>
    1298:	bd ce       	rjmp	.-646    	; 0x1014 <createNewPass+0x14>
	writePassInEEPROM(&addPass, &g_pass); /* store password in EEPROM */
    129a:	8d e6       	ldi	r24, 0x6D	; 109
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	21 e7       	ldi	r18, 0x71	; 113
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	b9 01       	movw	r22, r18
    12a4:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <writePassInEEPROM>
}
    12a8:	ae 96       	adiw	r28, 0x2e	; 46
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <changePass>:

/*
 * Description: Function use to check that password enter is equal to password or not to open garage .
 */
void changePass(void) {
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	60 97       	sbiw	r28, 0x10	; 16
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61

	enterPass(&g_pass); /* receive password from user*/
    12ce:	81 e7       	ldi	r24, 0x71	; 113
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <enterPass>
	readPassFromEEPROM(&addPass, &g_passCheck); /*  read password from EEPROM */
    12d6:	8d e6       	ldi	r24, 0x6D	; 109
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	29 e7       	ldi	r18, 0x79	; 121
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 4f 11 	call	0x229e	; 0x229e <readPassFromEEPROM>
	if (g_pass == g_passCheck) { /* check that user enter correct password or not*/
    12e4:	80 91 71 00 	lds	r24, 0x0071
    12e8:	89 87       	std	Y+9, r24	; 0x09
    12ea:	90 91 72 00 	lds	r25, 0x0072
    12ee:	9a 87       	std	Y+10, r25	; 0x0a
    12f0:	80 91 73 00 	lds	r24, 0x0073
    12f4:	8b 87       	std	Y+11, r24	; 0x0b
    12f6:	90 91 74 00 	lds	r25, 0x0074
    12fa:	9c 87       	std	Y+12, r25	; 0x0c
    12fc:	80 91 75 00 	lds	r24, 0x0075
    1300:	8d 87       	std	Y+13, r24	; 0x0d
    1302:	90 91 76 00 	lds	r25, 0x0076
    1306:	9e 87       	std	Y+14, r25	; 0x0e
    1308:	80 91 77 00 	lds	r24, 0x0077
    130c:	8f 87       	std	Y+15, r24	; 0x0f
    130e:	90 91 78 00 	lds	r25, 0x0078
    1312:	98 8b       	std	Y+16, r25	; 0x10
    1314:	80 91 79 00 	lds	r24, 0x0079
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	90 91 7a 00 	lds	r25, 0x007A
    131e:	9a 83       	std	Y+2, r25	; 0x02
    1320:	80 91 7b 00 	lds	r24, 0x007B
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	90 91 7c 00 	lds	r25, 0x007C
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	80 91 7d 00 	lds	r24, 0x007D
    1330:	8d 83       	std	Y+5, r24	; 0x05
    1332:	90 91 7e 00 	lds	r25, 0x007E
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	80 91 7f 00 	lds	r24, 0x007F
    133c:	8f 83       	std	Y+7, r24	; 0x07
    133e:	90 91 80 00 	lds	r25, 0x0080
    1342:	98 87       	std	Y+8, r25	; 0x08
    1344:	89 85       	ldd	r24, Y+9	; 0x09
    1346:	99 81       	ldd	r25, Y+1	; 0x01
    1348:	89 17       	cp	r24, r25
    134a:	11 f5       	brne	.+68     	; 0x1390 <changePass+0xd6>
    134c:	8a 85       	ldd	r24, Y+10	; 0x0a
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	89 17       	cp	r24, r25
    1352:	f1 f4       	brne	.+60     	; 0x1390 <changePass+0xd6>
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9b 81       	ldd	r25, Y+3	; 0x03
    1358:	89 17       	cp	r24, r25
    135a:	d1 f4       	brne	.+52     	; 0x1390 <changePass+0xd6>
    135c:	8c 85       	ldd	r24, Y+12	; 0x0c
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	89 17       	cp	r24, r25
    1362:	b1 f4       	brne	.+44     	; 0x1390 <changePass+0xd6>
    1364:	8d 85       	ldd	r24, Y+13	; 0x0d
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	89 17       	cp	r24, r25
    136a:	91 f4       	brne	.+36     	; 0x1390 <changePass+0xd6>
    136c:	8e 85       	ldd	r24, Y+14	; 0x0e
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	89 17       	cp	r24, r25
    1372:	71 f4       	brne	.+28     	; 0x1390 <changePass+0xd6>
    1374:	8f 85       	ldd	r24, Y+15	; 0x0f
    1376:	9f 81       	ldd	r25, Y+7	; 0x07
    1378:	89 17       	cp	r24, r25
    137a:	51 f4       	brne	.+20     	; 0x1390 <changePass+0xd6>
    137c:	88 89       	ldd	r24, Y+16	; 0x10
    137e:	98 85       	ldd	r25, Y+8	; 0x08
    1380:	89 17       	cp	r24, r25
    1382:	31 f4       	brne	.+12     	; 0x1390 <changePass+0xd6>
		UART_sendByte(SUCCESS); /*  tells HMI_ECU that user enter correct password */
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
		createNewPass(); /*  start create new password */
    138a:	0e 94 00 08 	call	0x1000	; 0x1000 <createNewPass>
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <changePass+0xdc>

	} else {
		UART_sendByte(ERROR); /*  tells HMI_ECU that user enter wrong password */
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
	}
}
    1396:	60 96       	adiw	r28, 0x10	; 16
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <closeDoor>:

/*
 * Description: Function check that garage open first then close it .
 */
void closeDoor(void) {
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
	while (UART_recieveByte() != '#'); /*  wait until MC1 is ready */
    13b0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <UART_recieveByte>
    13b4:	83 32       	cpi	r24, 0x23	; 35
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <closeDoor+0x8>
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <closeDoor+0x18>

	while (UART_recieveByte() != '+') { /*  wait until user press in '+' key to start close garage */
		UART_sendByte(ERROR); /* tells MHI-ECU that user press on wrong key*/
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
 * Description: Function check that garage open first then close it .
 */
void closeDoor(void) {
	while (UART_recieveByte() != '#'); /*  wait until MC1 is ready */

	while (UART_recieveByte() != '+') { /*  wait until user press in '+' key to start close garage */
    13c0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <UART_recieveByte>
    13c4:	8b 32       	cpi	r24, 0x2B	; 43
    13c6:	c9 f7       	brne	.-14     	; 0x13ba <closeDoor+0x12>
		UART_sendByte(ERROR); /* tells MHI-ECU that user press on wrong key*/
	}
	/* tells MHI-ECU that user press on correct key and will start to close garage*/
	UART_sendByte(SUCCESS);
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
	/* initialize timer to start  count*/
	TIMER_init(&timePtr);
    13ce:	89 e6       	ldi	r24, 0x69	; 105
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <TIMER_init>

	/* edit output of motor pins to rotate motor anti-clockwise */
	SET_BIT(PORTD, PD5);
    13d6:	a2 e3       	ldi	r26, 0x32	; 50
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e2 e3       	ldi	r30, 0x32	; 50
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	80 62       	ori	r24, 0x20	; 32
    13e2:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD, PD6);
    13e4:	a2 e3       	ldi	r26, 0x32	; 50
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e2 e3       	ldi	r30, 0x32	; 50
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8f 7b       	andi	r24, 0xBF	; 191
    13f0:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,1);
    13f2:	a8 e3       	ldi	r26, 0x38	; 56
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e8 e3       	ldi	r30, 0x38	; 56
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8d 7f       	andi	r24, 0xFD	; 253
    13fe:	8c 93       	st	X, r24
	timeIndex = 0; /* Initialize timer interrupt counter */
    1400:	10 92 70 00 	sts	0x0070, r1
	g_state = CLOSING; /* indicate that garage in closing mode */
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	80 93 68 00 	sts	0x0068, r24
	while (g_state == CLOSING); /*  wait until garage mode change to close mode */
    140a:	80 91 68 00 	lds	r24, 0x0068
    140e:	82 30       	cpi	r24, 0x02	; 2
    1410:	e1 f3       	breq	.-8      	; 0x140a <closeDoor+0x62>
}
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <TimerControl>:


/*
 * Description: it is callBack Function that call by Timer when interrupt has happen .
 */
void TimerControl(void) {
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	/* Increment to show how many timer1 interrupt happen after initialize Timer  */
	timeIndex++;
    1420:	80 91 70 00 	lds	r24, 0x0070
    1424:	8f 5f       	subi	r24, 0xFF	; 255
    1426:	80 93 70 00 	sts	0x0070, r24

	/* check first that garage state is closing to close it . */
	if (g_state == CLOSING) {
    142a:	80 91 68 00 	lds	r24, 0x0068
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	f1 f4       	brne	.+60     	; 0x146e <TimerControl+0x56>

		/* check second that  time count equal ( 3 time * 5 second )15 second after timer initialize . */
		if (timeIndex >= 3) {
    1432:	80 91 70 00 	lds	r24, 0x0070
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	08 f4       	brcc	.+2      	; 0x143c <TimerControl+0x24>
    143a:	5a c0       	rjmp	.+180    	; 0x14f0 <TimerControl+0xd8>

			/* Clear Timer1 Register & active Sleep mode For Timer1.*/
			TIMER_Deinit();
    143c:	0e 94 d5 13 	call	0x27aa	; 0x27aa <TIMER_Deinit>

			/* Organize pins to stop motor rotate  */
			CLEAR_BIT(PORTD, PD5);
    1440:	a2 e3       	ldi	r26, 0x32	; 50
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e2 e3       	ldi	r30, 0x32	; 50
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8f 7d       	andi	r24, 0xDF	; 223
    144c:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD, PD6);
    144e:	a2 e3       	ldi	r26, 0x32	; 50
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e2 e3       	ldi	r30, 0x32	; 50
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8f 7b       	andi	r24, 0xBF	; 191
    145a:	8c 93       	st	X, r24

			g_state = CLOSE;/*show state of garage door now is Close*/
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	80 93 68 00 	sts	0x0068, r24

			UART_sendByte(CLOSE); /*  Alerts HMI_ECU that  garage is close  */
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>

			timeIndex = 0; /*  reset variable to start count from zero when timer initialize again */
    1468:	10 92 70 00 	sts	0x0070, r1
    146c:	41 c0       	rjmp	.+130    	; 0x14f0 <TimerControl+0xd8>
		}
	} else if (g_state == BUZZER) { /* check first that garage state is in BUZZER mode */
    146e:	80 91 68 00 	lds	r24, 0x0068
    1472:	84 30       	cpi	r24, 0x04	; 4
    1474:	b1 f4       	brne	.+44     	; 0x14a2 <TimerControl+0x8a>
		/* check second that time count equal ( 12 time * 5 second )60 second after timer initialize . */
		if (timeIndex >= 12) {
    1476:	80 91 70 00 	lds	r24, 0x0070
    147a:	8c 30       	cpi	r24, 0x0C	; 12
    147c:	c8 f1       	brcs	.+114    	; 0x14f0 <TimerControl+0xd8>
			UART_sendByte(CLOSE); /* tells HMI-ECU that garage is still close after buzzer stop*/
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
			TIMER_Deinit(); /* Clear Timer1 Register & active Sleep mode For Timer1.*/
    1484:	0e 94 d5 13 	call	0x27aa	; 0x27aa <TIMER_Deinit>
			/* Organize pins to stop Buzzer */
			CLEAR_BIT(PORTD, PD7);
    1488:	a2 e3       	ldi	r26, 0x32	; 50
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e2 e3       	ldi	r30, 0x32	; 50
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8f 77       	andi	r24, 0x7F	; 127
    1494:	8c 93       	st	X, r24
			g_state = CLOSE; /*show state of garage door now is Close*/
    1496:	83 e0       	ldi	r24, 0x03	; 3
    1498:	80 93 68 00 	sts	0x0068, r24

			timeIndex = 0; /*  reset variable to start count from zero when timer initialize again */
    149c:	10 92 70 00 	sts	0x0070, r1
    14a0:	27 c0       	rjmp	.+78     	; 0x14f0 <TimerControl+0xd8>
		}
	} else if (g_state == OPENING) { /* check first that garage state is in opening mode */
    14a2:	80 91 68 00 	lds	r24, 0x0068
    14a6:	88 23       	and	r24, r24
    14a8:	19 f5       	brne	.+70     	; 0x14f0 <TimerControl+0xd8>

		/* check second that  time count equal ( 3 time * 5 second )15 second after timer initialize . */
		if (timeIndex >= 3) {
    14aa:	80 91 70 00 	lds	r24, 0x0070
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	f8 f0       	brcs	.+62     	; 0x14f0 <TimerControl+0xd8>
			TIMER_Deinit();
    14b2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <TIMER_Deinit>

			UART_sendByte(OPEN); /* tells HMI-ECU that garage become open */
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
			/* Organize pins to stop motor rotate  */
			CLEAR_BIT(PORTD, PD5);/* Clear Timer1 Register & active Sleep mode For Timer1.*/
    14bc:	a2 e3       	ldi	r26, 0x32	; 50
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e2 e3       	ldi	r30, 0x32	; 50
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8f 7d       	andi	r24, 0xDF	; 223
    14c8:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD, PD6);
    14ca:	a2 e3       	ldi	r26, 0x32	; 50
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e2 e3       	ldi	r30, 0x32	; 50
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 7b       	andi	r24, 0xBF	; 191
    14d6:	8c 93       	st	X, r24
			SET_BIT(PORTB,1);
    14d8:	a8 e3       	ldi	r26, 0x38	; 56
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e8 e3       	ldi	r30, 0x38	; 56
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	82 60       	ori	r24, 0x02	; 2
    14e4:	8c 93       	st	X, r24
			g_state = OPEN; /*show state of garage door now is open*/
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	80 93 68 00 	sts	0x0068, r24
			timeIndex = 0; /*  reset variable to start count from zero when timer initialize again */
    14ec:	10 92 70 00 	sts	0x0070, r1
		}
	}

}
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <enterPass>:

/*
 * Description: Function receive Password From HMI-ECU  &
 * pointer to select pass store variable .
 */
void enterPass(uint64 *data) {
    14f6:	af 92       	push	r10
    14f8:	bf 92       	push	r11
    14fa:	cf 92       	push	r12
    14fc:	df 92       	push	r13
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	c6 56       	subi	r28, 0x66	; 102
    1510:	d0 40       	sbci	r29, 0x00	; 0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	98 8b       	std	Y+16, r25	; 0x10
    151e:	8f 87       	std	Y+15, r24	; 0x0f
	(*data) = 0; /*  set variable that will receive password to zero */
    1520:	ef 85       	ldd	r30, Y+15	; 0x0f
    1522:	f8 89       	ldd	r31, Y+16	; 0x10
    1524:	10 82       	st	Z, r1
    1526:	11 82       	std	Z+1, r1	; 0x01
    1528:	12 82       	std	Z+2, r1	; 0x02
    152a:	13 82       	std	Z+3, r1	; 0x03
    152c:	14 82       	std	Z+4, r1	; 0x04
    152e:	15 82       	std	Z+5, r1	; 0x05
    1530:	16 82       	std	Z+6, r1	; 0x06
    1532:	17 82       	std	Z+7, r1	; 0x07
	do {
		while (UART_recieveByte() != '*'); /*  wait until MC1 is ready */
    1534:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <UART_recieveByte>
    1538:	8a 32       	cpi	r24, 0x2A	; 42
    153a:	e1 f7       	brne	.-8      	; 0x1534 <enterPass+0x3e>
		g_byte = UART_recieveByte(); /*  wait until receive byte from HMI_ECU  */
    153c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <UART_recieveByte>
    1540:	80 93 83 00 	sts	0x0083, r24

		if (g_byte <= 9) { /* check that key press is number or option key */
    1544:	80 91 83 00 	lds	r24, 0x0083
    1548:	8a 30       	cpi	r24, 0x0A	; 10
    154a:	08 f0       	brcs	.+2      	; 0x154e <enterPass+0x58>
    154c:	1a c3       	rjmp	.+1588   	; 0x1b82 <enterPass+0x68c>
			(*data) = ((*data) * 10) + g_byte; /* store key in first digit in password & shift pass one digit to lift */
    154e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1550:	f8 89       	ldd	r31, Y+16	; 0x10
    1552:	20 81       	ld	r18, Z
    1554:	31 81       	ldd	r19, Z+1	; 0x01
    1556:	42 81       	ldd	r20, Z+2	; 0x02
    1558:	53 81       	ldd	r21, Z+3	; 0x03
    155a:	64 81       	ldd	r22, Z+4	; 0x04
    155c:	75 81       	ldd	r23, Z+5	; 0x05
    155e:	86 81       	ldd	r24, Z+6	; 0x06
    1560:	97 81       	ldd	r25, Z+7	; 0x07
    1562:	a2 2e       	mov	r10, r18
    1564:	b3 2e       	mov	r11, r19
    1566:	c4 2e       	mov	r12, r20
    1568:	d5 2e       	mov	r13, r21
    156a:	e6 2e       	mov	r14, r22
    156c:	f7 2e       	mov	r15, r23
    156e:	08 2f       	mov	r16, r24
    1570:	19 2f       	mov	r17, r25
    1572:	2a 2d       	mov	r18, r10
    1574:	3b 2d       	mov	r19, r11
    1576:	4c 2d       	mov	r20, r12
    1578:	5d 2d       	mov	r21, r13
    157a:	6e 2d       	mov	r22, r14
    157c:	7f 2d       	mov	r23, r15
    157e:	80 2f       	mov	r24, r16
    1580:	91 2f       	mov	r25, r17
    1582:	01 e0       	ldi	r16, 0x01	; 1
    1584:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    1588:	29 a3       	std	Y+33, r18	; 0x21
    158a:	3a a3       	std	Y+34, r19	; 0x22
    158c:	4b a3       	std	Y+35, r20	; 0x23
    158e:	5c a3       	std	Y+36, r21	; 0x24
    1590:	6d a3       	std	Y+37, r22	; 0x25
    1592:	7e a3       	std	Y+38, r23	; 0x26
    1594:	8f a3       	std	Y+39, r24	; 0x27
    1596:	98 a7       	std	Y+40, r25	; 0x28
    1598:	29 a1       	ldd	r18, Y+33	; 0x21
    159a:	3a a1       	ldd	r19, Y+34	; 0x22
    159c:	4b a1       	ldd	r20, Y+35	; 0x23
    159e:	5c a1       	ldd	r21, Y+36	; 0x24
    15a0:	6d a1       	ldd	r22, Y+37	; 0x25
    15a2:	7e a1       	ldd	r23, Y+38	; 0x26
    15a4:	8f a1       	ldd	r24, Y+39	; 0x27
    15a6:	98 a5       	ldd	r25, Y+40	; 0x28
    15a8:	02 e0       	ldi	r16, 0x02	; 2
    15aa:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    15ae:	29 a7       	std	Y+41, r18	; 0x29
    15b0:	3a a7       	std	Y+42, r19	; 0x2a
    15b2:	4b a7       	std	Y+43, r20	; 0x2b
    15b4:	5c a7       	std	Y+44, r21	; 0x2c
    15b6:	6d a7       	std	Y+45, r22	; 0x2d
    15b8:	7e a7       	std	Y+46, r23	; 0x2e
    15ba:	8f a7       	std	Y+47, r24	; 0x2f
    15bc:	98 ab       	std	Y+48, r25	; 0x30
    15be:	09 a1       	ldd	r16, Y+33	; 0x21
    15c0:	19 a5       	ldd	r17, Y+41	; 0x29
    15c2:	01 0f       	add	r16, r17
    15c4:	09 ab       	std	Y+49, r16	; 0x31
    15c6:	21 e0       	ldi	r18, 0x01	; 1
    15c8:	29 af       	std	Y+57, r18	; 0x39
    15ca:	39 a9       	ldd	r19, Y+49	; 0x31
    15cc:	49 a1       	ldd	r20, Y+33	; 0x21
    15ce:	34 17       	cp	r19, r20
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <enterPass+0xde>
    15d2:	19 ae       	std	Y+57, r1	; 0x39
    15d4:	5a a1       	ldd	r21, Y+34	; 0x22
    15d6:	6a a5       	ldd	r22, Y+42	; 0x2a
    15d8:	56 0f       	add	r21, r22
    15da:	5a ab       	std	Y+50, r21	; 0x32
    15dc:	71 e0       	ldi	r23, 0x01	; 1
    15de:	7a af       	std	Y+58, r23	; 0x3a
    15e0:	8a a9       	ldd	r24, Y+50	; 0x32
    15e2:	9a a1       	ldd	r25, Y+34	; 0x22
    15e4:	89 17       	cp	r24, r25
    15e6:	08 f0       	brcs	.+2      	; 0x15ea <enterPass+0xf4>
    15e8:	1a ae       	std	Y+58, r1	; 0x3a
    15ea:	09 ad       	ldd	r16, Y+57	; 0x39
    15ec:	1a a9       	ldd	r17, Y+50	; 0x32
    15ee:	01 0f       	add	r16, r17
    15f0:	0b af       	std	Y+59, r16	; 0x3b
    15f2:	21 e0       	ldi	r18, 0x01	; 1
    15f4:	2c af       	std	Y+60, r18	; 0x3c
    15f6:	3b ad       	ldd	r19, Y+59	; 0x3b
    15f8:	4a a9       	ldd	r20, Y+50	; 0x32
    15fa:	34 17       	cp	r19, r20
    15fc:	08 f0       	brcs	.+2      	; 0x1600 <enterPass+0x10a>
    15fe:	1c ae       	std	Y+60, r1	; 0x3c
    1600:	5a ad       	ldd	r21, Y+58	; 0x3a
    1602:	6c ad       	ldd	r22, Y+60	; 0x3c
    1604:	56 2b       	or	r21, r22
    1606:	5a af       	std	Y+58, r21	; 0x3a
    1608:	7b ad       	ldd	r23, Y+59	; 0x3b
    160a:	7a ab       	std	Y+50, r23	; 0x32
    160c:	8b a1       	ldd	r24, Y+35	; 0x23
    160e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1610:	89 0f       	add	r24, r25
    1612:	8b ab       	std	Y+51, r24	; 0x33
    1614:	01 e0       	ldi	r16, 0x01	; 1
    1616:	0d af       	std	Y+61, r16	; 0x3d
    1618:	1b a9       	ldd	r17, Y+51	; 0x33
    161a:	2b a1       	ldd	r18, Y+35	; 0x23
    161c:	12 17       	cp	r17, r18
    161e:	08 f0       	brcs	.+2      	; 0x1622 <enterPass+0x12c>
    1620:	1d ae       	std	Y+61, r1	; 0x3d
    1622:	3a ad       	ldd	r19, Y+58	; 0x3a
    1624:	4b a9       	ldd	r20, Y+51	; 0x33
    1626:	34 0f       	add	r19, r20
    1628:	3e af       	std	Y+62, r19	; 0x3e
    162a:	51 e0       	ldi	r21, 0x01	; 1
    162c:	5f af       	std	Y+63, r21	; 0x3f
    162e:	6e ad       	ldd	r22, Y+62	; 0x3e
    1630:	7b a9       	ldd	r23, Y+51	; 0x33
    1632:	67 17       	cp	r22, r23
    1634:	08 f0       	brcs	.+2      	; 0x1638 <enterPass+0x142>
    1636:	1f ae       	std	Y+63, r1	; 0x3f
    1638:	8d ad       	ldd	r24, Y+61	; 0x3d
    163a:	9f ad       	ldd	r25, Y+63	; 0x3f
    163c:	89 2b       	or	r24, r25
    163e:	8d af       	std	Y+61, r24	; 0x3d
    1640:	0e ad       	ldd	r16, Y+62	; 0x3e
    1642:	0b ab       	std	Y+51, r16	; 0x33
    1644:	1c a1       	ldd	r17, Y+36	; 0x24
    1646:	2c a5       	ldd	r18, Y+44	; 0x2c
    1648:	12 0f       	add	r17, r18
    164a:	1c ab       	std	Y+52, r17	; 0x34
    164c:	31 e0       	ldi	r19, 0x01	; 1
    164e:	21 96       	adiw	r28, 0x01	; 1
    1650:	3f af       	std	Y+63, r19	; 0x3f
    1652:	21 97       	sbiw	r28, 0x01	; 1
    1654:	4c a9       	ldd	r20, Y+52	; 0x34
    1656:	5c a1       	ldd	r21, Y+36	; 0x24
    1658:	45 17       	cp	r20, r21
    165a:	18 f0       	brcs	.+6      	; 0x1662 <enterPass+0x16c>
    165c:	21 96       	adiw	r28, 0x01	; 1
    165e:	1f ae       	std	Y+63, r1	; 0x3f
    1660:	21 97       	sbiw	r28, 0x01	; 1
    1662:	6d ad       	ldd	r22, Y+61	; 0x3d
    1664:	7c a9       	ldd	r23, Y+52	; 0x34
    1666:	67 0f       	add	r22, r23
    1668:	22 96       	adiw	r28, 0x02	; 2
    166a:	6f af       	std	Y+63, r22	; 0x3f
    166c:	22 97       	sbiw	r28, 0x02	; 2
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	23 96       	adiw	r28, 0x03	; 3
    1672:	8f af       	std	Y+63, r24	; 0x3f
    1674:	23 97       	sbiw	r28, 0x03	; 3
    1676:	22 96       	adiw	r28, 0x02	; 2
    1678:	9f ad       	ldd	r25, Y+63	; 0x3f
    167a:	22 97       	sbiw	r28, 0x02	; 2
    167c:	0c a9       	ldd	r16, Y+52	; 0x34
    167e:	90 17       	cp	r25, r16
    1680:	18 f0       	brcs	.+6      	; 0x1688 <enterPass+0x192>
    1682:	23 96       	adiw	r28, 0x03	; 3
    1684:	1f ae       	std	Y+63, r1	; 0x3f
    1686:	23 97       	sbiw	r28, 0x03	; 3
    1688:	21 96       	adiw	r28, 0x01	; 1
    168a:	1f ad       	ldd	r17, Y+63	; 0x3f
    168c:	21 97       	sbiw	r28, 0x01	; 1
    168e:	23 96       	adiw	r28, 0x03	; 3
    1690:	2f ad       	ldd	r18, Y+63	; 0x3f
    1692:	23 97       	sbiw	r28, 0x03	; 3
    1694:	12 2b       	or	r17, r18
    1696:	21 96       	adiw	r28, 0x01	; 1
    1698:	1f af       	std	Y+63, r17	; 0x3f
    169a:	21 97       	sbiw	r28, 0x01	; 1
    169c:	22 96       	adiw	r28, 0x02	; 2
    169e:	3f ad       	ldd	r19, Y+63	; 0x3f
    16a0:	22 97       	sbiw	r28, 0x02	; 2
    16a2:	3c ab       	std	Y+52, r19	; 0x34
    16a4:	4d a1       	ldd	r20, Y+37	; 0x25
    16a6:	5d a5       	ldd	r21, Y+45	; 0x2d
    16a8:	45 0f       	add	r20, r21
    16aa:	4d ab       	std	Y+53, r20	; 0x35
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	24 96       	adiw	r28, 0x04	; 4
    16b0:	6f af       	std	Y+63, r22	; 0x3f
    16b2:	24 97       	sbiw	r28, 0x04	; 4
    16b4:	7d a9       	ldd	r23, Y+53	; 0x35
    16b6:	8d a1       	ldd	r24, Y+37	; 0x25
    16b8:	78 17       	cp	r23, r24
    16ba:	18 f0       	brcs	.+6      	; 0x16c2 <enterPass+0x1cc>
    16bc:	24 96       	adiw	r28, 0x04	; 4
    16be:	1f ae       	std	Y+63, r1	; 0x3f
    16c0:	24 97       	sbiw	r28, 0x04	; 4
    16c2:	21 96       	adiw	r28, 0x01	; 1
    16c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    16c6:	21 97       	sbiw	r28, 0x01	; 1
    16c8:	0d a9       	ldd	r16, Y+53	; 0x35
    16ca:	90 0f       	add	r25, r16
    16cc:	25 96       	adiw	r28, 0x05	; 5
    16ce:	9f af       	std	Y+63, r25	; 0x3f
    16d0:	25 97       	sbiw	r28, 0x05	; 5
    16d2:	11 e0       	ldi	r17, 0x01	; 1
    16d4:	26 96       	adiw	r28, 0x06	; 6
    16d6:	1f af       	std	Y+63, r17	; 0x3f
    16d8:	26 97       	sbiw	r28, 0x06	; 6
    16da:	25 96       	adiw	r28, 0x05	; 5
    16dc:	2f ad       	ldd	r18, Y+63	; 0x3f
    16de:	25 97       	sbiw	r28, 0x05	; 5
    16e0:	3d a9       	ldd	r19, Y+53	; 0x35
    16e2:	23 17       	cp	r18, r19
    16e4:	18 f0       	brcs	.+6      	; 0x16ec <enterPass+0x1f6>
    16e6:	26 96       	adiw	r28, 0x06	; 6
    16e8:	1f ae       	std	Y+63, r1	; 0x3f
    16ea:	26 97       	sbiw	r28, 0x06	; 6
    16ec:	24 96       	adiw	r28, 0x04	; 4
    16ee:	4f ad       	ldd	r20, Y+63	; 0x3f
    16f0:	24 97       	sbiw	r28, 0x04	; 4
    16f2:	26 96       	adiw	r28, 0x06	; 6
    16f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    16f6:	26 97       	sbiw	r28, 0x06	; 6
    16f8:	45 2b       	or	r20, r21
    16fa:	24 96       	adiw	r28, 0x04	; 4
    16fc:	4f af       	std	Y+63, r20	; 0x3f
    16fe:	24 97       	sbiw	r28, 0x04	; 4
    1700:	25 96       	adiw	r28, 0x05	; 5
    1702:	6f ad       	ldd	r22, Y+63	; 0x3f
    1704:	25 97       	sbiw	r28, 0x05	; 5
    1706:	6d ab       	std	Y+53, r22	; 0x35
    1708:	7e a1       	ldd	r23, Y+38	; 0x26
    170a:	8e a5       	ldd	r24, Y+46	; 0x2e
    170c:	78 0f       	add	r23, r24
    170e:	7e ab       	std	Y+54, r23	; 0x36
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	27 96       	adiw	r28, 0x07	; 7
    1714:	9f af       	std	Y+63, r25	; 0x3f
    1716:	27 97       	sbiw	r28, 0x07	; 7
    1718:	0e a9       	ldd	r16, Y+54	; 0x36
    171a:	1e a1       	ldd	r17, Y+38	; 0x26
    171c:	01 17       	cp	r16, r17
    171e:	18 f0       	brcs	.+6      	; 0x1726 <enterPass+0x230>
    1720:	27 96       	adiw	r28, 0x07	; 7
    1722:	1f ae       	std	Y+63, r1	; 0x3f
    1724:	27 97       	sbiw	r28, 0x07	; 7
    1726:	24 96       	adiw	r28, 0x04	; 4
    1728:	2f ad       	ldd	r18, Y+63	; 0x3f
    172a:	24 97       	sbiw	r28, 0x04	; 4
    172c:	3e a9       	ldd	r19, Y+54	; 0x36
    172e:	23 0f       	add	r18, r19
    1730:	28 96       	adiw	r28, 0x08	; 8
    1732:	2f af       	std	Y+63, r18	; 0x3f
    1734:	28 97       	sbiw	r28, 0x08	; 8
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	29 96       	adiw	r28, 0x09	; 9
    173a:	4f af       	std	Y+63, r20	; 0x3f
    173c:	29 97       	sbiw	r28, 0x09	; 9
    173e:	28 96       	adiw	r28, 0x08	; 8
    1740:	5f ad       	ldd	r21, Y+63	; 0x3f
    1742:	28 97       	sbiw	r28, 0x08	; 8
    1744:	6e a9       	ldd	r22, Y+54	; 0x36
    1746:	56 17       	cp	r21, r22
    1748:	18 f0       	brcs	.+6      	; 0x1750 <enterPass+0x25a>
    174a:	29 96       	adiw	r28, 0x09	; 9
    174c:	1f ae       	std	Y+63, r1	; 0x3f
    174e:	29 97       	sbiw	r28, 0x09	; 9
    1750:	27 96       	adiw	r28, 0x07	; 7
    1752:	7f ad       	ldd	r23, Y+63	; 0x3f
    1754:	27 97       	sbiw	r28, 0x07	; 7
    1756:	29 96       	adiw	r28, 0x09	; 9
    1758:	8f ad       	ldd	r24, Y+63	; 0x3f
    175a:	29 97       	sbiw	r28, 0x09	; 9
    175c:	78 2b       	or	r23, r24
    175e:	27 96       	adiw	r28, 0x07	; 7
    1760:	7f af       	std	Y+63, r23	; 0x3f
    1762:	27 97       	sbiw	r28, 0x07	; 7
    1764:	28 96       	adiw	r28, 0x08	; 8
    1766:	9f ad       	ldd	r25, Y+63	; 0x3f
    1768:	28 97       	sbiw	r28, 0x08	; 8
    176a:	9e ab       	std	Y+54, r25	; 0x36
    176c:	0f a1       	ldd	r16, Y+39	; 0x27
    176e:	1f a5       	ldd	r17, Y+47	; 0x2f
    1770:	01 0f       	add	r16, r17
    1772:	0f ab       	std	Y+55, r16	; 0x37
    1774:	21 e0       	ldi	r18, 0x01	; 1
    1776:	2a 96       	adiw	r28, 0x0a	; 10
    1778:	2f af       	std	Y+63, r18	; 0x3f
    177a:	2a 97       	sbiw	r28, 0x0a	; 10
    177c:	3f a9       	ldd	r19, Y+55	; 0x37
    177e:	4f a1       	ldd	r20, Y+39	; 0x27
    1780:	34 17       	cp	r19, r20
    1782:	18 f0       	brcs	.+6      	; 0x178a <enterPass+0x294>
    1784:	2a 96       	adiw	r28, 0x0a	; 10
    1786:	1f ae       	std	Y+63, r1	; 0x3f
    1788:	2a 97       	sbiw	r28, 0x0a	; 10
    178a:	27 96       	adiw	r28, 0x07	; 7
    178c:	5f ad       	ldd	r21, Y+63	; 0x3f
    178e:	27 97       	sbiw	r28, 0x07	; 7
    1790:	6f a9       	ldd	r22, Y+55	; 0x37
    1792:	56 0f       	add	r21, r22
    1794:	2b 96       	adiw	r28, 0x0b	; 11
    1796:	5f af       	std	Y+63, r21	; 0x3f
    1798:	2b 97       	sbiw	r28, 0x0b	; 11
    179a:	71 e0       	ldi	r23, 0x01	; 1
    179c:	2c 96       	adiw	r28, 0x0c	; 12
    179e:	7f af       	std	Y+63, r23	; 0x3f
    17a0:	2c 97       	sbiw	r28, 0x0c	; 12
    17a2:	2b 96       	adiw	r28, 0x0b	; 11
    17a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    17a6:	2b 97       	sbiw	r28, 0x0b	; 11
    17a8:	9f a9       	ldd	r25, Y+55	; 0x37
    17aa:	89 17       	cp	r24, r25
    17ac:	18 f0       	brcs	.+6      	; 0x17b4 <enterPass+0x2be>
    17ae:	2c 96       	adiw	r28, 0x0c	; 12
    17b0:	1f ae       	std	Y+63, r1	; 0x3f
    17b2:	2c 97       	sbiw	r28, 0x0c	; 12
    17b4:	2a 96       	adiw	r28, 0x0a	; 10
    17b6:	0f ad       	ldd	r16, Y+63	; 0x3f
    17b8:	2a 97       	sbiw	r28, 0x0a	; 10
    17ba:	2c 96       	adiw	r28, 0x0c	; 12
    17bc:	1f ad       	ldd	r17, Y+63	; 0x3f
    17be:	2c 97       	sbiw	r28, 0x0c	; 12
    17c0:	01 2b       	or	r16, r17
    17c2:	2a 96       	adiw	r28, 0x0a	; 10
    17c4:	0f af       	std	Y+63, r16	; 0x3f
    17c6:	2a 97       	sbiw	r28, 0x0a	; 10
    17c8:	2b 96       	adiw	r28, 0x0b	; 11
    17ca:	2f ad       	ldd	r18, Y+63	; 0x3f
    17cc:	2b 97       	sbiw	r28, 0x0b	; 11
    17ce:	2f ab       	std	Y+55, r18	; 0x37
    17d0:	38 a5       	ldd	r19, Y+40	; 0x28
    17d2:	48 a9       	ldd	r20, Y+48	; 0x30
    17d4:	34 0f       	add	r19, r20
    17d6:	38 af       	std	Y+56, r19	; 0x38
    17d8:	2a 96       	adiw	r28, 0x0a	; 10
    17da:	8f ad       	ldd	r24, Y+63	; 0x3f
    17dc:	2a 97       	sbiw	r28, 0x0a	; 10
    17de:	58 ad       	ldd	r21, Y+56	; 0x38
    17e0:	85 0f       	add	r24, r21
    17e2:	88 af       	std	Y+56, r24	; 0x38
    17e4:	69 a9       	ldd	r22, Y+49	; 0x31
    17e6:	69 8f       	std	Y+25, r22	; 0x19
    17e8:	7a a9       	ldd	r23, Y+50	; 0x32
    17ea:	7a 8f       	std	Y+26, r23	; 0x1a
    17ec:	8b a9       	ldd	r24, Y+51	; 0x33
    17ee:	8b 8f       	std	Y+27, r24	; 0x1b
    17f0:	9c a9       	ldd	r25, Y+52	; 0x34
    17f2:	9c 8f       	std	Y+28, r25	; 0x1c
    17f4:	0d a9       	ldd	r16, Y+53	; 0x35
    17f6:	0d 8f       	std	Y+29, r16	; 0x1d
    17f8:	1e a9       	ldd	r17, Y+54	; 0x36
    17fa:	1e 8f       	std	Y+30, r17	; 0x1e
    17fc:	2f a9       	ldd	r18, Y+55	; 0x37
    17fe:	2f 8f       	std	Y+31, r18	; 0x1f
    1800:	38 ad       	ldd	r19, Y+56	; 0x38
    1802:	38 a3       	std	Y+32, r19	; 0x20
    1804:	80 91 83 00 	lds	r24, 0x0083
    1808:	08 2f       	mov	r16, r24
    180a:	10 e0       	ldi	r17, 0x00	; 0
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	09 8b       	std	Y+17, r16	; 0x11
    181a:	1a 8b       	std	Y+18, r17	; 0x12
    181c:	2b 8b       	std	Y+19, r18	; 0x13
    181e:	3c 8b       	std	Y+20, r19	; 0x14
    1820:	4d 8b       	std	Y+21, r20	; 0x15
    1822:	5e 8b       	std	Y+22, r21	; 0x16
    1824:	6f 8b       	std	Y+23, r22	; 0x17
    1826:	78 8f       	std	Y+24, r23	; 0x18
    1828:	19 8d       	ldd	r17, Y+25	; 0x19
    182a:	29 89       	ldd	r18, Y+17	; 0x11
    182c:	12 0f       	add	r17, r18
    182e:	2d 96       	adiw	r28, 0x0d	; 13
    1830:	1f af       	std	Y+63, r17	; 0x3f
    1832:	2d 97       	sbiw	r28, 0x0d	; 13
    1834:	31 e0       	ldi	r19, 0x01	; 1
    1836:	65 96       	adiw	r28, 0x15	; 21
    1838:	3f af       	std	Y+63, r19	; 0x3f
    183a:	65 97       	sbiw	r28, 0x15	; 21
    183c:	2d 96       	adiw	r28, 0x0d	; 13
    183e:	4f ad       	ldd	r20, Y+63	; 0x3f
    1840:	2d 97       	sbiw	r28, 0x0d	; 13
    1842:	59 8d       	ldd	r21, Y+25	; 0x19
    1844:	45 17       	cp	r20, r21
    1846:	18 f0       	brcs	.+6      	; 0x184e <enterPass+0x358>
    1848:	65 96       	adiw	r28, 0x15	; 21
    184a:	1f ae       	std	Y+63, r1	; 0x3f
    184c:	65 97       	sbiw	r28, 0x15	; 21
    184e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1850:	7a 89       	ldd	r23, Y+18	; 0x12
    1852:	67 0f       	add	r22, r23
    1854:	2e 96       	adiw	r28, 0x0e	; 14
    1856:	6f af       	std	Y+63, r22	; 0x3f
    1858:	2e 97       	sbiw	r28, 0x0e	; 14
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	66 96       	adiw	r28, 0x16	; 22
    185e:	8f af       	std	Y+63, r24	; 0x3f
    1860:	66 97       	sbiw	r28, 0x16	; 22
    1862:	2e 96       	adiw	r28, 0x0e	; 14
    1864:	9f ad       	ldd	r25, Y+63	; 0x3f
    1866:	2e 97       	sbiw	r28, 0x0e	; 14
    1868:	0a 8d       	ldd	r16, Y+26	; 0x1a
    186a:	90 17       	cp	r25, r16
    186c:	18 f0       	brcs	.+6      	; 0x1874 <enterPass+0x37e>
    186e:	66 96       	adiw	r28, 0x16	; 22
    1870:	1f ae       	std	Y+63, r1	; 0x3f
    1872:	66 97       	sbiw	r28, 0x16	; 22
    1874:	65 96       	adiw	r28, 0x15	; 21
    1876:	1f ad       	ldd	r17, Y+63	; 0x3f
    1878:	65 97       	sbiw	r28, 0x15	; 21
    187a:	2e 96       	adiw	r28, 0x0e	; 14
    187c:	2f ad       	ldd	r18, Y+63	; 0x3f
    187e:	2e 97       	sbiw	r28, 0x0e	; 14
    1880:	12 0f       	add	r17, r18
    1882:	67 96       	adiw	r28, 0x17	; 23
    1884:	1f af       	std	Y+63, r17	; 0x3f
    1886:	67 97       	sbiw	r28, 0x17	; 23
    1888:	31 e0       	ldi	r19, 0x01	; 1
    188a:	68 96       	adiw	r28, 0x18	; 24
    188c:	3f af       	std	Y+63, r19	; 0x3f
    188e:	68 97       	sbiw	r28, 0x18	; 24
    1890:	67 96       	adiw	r28, 0x17	; 23
    1892:	4f ad       	ldd	r20, Y+63	; 0x3f
    1894:	67 97       	sbiw	r28, 0x17	; 23
    1896:	2e 96       	adiw	r28, 0x0e	; 14
    1898:	5f ad       	ldd	r21, Y+63	; 0x3f
    189a:	2e 97       	sbiw	r28, 0x0e	; 14
    189c:	45 17       	cp	r20, r21
    189e:	18 f0       	brcs	.+6      	; 0x18a6 <enterPass+0x3b0>
    18a0:	68 96       	adiw	r28, 0x18	; 24
    18a2:	1f ae       	std	Y+63, r1	; 0x3f
    18a4:	68 97       	sbiw	r28, 0x18	; 24
    18a6:	66 96       	adiw	r28, 0x16	; 22
    18a8:	6f ad       	ldd	r22, Y+63	; 0x3f
    18aa:	66 97       	sbiw	r28, 0x16	; 22
    18ac:	68 96       	adiw	r28, 0x18	; 24
    18ae:	7f ad       	ldd	r23, Y+63	; 0x3f
    18b0:	68 97       	sbiw	r28, 0x18	; 24
    18b2:	67 2b       	or	r22, r23
    18b4:	66 96       	adiw	r28, 0x16	; 22
    18b6:	6f af       	std	Y+63, r22	; 0x3f
    18b8:	66 97       	sbiw	r28, 0x16	; 22
    18ba:	67 96       	adiw	r28, 0x17	; 23
    18bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    18be:	67 97       	sbiw	r28, 0x17	; 23
    18c0:	2e 96       	adiw	r28, 0x0e	; 14
    18c2:	8f af       	std	Y+63, r24	; 0x3f
    18c4:	2e 97       	sbiw	r28, 0x0e	; 14
    18c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18c8:	0b 89       	ldd	r16, Y+19	; 0x13
    18ca:	90 0f       	add	r25, r16
    18cc:	2f 96       	adiw	r28, 0x0f	; 15
    18ce:	9f af       	std	Y+63, r25	; 0x3f
    18d0:	2f 97       	sbiw	r28, 0x0f	; 15
    18d2:	11 e0       	ldi	r17, 0x01	; 1
    18d4:	69 96       	adiw	r28, 0x19	; 25
    18d6:	1f af       	std	Y+63, r17	; 0x3f
    18d8:	69 97       	sbiw	r28, 0x19	; 25
    18da:	2f 96       	adiw	r28, 0x0f	; 15
    18dc:	2f ad       	ldd	r18, Y+63	; 0x3f
    18de:	2f 97       	sbiw	r28, 0x0f	; 15
    18e0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    18e2:	23 17       	cp	r18, r19
    18e4:	18 f0       	brcs	.+6      	; 0x18ec <enterPass+0x3f6>
    18e6:	69 96       	adiw	r28, 0x19	; 25
    18e8:	1f ae       	std	Y+63, r1	; 0x3f
    18ea:	69 97       	sbiw	r28, 0x19	; 25
    18ec:	66 96       	adiw	r28, 0x16	; 22
    18ee:	4f ad       	ldd	r20, Y+63	; 0x3f
    18f0:	66 97       	sbiw	r28, 0x16	; 22
    18f2:	2f 96       	adiw	r28, 0x0f	; 15
    18f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f6:	2f 97       	sbiw	r28, 0x0f	; 15
    18f8:	45 0f       	add	r20, r21
    18fa:	6a 96       	adiw	r28, 0x1a	; 26
    18fc:	4f af       	std	Y+63, r20	; 0x3f
    18fe:	6a 97       	sbiw	r28, 0x1a	; 26
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	6b 96       	adiw	r28, 0x1b	; 27
    1904:	6f af       	std	Y+63, r22	; 0x3f
    1906:	6b 97       	sbiw	r28, 0x1b	; 27
    1908:	6a 96       	adiw	r28, 0x1a	; 26
    190a:	7f ad       	ldd	r23, Y+63	; 0x3f
    190c:	6a 97       	sbiw	r28, 0x1a	; 26
    190e:	2f 96       	adiw	r28, 0x0f	; 15
    1910:	8f ad       	ldd	r24, Y+63	; 0x3f
    1912:	2f 97       	sbiw	r28, 0x0f	; 15
    1914:	78 17       	cp	r23, r24
    1916:	18 f0       	brcs	.+6      	; 0x191e <enterPass+0x428>
    1918:	6b 96       	adiw	r28, 0x1b	; 27
    191a:	1f ae       	std	Y+63, r1	; 0x3f
    191c:	6b 97       	sbiw	r28, 0x1b	; 27
    191e:	69 96       	adiw	r28, 0x19	; 25
    1920:	9f ad       	ldd	r25, Y+63	; 0x3f
    1922:	69 97       	sbiw	r28, 0x19	; 25
    1924:	6b 96       	adiw	r28, 0x1b	; 27
    1926:	0f ad       	ldd	r16, Y+63	; 0x3f
    1928:	6b 97       	sbiw	r28, 0x1b	; 27
    192a:	90 2b       	or	r25, r16
    192c:	69 96       	adiw	r28, 0x19	; 25
    192e:	9f af       	std	Y+63, r25	; 0x3f
    1930:	69 97       	sbiw	r28, 0x19	; 25
    1932:	6a 96       	adiw	r28, 0x1a	; 26
    1934:	1f ad       	ldd	r17, Y+63	; 0x3f
    1936:	6a 97       	sbiw	r28, 0x1a	; 26
    1938:	2f 96       	adiw	r28, 0x0f	; 15
    193a:	1f af       	std	Y+63, r17	; 0x3f
    193c:	2f 97       	sbiw	r28, 0x0f	; 15
    193e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1940:	3c 89       	ldd	r19, Y+20	; 0x14
    1942:	23 0f       	add	r18, r19
    1944:	60 96       	adiw	r28, 0x10	; 16
    1946:	2f af       	std	Y+63, r18	; 0x3f
    1948:	60 97       	sbiw	r28, 0x10	; 16
    194a:	41 e0       	ldi	r20, 0x01	; 1
    194c:	6c 96       	adiw	r28, 0x1c	; 28
    194e:	4f af       	std	Y+63, r20	; 0x3f
    1950:	6c 97       	sbiw	r28, 0x1c	; 28
    1952:	60 96       	adiw	r28, 0x10	; 16
    1954:	5f ad       	ldd	r21, Y+63	; 0x3f
    1956:	60 97       	sbiw	r28, 0x10	; 16
    1958:	6c 8d       	ldd	r22, Y+28	; 0x1c
    195a:	56 17       	cp	r21, r22
    195c:	18 f0       	brcs	.+6      	; 0x1964 <enterPass+0x46e>
    195e:	6c 96       	adiw	r28, 0x1c	; 28
    1960:	1f ae       	std	Y+63, r1	; 0x3f
    1962:	6c 97       	sbiw	r28, 0x1c	; 28
    1964:	69 96       	adiw	r28, 0x19	; 25
    1966:	7f ad       	ldd	r23, Y+63	; 0x3f
    1968:	69 97       	sbiw	r28, 0x19	; 25
    196a:	60 96       	adiw	r28, 0x10	; 16
    196c:	8f ad       	ldd	r24, Y+63	; 0x3f
    196e:	60 97       	sbiw	r28, 0x10	; 16
    1970:	78 0f       	add	r23, r24
    1972:	6d 96       	adiw	r28, 0x1d	; 29
    1974:	7f af       	std	Y+63, r23	; 0x3f
    1976:	6d 97       	sbiw	r28, 0x1d	; 29
    1978:	91 e0       	ldi	r25, 0x01	; 1
    197a:	6e 96       	adiw	r28, 0x1e	; 30
    197c:	9f af       	std	Y+63, r25	; 0x3f
    197e:	6e 97       	sbiw	r28, 0x1e	; 30
    1980:	6d 96       	adiw	r28, 0x1d	; 29
    1982:	0f ad       	ldd	r16, Y+63	; 0x3f
    1984:	6d 97       	sbiw	r28, 0x1d	; 29
    1986:	60 96       	adiw	r28, 0x10	; 16
    1988:	1f ad       	ldd	r17, Y+63	; 0x3f
    198a:	60 97       	sbiw	r28, 0x10	; 16
    198c:	01 17       	cp	r16, r17
    198e:	18 f0       	brcs	.+6      	; 0x1996 <enterPass+0x4a0>
    1990:	6e 96       	adiw	r28, 0x1e	; 30
    1992:	1f ae       	std	Y+63, r1	; 0x3f
    1994:	6e 97       	sbiw	r28, 0x1e	; 30
    1996:	6c 96       	adiw	r28, 0x1c	; 28
    1998:	2f ad       	ldd	r18, Y+63	; 0x3f
    199a:	6c 97       	sbiw	r28, 0x1c	; 28
    199c:	6e 96       	adiw	r28, 0x1e	; 30
    199e:	3f ad       	ldd	r19, Y+63	; 0x3f
    19a0:	6e 97       	sbiw	r28, 0x1e	; 30
    19a2:	23 2b       	or	r18, r19
    19a4:	6c 96       	adiw	r28, 0x1c	; 28
    19a6:	2f af       	std	Y+63, r18	; 0x3f
    19a8:	6c 97       	sbiw	r28, 0x1c	; 28
    19aa:	6d 96       	adiw	r28, 0x1d	; 29
    19ac:	4f ad       	ldd	r20, Y+63	; 0x3f
    19ae:	6d 97       	sbiw	r28, 0x1d	; 29
    19b0:	60 96       	adiw	r28, 0x10	; 16
    19b2:	4f af       	std	Y+63, r20	; 0x3f
    19b4:	60 97       	sbiw	r28, 0x10	; 16
    19b6:	5d 8d       	ldd	r21, Y+29	; 0x1d
    19b8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ba:	56 0f       	add	r21, r22
    19bc:	61 96       	adiw	r28, 0x11	; 17
    19be:	5f af       	std	Y+63, r21	; 0x3f
    19c0:	61 97       	sbiw	r28, 0x11	; 17
    19c2:	71 e0       	ldi	r23, 0x01	; 1
    19c4:	6f 96       	adiw	r28, 0x1f	; 31
    19c6:	7f af       	std	Y+63, r23	; 0x3f
    19c8:	6f 97       	sbiw	r28, 0x1f	; 31
    19ca:	61 96       	adiw	r28, 0x11	; 17
    19cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    19ce:	61 97       	sbiw	r28, 0x11	; 17
    19d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19d2:	89 17       	cp	r24, r25
    19d4:	18 f0       	brcs	.+6      	; 0x19dc <enterPass+0x4e6>
    19d6:	6f 96       	adiw	r28, 0x1f	; 31
    19d8:	1f ae       	std	Y+63, r1	; 0x3f
    19da:	6f 97       	sbiw	r28, 0x1f	; 31
    19dc:	6c 96       	adiw	r28, 0x1c	; 28
    19de:	0f ad       	ldd	r16, Y+63	; 0x3f
    19e0:	6c 97       	sbiw	r28, 0x1c	; 28
    19e2:	61 96       	adiw	r28, 0x11	; 17
    19e4:	1f ad       	ldd	r17, Y+63	; 0x3f
    19e6:	61 97       	sbiw	r28, 0x11	; 17
    19e8:	01 0f       	add	r16, r17
    19ea:	a0 96       	adiw	r28, 0x20	; 32
    19ec:	0f af       	std	Y+63, r16	; 0x3f
    19ee:	a0 97       	sbiw	r28, 0x20	; 32
    19f0:	21 e0       	ldi	r18, 0x01	; 1
    19f2:	a1 96       	adiw	r28, 0x21	; 33
    19f4:	2f af       	std	Y+63, r18	; 0x3f
    19f6:	a1 97       	sbiw	r28, 0x21	; 33
    19f8:	a0 96       	adiw	r28, 0x20	; 32
    19fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    19fc:	a0 97       	sbiw	r28, 0x20	; 32
    19fe:	61 96       	adiw	r28, 0x11	; 17
    1a00:	4f ad       	ldd	r20, Y+63	; 0x3f
    1a02:	61 97       	sbiw	r28, 0x11	; 17
    1a04:	34 17       	cp	r19, r20
    1a06:	18 f0       	brcs	.+6      	; 0x1a0e <enterPass+0x518>
    1a08:	a1 96       	adiw	r28, 0x21	; 33
    1a0a:	1f ae       	std	Y+63, r1	; 0x3f
    1a0c:	a1 97       	sbiw	r28, 0x21	; 33
    1a0e:	6f 96       	adiw	r28, 0x1f	; 31
    1a10:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a12:	6f 97       	sbiw	r28, 0x1f	; 31
    1a14:	a1 96       	adiw	r28, 0x21	; 33
    1a16:	6f ad       	ldd	r22, Y+63	; 0x3f
    1a18:	a1 97       	sbiw	r28, 0x21	; 33
    1a1a:	56 2b       	or	r21, r22
    1a1c:	6f 96       	adiw	r28, 0x1f	; 31
    1a1e:	5f af       	std	Y+63, r21	; 0x3f
    1a20:	6f 97       	sbiw	r28, 0x1f	; 31
    1a22:	a0 96       	adiw	r28, 0x20	; 32
    1a24:	7f ad       	ldd	r23, Y+63	; 0x3f
    1a26:	a0 97       	sbiw	r28, 0x20	; 32
    1a28:	61 96       	adiw	r28, 0x11	; 17
    1a2a:	7f af       	std	Y+63, r23	; 0x3f
    1a2c:	61 97       	sbiw	r28, 0x11	; 17
    1a2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a30:	9e 89       	ldd	r25, Y+22	; 0x16
    1a32:	89 0f       	add	r24, r25
    1a34:	62 96       	adiw	r28, 0x12	; 18
    1a36:	8f af       	std	Y+63, r24	; 0x3f
    1a38:	62 97       	sbiw	r28, 0x12	; 18
    1a3a:	01 e0       	ldi	r16, 0x01	; 1
    1a3c:	a2 96       	adiw	r28, 0x22	; 34
    1a3e:	0f af       	std	Y+63, r16	; 0x3f
    1a40:	a2 97       	sbiw	r28, 0x22	; 34
    1a42:	62 96       	adiw	r28, 0x12	; 18
    1a44:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a46:	62 97       	sbiw	r28, 0x12	; 18
    1a48:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1a4a:	12 17       	cp	r17, r18
    1a4c:	18 f0       	brcs	.+6      	; 0x1a54 <enterPass+0x55e>
    1a4e:	a2 96       	adiw	r28, 0x22	; 34
    1a50:	1f ae       	std	Y+63, r1	; 0x3f
    1a52:	a2 97       	sbiw	r28, 0x22	; 34
    1a54:	6f 96       	adiw	r28, 0x1f	; 31
    1a56:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a58:	6f 97       	sbiw	r28, 0x1f	; 31
    1a5a:	62 96       	adiw	r28, 0x12	; 18
    1a5c:	4f ad       	ldd	r20, Y+63	; 0x3f
    1a5e:	62 97       	sbiw	r28, 0x12	; 18
    1a60:	34 0f       	add	r19, r20
    1a62:	a3 96       	adiw	r28, 0x23	; 35
    1a64:	3f af       	std	Y+63, r19	; 0x3f
    1a66:	a3 97       	sbiw	r28, 0x23	; 35
    1a68:	51 e0       	ldi	r21, 0x01	; 1
    1a6a:	a4 96       	adiw	r28, 0x24	; 36
    1a6c:	5f af       	std	Y+63, r21	; 0x3f
    1a6e:	a4 97       	sbiw	r28, 0x24	; 36
    1a70:	a3 96       	adiw	r28, 0x23	; 35
    1a72:	6f ad       	ldd	r22, Y+63	; 0x3f
    1a74:	a3 97       	sbiw	r28, 0x23	; 35
    1a76:	62 96       	adiw	r28, 0x12	; 18
    1a78:	7f ad       	ldd	r23, Y+63	; 0x3f
    1a7a:	62 97       	sbiw	r28, 0x12	; 18
    1a7c:	67 17       	cp	r22, r23
    1a7e:	18 f0       	brcs	.+6      	; 0x1a86 <enterPass+0x590>
    1a80:	a4 96       	adiw	r28, 0x24	; 36
    1a82:	1f ae       	std	Y+63, r1	; 0x3f
    1a84:	a4 97       	sbiw	r28, 0x24	; 36
    1a86:	a2 96       	adiw	r28, 0x22	; 34
    1a88:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a8a:	a2 97       	sbiw	r28, 0x22	; 34
    1a8c:	a4 96       	adiw	r28, 0x24	; 36
    1a8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a90:	a4 97       	sbiw	r28, 0x24	; 36
    1a92:	89 2b       	or	r24, r25
    1a94:	a2 96       	adiw	r28, 0x22	; 34
    1a96:	8f af       	std	Y+63, r24	; 0x3f
    1a98:	a2 97       	sbiw	r28, 0x22	; 34
    1a9a:	a3 96       	adiw	r28, 0x23	; 35
    1a9c:	0f ad       	ldd	r16, Y+63	; 0x3f
    1a9e:	a3 97       	sbiw	r28, 0x23	; 35
    1aa0:	62 96       	adiw	r28, 0x12	; 18
    1aa2:	0f af       	std	Y+63, r16	; 0x3f
    1aa4:	62 97       	sbiw	r28, 0x12	; 18
    1aa6:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1aa8:	2f 89       	ldd	r18, Y+23	; 0x17
    1aaa:	12 0f       	add	r17, r18
    1aac:	63 96       	adiw	r28, 0x13	; 19
    1aae:	1f af       	std	Y+63, r17	; 0x3f
    1ab0:	63 97       	sbiw	r28, 0x13	; 19
    1ab2:	31 e0       	ldi	r19, 0x01	; 1
    1ab4:	a5 96       	adiw	r28, 0x25	; 37
    1ab6:	3f af       	std	Y+63, r19	; 0x3f
    1ab8:	a5 97       	sbiw	r28, 0x25	; 37
    1aba:	63 96       	adiw	r28, 0x13	; 19
    1abc:	4f ad       	ldd	r20, Y+63	; 0x3f
    1abe:	63 97       	sbiw	r28, 0x13	; 19
    1ac0:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1ac2:	45 17       	cp	r20, r21
    1ac4:	18 f0       	brcs	.+6      	; 0x1acc <enterPass+0x5d6>
    1ac6:	a5 96       	adiw	r28, 0x25	; 37
    1ac8:	1f ae       	std	Y+63, r1	; 0x3f
    1aca:	a5 97       	sbiw	r28, 0x25	; 37
    1acc:	a2 96       	adiw	r28, 0x22	; 34
    1ace:	6f ad       	ldd	r22, Y+63	; 0x3f
    1ad0:	a2 97       	sbiw	r28, 0x22	; 34
    1ad2:	63 96       	adiw	r28, 0x13	; 19
    1ad4:	7f ad       	ldd	r23, Y+63	; 0x3f
    1ad6:	63 97       	sbiw	r28, 0x13	; 19
    1ad8:	67 0f       	add	r22, r23
    1ada:	a6 96       	adiw	r28, 0x26	; 38
    1adc:	6f af       	std	Y+63, r22	; 0x3f
    1ade:	a6 97       	sbiw	r28, 0x26	; 38
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	a7 96       	adiw	r28, 0x27	; 39
    1ae4:	8f af       	std	Y+63, r24	; 0x3f
    1ae6:	a7 97       	sbiw	r28, 0x27	; 39
    1ae8:	a6 96       	adiw	r28, 0x26	; 38
    1aea:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aec:	a6 97       	sbiw	r28, 0x26	; 38
    1aee:	63 96       	adiw	r28, 0x13	; 19
    1af0:	0f ad       	ldd	r16, Y+63	; 0x3f
    1af2:	63 97       	sbiw	r28, 0x13	; 19
    1af4:	90 17       	cp	r25, r16
    1af6:	18 f0       	brcs	.+6      	; 0x1afe <enterPass+0x608>
    1af8:	a7 96       	adiw	r28, 0x27	; 39
    1afa:	1f ae       	std	Y+63, r1	; 0x3f
    1afc:	a7 97       	sbiw	r28, 0x27	; 39
    1afe:	a5 96       	adiw	r28, 0x25	; 37
    1b00:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b02:	a5 97       	sbiw	r28, 0x25	; 37
    1b04:	a7 96       	adiw	r28, 0x27	; 39
    1b06:	2f ad       	ldd	r18, Y+63	; 0x3f
    1b08:	a7 97       	sbiw	r28, 0x27	; 39
    1b0a:	12 2b       	or	r17, r18
    1b0c:	a5 96       	adiw	r28, 0x25	; 37
    1b0e:	1f af       	std	Y+63, r17	; 0x3f
    1b10:	a5 97       	sbiw	r28, 0x25	; 37
    1b12:	a6 96       	adiw	r28, 0x26	; 38
    1b14:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b16:	a6 97       	sbiw	r28, 0x26	; 38
    1b18:	63 96       	adiw	r28, 0x13	; 19
    1b1a:	3f af       	std	Y+63, r19	; 0x3f
    1b1c:	63 97       	sbiw	r28, 0x13	; 19
    1b1e:	48 a1       	ldd	r20, Y+32	; 0x20
    1b20:	58 8d       	ldd	r21, Y+24	; 0x18
    1b22:	45 0f       	add	r20, r21
    1b24:	64 96       	adiw	r28, 0x14	; 20
    1b26:	4f af       	std	Y+63, r20	; 0x3f
    1b28:	64 97       	sbiw	r28, 0x14	; 20
    1b2a:	a5 96       	adiw	r28, 0x25	; 37
    1b2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b2e:	a5 97       	sbiw	r28, 0x25	; 37
    1b30:	64 96       	adiw	r28, 0x14	; 20
    1b32:	6f ad       	ldd	r22, Y+63	; 0x3f
    1b34:	64 97       	sbiw	r28, 0x14	; 20
    1b36:	86 0f       	add	r24, r22
    1b38:	64 96       	adiw	r28, 0x14	; 20
    1b3a:	8f af       	std	Y+63, r24	; 0x3f
    1b3c:	64 97       	sbiw	r28, 0x14	; 20
    1b3e:	2d 96       	adiw	r28, 0x0d	; 13
    1b40:	2f ad       	ldd	r18, Y+63	; 0x3f
    1b42:	2d 97       	sbiw	r28, 0x0d	; 13
    1b44:	2e 96       	adiw	r28, 0x0e	; 14
    1b46:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b48:	2e 97       	sbiw	r28, 0x0e	; 14
    1b4a:	2f 96       	adiw	r28, 0x0f	; 15
    1b4c:	4f ad       	ldd	r20, Y+63	; 0x3f
    1b4e:	2f 97       	sbiw	r28, 0x0f	; 15
    1b50:	60 96       	adiw	r28, 0x10	; 16
    1b52:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b54:	60 97       	sbiw	r28, 0x10	; 16
    1b56:	61 96       	adiw	r28, 0x11	; 17
    1b58:	6f ad       	ldd	r22, Y+63	; 0x3f
    1b5a:	61 97       	sbiw	r28, 0x11	; 17
    1b5c:	62 96       	adiw	r28, 0x12	; 18
    1b5e:	7f ad       	ldd	r23, Y+63	; 0x3f
    1b60:	62 97       	sbiw	r28, 0x12	; 18
    1b62:	63 96       	adiw	r28, 0x13	; 19
    1b64:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b66:	63 97       	sbiw	r28, 0x13	; 19
    1b68:	64 96       	adiw	r28, 0x14	; 20
    1b6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b6c:	64 97       	sbiw	r28, 0x14	; 20
    1b6e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1b70:	f8 89       	ldd	r31, Y+16	; 0x10
    1b72:	20 83       	st	Z, r18
    1b74:	31 83       	std	Z+1, r19	; 0x01
    1b76:	42 83       	std	Z+2, r20	; 0x02
    1b78:	53 83       	std	Z+3, r21	; 0x03
    1b7a:	64 83       	std	Z+4, r22	; 0x04
    1b7c:	75 83       	std	Z+5, r23	; 0x05
    1b7e:	86 83       	std	Z+6, r24	; 0x06
    1b80:	97 83       	std	Z+7, r25	; 0x07
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a8 ec       	ldi	r26, 0xC8	; 200
    1b88:	b3 e4       	ldi	r27, 0x43	; 67
    1b8a:	8b 87       	std	Y+11, r24	; 0x0b
    1b8c:	9c 87       	std	Y+12, r25	; 0x0c
    1b8e:	ad 87       	std	Y+13, r26	; 0x0d
    1b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ba0:	54 e4       	ldi	r21, 0x44	; 68
    1ba2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	8f 83       	std	Y+7, r24	; 0x07
    1bac:	98 87       	std	Y+8, r25	; 0x08
    1bae:	a9 87       	std	Y+9, r26	; 0x09
    1bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e8       	ldi	r20, 0x80	; 128
    1bc0:	5f e3       	ldi	r21, 0x3F	; 63
    1bc2:	0e 94 77 04 	call	0x8ee	; 0x8ee <__ltsf2>
    1bc6:	88 23       	and	r24, r24
    1bc8:	2c f4       	brge	.+10     	; 0x1bd4 <enterPass+0x6de>
		__ticks = 1;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	3f c0       	rjmp	.+126    	; 0x1c52 <enterPass+0x75c>
	else if (__tmp > 65535)
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	3f ef       	ldi	r19, 0xFF	; 255
    1be0:	4f e7       	ldi	r20, 0x7F	; 127
    1be2:	57 e4       	ldi	r21, 0x47	; 71
    1be4:	0e 94 17 04 	call	0x82e	; 0x82e <__gtsf2>
    1be8:	18 16       	cp	r1, r24
    1bea:	4c f5       	brge	.+82     	; 0x1c3e <enterPass+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e2       	ldi	r20, 0x20	; 32
    1bfa:	51 e4       	ldi	r21, 0x41	; 65
    1bfc:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	0f c0       	rjmp	.+30     	; 0x1c34 <enterPass+0x73e>
    1c16:	88 ec       	ldi	r24, 0xC8	; 200
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9c 83       	std	Y+4, r25	; 0x04
    1c1c:	8b 83       	std	Y+3, r24	; 0x03
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <enterPass+0x72c>
    1c26:	9c 83       	std	Y+4, r25	; 0x04
    1c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	9e 83       	std	Y+6, r25	; 0x06
    1c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	9e 81       	ldd	r25, Y+6	; 0x06
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	69 f7       	brne	.-38     	; 0x1c16 <enterPass+0x720>
    1c3c:	14 c0       	rjmp	.+40     	; 0x1c66 <enterPass+0x770>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c40:	78 85       	ldd	r23, Y+8	; 0x08
    1c42:	89 85       	ldd	r24, Y+9	; 0x09
    1c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c46:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	8d 83       	std	Y+5, r24	; 0x05
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <enterPass+0x768>
    1c62:	9a 83       	std	Y+2, r25	; 0x02
    1c64:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(400); /*  that wait to synchronize between human & ECU */
	} while (g_byte != '='); /* do that until press key is '=' */
    1c66:	80 91 83 00 	lds	r24, 0x0083
    1c6a:	8d 33       	cpi	r24, 0x3D	; 61
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <enterPass+0x77a>
    1c6e:	62 cc       	rjmp	.-1852   	; 0x1534 <enterPass+0x3e>
}
    1c70:	ca 59       	subi	r28, 0x9A	; 154
    1c72:	df 4f       	sbci	r29, 0xFF	; 255
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	ff 90       	pop	r15
    1c88:	ef 90       	pop	r14
    1c8a:	df 90       	pop	r13
    1c8c:	cf 90       	pop	r12
    1c8e:	bf 90       	pop	r11
    1c90:	af 90       	pop	r10
    1c92:	08 95       	ret

00001c94 <runBuzzer>:

/*
 * Description: Function run Buzzer after user enter three time password wrong .
 */
void runBuzzer(void) {
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
	/* run buzzer*/
	SET_BIT(PORTD, PD7);
    1c9c:	a2 e3       	ldi	r26, 0x32	; 50
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e2 e3       	ldi	r30, 0x32	; 50
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	80 68       	ori	r24, 0x80	; 128
    1ca8:	8c 93       	st	X, r24
	/* initialize timer to start count */
	TIMER_init(&timePtr);
    1caa:	89 e6       	ldi	r24, 0x69	; 105
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 79 13 	call	0x26f2	; 0x26f2 <TIMER_init>
	timeIndex = 0; /* Initialize timer interrupt counter */
    1cb2:	10 92 70 00 	sts	0x0070, r1
	g_state = BUZZER; /* indicate that garage in Buzzer mode */
    1cb6:	84 e0       	ldi	r24, 0x04	; 4
    1cb8:	80 93 68 00 	sts	0x0068, r24
	while (g_state == BUZZER); /*  wait until garage mode change to close mode */
    1cbc:	80 91 68 00 	lds	r24, 0x0068
    1cc0:	84 30       	cpi	r24, 0x04	; 4
    1cc2:	e1 f3       	breq	.-8      	; 0x1cbc <runBuzzer+0x28>

}
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <openDoor>:

/*
 * Description: Function check password to open garage .
 */
void openDoor(void) {
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	eb 97       	sbiw	r28, 0x3b	; 59
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
    1cde:	1b a6       	std	Y+43, r1	; 0x2b
	do {
		enterPass(&g_pass); /*  receive password from HMI-ECU */
    1ce0:	81 e7       	ldi	r24, 0x71	; 113
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <enterPass>
		/*  read password from EEPROM */
		readPassFromEEPROM(&addPass, &g_passCheck);
    1ce8:	8d e6       	ldi	r24, 0x6D	; 109
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	29 e7       	ldi	r18, 0x79	; 121
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	b9 01       	movw	r22, r18
    1cf2:	0e 94 4f 11 	call	0x229e	; 0x229e <readPassFromEEPROM>

		UART_sendByte('#'); /*  tells HMI-ECU that MC2 become ready */
    1cf6:	83 e2       	ldi	r24, 0x23	; 35
    1cf8:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>

		if (g_pass == g_passCheck) { /* check that user enter correct password or not */
    1cfc:	80 91 71 00 	lds	r24, 0x0071
    1d00:	8c ab       	std	Y+52, r24	; 0x34
    1d02:	90 91 72 00 	lds	r25, 0x0072
    1d06:	9d ab       	std	Y+53, r25	; 0x35
    1d08:	80 91 73 00 	lds	r24, 0x0073
    1d0c:	8e ab       	std	Y+54, r24	; 0x36
    1d0e:	90 91 74 00 	lds	r25, 0x0074
    1d12:	9f ab       	std	Y+55, r25	; 0x37
    1d14:	80 91 75 00 	lds	r24, 0x0075
    1d18:	88 af       	std	Y+56, r24	; 0x38
    1d1a:	90 91 76 00 	lds	r25, 0x0076
    1d1e:	99 af       	std	Y+57, r25	; 0x39
    1d20:	80 91 77 00 	lds	r24, 0x0077
    1d24:	8a af       	std	Y+58, r24	; 0x3a
    1d26:	90 91 78 00 	lds	r25, 0x0078
    1d2a:	9b af       	std	Y+59, r25	; 0x3b
    1d2c:	80 91 79 00 	lds	r24, 0x0079
    1d30:	8c a7       	std	Y+44, r24	; 0x2c
    1d32:	90 91 7a 00 	lds	r25, 0x007A
    1d36:	9d a7       	std	Y+45, r25	; 0x2d
    1d38:	80 91 7b 00 	lds	r24, 0x007B
    1d3c:	8e a7       	std	Y+46, r24	; 0x2e
    1d3e:	90 91 7c 00 	lds	r25, 0x007C
    1d42:	9f a7       	std	Y+47, r25	; 0x2f
    1d44:	80 91 7d 00 	lds	r24, 0x007D
    1d48:	88 ab       	std	Y+48, r24	; 0x30
    1d4a:	90 91 7e 00 	lds	r25, 0x007E
    1d4e:	99 ab       	std	Y+49, r25	; 0x31
    1d50:	80 91 7f 00 	lds	r24, 0x007F
    1d54:	8a ab       	std	Y+50, r24	; 0x32
    1d56:	90 91 80 00 	lds	r25, 0x0080
    1d5a:	9b ab       	std	Y+51, r25	; 0x33
    1d5c:	8c a9       	ldd	r24, Y+52	; 0x34
    1d5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d60:	89 17       	cp	r24, r25
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <openDoor+0x9c>
    1d64:	ba c0       	rjmp	.+372    	; 0x1eda <openDoor+0x210>
    1d66:	8d a9       	ldd	r24, Y+53	; 0x35
    1d68:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d6a:	89 17       	cp	r24, r25
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <openDoor+0xa6>
    1d6e:	b5 c0       	rjmp	.+362    	; 0x1eda <openDoor+0x210>
    1d70:	8e a9       	ldd	r24, Y+54	; 0x36
    1d72:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d74:	89 17       	cp	r24, r25
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <openDoor+0xb0>
    1d78:	b0 c0       	rjmp	.+352    	; 0x1eda <openDoor+0x210>
    1d7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d7c:	9f a5       	ldd	r25, Y+47	; 0x2f
    1d7e:	89 17       	cp	r24, r25
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <openDoor+0xba>
    1d82:	ab c0       	rjmp	.+342    	; 0x1eda <openDoor+0x210>
    1d84:	88 ad       	ldd	r24, Y+56	; 0x38
    1d86:	98 a9       	ldd	r25, Y+48	; 0x30
    1d88:	89 17       	cp	r24, r25
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <openDoor+0xc4>
    1d8c:	a6 c0       	rjmp	.+332    	; 0x1eda <openDoor+0x210>
    1d8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d90:	99 a9       	ldd	r25, Y+49	; 0x31
    1d92:	89 17       	cp	r24, r25
    1d94:	09 f0       	breq	.+2      	; 0x1d98 <openDoor+0xce>
    1d96:	a1 c0       	rjmp	.+322    	; 0x1eda <openDoor+0x210>
    1d98:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d9a:	9a a9       	ldd	r25, Y+50	; 0x32
    1d9c:	89 17       	cp	r24, r25
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <openDoor+0xd8>
    1da0:	9c c0       	rjmp	.+312    	; 0x1eda <openDoor+0x210>
    1da2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1da4:	9b a9       	ldd	r25, Y+51	; 0x33
    1da6:	89 17       	cp	r24, r25
    1da8:	09 f0       	breq	.+2      	; 0x1dac <openDoor+0xe2>
    1daa:	97 c0       	rjmp	.+302    	; 0x1eda <openDoor+0x210>
			UART_sendByte(ERROR); /*  tells HMI_ECU that user enter correct password */
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e2       	ldi	r26, 0x20	; 32
    1db8:	b1 e4       	ldi	r27, 0x41	; 65
    1dba:	8f a3       	std	Y+39, r24	; 0x27
    1dbc:	98 a7       	std	Y+40, r25	; 0x28
    1dbe:	a9 a7       	std	Y+41, r26	; 0x29
    1dc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1dc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a ef       	ldi	r20, 0xFA	; 250
    1dd0:	54 e4       	ldi	r21, 0x44	; 68
    1dd2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	8b a3       	std	Y+35, r24	; 0x23
    1ddc:	9c a3       	std	Y+36, r25	; 0x24
    1dde:	ad a3       	std	Y+37, r26	; 0x25
    1de0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1de2:	6b a1       	ldd	r22, Y+35	; 0x23
    1de4:	7c a1       	ldd	r23, Y+36	; 0x24
    1de6:	8d a1       	ldd	r24, Y+37	; 0x25
    1de8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	0e 94 77 04 	call	0x8ee	; 0x8ee <__ltsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <openDoor+0x13a>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9a a3       	std	Y+34, r25	; 0x22
    1e00:	89 a3       	std	Y+33, r24	; 0x21
    1e02:	3f c0       	rjmp	.+126    	; 0x1e82 <openDoor+0x1b8>
	else if (__tmp > 65535)
    1e04:	6b a1       	ldd	r22, Y+35	; 0x23
    1e06:	7c a1       	ldd	r23, Y+36	; 0x24
    1e08:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	0e 94 17 04 	call	0x82e	; 0x82e <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	4c f5       	brge	.+82     	; 0x1e6e <openDoor+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e20:	89 a5       	ldd	r24, Y+41	; 0x29
    1e22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9a a3       	std	Y+34, r25	; 0x22
    1e42:	89 a3       	std	Y+33, r24	; 0x21
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <openDoor+0x19a>
    1e46:	88 ec       	ldi	r24, 0xC8	; 200
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	98 a3       	std	Y+32, r25	; 0x20
    1e4c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e50:	98 a1       	ldd	r25, Y+32	; 0x20
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <openDoor+0x188>
    1e56:	98 a3       	std	Y+32, r25	; 0x20
    1e58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	9a a3       	std	Y+34, r25	; 0x22
    1e62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	89 a1       	ldd	r24, Y+33	; 0x21
    1e66:	9a a1       	ldd	r25, Y+34	; 0x22
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	69 f7       	brne	.-38     	; 0x1e46 <openDoor+0x17c>
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <openDoor+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e70:	7c a1       	ldd	r23, Y+36	; 0x24
    1e72:	8d a1       	ldd	r24, Y+37	; 0x25
    1e74:	9e a1       	ldd	r25, Y+38	; 0x26
    1e76:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9a a3       	std	Y+34, r25	; 0x22
    1e80:	89 a3       	std	Y+33, r24	; 0x21
    1e82:	89 a1       	ldd	r24, Y+33	; 0x21
    1e84:	9a a1       	ldd	r25, Y+34	; 0x22
    1e86:	9e 8f       	std	Y+30, r25	; 0x1e
    1e88:	8d 8f       	std	Y+29, r24	; 0x1d
    1e8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <openDoor+0x1c4>
    1e92:	9e 8f       	std	Y+30, r25	; 0x1e
    1e94:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			UART_sendByte(SUCCESS);
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
			/* initialize timer to start  count*/
			TIMER_init(&timePtr);
    1e9c:	89 e6       	ldi	r24, 0x69	; 105
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <TIMER_init>
			/* edit output of motor pins to rotate motor clockwise */
			CLEAR_BIT(PORTD, PD5);
    1ea4:	a2 e3       	ldi	r26, 0x32	; 50
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e2 e3       	ldi	r30, 0x32	; 50
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	8f 7d       	andi	r24, 0xDF	; 223
    1eb0:	8c 93       	st	X, r24
			SET_BIT(PORTD, PD6);
    1eb2:	a2 e3       	ldi	r26, 0x32	; 50
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e2 e3       	ldi	r30, 0x32	; 50
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	80 64       	ori	r24, 0x40	; 64
    1ebe:	8c 93       	st	X, r24

			timeIndex = 0; /* Initialize timer interrupt counter */
    1ec0:	10 92 70 00 	sts	0x0070, r1
			g_state = OPENING; /* indicate that garage in opening mode */
    1ec4:	10 92 68 00 	sts	0x0068, r1
			while (g_state == OPENING); /*  wait until garage mode change to open mode */
    1ec8:	80 91 68 00 	lds	r24, 0x0068
    1ecc:	88 23       	and	r24, r24
    1ece:	e1 f3       	breq	.-8      	; 0x1ec8 <openDoor+0x1fe>
			closeDoor(); /*  start with close mode */
    1ed0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <closeDoor>
			i = 10; /* choose (10) that any number > 3 to break while loop*/
    1ed4:	8a e0       	ldi	r24, 0x0A	; 10
    1ed6:	8b a7       	std	Y+43, r24	; 0x2b
    1ed8:	ed c0       	rjmp	.+474    	; 0x20b4 <openDoor+0x3ea>
		} else {
			UART_sendByte(ERROR); /*  tells HMI_ECU that user enter wrong password */
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a0 e2       	ldi	r26, 0x20	; 32
    1ee6:	b1 e4       	ldi	r27, 0x41	; 65
    1ee8:	89 8f       	std	Y+25, r24	; 0x19
    1eea:	9a 8f       	std	Y+26, r25	; 0x1a
    1eec:	ab 8f       	std	Y+27, r26	; 0x1b
    1eee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ef4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ef6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a ef       	ldi	r20, 0xFA	; 250
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8d 8b       	std	Y+21, r24	; 0x15
    1f0a:	9e 8b       	std	Y+22, r25	; 0x16
    1f0c:	af 8b       	std	Y+23, r26	; 0x17
    1f0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f10:	6d 89       	ldd	r22, Y+21	; 0x15
    1f12:	7e 89       	ldd	r23, Y+22	; 0x16
    1f14:	8f 89       	ldd	r24, Y+23	; 0x17
    1f16:	98 8d       	ldd	r25, Y+24	; 0x18
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 77 04 	call	0x8ee	; 0x8ee <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <openDoor+0x268>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9c 8b       	std	Y+20, r25	; 0x14
    1f2e:	8b 8b       	std	Y+19, r24	; 0x13
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <openDoor+0x2e6>
	else if (__tmp > 65535)
    1f32:	6d 89       	ldd	r22, Y+21	; 0x15
    1f34:	7e 89       	ldd	r23, Y+22	; 0x16
    1f36:	8f 89       	ldd	r24, Y+23	; 0x17
    1f38:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 17 04 	call	0x82e	; 0x82e <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <openDoor+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9c 8b       	std	Y+20, r25	; 0x14
    1f70:	8b 8b       	std	Y+19, r24	; 0x13
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <openDoor+0x2c8>
    1f74:	88 ec       	ldi	r24, 0xC8	; 200
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9a 8b       	std	Y+18, r25	; 0x12
    1f7a:	89 8b       	std	Y+17, r24	; 0x11
    1f7c:	89 89       	ldd	r24, Y+17	; 0x11
    1f7e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <openDoor+0x2b6>
    1f84:	9a 8b       	std	Y+18, r25	; 0x12
    1f86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	9c 8b       	std	Y+20, r25	; 0x14
    1f90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	8b 89       	ldd	r24, Y+19	; 0x13
    1f94:	9c 89       	ldd	r25, Y+20	; 0x14
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <openDoor+0x2aa>
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <openDoor+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa4:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9c 8b       	std	Y+20, r25	; 0x14
    1fae:	8b 8b       	std	Y+19, r24	; 0x13
    1fb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb4:	98 8b       	std	Y+16, r25	; 0x10
    1fb6:	8f 87       	std	Y+15, r24	; 0x0f
    1fb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fba:	98 89       	ldd	r25, Y+16	; 0x10
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <openDoor+0x2f2>
    1fc0:	98 8b       	std	Y+16, r25	; 0x10
    1fc2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			UART_sendByte(ERROR);
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	aa e7       	ldi	r26, 0x7A	; 122
    1fd0:	b4 e4       	ldi	r27, 0x44	; 68
    1fd2:	8b 87       	std	Y+11, r24	; 0x0b
    1fd4:	9c 87       	std	Y+12, r25	; 0x0c
    1fd6:	ad 87       	std	Y+13, r26	; 0x0d
    1fd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a ef       	ldi	r20, 0xFA	; 250
    1fe8:	54 e4       	ldi	r21, 0x44	; 68
    1fea:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	8f 83       	std	Y+7, r24	; 0x07
    1ff4:	98 87       	std	Y+8, r25	; 0x08
    1ff6:	a9 87       	std	Y+9, r26	; 0x09
    1ff8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffc:	78 85       	ldd	r23, Y+8	; 0x08
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 77 04 	call	0x8ee	; 0x8ee <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <openDoor+0x352>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9e 83       	std	Y+6, r25	; 0x06
    2018:	8d 83       	std	Y+5, r24	; 0x05
    201a:	3f c0       	rjmp	.+126    	; 0x209a <openDoor+0x3d0>
	else if (__tmp > 65535)
    201c:	6f 81       	ldd	r22, Y+7	; 0x07
    201e:	78 85       	ldd	r23, Y+8	; 0x08
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	0e 94 17 04 	call	0x82e	; 0x82e <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	4c f5       	brge	.+82     	; 0x2086 <openDoor+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	6b 85       	ldd	r22, Y+11	; 0x0b
    2036:	7c 85       	ldd	r23, Y+12	; 0x0c
    2038:	8d 85       	ldd	r24, Y+13	; 0x0d
    203a:	9e 85       	ldd	r25, Y+14	; 0x0e
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9e 83       	std	Y+6, r25	; 0x06
    205a:	8d 83       	std	Y+5, r24	; 0x05
    205c:	0f c0       	rjmp	.+30     	; 0x207c <openDoor+0x3b2>
    205e:	88 ec       	ldi	r24, 0xC8	; 200
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9c 83       	std	Y+4, r25	; 0x04
    2064:	8b 83       	std	Y+3, r24	; 0x03
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <openDoor+0x3a0>
    206e:	9c 83       	std	Y+4, r25	; 0x04
    2070:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <openDoor+0x394>
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <openDoor+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	6f 81       	ldd	r22, Y+7	; 0x07
    2088:	78 85       	ldd	r23, Y+8	; 0x08
    208a:	89 85       	ldd	r24, Y+9	; 0x09
    208c:	9a 85       	ldd	r25, Y+10	; 0x0a
    208e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
    209c:	9e 81       	ldd	r25, Y+6	; 0x06
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <openDoor+0x3dc>
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	89 83       	std	Y+1, r24	; 0x01
			/* wait one second to synchronize with HMI-ECU that now display error massage */
			_delay_ms(1000);
			i++;
    20ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b0:	8f 5f       	subi	r24, 0xFF	; 255
    20b2:	8b a7       	std	Y+43, r24	; 0x2b
		}
	} while (i < 3); /* wait until user enter correct pass or three time wrong password*/
    20b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b6:	83 30       	cpi	r24, 0x03	; 3
    20b8:	08 f4       	brcc	.+2      	; 0x20bc <openDoor+0x3f2>
    20ba:	12 ce       	rjmp	.-988    	; 0x1ce0 <openDoor+0x16>
	if (i == 3) { /* that means user enter three time wrong password*/
    20bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	11 f4       	brne	.+4      	; 0x20c6 <openDoor+0x3fc>
		runBuzzer(); /* start of buzzer mode */
    20c2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <runBuzzer>
	}

}
    20c6:	eb 96       	adiw	r28, 0x3b	; 59
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <writePassInEEPROM>:

/*
 * Description: Function store password in EEPROM .
 */
void writePassInEEPROM(uint16 *add, uint64 *data) {
    20d8:	8f 92       	push	r8
    20da:	9f 92       	push	r9
    20dc:	af 92       	push	r10
    20de:	bf 92       	push	r11
    20e0:	cf 92       	push	r12
    20e2:	df 92       	push	r13
    20e4:	ef 92       	push	r14
    20e6:	ff 92       	push	r15
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	63 97       	sbiw	r28, 0x13	; 19
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	99 8b       	std	Y+17, r25	; 0x11
    2102:	88 8b       	std	Y+16, r24	; 0x10
    2104:	7b 8b       	std	Y+19, r23	; 0x13
    2106:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	for (i = 0; i < 8; i++) {
    2108:	1f 86       	std	Y+15, r1	; 0x0f
    210a:	b2 c0       	rjmp	.+356    	; 0x2270 <writePassInEEPROM+0x198>
		/* write i-byte of password in select location + i*/
		EEPROM_writeByte(((*add) + i), ((*data) >> (8 * i)));
    210c:	e8 89       	ldd	r30, Y+16	; 0x10
    210e:	f9 89       	ldd	r31, Y+17	; 0x11
    2110:	20 81       	ld	r18, Z
    2112:	31 81       	ldd	r19, Z+1	; 0x01
    2114:	8f 85       	ldd	r24, Y+15	; 0x0f
    2116:	88 2f       	mov	r24, r24
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	49 01       	movw	r8, r18
    211c:	88 0e       	add	r8, r24
    211e:	99 1e       	adc	r9, r25
    2120:	ea 89       	ldd	r30, Y+18	; 0x12
    2122:	fb 89       	ldd	r31, Y+19	; 0x13
    2124:	a0 80       	ld	r10, Z
    2126:	b1 80       	ldd	r11, Z+1	; 0x01
    2128:	c2 80       	ldd	r12, Z+2	; 0x02
    212a:	d3 80       	ldd	r13, Z+3	; 0x03
    212c:	e4 80       	ldd	r14, Z+4	; 0x04
    212e:	f5 80       	ldd	r15, Z+5	; 0x05
    2130:	06 81       	ldd	r16, Z+6	; 0x06
    2132:	17 81       	ldd	r17, Z+7	; 0x07
    2134:	8f 85       	ldd	r24, Y+15	; 0x0f
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	fc 01       	movw	r30, r24
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	ee 0f       	add	r30, r30
    2142:	ff 1f       	adc	r31, r31
    2144:	ee 0f       	add	r30, r30
    2146:	ff 1f       	adc	r31, r31
    2148:	2a 2d       	mov	r18, r10
    214a:	3b 2d       	mov	r19, r11
    214c:	4c 2d       	mov	r20, r12
    214e:	5d 2d       	mov	r21, r13
    2150:	6e 2d       	mov	r22, r14
    2152:	7f 2d       	mov	r23, r15
    2154:	80 2f       	mov	r24, r16
    2156:	91 2f       	mov	r25, r17
    2158:	0e 2f       	mov	r16, r30
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    215e:	a2 2e       	mov	r10, r18
    2160:	b3 2e       	mov	r11, r19
    2162:	c4 2e       	mov	r12, r20
    2164:	d5 2e       	mov	r13, r21
    2166:	e6 2e       	mov	r14, r22
    2168:	f7 2e       	mov	r15, r23
    216a:	08 2f       	mov	r16, r24
    216c:	19 2f       	mov	r17, r25
    216e:	2a 2d       	mov	r18, r10
    2170:	3b 2d       	mov	r19, r11
    2172:	4c 2d       	mov	r20, r12
    2174:	5d 2d       	mov	r21, r13
    2176:	6e 2d       	mov	r22, r14
    2178:	7f 2d       	mov	r23, r15
    217a:	80 2f       	mov	r24, r16
    217c:	91 2f       	mov	r25, r17
    217e:	c4 01       	movw	r24, r8
    2180:	62 2f       	mov	r22, r18
    2182:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <EEPROM_writeByte>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	a0 e2       	ldi	r26, 0x20	; 32
    218c:	b1 e4       	ldi	r27, 0x41	; 65
    218e:	8b 87       	std	Y+11, r24	; 0x0b
    2190:	9c 87       	std	Y+12, r25	; 0x0c
    2192:	ad 87       	std	Y+13, r26	; 0x0d
    2194:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	6b 85       	ldd	r22, Y+11	; 0x0b
    2198:	7c 85       	ldd	r23, Y+12	; 0x0c
    219a:	8d 85       	ldd	r24, Y+13	; 0x0d
    219c:	9e 85       	ldd	r25, Y+14	; 0x0e
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4a ef       	ldi	r20, 0xFA	; 250
    21a4:	54 e4       	ldi	r21, 0x44	; 68
    21a6:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	8f 83       	std	Y+7, r24	; 0x07
    21b0:	98 87       	std	Y+8, r25	; 0x08
    21b2:	a9 87       	std	Y+9, r26	; 0x09
    21b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b6:	6f 81       	ldd	r22, Y+7	; 0x07
    21b8:	78 85       	ldd	r23, Y+8	; 0x08
    21ba:	89 85       	ldd	r24, Y+9	; 0x09
    21bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e8       	ldi	r20, 0x80	; 128
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	0e 94 77 04 	call	0x8ee	; 0x8ee <__ltsf2>
    21ca:	88 23       	and	r24, r24
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <writePassInEEPROM+0x100>
		__ticks = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	3f c0       	rjmp	.+126    	; 0x2256 <writePassInEEPROM+0x17e>
	else if (__tmp > 65535)
    21d8:	6f 81       	ldd	r22, Y+7	; 0x07
    21da:	78 85       	ldd	r23, Y+8	; 0x08
    21dc:	89 85       	ldd	r24, Y+9	; 0x09
    21de:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 17 04 	call	0x82e	; 0x82e <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	4c f5       	brge	.+82     	; 0x2242 <writePassInEEPROM+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <writePassInEEPROM+0x160>
    221a:	88 ec       	ldi	r24, 0xC8	; 200
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9c 83       	std	Y+4, r25	; 0x04
    2220:	8b 83       	std	Y+3, r24	; 0x03
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <writePassInEEPROM+0x14e>
    222a:	9c 83       	std	Y+4, r25	; 0x04
    222c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	69 f7       	brne	.-38     	; 0x221a <writePassInEEPROM+0x142>
    2240:	14 c0       	rjmp	.+40     	; 0x226a <writePassInEEPROM+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	9e 81       	ldd	r25, Y+6	; 0x06
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	9a 81       	ldd	r25, Y+2	; 0x02
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <writePassInEEPROM+0x18a>
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description: Function store password in EEPROM .
 */
void writePassInEEPROM(uint16 *add, uint64 *data) {
	uint8 i;
	for (i = 0; i < 8; i++) {
    226a:	8f 85       	ldd	r24, Y+15	; 0x0f
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	8f 87       	std	Y+15, r24	; 0x0f
    2270:	8f 85       	ldd	r24, Y+15	; 0x0f
    2272:	88 30       	cpi	r24, 0x08	; 8
    2274:	08 f4       	brcc	.+2      	; 0x2278 <writePassInEEPROM+0x1a0>
    2276:	4a cf       	rjmp	.-364    	; 0x210c <writePassInEEPROM+0x34>
		/* write i-byte of password in select location + i*/
		EEPROM_writeByte(((*add) + i), ((*data) >> (8 * i)));
		_delay_ms(10); /* wait to write byte in EEPROM correctly */
	}
}
    2278:	63 96       	adiw	r28, 0x13	; 19
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	ef 90       	pop	r14
    2290:	df 90       	pop	r13
    2292:	cf 90       	pop	r12
    2294:	bf 90       	pop	r11
    2296:	af 90       	pop	r10
    2298:	9f 90       	pop	r9
    229a:	8f 90       	pop	r8
    229c:	08 95       	ret

0000229e <readPassFromEEPROM>:

/*
 * Description: Function read  stored password from  EEPROM .
 */
void readPassFromEEPROM(uint16 *add, uint64 *data) {
    229e:	2f 92       	push	r2
    22a0:	3f 92       	push	r3
    22a2:	4f 92       	push	r4
    22a4:	5f 92       	push	r5
    22a6:	6f 92       	push	r6
    22a8:	7f 92       	push	r7
    22aa:	8f 92       	push	r8
    22ac:	9f 92       	push	r9
    22ae:	af 92       	push	r10
    22b0:	bf 92       	push	r11
    22b2:	cf 92       	push	r12
    22b4:	df 92       	push	r13
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	63 97       	sbiw	r28, 0x13	; 19
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	99 8b       	std	Y+17, r25	; 0x11
    22d4:	88 8b       	std	Y+16, r24	; 0x10
    22d6:	7b 8b       	std	Y+19, r23	; 0x13
    22d8:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	for (i = 0; i < 8; i++) {
    22da:	1f 86       	std	Y+15, r1	; 0x0f
    22dc:	c6 c0       	rjmp	.+396    	; 0x246a <readPassFromEEPROM+0x1cc>
		/* read i-byte of password in select location + i */
		EEPROM_readByte(((*add) + i), &g_byte);
    22de:	e8 89       	ldd	r30, Y+16	; 0x10
    22e0:	f9 89       	ldd	r31, Y+17	; 0x11
    22e2:	20 81       	ld	r18, Z
    22e4:	31 81       	ldd	r19, Z+1	; 0x01
    22e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	82 0f       	add	r24, r18
    22ee:	93 1f       	adc	r25, r19
    22f0:	23 e8       	ldi	r18, 0x83	; 131
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	b9 01       	movw	r22, r18
    22f6:	0e 94 9c 12 	call	0x2538	; 0x2538 <EEPROM_readByte>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e2       	ldi	r26, 0x20	; 32
    2300:	b1 e4       	ldi	r27, 0x41	; 65
    2302:	8b 87       	std	Y+11, r24	; 0x0b
    2304:	9c 87       	std	Y+12, r25	; 0x0c
    2306:	ad 87       	std	Y+13, r26	; 0x0d
    2308:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	6b 85       	ldd	r22, Y+11	; 0x0b
    230c:	7c 85       	ldd	r23, Y+12	; 0x0c
    230e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2310:	9e 85       	ldd	r25, Y+14	; 0x0e
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a ef       	ldi	r20, 0xFA	; 250
    2318:	54 e4       	ldi	r21, 0x44	; 68
    231a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8f 83       	std	Y+7, r24	; 0x07
    2324:	98 87       	std	Y+8, r25	; 0x08
    2326:	a9 87       	std	Y+9, r26	; 0x09
    2328:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 77 04 	call	0x8ee	; 0x8ee <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <readPassFromEEPROM+0xae>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <readPassFromEEPROM+0x12c>
	else if (__tmp > 65535)
    234c:	6f 81       	ldd	r22, Y+7	; 0x07
    234e:	78 85       	ldd	r23, Y+8	; 0x08
    2350:	89 85       	ldd	r24, Y+9	; 0x09
    2352:	9a 85       	ldd	r25, Y+10	; 0x0a
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 17 04 	call	0x82e	; 0x82e <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <readPassFromEEPROM+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	6b 85       	ldd	r22, Y+11	; 0x0b
    2366:	7c 85       	ldd	r23, Y+12	; 0x0c
    2368:	8d 85       	ldd	r24, Y+13	; 0x0d
    236a:	9e 85       	ldd	r25, Y+14	; 0x0e
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9e 83       	std	Y+6, r25	; 0x06
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <readPassFromEEPROM+0x10e>
    238e:	88 ec       	ldi	r24, 0xC8	; 200
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9c 83       	std	Y+4, r25	; 0x04
    2394:	8b 83       	std	Y+3, r24	; 0x03
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <readPassFromEEPROM+0xfc>
    239e:	9c 83       	std	Y+4, r25	; 0x04
    23a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9e 83       	std	Y+6, r25	; 0x06
    23aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <readPassFromEEPROM+0xf0>
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <readPassFromEEPROM+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	6f 81       	ldd	r22, Y+7	; 0x07
    23b8:	78 85       	ldd	r23, Y+8	; 0x08
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23be:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <readPassFromEEPROM+0x138>
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10); /* wait to read byte in EEPROM correctly */
		/* store read i-byte in i-byte of password variable*/
		(*data) = (*data) | ((uint32) g_byte << (8 * i));
    23de:	ea 89       	ldd	r30, Y+18	; 0x12
    23e0:	fb 89       	ldd	r31, Y+19	; 0x13
    23e2:	a0 80       	ld	r10, Z
    23e4:	b1 80       	ldd	r11, Z+1	; 0x01
    23e6:	c2 80       	ldd	r12, Z+2	; 0x02
    23e8:	d3 80       	ldd	r13, Z+3	; 0x03
    23ea:	e4 80       	ldd	r14, Z+4	; 0x04
    23ec:	f5 80       	ldd	r15, Z+5	; 0x05
    23ee:	06 81       	ldd	r16, Z+6	; 0x06
    23f0:	17 81       	ldd	r17, Z+7	; 0x07
    23f2:	80 91 83 00 	lds	r24, 0x0083
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	50 e0       	ldi	r21, 0x00	; 0
    23fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2400:	88 2f       	mov	r24, r24
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	39 01       	movw	r6, r18
    2412:	4a 01       	movw	r8, r20
    2414:	04 c0       	rjmp	.+8      	; 0x241e <readPassFromEEPROM+0x180>
    2416:	66 0c       	add	r6, r6
    2418:	77 1c       	adc	r7, r7
    241a:	88 1c       	adc	r8, r8
    241c:	99 1c       	adc	r9, r9
    241e:	8a 95       	dec	r24
    2420:	d2 f7       	brpl	.-12     	; 0x2416 <readPassFromEEPROM+0x178>
    2422:	d4 01       	movw	r26, r8
    2424:	c3 01       	movw	r24, r6
    2426:	1c 01       	movw	r2, r24
    2428:	2d 01       	movw	r4, r26
    242a:	66 24       	eor	r6, r6
    242c:	77 24       	eor	r7, r7
    242e:	43 01       	movw	r8, r6
    2430:	2a 2d       	mov	r18, r10
    2432:	22 29       	or	r18, r2
    2434:	3b 2d       	mov	r19, r11
    2436:	33 29       	or	r19, r3
    2438:	4c 2d       	mov	r20, r12
    243a:	44 29       	or	r20, r4
    243c:	5d 2d       	mov	r21, r13
    243e:	55 29       	or	r21, r5
    2440:	6e 2d       	mov	r22, r14
    2442:	66 29       	or	r22, r6
    2444:	7f 2d       	mov	r23, r15
    2446:	77 29       	or	r23, r7
    2448:	80 2f       	mov	r24, r16
    244a:	88 29       	or	r24, r8
    244c:	91 2f       	mov	r25, r17
    244e:	99 29       	or	r25, r9
    2450:	ea 89       	ldd	r30, Y+18	; 0x12
    2452:	fb 89       	ldd	r31, Y+19	; 0x13
    2454:	20 83       	st	Z, r18
    2456:	31 83       	std	Z+1, r19	; 0x01
    2458:	42 83       	std	Z+2, r20	; 0x02
    245a:	53 83       	std	Z+3, r21	; 0x03
    245c:	64 83       	std	Z+4, r22	; 0x04
    245e:	75 83       	std	Z+5, r23	; 0x05
    2460:	86 83       	std	Z+6, r24	; 0x06
    2462:	97 83       	std	Z+7, r25	; 0x07
/*
 * Description: Function read  stored password from  EEPROM .
 */
void readPassFromEEPROM(uint16 *add, uint64 *data) {
	uint8 i;
	for (i = 0; i < 8; i++) {
    2464:	8f 85       	ldd	r24, Y+15	; 0x0f
    2466:	8f 5f       	subi	r24, 0xFF	; 255
    2468:	8f 87       	std	Y+15, r24	; 0x0f
    246a:	8f 85       	ldd	r24, Y+15	; 0x0f
    246c:	88 30       	cpi	r24, 0x08	; 8
    246e:	08 f4       	brcc	.+2      	; 0x2472 <readPassFromEEPROM+0x1d4>
    2470:	36 cf       	rjmp	.-404    	; 0x22de <readPassFromEEPROM+0x40>
		EEPROM_readByte(((*add) + i), &g_byte);
		_delay_ms(10); /* wait to read byte in EEPROM correctly */
		/* store read i-byte in i-byte of password variable*/
		(*data) = (*data) | ((uint32) g_byte << (8 * i));
	}
}
    2472:	63 96       	adiw	r28, 0x13	; 19
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	ff 90       	pop	r15
    2488:	ef 90       	pop	r14
    248a:	df 90       	pop	r13
    248c:	cf 90       	pop	r12
    248e:	bf 90       	pop	r11
    2490:	af 90       	pop	r10
    2492:	9f 90       	pop	r9
    2494:	8f 90       	pop	r8
    2496:	7f 90       	pop	r7
    2498:	6f 90       	pop	r6
    249a:	5f 90       	pop	r5
    249c:	4f 90       	pop	r4
    249e:	3f 90       	pop	r3
    24a0:	2f 90       	pop	r2
    24a2:	08 95       	ret

000024a4 <EEPROM_init>:
#include "EEPROM.h"

#include "I2C.h"

void EEPROM_init(void)
{
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    24ac:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <TWI_init>
}
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    24b6:	df 93       	push	r29
    24b8:	cf 93       	push	r28
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <EEPROM_writeByte+0x6>
    24bc:	00 d0       	rcall	.+0      	; 0x24be <EEPROM_writeByte+0x8>
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    24c8:	0e 94 12 13 	call	0x2624	; 0x2624 <TWI_start>
    if (TWI_getStatus() != TW_START)
    24cc:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_getStatus>
    24d0:	88 30       	cpi	r24, 0x08	; 8
    24d2:	11 f0       	breq	.+4      	; 0x24d8 <EEPROM_writeByte+0x22>
        return ERROR;
    24d4:	1c 82       	std	Y+4, r1	; 0x04
    24d6:	28 c0       	rjmp	.+80     	; 0x2528 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	80 70       	andi	r24, 0x00	; 0
    24de:	97 70       	andi	r25, 0x07	; 7
    24e0:	88 0f       	add	r24, r24
    24e2:	89 2f       	mov	r24, r25
    24e4:	88 1f       	adc	r24, r24
    24e6:	99 0b       	sbc	r25, r25
    24e8:	91 95       	neg	r25
    24ea:	80 6a       	ori	r24, 0xA0	; 160
    24ec:	0e 94 2d 13 	call	0x265a	; 0x265a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    24f0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_getStatus>
    24f4:	88 31       	cpi	r24, 0x18	; 24
    24f6:	11 f0       	breq	.+4      	; 0x24fc <EEPROM_writeByte+0x46>
        return ERROR; 
    24f8:	1c 82       	std	Y+4, r1	; 0x04
    24fa:	16 c0       	rjmp	.+44     	; 0x2528 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	0e 94 2d 13 	call	0x265a	; 0x265a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2502:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_getStatus>
    2506:	88 32       	cpi	r24, 0x28	; 40
    2508:	11 f0       	breq	.+4      	; 0x250e <EEPROM_writeByte+0x58>
        return ERROR;
    250a:	1c 82       	std	Y+4, r1	; 0x04
    250c:	0d c0       	rjmp	.+26     	; 0x2528 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	0e 94 2d 13 	call	0x265a	; 0x265a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2514:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_getStatus>
    2518:	88 32       	cpi	r24, 0x28	; 40
    251a:	11 f0       	breq	.+4      	; 0x2520 <EEPROM_writeByte+0x6a>
        return ERROR;
    251c:	1c 82       	std	Y+4, r1	; 0x04
    251e:	04 c0       	rjmp	.+8      	; 0x2528 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2520:	0e 94 22 13 	call	0x2644	; 0x2644 <TWI_stop>
	
    return SUCCESS;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8c 83       	std	Y+4, r24	; 0x04
    2528:	8c 81       	ldd	r24, Y+4	; 0x04
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <EEPROM_readByte+0x6>
    253e:	00 d0       	rcall	.+0      	; 0x2540 <EEPROM_readByte+0x8>
    2540:	0f 92       	push	r0
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	9a 83       	std	Y+2, r25	; 0x02
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	7c 83       	std	Y+4, r23	; 0x04
    254c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    254e:	0e 94 12 13 	call	0x2624	; 0x2624 <TWI_start>
    if (TWI_getStatus() != TW_START)
    2552:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_getStatus>
    2556:	88 30       	cpi	r24, 0x08	; 8
    2558:	11 f0       	breq	.+4      	; 0x255e <EEPROM_readByte+0x26>
        return ERROR;
    255a:	1d 82       	std	Y+5, r1	; 0x05
    255c:	44 c0       	rjmp	.+136    	; 0x25e6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	80 70       	andi	r24, 0x00	; 0
    2564:	97 70       	andi	r25, 0x07	; 7
    2566:	88 0f       	add	r24, r24
    2568:	89 2f       	mov	r24, r25
    256a:	88 1f       	adc	r24, r24
    256c:	99 0b       	sbc	r25, r25
    256e:	91 95       	neg	r25
    2570:	80 6a       	ori	r24, 0xA0	; 160
    2572:	0e 94 2d 13 	call	0x265a	; 0x265a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    2576:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_getStatus>
    257a:	88 31       	cpi	r24, 0x18	; 24
    257c:	11 f0       	breq	.+4      	; 0x2582 <EEPROM_readByte+0x4a>
        return ERROR;
    257e:	1d 82       	std	Y+5, r1	; 0x05
    2580:	32 c0       	rjmp	.+100    	; 0x25e6 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	0e 94 2d 13 	call	0x265a	; 0x265a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2588:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_getStatus>
    258c:	88 32       	cpi	r24, 0x28	; 40
    258e:	11 f0       	breq	.+4      	; 0x2594 <EEPROM_readByte+0x5c>
        return ERROR;
    2590:	1d 82       	std	Y+5, r1	; 0x05
    2592:	29 c0       	rjmp	.+82     	; 0x25e6 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2594:	0e 94 12 13 	call	0x2624	; 0x2624 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    2598:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_getStatus>
    259c:	80 31       	cpi	r24, 0x10	; 16
    259e:	11 f0       	breq	.+4      	; 0x25a4 <EEPROM_readByte+0x6c>
        return ERROR;
    25a0:	1d 82       	std	Y+5, r1	; 0x05
    25a2:	21 c0       	rjmp	.+66     	; 0x25e6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	9a 81       	ldd	r25, Y+2	; 0x02
    25a8:	80 70       	andi	r24, 0x00	; 0
    25aa:	97 70       	andi	r25, 0x07	; 7
    25ac:	88 0f       	add	r24, r24
    25ae:	89 2f       	mov	r24, r25
    25b0:	88 1f       	adc	r24, r24
    25b2:	99 0b       	sbc	r25, r25
    25b4:	91 95       	neg	r25
    25b6:	81 6a       	ori	r24, 0xA1	; 161
    25b8:	0e 94 2d 13 	call	0x265a	; 0x265a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    25bc:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_getStatus>
    25c0:	80 34       	cpi	r24, 0x40	; 64
    25c2:	11 f0       	breq	.+4      	; 0x25c8 <EEPROM_readByte+0x90>
        return ERROR;
    25c4:	1d 82       	std	Y+5, r1	; 0x05
    25c6:	0f c0       	rjmp	.+30     	; 0x25e6 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    25c8:	0e 94 57 13 	call	0x26ae	; 0x26ae <TWI_readWithNACK>
    25cc:	eb 81       	ldd	r30, Y+3	; 0x03
    25ce:	fc 81       	ldd	r31, Y+4	; 0x04
    25d0:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    25d2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <TWI_getStatus>
    25d6:	88 35       	cpi	r24, 0x58	; 88
    25d8:	11 f0       	breq	.+4      	; 0x25de <EEPROM_readByte+0xa6>
        return ERROR;
    25da:	1d 82       	std	Y+5, r1	; 0x05
    25dc:	04 c0       	rjmp	.+8      	; 0x25e6 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    25de:	0e 94 22 13 	call	0x2644	; 0x2644 <TWI_stop>
    return SUCCESS;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <TWI_init>:
 *******************************************************************************/
 
#include "I2C.h"

void TWI_init(void)
{
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2600:	e0 e2       	ldi	r30, 0x20	; 32
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	82 e0       	ldi	r24, 0x02	; 2
    2606:	80 83       	st	Z, r24
	TWSR = 0x00;
    2608:	e1 e2       	ldi	r30, 0x21	; 33
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    260e:	e2 e2       	ldi	r30, 0x22	; 34
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2616:	e6 e5       	ldi	r30, 0x56	; 86
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	84 e0       	ldi	r24, 0x04	; 4
    261c:	80 83       	st	Z, r24
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <TWI_start>:

void TWI_start(void)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    262c:	e6 e5       	ldi	r30, 0x56	; 86
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	84 ea       	ldi	r24, 0xA4	; 164
    2632:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2634:	e6 e5       	ldi	r30, 0x56	; 86
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	88 23       	and	r24, r24
    263c:	dc f7       	brge	.-10     	; 0x2634 <TWI_start+0x10>
}
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <TWI_stop>:

void TWI_stop(void)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    264c:	e6 e5       	ldi	r30, 0x56	; 86
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	84 e9       	ldi	r24, 0x94	; 148
    2652:	80 83       	st	Z, r24
}
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <TWI_write>:

void TWI_write(uint8 data)
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	0f 92       	push	r0
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2666:	e3 e2       	ldi	r30, 0x23	; 35
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    266e:	e6 e5       	ldi	r30, 0x56	; 86
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	84 e8       	ldi	r24, 0x84	; 132
    2674:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2676:	e6 e5       	ldi	r30, 0x56	; 86
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	88 23       	and	r24, r24
    267e:	dc f7       	brge	.-10     	; 0x2676 <TWI_write+0x1c>
}
    2680:	0f 90       	pop	r0
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2690:	e6 e5       	ldi	r30, 0x56	; 86
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	84 ec       	ldi	r24, 0xC4	; 196
    2696:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2698:	e6 e5       	ldi	r30, 0x56	; 86
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	88 23       	and	r24, r24
    26a0:	dc f7       	brge	.-10     	; 0x2698 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    26a2:	e3 e2       	ldi	r30, 0x23	; 35
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
}
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    26b6:	e6 e5       	ldi	r30, 0x56	; 86
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	84 e8       	ldi	r24, 0x84	; 132
    26bc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26be:	e6 e5       	ldi	r30, 0x56	; 86
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	88 23       	and	r24, r24
    26c6:	dc f7       	brge	.-10     	; 0x26be <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    26c8:	e3 e2       	ldi	r30, 0x23	; 35
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
}
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	0f 92       	push	r0
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    26de:	e1 e2       	ldi	r30, 0x21	; 33
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	88 7f       	andi	r24, 0xF8	; 248
    26e6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <TIMER_init>:
 * 	1. Set the required clock.
 * 	2. Set the required Mode.
 * 	3. Enable the Interrupt for select Mode Timer1.
 * 	4. Initialize Timer1 Registers
 */
void TIMER_init(TIMER_Config *Str){
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <TIMER_init+0x6>
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A=0;
    2700:	ef e4       	ldi	r30, 0x4F	; 79
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	10 82       	st	Z, r1

	/*Set the required Mode.*/
	TCCR1B =(TCCR1B & 0xE7) | (Str->mode<<3);
    2706:	ae e4       	ldi	r26, 0x4E	; 78
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	ee e4       	ldi	r30, 0x4E	; 78
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	28 2f       	mov	r18, r24
    2712:	27 7e       	andi	r18, 0xE7	; 231
    2714:	e9 81       	ldd	r30, Y+1	; 0x01
    2716:	fa 81       	ldd	r31, Y+2	; 0x02
    2718:	80 81       	ld	r24, Z
    271a:	88 2f       	mov	r24, r24
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	88 0f       	add	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	82 2b       	or	r24, r18
    272c:	8c 93       	st	X, r24
	/* Set the required clock */
	TCCR1B =(TCCR1B & 0xF8) | (Str->scale);
    272e:	ae e4       	ldi	r26, 0x4E	; 78
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	ee e4       	ldi	r30, 0x4E	; 78
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	98 2f       	mov	r25, r24
    273a:	98 7f       	andi	r25, 0xF8	; 248
    273c:	e9 81       	ldd	r30, Y+1	; 0x01
    273e:	fa 81       	ldd	r31, Y+2	; 0x02
    2740:	81 81       	ldd	r24, Z+1	; 0x01
    2742:	89 2b       	or	r24, r25
    2744:	8c 93       	st	X, r24
	/* init timer 1 start count from zero */
	TCNT1=0;
    2746:	ec e4       	ldi	r30, 0x4C	; 76
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	11 82       	std	Z+1, r1	; 0x01
    274c:	10 82       	st	Z, r1


	if(Str->mode == CTC){
    274e:	e9 81       	ldd	r30, Y+1	; 0x01
    2750:	fa 81       	ldd	r31, Y+2	; 0x02
    2752:	80 81       	ld	r24, Z
    2754:	81 30       	cpi	r24, 0x01	; 1
    2756:	89 f4       	brne	.+34     	; 0x277a <TIMER_init+0x88>
		OCR1A=(Str->ctc);
    2758:	aa e4       	ldi	r26, 0x4A	; 74
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	e9 81       	ldd	r30, Y+1	; 0x01
    275e:	fa 81       	ldd	r31, Y+2	; 0x02
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	11 96       	adiw	r26, 0x01	; 1
    2766:	9c 93       	st	X, r25
    2768:	8e 93       	st	-X, r24
		TIMSK |=(1<<OCIE1A); /* enable device bit interrupt */
    276a:	a9 e5       	ldi	r26, 0x59	; 89
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e9 e5       	ldi	r30, 0x59	; 89
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	80 61       	ori	r24, 0x10	; 16
    2776:	8c 93       	st	X, r24
    2778:	0c c0       	rjmp	.+24     	; 0x2792 <TIMER_init+0xa0>
	}else if(Str->mode == OVF){
    277a:	e9 81       	ldd	r30, Y+1	; 0x01
    277c:	fa 81       	ldd	r31, Y+2	; 0x02
    277e:	80 81       	ld	r24, Z
    2780:	88 23       	and	r24, r24
    2782:	39 f4       	brne	.+14     	; 0x2792 <TIMER_init+0xa0>
		TIMSK |=(1<<TOIE1);
    2784:	a9 e5       	ldi	r26, 0x59	; 89
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e9 e5       	ldi	r30, 0x59	; 89
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	84 60       	ori	r24, 0x04	; 4
    2790:	8c 93       	st	X, r24
	}
	SREG |=(1<<7);
    2792:	af e5       	ldi	r26, 0x5F	; 95
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	ef e5       	ldi	r30, 0x5F	; 95
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	80 68       	ori	r24, 0x80	; 128
    279e:	8c 93       	st	X, r24

}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <TIMER_Deinit>:

/*
 * Description: Function to Clear Timer1 Register & active Sleep mode For Timer1.
 */
void TIMER_Deinit(void){
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    27b2:	ef e4       	ldi	r30, 0x4F	; 79
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	10 82       	st	Z, r1
	TCCR1B=0;
    27b8:	ee e4       	ldi	r30, 0x4E	; 78
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	10 82       	st	Z, r1
	TCNT1=0;
    27be:	ec e4       	ldi	r30, 0x4C	; 76
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	11 82       	std	Z+1, r1	; 0x01
    27c4:	10 82       	st	Z, r1
	TIMSK=0;
    27c6:	e9 e5       	ldi	r30, 0x59	; 89
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	10 82       	st	Z, r1
	OCR1A=0;
    27cc:	ea e4       	ldi	r30, 0x4A	; 74
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	11 82       	std	Z+1, r1	; 0x01
    27d2:	10 82       	st	Z, r1
}
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <TIMER_SETCTC>:

/*
 * Description: Function to set Compare Value to Timer1 .
 */
void TIMER_SETCTC(uint16 *Ptr_CTC){
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <TIMER_SETCTC+0x6>
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=0;
    27e8:	ec e4       	ldi	r30, 0x4C	; 76
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	11 82       	std	Z+1, r1	; 0x01
    27ee:	10 82       	st	Z, r1
	OCR1A=*Ptr_CTC;
    27f0:	aa e4       	ldi	r26, 0x4A	; 74
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	e9 81       	ldd	r30, Y+1	; 0x01
    27f6:	fa 81       	ldd	r31, Y+2	; 0x02
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	11 96       	adiw	r26, 0x01	; 1
    27fe:	9c 93       	st	X, r25
    2800:	8e 93       	st	-X, r24
}
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <TIMER_setCallBack>:

/*
 * Description: Function to set Which Function Called by Timer1  in ISR Vector.
 */
void TIMER_setCallBack(void (*Fun)(void)){
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	00 d0       	rcall	.+0      	; 0x2812 <TIMER_setCallBack+0x6>
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	9a 83       	std	Y+2, r25	; 0x02
    2818:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr=Fun;
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	9a 81       	ldd	r25, Y+2	; 0x02
    281e:	90 93 82 00 	sts	0x0082, r25
    2822:	80 93 81 00 	sts	0x0081, r24
}
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    2830:	1f 92       	push	r1
    2832:	0f 92       	push	r0
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	0f 92       	push	r0
    2838:	11 24       	eor	r1, r1
    283a:	2f 93       	push	r18
    283c:	3f 93       	push	r19
    283e:	4f 93       	push	r20
    2840:	5f 93       	push	r21
    2842:	6f 93       	push	r22
    2844:	7f 93       	push	r23
    2846:	8f 93       	push	r24
    2848:	9f 93       	push	r25
    284a:	af 93       	push	r26
    284c:	bf 93       	push	r27
    284e:	ef 93       	push	r30
    2850:	ff 93       	push	r31
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL)
    285a:	80 91 81 00 	lds	r24, 0x0081
    285e:	90 91 82 00 	lds	r25, 0x0082
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	29 f0       	breq	.+10     	; 0x2870 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_CallBackPtr)();
    2866:	e0 91 81 00 	lds	r30, 0x0081
    286a:	f0 91 82 00 	lds	r31, 0x0082
    286e:	09 95       	icall
	}

}
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	ff 91       	pop	r31
    2876:	ef 91       	pop	r30
    2878:	bf 91       	pop	r27
    287a:	af 91       	pop	r26
    287c:	9f 91       	pop	r25
    287e:	8f 91       	pop	r24
    2880:	7f 91       	pop	r23
    2882:	6f 91       	pop	r22
    2884:	5f 91       	pop	r21
    2886:	4f 91       	pop	r20
    2888:	3f 91       	pop	r19
    288a:	2f 91       	pop	r18
    288c:	0f 90       	pop	r0
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	0f 90       	pop	r0
    2892:	1f 90       	pop	r1
    2894:	18 95       	reti

00002896 <__vector_8>:

ISR(TIMER1_OVF_vect){
    2896:	1f 92       	push	r1
    2898:	0f 92       	push	r0
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	0f 92       	push	r0
    289e:	11 24       	eor	r1, r1
    28a0:	2f 93       	push	r18
    28a2:	3f 93       	push	r19
    28a4:	4f 93       	push	r20
    28a6:	5f 93       	push	r21
    28a8:	6f 93       	push	r22
    28aa:	7f 93       	push	r23
    28ac:	8f 93       	push	r24
    28ae:	9f 93       	push	r25
    28b0:	af 93       	push	r26
    28b2:	bf 93       	push	r27
    28b4:	ef 93       	push	r30
    28b6:	ff 93       	push	r31
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL)
    28c0:	80 91 81 00 	lds	r24, 0x0081
    28c4:	90 91 82 00 	lds	r25, 0x0082
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	29 f0       	breq	.+10     	; 0x28d6 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_CallBackPtr)();
    28cc:	e0 91 81 00 	lds	r30, 0x0081
    28d0:	f0 91 82 00 	lds	r31, 0x0082
    28d4:	09 95       	icall
	}
}
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	ff 91       	pop	r31
    28dc:	ef 91       	pop	r30
    28de:	bf 91       	pop	r27
    28e0:	af 91       	pop	r26
    28e2:	9f 91       	pop	r25
    28e4:	8f 91       	pop	r24
    28e6:	7f 91       	pop	r23
    28e8:	6f 91       	pop	r22
    28ea:	5f 91       	pop	r21
    28ec:	4f 91       	pop	r20
    28ee:	3f 91       	pop	r19
    28f0:	2f 91       	pop	r18
    28f2:	0f 90       	pop	r0
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	0f 90       	pop	r0
    28f8:	1f 90       	pop	r1
    28fa:	18 95       	reti

000028fc <UART_init>:
 *******************************************************************************/

/*
 * Function responsible to initialize UART module .
 */
void UART_init(void) {
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA, U2X);
    2904:	ab e2       	ldi	r26, 0x2B	; 43
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	eb e2       	ldi	r30, 0x2B	; 43
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	82 60       	ori	r24, 0x02	; 2
    2910:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	SET_BIT(UCSRB, TXEN);
    2912:	aa e2       	ldi	r26, 0x2A	; 42
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	ea e2       	ldi	r30, 0x2A	; 42
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	88 60       	ori	r24, 0x08	; 8
    291e:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);
    2920:	aa e2       	ldi	r26, 0x2A	; 42
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	ea e2       	ldi	r30, 0x2A	; 42
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	80 61       	ori	r24, 0x10	; 16
    292c:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRC, URSEL);
    292e:	a0 e4       	ldi	r26, 0x40	; 64
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e0 e4       	ldi	r30, 0x40	; 64
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	80 68       	ori	r24, 0x80	; 128
    293a:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
    293c:	a0 e4       	ldi	r26, 0x40	; 64
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e0 e4       	ldi	r30, 0x40	; 64
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	84 60       	ori	r24, 0x04	; 4
    2948:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
    294a:	a0 e4       	ldi	r26, 0x40	; 64
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e0 e4       	ldi	r30, 0x40	; 64
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	82 60       	ori	r24, 0x02	; 2
    2956:	8c 93       	st	X, r24

	/*	select type of parity */
	SET_BIT(UCSRC, UPM1);
    2958:	a0 e4       	ldi	r26, 0x40	; 64
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e0 e4       	ldi	r30, 0x40	; 64
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	80 62       	ori	r24, 0x20	; 32
    2964:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = 12 >> 8;
    2966:	e0 e4       	ldi	r30, 0x40	; 64
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	10 82       	st	Z, r1
	UBRRL = 12;
    296c:	e9 e2       	ldi	r30, 0x29	; 41
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	8c e0       	ldi	r24, 0x0C	; 12
    2972:	80 83       	st	Z, r24

}
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <UART_sendByte>:

/*
 * Function responsible to send byte to another device .
 */
void UART_sendByte(const uint8 data) {
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	0f 92       	push	r0
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
    2984:	89 83       	std	Y+1, r24	; 0x01

	/* UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2986:	eb e2       	ldi	r30, 0x2B	; 43
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	88 2f       	mov	r24, r24
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	80 72       	andi	r24, 0x20	; 32
    2992:	90 70       	andi	r25, 0x00	; 0
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	b9 f3       	breq	.-18     	; 0x2986 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    2998:	ec e2       	ldi	r30, 0x2C	; 44
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	80 83       	st	Z, r24
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/

}
    29a0:	0f 90       	pop	r0
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <UART_recieveByte>:

/*
 * Function responsible to receive byte from another device .
 */
uint8 UART_recieveByte(void) {
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62

	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    29b0:	eb e2       	ldi	r30, 0x2B	; 43
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	88 23       	and	r24, r24
    29b8:	dc f7       	brge	.-10     	; 0x29b0 <UART_recieveByte+0x8>
	/* Read the received data from the RX buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    29ba:	ec e2       	ldi	r30, 0x2C	; 44
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
}
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <UART_sendString>:

/*
 * Function responsible to send String from another device .
 */
void UART_sendString(const uint8 *Str) {
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	00 d0       	rcall	.+0      	; 0x29cc <UART_sendString+0x6>
    29cc:	0f 92       	push	r0
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	9b 83       	std	Y+3, r25	; 0x03
    29d4:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    29d6:	19 82       	std	Y+1, r1	; 0x01
    29d8:	0e c0       	rjmp	.+28     	; 0x29f6 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);		/* send string character by character until null character */
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	9b 81       	ldd	r25, Y+3	; 0x03
    29e4:	fc 01       	movw	r30, r24
    29e6:	e2 0f       	add	r30, r18
    29e8:	f3 1f       	adc	r31, r19
    29ea:	80 81       	ld	r24, Z
    29ec:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
		i++;
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	8f 5f       	subi	r24, 0xFF	; 255
    29f4:	89 83       	std	Y+1, r24	; 0x01
 * Function responsible to send String from another device .
 */
void UART_sendString(const uint8 *Str) {

	uint8 i = 0;
	while(Str[i] != '\0')
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	28 2f       	mov	r18, r24
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2a00:	fc 01       	movw	r30, r24
    2a02:	e2 0f       	add	r30, r18
    2a04:	f3 1f       	adc	r31, r19
    2a06:	80 81       	ld	r24, Z
    2a08:	88 23       	and	r24, r24
    2a0a:	39 f7       	brne	.-50     	; 0x29da <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);		/* send string character by character until null character */
		i++;
	}
	UART_sendByte('#');
    2a0c:	83 e2       	ldi	r24, 0x23	; 35
    2a0e:	0e 94 bd 14 	call	0x297a	; 0x297a <UART_sendByte>
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/

}
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <UART_receiveString>:

/*
 * Function responsible to receive String from another device .
 */
void UART_receiveString(uint8 *Str) {
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <UART_receiveString+0xa>
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <UART_receiveString+0xc>
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	9b 83       	std	Y+3, r25	; 0x03
    2a30:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2a32:	19 82       	std	Y+1, r1	; 0x01
	do{

		Str[i] = UART_recieveByte();
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	28 2f       	mov	r18, r24
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3e:	8c 01       	movw	r16, r24
    2a40:	02 0f       	add	r16, r18
    2a42:	13 1f       	adc	r17, r19
    2a44:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <UART_recieveByte>
    2a48:	f8 01       	movw	r30, r16
    2a4a:	80 83       	st	Z, r24

	}while(Str[i++] != '#');		/* still receive character until '#' symbol  send */
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	28 2f       	mov	r18, r24
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	9b 81       	ldd	r25, Y+3	; 0x03
    2a56:	fc 01       	movw	r30, r24
    2a58:	e2 0f       	add	r30, r18
    2a5a:	f3 1f       	adc	r31, r19
    2a5c:	80 81       	ld	r24, Z
    2a5e:	1c 82       	std	Y+4, r1	; 0x04
    2a60:	83 32       	cpi	r24, 0x23	; 35
    2a62:	11 f0       	breq	.+4      	; 0x2a68 <UART_receiveString+0x4a>
    2a64:	f1 e0       	ldi	r31, 0x01	; 1
    2a66:	fc 83       	std	Y+4, r31	; 0x04
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	8f 5f       	subi	r24, 0xFF	; 255
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a70:	88 23       	and	r24, r24
    2a72:	01 f7       	brne	.-64     	; 0x2a34 <UART_receiveString+0x16>

	Str[--i] = '\0';			/* add null character at the end of string */
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	81 50       	subi	r24, 0x01	; 1
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	9b 81       	ldd	r25, Y+3	; 0x03
    2a84:	fc 01       	movw	r30, r24
    2a86:	e2 0f       	add	r30, r18
    2a88:	f3 1f       	adc	r31, r19
    2a8a:	10 82       	st	Z, r1

}
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	1f 91       	pop	r17
    2a9a:	0f 91       	pop	r16
    2a9c:	08 95       	ret

00002a9e <__prologue_saves__>:
    2a9e:	2f 92       	push	r2
    2aa0:	3f 92       	push	r3
    2aa2:	4f 92       	push	r4
    2aa4:	5f 92       	push	r5
    2aa6:	6f 92       	push	r6
    2aa8:	7f 92       	push	r7
    2aaa:	8f 92       	push	r8
    2aac:	9f 92       	push	r9
    2aae:	af 92       	push	r10
    2ab0:	bf 92       	push	r11
    2ab2:	cf 92       	push	r12
    2ab4:	df 92       	push	r13
    2ab6:	ef 92       	push	r14
    2ab8:	ff 92       	push	r15
    2aba:	0f 93       	push	r16
    2abc:	1f 93       	push	r17
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	ca 1b       	sub	r28, r26
    2ac8:	db 0b       	sbc	r29, r27
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	09 94       	ijmp

00002ad6 <__epilogue_restores__>:
    2ad6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ad8:	39 88       	ldd	r3, Y+17	; 0x11
    2ada:	48 88       	ldd	r4, Y+16	; 0x10
    2adc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ade:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ae0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ae2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ae4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ae6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ae8:	b9 84       	ldd	r11, Y+9	; 0x09
    2aea:	c8 84       	ldd	r12, Y+8	; 0x08
    2aec:	df 80       	ldd	r13, Y+7	; 0x07
    2aee:	ee 80       	ldd	r14, Y+6	; 0x06
    2af0:	fd 80       	ldd	r15, Y+5	; 0x05
    2af2:	0c 81       	ldd	r16, Y+4	; 0x04
    2af4:	1b 81       	ldd	r17, Y+3	; 0x03
    2af6:	aa 81       	ldd	r26, Y+2	; 0x02
    2af8:	b9 81       	ldd	r27, Y+1	; 0x01
    2afa:	ce 0f       	add	r28, r30
    2afc:	d1 1d       	adc	r29, r1
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	ed 01       	movw	r28, r26
    2b0a:	08 95       	ret

00002b0c <_exit>:
    2b0c:	f8 94       	cli

00002b0e <__stop_program>:
    2b0e:	ff cf       	rjmp	.-2      	; 0x2b0e <__stop_program>
