
bluetooth1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00002cc4  00002d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800196  00800196  00002e8e  2**0
                  ALLOC
  3 .stab         00002280  00000000  00000000  00002e90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f00  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000061b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000063a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  000087ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00009b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000acfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000aebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000b1af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 13 	call	0x2622	; 0x2622 <main>
      8a:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e8       	ldi	r22, 0x83	; 131
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e5 57       	subi	r30, 0x75	; 117
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <KeyPad_getPressedKey>:


/*
 * Function responsible for getting the pressed keypad key
 */
uint8 KeyPad_getPressedKey(void) {
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <KeyPad_getPressedKey+0x6>
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62

	uint8 col,row;
		while(1)
		{
			for(col=0;col<N_col;col++) /* loop for columns */
     e02:	1a 82       	std	Y+2, r1	; 0x02
     e04:	4c c0       	rjmp	.+152    	; 0xe9e <KeyPad_getPressedKey+0xa6>
			{
				/*
				 * each time only one of the column pins will be output and
				 * the rest will be input pins include the row pins
				 */
				KEYPAD_DIR = (0b00010000<<col);
     e06:	ea e3       	ldi	r30, 0x3A	; 58
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	80 e1       	ldi	r24, 0x10	; 16
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <KeyPad_getPressedKey+0x22>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	2a 95       	dec	r18
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <KeyPad_getPressedKey+0x1e>
     e1e:	80 83       	st	Z, r24

				/*
				 * clear the output pin column in this trace and enable the internal
				 * pull up resistors for the rows pins
				 */
				KEYPAD_PORT = (~(0b00010000<<col));
     e20:	eb e3       	ldi	r30, 0x3B	; 59
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	80 e1       	ldi	r24, 0x10	; 16
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <KeyPad_getPressedKey+0x3e>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <KeyPad_getPressedKey+0x3a>
     e3a:	80 95       	com	r24
     e3c:	80 83       	st	Z, r24
				for(row=0;row<N_row;row++) /* loop for rows */
     e3e:	19 82       	std	Y+1, r1	; 0x01
     e40:	28 c0       	rjmp	.+80     	; 0xe92 <KeyPad_getPressedKey+0x9a>
				{
					if(BIT_IS_CLEAR(KEYPAD_PIN,row)) /* if the switch is press in this row */
     e42:	e9 e3       	ldi	r30, 0x39	; 57
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a9 01       	movw	r20, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <KeyPad_getPressedKey+0x62>
     e56:	55 95       	asr	r21
     e58:	47 95       	ror	r20
     e5a:	8a 95       	dec	r24
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <KeyPad_getPressedKey+0x5e>
     e5e:	ca 01       	movw	r24, r20
     e60:	81 70       	andi	r24, 0x01	; 1
     e62:	90 70       	andi	r25, 0x00	; 0
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	91 f4       	brne	.+36     	; 0xe8c <KeyPad_getPressedKey+0x94>
					{
						#if (N_col == 3)
							return KeyPad_4x3_ReturnASCII((row*N_col)+col+1);
						#elif (N_col == 4)
							return KeyPad_4x4_ReturnASCII((row*N_col)+col+1);
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	98 2f       	mov	r25, r24
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	89 0f       	add	r24, r25
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	0e 94 54 07 	call	0xea8	; 0xea8 <KeyPad_4x4_ReturnASCII>
						#endif
					}
				}
			}
		}
	}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret
				/*
				 * clear the output pin column in this trace and enable the internal
				 * pull up resistors for the rows pins
				 */
				KEYPAD_PORT = (~(0b00010000<<col));
				for(row=0;row<N_row;row++) /* loop for rows */
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	a8 f2       	brcs	.-86     	; 0xe42 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void) {

	uint8 col,row;
		while(1)
		{
			for(col=0;col<N_col;col++) /* loop for columns */
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	8a 83       	std	Y+2, r24	; 0x02
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	84 30       	cpi	r24, 0x04	; 4
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <KeyPad_getPressedKey+0xae>
     ea4:	b0 cf       	rjmp	.-160    	; 0xe06 <KeyPad_getPressedKey+0xe>
     ea6:	ad cf       	rjmp	.-166    	; 0xe02 <KeyPad_getPressedKey+0xa>

00000ea8 <KeyPad_4x4_ReturnASCII>:
		break;
	}
	return 0;
}
#elif(N_col ==4)
static uint8 KeyPad_4x4_ReturnASCII(uint8 num) {
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <KeyPad_4x4_ReturnASCII+0x6>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <KeyPad_4x4_ReturnASCII+0x8>
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	89 83       	std	Y+1, r24	; 0x01
	switch (num) {
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	3c 83       	std	Y+4, r19	; 0x04
     ebe:	2b 83       	std	Y+3, r18	; 0x03
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	88 30       	cpi	r24, 0x08	; 8
     ec6:	91 05       	cpc	r25, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <KeyPad_4x4_ReturnASCII+0x24>
     eca:	70 c0       	rjmp	.+224    	; 0xfac <KeyPad_4x4_ReturnASCII+0x104>
     ecc:	2b 81       	ldd	r18, Y+3	; 0x03
     ece:	3c 81       	ldd	r19, Y+4	; 0x04
     ed0:	29 30       	cpi	r18, 0x09	; 9
     ed2:	31 05       	cpc	r19, r1
     ed4:	5c f5       	brge	.+86     	; 0xf2c <KeyPad_4x4_ReturnASCII+0x84>
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	9c 81       	ldd	r25, Y+4	; 0x04
     eda:	84 30       	cpi	r24, 0x04	; 4
     edc:	91 05       	cpc	r25, r1
     ede:	09 f4       	brne	.+2      	; 0xee2 <KeyPad_4x4_ReturnASCII+0x3a>
     ee0:	59 c0       	rjmp	.+178    	; 0xf94 <KeyPad_4x4_ReturnASCII+0xec>
     ee2:	2b 81       	ldd	r18, Y+3	; 0x03
     ee4:	3c 81       	ldd	r19, Y+4	; 0x04
     ee6:	25 30       	cpi	r18, 0x05	; 5
     ee8:	31 05       	cpc	r19, r1
     eea:	9c f4       	brge	.+38     	; 0xf12 <KeyPad_4x4_ReturnASCII+0x6a>
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	91 05       	cpc	r25, r1
     ef4:	09 f4       	brne	.+2      	; 0xef8 <KeyPad_4x4_ReturnASCII+0x50>
     ef6:	48 c0       	rjmp	.+144    	; 0xf88 <KeyPad_4x4_ReturnASCII+0xe0>
     ef8:	2b 81       	ldd	r18, Y+3	; 0x03
     efa:	3c 81       	ldd	r19, Y+4	; 0x04
     efc:	23 30       	cpi	r18, 0x03	; 3
     efe:	31 05       	cpc	r19, r1
     f00:	0c f0       	brlt	.+2      	; 0xf04 <KeyPad_4x4_ReturnASCII+0x5c>
     f02:	45 c0       	rjmp	.+138    	; 0xf8e <KeyPad_4x4_ReturnASCII+0xe6>
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f4       	brne	.+2      	; 0xf10 <KeyPad_4x4_ReturnASCII+0x68>
     f0e:	39 c0       	rjmp	.+114    	; 0xf82 <KeyPad_4x4_ReturnASCII+0xda>
     f10:	68 c0       	rjmp	.+208    	; 0xfe2 <KeyPad_4x4_ReturnASCII+0x13a>
     f12:	2b 81       	ldd	r18, Y+3	; 0x03
     f14:	3c 81       	ldd	r19, Y+4	; 0x04
     f16:	26 30       	cpi	r18, 0x06	; 6
     f18:	31 05       	cpc	r19, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <KeyPad_4x4_ReturnASCII+0x76>
     f1c:	41 c0       	rjmp	.+130    	; 0xfa0 <KeyPad_4x4_ReturnASCII+0xf8>
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	87 30       	cpi	r24, 0x07	; 7
     f24:	91 05       	cpc	r25, r1
     f26:	0c f0       	brlt	.+2      	; 0xf2a <KeyPad_4x4_ReturnASCII+0x82>
     f28:	3e c0       	rjmp	.+124    	; 0xfa6 <KeyPad_4x4_ReturnASCII+0xfe>
     f2a:	37 c0       	rjmp	.+110    	; 0xf9a <KeyPad_4x4_ReturnASCII+0xf2>
     f2c:	2b 81       	ldd	r18, Y+3	; 0x03
     f2e:	3c 81       	ldd	r19, Y+4	; 0x04
     f30:	2c 30       	cpi	r18, 0x0C	; 12
     f32:	31 05       	cpc	r19, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <KeyPad_4x4_ReturnASCII+0x90>
     f36:	46 c0       	rjmp	.+140    	; 0xfc4 <KeyPad_4x4_ReturnASCII+0x11c>
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	9c 81       	ldd	r25, Y+4	; 0x04
     f3c:	8d 30       	cpi	r24, 0x0D	; 13
     f3e:	91 05       	cpc	r25, r1
     f40:	5c f4       	brge	.+22     	; 0xf58 <KeyPad_4x4_ReturnASCII+0xb0>
     f42:	2b 81       	ldd	r18, Y+3	; 0x03
     f44:	3c 81       	ldd	r19, Y+4	; 0x04
     f46:	2a 30       	cpi	r18, 0x0A	; 10
     f48:	31 05       	cpc	r19, r1
     f4a:	b1 f1       	breq	.+108    	; 0xfb8 <KeyPad_4x4_ReturnASCII+0x110>
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	8b 30       	cpi	r24, 0x0B	; 11
     f52:	91 05       	cpc	r25, r1
     f54:	a4 f5       	brge	.+104    	; 0xfbe <KeyPad_4x4_ReturnASCII+0x116>
     f56:	2d c0       	rjmp	.+90     	; 0xfb2 <KeyPad_4x4_ReturnASCII+0x10a>
     f58:	2b 81       	ldd	r18, Y+3	; 0x03
     f5a:	3c 81       	ldd	r19, Y+4	; 0x04
     f5c:	2e 30       	cpi	r18, 0x0E	; 14
     f5e:	31 05       	cpc	r19, r1
     f60:	b9 f1       	breq	.+110    	; 0xfd0 <KeyPad_4x4_ReturnASCII+0x128>
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	8e 30       	cpi	r24, 0x0E	; 14
     f68:	91 05       	cpc	r25, r1
     f6a:	7c f1       	brlt	.+94     	; 0xfca <KeyPad_4x4_ReturnASCII+0x122>
     f6c:	2b 81       	ldd	r18, Y+3	; 0x03
     f6e:	3c 81       	ldd	r19, Y+4	; 0x04
     f70:	2f 30       	cpi	r18, 0x0F	; 15
     f72:	31 05       	cpc	r19, r1
     f74:	81 f1       	breq	.+96     	; 0xfd6 <KeyPad_4x4_ReturnASCII+0x12e>
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	80 31       	cpi	r24, 0x10	; 16
     f7c:	91 05       	cpc	r25, r1
     f7e:	71 f1       	breq	.+92     	; 0xfdc <KeyPad_4x4_ReturnASCII+0x134>
     f80:	30 c0       	rjmp	.+96     	; 0xfe2 <KeyPad_4x4_ReturnASCII+0x13a>
	case 1:		return '7';
     f82:	97 e3       	ldi	r25, 0x37	; 55
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	2e c0       	rjmp	.+92     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 2:		return '8';
     f88:	28 e3       	ldi	r18, 0x38	; 56
     f8a:	2a 83       	std	Y+2, r18	; 0x02
     f8c:	2b c0       	rjmp	.+86     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 3:		return '9';
     f8e:	39 e3       	ldi	r19, 0x39	; 57
     f90:	3a 83       	std	Y+2, r19	; 0x02
     f92:	28 c0       	rjmp	.+80     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 4:		return '/';
     f94:	8f e2       	ldi	r24, 0x2F	; 47
     f96:	8a 83       	std	Y+2, r24	; 0x02
     f98:	25 c0       	rjmp	.+74     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 5:		return '4';
     f9a:	94 e3       	ldi	r25, 0x34	; 52
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	22 c0       	rjmp	.+68     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 6:		return '5';
     fa0:	25 e3       	ldi	r18, 0x35	; 53
     fa2:	2a 83       	std	Y+2, r18	; 0x02
     fa4:	1f c0       	rjmp	.+62     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 7:		return '6';
     fa6:	36 e3       	ldi	r19, 0x36	; 54
     fa8:	3a 83       	std	Y+2, r19	; 0x02
     faa:	1c c0       	rjmp	.+56     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 8:		return '*';
     fac:	8a e2       	ldi	r24, 0x2A	; 42
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	19 c0       	rjmp	.+50     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 9:		return '1';
     fb2:	91 e3       	ldi	r25, 0x31	; 49
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	16 c0       	rjmp	.+44     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 10:	return '2';
     fb8:	22 e3       	ldi	r18, 0x32	; 50
     fba:	2a 83       	std	Y+2, r18	; 0x02
     fbc:	13 c0       	rjmp	.+38     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 11:	return '3';
     fbe:	33 e3       	ldi	r19, 0x33	; 51
     fc0:	3a 83       	std	Y+2, r19	; 0x02
     fc2:	10 c0       	rjmp	.+32     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 12:	return '-';
     fc4:	8d e2       	ldi	r24, 0x2D	; 45
     fc6:	8a 83       	std	Y+2, r24	; 0x02
     fc8:	0d c0       	rjmp	.+26     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 13:	return 8;
     fca:	98 e0       	ldi	r25, 0x08	; 8
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	0a c0       	rjmp	.+20     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 14:	return '0';
     fd0:	20 e3       	ldi	r18, 0x30	; 48
     fd2:	2a 83       	std	Y+2, r18	; 0x02
     fd4:	07 c0       	rjmp	.+14     	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 15:	return '#';
     fd6:	33 e2       	ldi	r19, 0x23	; 35
     fd8:	3a 83       	std	Y+2, r19	; 0x02
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
		break;
	case 16:	return '+';
     fdc:	8b e2       	ldi	r24, 0x2B	; 43
     fde:	8a 83       	std	Y+2, r24	; 0x02
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <KeyPad_4x4_ReturnASCII+0x13c>
			break;
	default:	return '\0';
     fe2:	1a 82       	std	Y+2, r1	; 0x02
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
	return 0;
}
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <LCD_sendCommand>:
 *******************************************************************************/

/*
 * Function responsible for Send Order to LCD
 */
void LCD_sendCommand(uint8 command) {
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	c5 55       	subi	r28, 0x55	; 85
    1002:	d0 40       	sbci	r29, 0x00	; 0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	fe 01       	movw	r30, r28
    1010:	eb 5a       	subi	r30, 0xAB	; 171
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 83       	st	Z, r24
	RS = CLEAR; /* tell LCD that data which will send now is command */
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8f 7e       	andi	r24, 0xEF	; 239
    101e:	80 83       	st	Z, r24
	RW = CLEAR; /* select write Mode on LCD */
    1020:	e2 e3       	ldi	r30, 0x32	; 50
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8f 7d       	andi	r24, 0xDF	; 223
    1028:	80 83       	st	Z, r24
    102a:	fe 01       	movw	r30, r28
    102c:	ef 5a       	subi	r30, 0xAF	; 175
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a0 e8       	ldi	r26, 0x80	; 128
    1036:	bf e3       	ldi	r27, 0x3F	; 63
    1038:	80 83       	st	Z, r24
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	a2 83       	std	Z+2, r26	; 0x02
    103e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1040:	8e 01       	movw	r16, r28
    1042:	03 5b       	subi	r16, 0xB3	; 179
    1044:	1f 4f       	sbci	r17, 0xFF	; 255
    1046:	fe 01       	movw	r30, r28
    1048:	ef 5a       	subi	r30, 0xAF	; 175
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	60 81       	ld	r22, Z
    104e:	71 81       	ldd	r23, Z+1	; 0x01
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	4a ef       	ldi	r20, 0xFA	; 250
    105a:	54 e4       	ldi	r21, 0x44	; 68
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	f8 01       	movw	r30, r16
    1066:	80 83       	st	Z, r24
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	a2 83       	std	Z+2, r26	; 0x02
    106c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    106e:	fe 01       	movw	r30, r28
    1070:	e3 5b       	subi	r30, 0xB3	; 179
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	60 81       	ld	r22, Z
    1076:	71 81       	ldd	r23, Z+1	; 0x01
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e8       	ldi	r20, 0x80	; 128
    1082:	5f e3       	ldi	r21, 0x3F	; 63
    1084:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1088:	88 23       	and	r24, r24
    108a:	44 f4       	brge	.+16     	; 0x109c <LCD_sendCommand+0xa8>
		__ticks = 1;
    108c:	fe 01       	movw	r30, r28
    108e:	e5 5b       	subi	r30, 0xB5	; 181
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
    109a:	64 c0       	rjmp	.+200    	; 0x1164 <LCD_sendCommand+0x170>
	else if (__tmp > 65535)
    109c:	fe 01       	movw	r30, r28
    109e:	e3 5b       	subi	r30, 0xB3	; 179
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	60 81       	ld	r22, Z
    10a4:	71 81       	ldd	r23, Z+1	; 0x01
    10a6:	82 81       	ldd	r24, Z+2	; 0x02
    10a8:	93 81       	ldd	r25, Z+3	; 0x03
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	3f ef       	ldi	r19, 0xFF	; 255
    10ae:	4f e7       	ldi	r20, 0x7F	; 127
    10b0:	57 e4       	ldi	r21, 0x47	; 71
    10b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10b6:	18 16       	cp	r1, r24
    10b8:	0c f0       	brlt	.+2      	; 0x10bc <LCD_sendCommand+0xc8>
    10ba:	43 c0       	rjmp	.+134    	; 0x1142 <LCD_sendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10bc:	fe 01       	movw	r30, r28
    10be:	ef 5a       	subi	r30, 0xAF	; 175
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	60 81       	ld	r22, Z
    10c4:	71 81       	ldd	r23, Z+1	; 0x01
    10c6:	82 81       	ldd	r24, Z+2	; 0x02
    10c8:	93 81       	ldd	r25, Z+3	; 0x03
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e2       	ldi	r20, 0x20	; 32
    10d0:	51 e4       	ldi	r21, 0x41	; 65
    10d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	8e 01       	movw	r16, r28
    10dc:	05 5b       	subi	r16, 0xB5	; 181
    10de:	1f 4f       	sbci	r17, 0xFF	; 255
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	f8 01       	movw	r30, r16
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	80 83       	st	Z, r24
    10f2:	1f c0       	rjmp	.+62     	; 0x1132 <LCD_sendCommand+0x13e>
    10f4:	fe 01       	movw	r30, r28
    10f6:	e7 5b       	subi	r30, 0xB7	; 183
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	88 ec       	ldi	r24, 0xC8	; 200
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1102:	fe 01       	movw	r30, r28
    1104:	e7 5b       	subi	r30, 0xB7	; 183
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	80 81       	ld	r24, Z
    110a:	91 81       	ldd	r25, Z+1	; 0x01
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <LCD_sendCommand+0x118>
    1110:	fe 01       	movw	r30, r28
    1112:	e7 5b       	subi	r30, 0xB7	; 183
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111a:	de 01       	movw	r26, r28
    111c:	a5 5b       	subi	r26, 0xB5	; 181
    111e:	bf 4f       	sbci	r27, 0xFF	; 255
    1120:	fe 01       	movw	r30, r28
    1122:	e5 5b       	subi	r30, 0xB5	; 181
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	80 81       	ld	r24, Z
    1128:	91 81       	ldd	r25, Z+1	; 0x01
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	11 96       	adiw	r26, 0x01	; 1
    112e:	9c 93       	st	X, r25
    1130:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1132:	fe 01       	movw	r30, r28
    1134:	e5 5b       	subi	r30, 0xB5	; 181
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	80 81       	ld	r24, Z
    113a:	91 81       	ldd	r25, Z+1	; 0x01
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	d1 f6       	brne	.-76     	; 0x10f4 <LCD_sendCommand+0x100>
    1140:	27 c0       	rjmp	.+78     	; 0x1190 <LCD_sendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1142:	8e 01       	movw	r16, r28
    1144:	05 5b       	subi	r16, 0xB5	; 181
    1146:	1f 4f       	sbci	r17, 0xFF	; 255
    1148:	fe 01       	movw	r30, r28
    114a:	e3 5b       	subi	r30, 0xB3	; 179
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	60 81       	ld	r22, Z
    1150:	71 81       	ldd	r23, Z+1	; 0x01
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	f8 01       	movw	r30, r16
    1160:	91 83       	std	Z+1, r25	; 0x01
    1162:	80 83       	st	Z, r24
    1164:	de 01       	movw	r26, r28
    1166:	a9 5b       	subi	r26, 0xB9	; 185
    1168:	bf 4f       	sbci	r27, 0xFF	; 255
    116a:	fe 01       	movw	r30, r28
    116c:	e5 5b       	subi	r30, 0xB5	; 181
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	80 81       	ld	r24, Z
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	8d 93       	st	X+, r24
    1176:	9c 93       	st	X, r25
    1178:	fe 01       	movw	r30, r28
    117a:	e9 5b       	subi	r30, 0xB9	; 185
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <LCD_sendCommand+0x18e>
    1186:	fe 01       	movw	r30, r28
    1188:	e9 5b       	subi	r30, 0xB9	; 185
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	91 83       	std	Z+1, r25	; 0x01
    118e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
    1190:	e2 e3       	ldi	r30, 0x32	; 50
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	80 64       	ori	r24, 0x40	; 64
    1198:	80 83       	st	Z, r24
    119a:	fe 01       	movw	r30, r28
    119c:	ed 5b       	subi	r30, 0xBD	; 189
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	a0 e8       	ldi	r26, 0x80	; 128
    11a6:	bf e3       	ldi	r27, 0x3F	; 63
    11a8:	80 83       	st	Z, r24
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	a2 83       	std	Z+2, r26	; 0x02
    11ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b0:	8e 01       	movw	r16, r28
    11b2:	01 5c       	subi	r16, 0xC1	; 193
    11b4:	1f 4f       	sbci	r17, 0xFF	; 255
    11b6:	fe 01       	movw	r30, r28
    11b8:	ed 5b       	subi	r30, 0xBD	; 189
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	60 81       	ld	r22, Z
    11be:	71 81       	ldd	r23, Z+1	; 0x01
    11c0:	82 81       	ldd	r24, Z+2	; 0x02
    11c2:	93 81       	ldd	r25, Z+3	; 0x03
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	4a ef       	ldi	r20, 0xFA	; 250
    11ca:	54 e4       	ldi	r21, 0x44	; 68
    11cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	f8 01       	movw	r30, r16
    11d6:	80 83       	st	Z, r24
    11d8:	91 83       	std	Z+1, r25	; 0x01
    11da:	a2 83       	std	Z+2, r26	; 0x02
    11dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11de:	fe 01       	movw	r30, r28
    11e0:	ff 96       	adiw	r30, 0x3f	; 63
    11e2:	60 81       	ld	r22, Z
    11e4:	71 81       	ldd	r23, Z+1	; 0x01
    11e6:	82 81       	ldd	r24, Z+2	; 0x02
    11e8:	93 81       	ldd	r25, Z+3	; 0x03
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e8       	ldi	r20, 0x80	; 128
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11f6:	88 23       	and	r24, r24
    11f8:	2c f4       	brge	.+10     	; 0x1204 <LCD_sendCommand+0x210>
		__ticks = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9e af       	std	Y+62, r25	; 0x3e
    1200:	8d af       	std	Y+61, r24	; 0x3d
    1202:	46 c0       	rjmp	.+140    	; 0x1290 <LCD_sendCommand+0x29c>
	else if (__tmp > 65535)
    1204:	fe 01       	movw	r30, r28
    1206:	ff 96       	adiw	r30, 0x3f	; 63
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	3f ef       	ldi	r19, 0xFF	; 255
    1214:	4f e7       	ldi	r20, 0x7F	; 127
    1216:	57 e4       	ldi	r21, 0x47	; 71
    1218:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    121c:	18 16       	cp	r1, r24
    121e:	64 f5       	brge	.+88     	; 0x1278 <LCD_sendCommand+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1220:	fe 01       	movw	r30, r28
    1222:	ed 5b       	subi	r30, 0xBD	; 189
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	60 81       	ld	r22, Z
    1228:	71 81       	ldd	r23, Z+1	; 0x01
    122a:	82 81       	ldd	r24, Z+2	; 0x02
    122c:	93 81       	ldd	r25, Z+3	; 0x03
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e2       	ldi	r20, 0x20	; 32
    1234:	51 e4       	ldi	r21, 0x41	; 65
    1236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	9e af       	std	Y+62, r25	; 0x3e
    124c:	8d af       	std	Y+61, r24	; 0x3d
    124e:	0f c0       	rjmp	.+30     	; 0x126e <LCD_sendCommand+0x27a>
    1250:	88 ec       	ldi	r24, 0xC8	; 200
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	9c af       	std	Y+60, r25	; 0x3c
    1256:	8b af       	std	Y+59, r24	; 0x3b
    1258:	8b ad       	ldd	r24, Y+59	; 0x3b
    125a:	9c ad       	ldd	r25, Y+60	; 0x3c
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <LCD_sendCommand+0x268>
    1260:	9c af       	std	Y+60, r25	; 0x3c
    1262:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1264:	8d ad       	ldd	r24, Y+61	; 0x3d
    1266:	9e ad       	ldd	r25, Y+62	; 0x3e
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	9e af       	std	Y+62, r25	; 0x3e
    126c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1270:	9e ad       	ldd	r25, Y+62	; 0x3e
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	69 f7       	brne	.-38     	; 0x1250 <LCD_sendCommand+0x25c>
    1276:	16 c0       	rjmp	.+44     	; 0x12a4 <LCD_sendCommand+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1278:	fe 01       	movw	r30, r28
    127a:	ff 96       	adiw	r30, 0x3f	; 63
    127c:	60 81       	ld	r22, Z
    127e:	71 81       	ldd	r23, Z+1	; 0x01
    1280:	82 81       	ldd	r24, Z+2	; 0x02
    1282:	93 81       	ldd	r25, Z+3	; 0x03
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9e af       	std	Y+62, r25	; 0x3e
    128e:	8d af       	std	Y+61, r24	; 0x3d
    1290:	8d ad       	ldd	r24, Y+61	; 0x3d
    1292:	9e ad       	ldd	r25, Y+62	; 0x3e
    1294:	9a af       	std	Y+58, r25	; 0x3a
    1296:	89 af       	std	Y+57, r24	; 0x39
    1298:	89 ad       	ldd	r24, Y+57	; 0x39
    129a:	9a ad       	ldd	r25, Y+58	; 0x3a
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <LCD_sendCommand+0x2a8>
    12a0:	9a af       	std	Y+58, r25	; 0x3a
    12a2:	89 af       	std	Y+57, r24	; 0x39
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required command to the data bus D4 --> D7 */
	DATA_OUT=( command  & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT=( (command >>4 ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    12a4:	a5 e3       	ldi	r26, 0x35	; 53
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	fe 01       	movw	r30, r28
    12aa:	eb 5a       	subi	r30, 0xAB	; 171
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	80 81       	ld	r24, Z
    12b0:	82 95       	swap	r24
    12b2:	8f 70       	andi	r24, 0x0F	; 15
    12b4:	98 2f       	mov	r25, r24
    12b6:	e5 e3       	ldi	r30, 0x35	; 53
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	80 7f       	andi	r24, 0xF0	; 240
    12be:	89 2b       	or	r24, r25
    12c0:	8c 93       	st	X, r24
#endif

	E = CLEAR;	 /* close Enable to prevent data share between LCD and AVR */
    12c2:	e2 e3       	ldi	r30, 0x32	; 50
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 7b       	andi	r24, 0xBF	; 191
    12ca:	80 83       	st	Z, r24
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a0 e8       	ldi	r26, 0x80	; 128
    12d2:	bf e3       	ldi	r27, 0x3F	; 63
    12d4:	8d ab       	std	Y+53, r24	; 0x35
    12d6:	9e ab       	std	Y+54, r25	; 0x36
    12d8:	af ab       	std	Y+55, r26	; 0x37
    12da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12dc:	6d a9       	ldd	r22, Y+53	; 0x35
    12de:	7e a9       	ldd	r23, Y+54	; 0x36
    12e0:	8f a9       	ldd	r24, Y+55	; 0x37
    12e2:	98 ad       	ldd	r25, Y+56	; 0x38
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a ef       	ldi	r20, 0xFA	; 250
    12ea:	54 e4       	ldi	r21, 0x44	; 68
    12ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	89 ab       	std	Y+49, r24	; 0x31
    12f6:	9a ab       	std	Y+50, r25	; 0x32
    12f8:	ab ab       	std	Y+51, r26	; 0x33
    12fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12fc:	69 a9       	ldd	r22, Y+49	; 0x31
    12fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1300:	8b a9       	ldd	r24, Y+51	; 0x33
    1302:	9c a9       	ldd	r25, Y+52	; 0x34
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e8       	ldi	r20, 0x80	; 128
    130a:	5f e3       	ldi	r21, 0x3F	; 63
    130c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1310:	88 23       	and	r24, r24
    1312:	2c f4       	brge	.+10     	; 0x131e <LCD_sendCommand+0x32a>
		__ticks = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	98 ab       	std	Y+48, r25	; 0x30
    131a:	8f a7       	std	Y+47, r24	; 0x2f
    131c:	3f c0       	rjmp	.+126    	; 0x139c <LCD_sendCommand+0x3a8>
	else if (__tmp > 65535)
    131e:	69 a9       	ldd	r22, Y+49	; 0x31
    1320:	7a a9       	ldd	r23, Y+50	; 0x32
    1322:	8b a9       	ldd	r24, Y+51	; 0x33
    1324:	9c a9       	ldd	r25, Y+52	; 0x34
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	3f ef       	ldi	r19, 0xFF	; 255
    132a:	4f e7       	ldi	r20, 0x7F	; 127
    132c:	57 e4       	ldi	r21, 0x47	; 71
    132e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1332:	18 16       	cp	r1, r24
    1334:	4c f5       	brge	.+82     	; 0x1388 <LCD_sendCommand+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1336:	6d a9       	ldd	r22, Y+53	; 0x35
    1338:	7e a9       	ldd	r23, Y+54	; 0x36
    133a:	8f a9       	ldd	r24, Y+55	; 0x37
    133c:	98 ad       	ldd	r25, Y+56	; 0x38
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e2       	ldi	r20, 0x20	; 32
    1344:	51 e4       	ldi	r21, 0x41	; 65
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	98 ab       	std	Y+48, r25	; 0x30
    135c:	8f a7       	std	Y+47, r24	; 0x2f
    135e:	0f c0       	rjmp	.+30     	; 0x137e <LCD_sendCommand+0x38a>
    1360:	88 ec       	ldi	r24, 0xC8	; 200
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9e a7       	std	Y+46, r25	; 0x2e
    1366:	8d a7       	std	Y+45, r24	; 0x2d
    1368:	8d a5       	ldd	r24, Y+45	; 0x2d
    136a:	9e a5       	ldd	r25, Y+46	; 0x2e
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <LCD_sendCommand+0x378>
    1370:	9e a7       	std	Y+46, r25	; 0x2e
    1372:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1374:	8f a5       	ldd	r24, Y+47	; 0x2f
    1376:	98 a9       	ldd	r25, Y+48	; 0x30
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	98 ab       	std	Y+48, r25	; 0x30
    137c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1380:	98 a9       	ldd	r25, Y+48	; 0x30
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	69 f7       	brne	.-38     	; 0x1360 <LCD_sendCommand+0x36c>
    1386:	14 c0       	rjmp	.+40     	; 0x13b0 <LCD_sendCommand+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1388:	69 a9       	ldd	r22, Y+49	; 0x31
    138a:	7a a9       	ldd	r23, Y+50	; 0x32
    138c:	8b a9       	ldd	r24, Y+51	; 0x33
    138e:	9c a9       	ldd	r25, Y+52	; 0x34
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	98 ab       	std	Y+48, r25	; 0x30
    139a:	8f a7       	std	Y+47, r24	; 0x2f
    139c:	8f a5       	ldd	r24, Y+47	; 0x2f
    139e:	98 a9       	ldd	r25, Y+48	; 0x30
    13a0:	9c a7       	std	Y+44, r25	; 0x2c
    13a2:	8b a7       	std	Y+43, r24	; 0x2b
    13a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    13a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <LCD_sendCommand+0x3b4>
    13ac:	9c a7       	std	Y+44, r25	; 0x2c
    13ae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	E = SET;		/* open Enable again to send last 4 bits of command */
    13b0:	e2 e3       	ldi	r30, 0x32	; 50
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	80 64       	ori	r24, 0x40	; 64
    13b8:	80 83       	st	Z, r24
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a0 e8       	ldi	r26, 0x80	; 128
    13c0:	bf e3       	ldi	r27, 0x3F	; 63
    13c2:	8f a3       	std	Y+39, r24	; 0x27
    13c4:	98 a7       	std	Y+40, r25	; 0x28
    13c6:	a9 a7       	std	Y+41, r26	; 0x29
    13c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ca:	6f a1       	ldd	r22, Y+39	; 0x27
    13cc:	78 a5       	ldd	r23, Y+40	; 0x28
    13ce:	89 a5       	ldd	r24, Y+41	; 0x29
    13d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	4a ef       	ldi	r20, 0xFA	; 250
    13d8:	54 e4       	ldi	r21, 0x44	; 68
    13da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	8b a3       	std	Y+35, r24	; 0x23
    13e4:	9c a3       	std	Y+36, r25	; 0x24
    13e6:	ad a3       	std	Y+37, r26	; 0x25
    13e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13ea:	6b a1       	ldd	r22, Y+35	; 0x23
    13ec:	7c a1       	ldd	r23, Y+36	; 0x24
    13ee:	8d a1       	ldd	r24, Y+37	; 0x25
    13f0:	9e a1       	ldd	r25, Y+38	; 0x26
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13fe:	88 23       	and	r24, r24
    1400:	2c f4       	brge	.+10     	; 0x140c <LCD_sendCommand+0x418>
		__ticks = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9a a3       	std	Y+34, r25	; 0x22
    1408:	89 a3       	std	Y+33, r24	; 0x21
    140a:	3f c0       	rjmp	.+126    	; 0x148a <LCD_sendCommand+0x496>
	else if (__tmp > 65535)
    140c:	6b a1       	ldd	r22, Y+35	; 0x23
    140e:	7c a1       	ldd	r23, Y+36	; 0x24
    1410:	8d a1       	ldd	r24, Y+37	; 0x25
    1412:	9e a1       	ldd	r25, Y+38	; 0x26
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	3f ef       	ldi	r19, 0xFF	; 255
    1418:	4f e7       	ldi	r20, 0x7F	; 127
    141a:	57 e4       	ldi	r21, 0x47	; 71
    141c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1420:	18 16       	cp	r1, r24
    1422:	4c f5       	brge	.+82     	; 0x1476 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1424:	6f a1       	ldd	r22, Y+39	; 0x27
    1426:	78 a5       	ldd	r23, Y+40	; 0x28
    1428:	89 a5       	ldd	r24, Y+41	; 0x29
    142a:	9a a5       	ldd	r25, Y+42	; 0x2a
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e2       	ldi	r20, 0x20	; 32
    1432:	51 e4       	ldi	r21, 0x41	; 65
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	bc 01       	movw	r22, r24
    143e:	cd 01       	movw	r24, r26
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	9a a3       	std	Y+34, r25	; 0x22
    144a:	89 a3       	std	Y+33, r24	; 0x21
    144c:	0f c0       	rjmp	.+30     	; 0x146c <LCD_sendCommand+0x478>
    144e:	88 ec       	ldi	r24, 0xC8	; 200
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	98 a3       	std	Y+32, r25	; 0x20
    1454:	8f 8f       	std	Y+31, r24	; 0x1f
    1456:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1458:	98 a1       	ldd	r25, Y+32	; 0x20
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <LCD_sendCommand+0x466>
    145e:	98 a3       	std	Y+32, r25	; 0x20
    1460:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1462:	89 a1       	ldd	r24, Y+33	; 0x21
    1464:	9a a1       	ldd	r25, Y+34	; 0x22
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	9a a3       	std	Y+34, r25	; 0x22
    146a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146c:	89 a1       	ldd	r24, Y+33	; 0x21
    146e:	9a a1       	ldd	r25, Y+34	; 0x22
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	69 f7       	brne	.-38     	; 0x144e <LCD_sendCommand+0x45a>
    1474:	14 c0       	rjmp	.+40     	; 0x149e <LCD_sendCommand+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1476:	6b a1       	ldd	r22, Y+35	; 0x23
    1478:	7c a1       	ldd	r23, Y+36	; 0x24
    147a:	8d a1       	ldd	r24, Y+37	; 0x25
    147c:	9e a1       	ldd	r25, Y+38	; 0x26
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9a a3       	std	Y+34, r25	; 0x22
    1488:	89 a3       	std	Y+33, r24	; 0x21
    148a:	89 a1       	ldd	r24, Y+33	; 0x21
    148c:	9a a1       	ldd	r25, Y+34	; 0x22
    148e:	9e 8f       	std	Y+30, r25	; 0x1e
    1490:	8d 8f       	std	Y+29, r24	; 0x1d
    1492:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1494:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <LCD_sendCommand+0x4a2>
    149a:	9e 8f       	std	Y+30, r25	; 0x1e
    149c:	8d 8f       	std	Y+29, r24	; 0x1d
	/* send the Least 4 bits of the required command to the data bus D0 --> D3 */
	DATA_OUT=( (command << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif

#ifdef LOWER_MODE_BITS
	DATA_OUT=( (command ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    149e:	a5 e3       	ldi	r26, 0x35	; 53
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	fe 01       	movw	r30, r28
    14a4:	eb 5a       	subi	r30, 0xAB	; 171
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	80 81       	ld	r24, Z
    14aa:	98 2f       	mov	r25, r24
    14ac:	9f 70       	andi	r25, 0x0F	; 15
    14ae:	e5 e3       	ldi	r30, 0x35	; 53
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	80 7f       	andi	r24, 0xF0	; 240
    14b6:	89 2b       	or	r24, r25
    14b8:	8c 93       	st	X, r24
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 e8       	ldi	r26, 0x80	; 128
    14c0:	bf e3       	ldi	r27, 0x3F	; 63
    14c2:	89 8f       	std	Y+25, r24	; 0x19
    14c4:	9a 8f       	std	Y+26, r25	; 0x1a
    14c6:	ab 8f       	std	Y+27, r26	; 0x1b
    14c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ca:	69 8d       	ldd	r22, Y+25	; 0x19
    14cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4a ef       	ldi	r20, 0xFA	; 250
    14d8:	54 e4       	ldi	r21, 0x44	; 68
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8d 8b       	std	Y+21, r24	; 0x15
    14e4:	9e 8b       	std	Y+22, r25	; 0x16
    14e6:	af 8b       	std	Y+23, r26	; 0x17
    14e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14ea:	6d 89       	ldd	r22, Y+21	; 0x15
    14ec:	7e 89       	ldd	r23, Y+22	; 0x16
    14ee:	8f 89       	ldd	r24, Y+23	; 0x17
    14f0:	98 8d       	ldd	r25, Y+24	; 0x18
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14fe:	88 23       	and	r24, r24
    1500:	2c f4       	brge	.+10     	; 0x150c <LCD_sendCommand+0x518>
		__ticks = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9c 8b       	std	Y+20, r25	; 0x14
    1508:	8b 8b       	std	Y+19, r24	; 0x13
    150a:	3f c0       	rjmp	.+126    	; 0x158a <LCD_sendCommand+0x596>
	else if (__tmp > 65535)
    150c:	6d 89       	ldd	r22, Y+21	; 0x15
    150e:	7e 89       	ldd	r23, Y+22	; 0x16
    1510:	8f 89       	ldd	r24, Y+23	; 0x17
    1512:	98 8d       	ldd	r25, Y+24	; 0x18
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	4c f5       	brge	.+82     	; 0x1576 <LCD_sendCommand+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1524:	69 8d       	ldd	r22, Y+25	; 0x19
    1526:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1528:	8b 8d       	ldd	r24, Y+27	; 0x1b
    152a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9c 8b       	std	Y+20, r25	; 0x14
    154a:	8b 8b       	std	Y+19, r24	; 0x13
    154c:	0f c0       	rjmp	.+30     	; 0x156c <LCD_sendCommand+0x578>
    154e:	88 ec       	ldi	r24, 0xC8	; 200
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9a 8b       	std	Y+18, r25	; 0x12
    1554:	89 8b       	std	Y+17, r24	; 0x11
    1556:	89 89       	ldd	r24, Y+17	; 0x11
    1558:	9a 89       	ldd	r25, Y+18	; 0x12
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <LCD_sendCommand+0x566>
    155e:	9a 8b       	std	Y+18, r25	; 0x12
    1560:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	8b 89       	ldd	r24, Y+19	; 0x13
    1564:	9c 89       	ldd	r25, Y+20	; 0x14
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	9c 8b       	std	Y+20, r25	; 0x14
    156a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156c:	8b 89       	ldd	r24, Y+19	; 0x13
    156e:	9c 89       	ldd	r25, Y+20	; 0x14
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	69 f7       	brne	.-38     	; 0x154e <LCD_sendCommand+0x55a>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <LCD_sendCommand+0x5aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1576:	6d 89       	ldd	r22, Y+21	; 0x15
    1578:	7e 89       	ldd	r23, Y+22	; 0x16
    157a:	8f 89       	ldd	r24, Y+23	; 0x17
    157c:	98 8d       	ldd	r25, Y+24	; 0x18
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9c 8b       	std	Y+20, r25	; 0x14
    1588:	8b 8b       	std	Y+19, r24	; 0x13
    158a:	8b 89       	ldd	r24, Y+19	; 0x13
    158c:	9c 89       	ldd	r25, Y+20	; 0x14
    158e:	98 8b       	std	Y+16, r25	; 0x10
    1590:	8f 87       	std	Y+15, r24	; 0x0f
    1592:	8f 85       	ldd	r24, Y+15	; 0x0f
    1594:	98 89       	ldd	r25, Y+16	; 0x10
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <LCD_sendCommand+0x5a2>
    159a:	98 8b       	std	Y+16, r25	; 0x10
    159c:	8f 87       	std	Y+15, r24	; 0x0f
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    159e:	e2 e3       	ldi	r30, 0x32	; 50
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8f 7b       	andi	r24, 0xBF	; 191
    15a6:	80 83       	st	Z, r24
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	a0 e8       	ldi	r26, 0x80	; 128
    15ae:	bf e3       	ldi	r27, 0x3F	; 63
    15b0:	8b 87       	std	Y+11, r24	; 0x0b
    15b2:	9c 87       	std	Y+12, r25	; 0x0c
    15b4:	ad 87       	std	Y+13, r26	; 0x0d
    15b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    15bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15be:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	4a ef       	ldi	r20, 0xFA	; 250
    15c6:	54 e4       	ldi	r21, 0x44	; 68
    15c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	8f 83       	std	Y+7, r24	; 0x07
    15d2:	98 87       	std	Y+8, r25	; 0x08
    15d4:	a9 87       	std	Y+9, r26	; 0x09
    15d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15d8:	6f 81       	ldd	r22, Y+7	; 0x07
    15da:	78 85       	ldd	r23, Y+8	; 0x08
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e8       	ldi	r20, 0x80	; 128
    15e6:	5f e3       	ldi	r21, 0x3F	; 63
    15e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15ec:	88 23       	and	r24, r24
    15ee:	2c f4       	brge	.+10     	; 0x15fa <LCD_sendCommand+0x606>
		__ticks = 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	3f c0       	rjmp	.+126    	; 0x1678 <LCD_sendCommand+0x684>
	else if (__tmp > 65535)
    15fa:	6f 81       	ldd	r22, Y+7	; 0x07
    15fc:	78 85       	ldd	r23, Y+8	; 0x08
    15fe:	89 85       	ldd	r24, Y+9	; 0x09
    1600:	9a 85       	ldd	r25, Y+10	; 0x0a
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	3f ef       	ldi	r19, 0xFF	; 255
    1606:	4f e7       	ldi	r20, 0x7F	; 127
    1608:	57 e4       	ldi	r21, 0x47	; 71
    160a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    160e:	18 16       	cp	r1, r24
    1610:	4c f5       	brge	.+82     	; 0x1664 <LCD_sendCommand+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1612:	6b 85       	ldd	r22, Y+11	; 0x0b
    1614:	7c 85       	ldd	r23, Y+12	; 0x0c
    1616:	8d 85       	ldd	r24, Y+13	; 0x0d
    1618:	9e 85       	ldd	r25, Y+14	; 0x0e
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e2       	ldi	r20, 0x20	; 32
    1620:	51 e4       	ldi	r21, 0x41	; 65
    1622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
    163a:	0f c0       	rjmp	.+30     	; 0x165a <LCD_sendCommand+0x666>
    163c:	88 ec       	ldi	r24, 0xC8	; 200
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	9c 83       	std	Y+4, r25	; 0x04
    1642:	8b 83       	std	Y+3, r24	; 0x03
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <LCD_sendCommand+0x654>
    164c:	9c 83       	std	Y+4, r25	; 0x04
    164e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	9e 81       	ldd	r25, Y+6	; 0x06
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	69 f7       	brne	.-38     	; 0x163c <LCD_sendCommand+0x648>
    1662:	14 c0       	rjmp	.+40     	; 0x168c <LCD_sendCommand+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1664:	6f 81       	ldd	r22, Y+7	; 0x07
    1666:	78 85       	ldd	r23, Y+8	; 0x08
    1668:	89 85       	ldd	r24, Y+9	; 0x09
    166a:	9a 85       	ldd	r25, Y+10	; 0x0a
    166c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9e 83       	std	Y+6, r25	; 0x06
    1676:	8d 83       	std	Y+5, r24	; 0x05
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9e 81       	ldd	r25, Y+6	; 0x06
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <LCD_sendCommand+0x690>
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
}
    168c:	cb 5a       	subi	r28, 0xAB	; 171
    168e:	df 4f       	sbci	r29, 0xFF	; 255
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	08 95       	ret

000016a4 <LCD_displayCharacter>:

/*
 * Function responsible for Display only One character on LCD
 */
void LCD_displayCharacter(uint8 data) {
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	c5 55       	subi	r28, 0x55	; 85
    16b2:	d0 40       	sbci	r29, 0x00	; 0
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	fe 01       	movw	r30, r28
    16c0:	eb 5a       	subi	r30, 0xAB	; 171
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	80 83       	st	Z, r24
	RS = SET; /* tell LCD that data which will send now is DATA */
    16c6:	e2 e3       	ldi	r30, 0x32	; 50
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	80 61       	ori	r24, 0x10	; 16
    16ce:	80 83       	st	Z, r24
	RW = CLEAR; /* select write Mode on LCD */
    16d0:	e2 e3       	ldi	r30, 0x32	; 50
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	8f 7d       	andi	r24, 0xDF	; 223
    16d8:	80 83       	st	Z, r24
    16da:	fe 01       	movw	r30, r28
    16dc:	ef 5a       	subi	r30, 0xAF	; 175
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a0 e8       	ldi	r26, 0x80	; 128
    16e6:	bf e3       	ldi	r27, 0x3F	; 63
    16e8:	80 83       	st	Z, r24
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	a2 83       	std	Z+2, r26	; 0x02
    16ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f0:	8e 01       	movw	r16, r28
    16f2:	03 5b       	subi	r16, 0xB3	; 179
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	fe 01       	movw	r30, r28
    16f8:	ef 5a       	subi	r30, 0xAF	; 175
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	60 81       	ld	r22, Z
    16fe:	71 81       	ldd	r23, Z+1	; 0x01
    1700:	82 81       	ldd	r24, Z+2	; 0x02
    1702:	93 81       	ldd	r25, Z+3	; 0x03
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	4a ef       	ldi	r20, 0xFA	; 250
    170a:	54 e4       	ldi	r21, 0x44	; 68
    170c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	f8 01       	movw	r30, r16
    1716:	80 83       	st	Z, r24
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	a2 83       	std	Z+2, r26	; 0x02
    171c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    171e:	fe 01       	movw	r30, r28
    1720:	e3 5b       	subi	r30, 0xB3	; 179
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e8       	ldi	r20, 0x80	; 128
    1732:	5f e3       	ldi	r21, 0x3F	; 63
    1734:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1738:	88 23       	and	r24, r24
    173a:	44 f4       	brge	.+16     	; 0x174c <LCD_displayCharacter+0xa8>
		__ticks = 1;
    173c:	fe 01       	movw	r30, r28
    173e:	e5 5b       	subi	r30, 0xB5	; 181
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	80 83       	st	Z, r24
    174a:	64 c0       	rjmp	.+200    	; 0x1814 <LCD_displayCharacter+0x170>
	else if (__tmp > 65535)
    174c:	fe 01       	movw	r30, r28
    174e:	e3 5b       	subi	r30, 0xB3	; 179
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	60 81       	ld	r22, Z
    1754:	71 81       	ldd	r23, Z+1	; 0x01
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	3f ef       	ldi	r19, 0xFF	; 255
    175e:	4f e7       	ldi	r20, 0x7F	; 127
    1760:	57 e4       	ldi	r21, 0x47	; 71
    1762:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1766:	18 16       	cp	r1, r24
    1768:	0c f0       	brlt	.+2      	; 0x176c <LCD_displayCharacter+0xc8>
    176a:	43 c0       	rjmp	.+134    	; 0x17f2 <LCD_displayCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	fe 01       	movw	r30, r28
    176e:	ef 5a       	subi	r30, 0xAF	; 175
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	51 e4       	ldi	r21, 0x41	; 65
    1782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	8e 01       	movw	r16, r28
    178c:	05 5b       	subi	r16, 0xB5	; 181
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	f8 01       	movw	r30, r16
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	80 83       	st	Z, r24
    17a2:	1f c0       	rjmp	.+62     	; 0x17e2 <LCD_displayCharacter+0x13e>
    17a4:	fe 01       	movw	r30, r28
    17a6:	e7 5b       	subi	r30, 0xB7	; 183
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	88 ec       	ldi	r24, 0xC8	; 200
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	80 83       	st	Z, r24
    17b2:	fe 01       	movw	r30, r28
    17b4:	e7 5b       	subi	r30, 0xB7	; 183
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	80 81       	ld	r24, Z
    17ba:	91 81       	ldd	r25, Z+1	; 0x01
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <LCD_displayCharacter+0x118>
    17c0:	fe 01       	movw	r30, r28
    17c2:	e7 5b       	subi	r30, 0xB7	; 183
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ca:	de 01       	movw	r26, r28
    17cc:	a5 5b       	subi	r26, 0xB5	; 181
    17ce:	bf 4f       	sbci	r27, 0xFF	; 255
    17d0:	fe 01       	movw	r30, r28
    17d2:	e5 5b       	subi	r30, 0xB5	; 181
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	91 81       	ldd	r25, Z+1	; 0x01
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	11 96       	adiw	r26, 0x01	; 1
    17de:	9c 93       	st	X, r25
    17e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e2:	fe 01       	movw	r30, r28
    17e4:	e5 5b       	subi	r30, 0xB5	; 181
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	d1 f6       	brne	.-76     	; 0x17a4 <LCD_displayCharacter+0x100>
    17f0:	27 c0       	rjmp	.+78     	; 0x1840 <LCD_displayCharacter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f2:	8e 01       	movw	r16, r28
    17f4:	05 5b       	subi	r16, 0xB5	; 181
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	fe 01       	movw	r30, r28
    17fa:	e3 5b       	subi	r30, 0xB3	; 179
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	60 81       	ld	r22, Z
    1800:	71 81       	ldd	r23, Z+1	; 0x01
    1802:	82 81       	ldd	r24, Z+2	; 0x02
    1804:	93 81       	ldd	r25, Z+3	; 0x03
    1806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	f8 01       	movw	r30, r16
    1810:	91 83       	std	Z+1, r25	; 0x01
    1812:	80 83       	st	Z, r24
    1814:	de 01       	movw	r26, r28
    1816:	a9 5b       	subi	r26, 0xB9	; 185
    1818:	bf 4f       	sbci	r27, 0xFF	; 255
    181a:	fe 01       	movw	r30, r28
    181c:	e5 5b       	subi	r30, 0xB5	; 181
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	8d 93       	st	X+, r24
    1826:	9c 93       	st	X, r25
    1828:	fe 01       	movw	r30, r28
    182a:	e9 5b       	subi	r30, 0xB9	; 185
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 81       	ld	r24, Z
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <LCD_displayCharacter+0x18e>
    1836:	fe 01       	movw	r30, r28
    1838:	e9 5b       	subi	r30, 0xB9	; 185
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
    1840:	e2 e3       	ldi	r30, 0x32	; 50
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	80 64       	ori	r24, 0x40	; 64
    1848:	80 83       	st	Z, r24
    184a:	fe 01       	movw	r30, r28
    184c:	ed 5b       	subi	r30, 0xBD	; 189
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	a0 e8       	ldi	r26, 0x80	; 128
    1856:	bf e3       	ldi	r27, 0x3F	; 63
    1858:	80 83       	st	Z, r24
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	a2 83       	std	Z+2, r26	; 0x02
    185e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1860:	8e 01       	movw	r16, r28
    1862:	01 5c       	subi	r16, 0xC1	; 193
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	fe 01       	movw	r30, r28
    1868:	ed 5b       	subi	r30, 0xBD	; 189
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	60 81       	ld	r22, Z
    186e:	71 81       	ldd	r23, Z+1	; 0x01
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	4a ef       	ldi	r20, 0xFA	; 250
    187a:	54 e4       	ldi	r21, 0x44	; 68
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	f8 01       	movw	r30, r16
    1886:	80 83       	st	Z, r24
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	a2 83       	std	Z+2, r26	; 0x02
    188c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    188e:	fe 01       	movw	r30, r28
    1890:	ff 96       	adiw	r30, 0x3f	; 63
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e8       	ldi	r20, 0x80	; 128
    18a0:	5f e3       	ldi	r21, 0x3F	; 63
    18a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18a6:	88 23       	and	r24, r24
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <LCD_displayCharacter+0x210>
		__ticks = 1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9e af       	std	Y+62, r25	; 0x3e
    18b0:	8d af       	std	Y+61, r24	; 0x3d
    18b2:	46 c0       	rjmp	.+140    	; 0x1940 <LCD_displayCharacter+0x29c>
	else if (__tmp > 65535)
    18b4:	fe 01       	movw	r30, r28
    18b6:	ff 96       	adiw	r30, 0x3f	; 63
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	3f ef       	ldi	r19, 0xFF	; 255
    18c4:	4f e7       	ldi	r20, 0x7F	; 127
    18c6:	57 e4       	ldi	r21, 0x47	; 71
    18c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18cc:	18 16       	cp	r1, r24
    18ce:	64 f5       	brge	.+88     	; 0x1928 <LCD_displayCharacter+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d0:	fe 01       	movw	r30, r28
    18d2:	ed 5b       	subi	r30, 0xBD	; 189
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	60 81       	ld	r22, Z
    18d8:	71 81       	ldd	r23, Z+1	; 0x01
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e2       	ldi	r20, 0x20	; 32
    18e4:	51 e4       	ldi	r21, 0x41	; 65
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9e af       	std	Y+62, r25	; 0x3e
    18fc:	8d af       	std	Y+61, r24	; 0x3d
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <LCD_displayCharacter+0x27a>
    1900:	88 ec       	ldi	r24, 0xC8	; 200
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9c af       	std	Y+60, r25	; 0x3c
    1906:	8b af       	std	Y+59, r24	; 0x3b
    1908:	8b ad       	ldd	r24, Y+59	; 0x3b
    190a:	9c ad       	ldd	r25, Y+60	; 0x3c
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <LCD_displayCharacter+0x268>
    1910:	9c af       	std	Y+60, r25	; 0x3c
    1912:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1914:	8d ad       	ldd	r24, Y+61	; 0x3d
    1916:	9e ad       	ldd	r25, Y+62	; 0x3e
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	9e af       	std	Y+62, r25	; 0x3e
    191c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1920:	9e ad       	ldd	r25, Y+62	; 0x3e
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	69 f7       	brne	.-38     	; 0x1900 <LCD_displayCharacter+0x25c>
    1926:	16 c0       	rjmp	.+44     	; 0x1954 <LCD_displayCharacter+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1928:	fe 01       	movw	r30, r28
    192a:	ff 96       	adiw	r30, 0x3f	; 63
    192c:	60 81       	ld	r22, Z
    192e:	71 81       	ldd	r23, Z+1	; 0x01
    1930:	82 81       	ldd	r24, Z+2	; 0x02
    1932:	93 81       	ldd	r25, Z+3	; 0x03
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9e af       	std	Y+62, r25	; 0x3e
    193e:	8d af       	std	Y+61, r24	; 0x3d
    1940:	8d ad       	ldd	r24, Y+61	; 0x3d
    1942:	9e ad       	ldd	r25, Y+62	; 0x3e
    1944:	9a af       	std	Y+58, r25	; 0x3a
    1946:	89 af       	std	Y+57, r24	; 0x39
    1948:	89 ad       	ldd	r24, Y+57	; 0x39
    194a:	9a ad       	ldd	r25, Y+58	; 0x3a
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <LCD_displayCharacter+0x2a8>
    1950:	9a af       	std	Y+58, r25	; 0x3a
    1952:	89 af       	std	Y+57, r24	; 0x39
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( data  & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT=( (data >>4 ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    1954:	a5 e3       	ldi	r26, 0x35	; 53
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	fe 01       	movw	r30, r28
    195a:	eb 5a       	subi	r30, 0xAB	; 171
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 81       	ld	r24, Z
    1960:	82 95       	swap	r24
    1962:	8f 70       	andi	r24, 0x0F	; 15
    1964:	98 2f       	mov	r25, r24
    1966:	e5 e3       	ldi	r30, 0x35	; 53
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	80 7f       	andi	r24, 0xF0	; 240
    196e:	89 2b       	or	r24, r25
    1970:	8c 93       	st	X, r24
#endif

	E = CLEAR;	 /* close Enable to prevent data share between LCD and AVR */
    1972:	e2 e3       	ldi	r30, 0x32	; 50
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8f 7b       	andi	r24, 0xBF	; 191
    197a:	80 83       	st	Z, r24
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e8       	ldi	r26, 0x80	; 128
    1982:	bf e3       	ldi	r27, 0x3F	; 63
    1984:	8d ab       	std	Y+53, r24	; 0x35
    1986:	9e ab       	std	Y+54, r25	; 0x36
    1988:	af ab       	std	Y+55, r26	; 0x37
    198a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6d a9       	ldd	r22, Y+53	; 0x35
    198e:	7e a9       	ldd	r23, Y+54	; 0x36
    1990:	8f a9       	ldd	r24, Y+55	; 0x37
    1992:	98 ad       	ldd	r25, Y+56	; 0x38
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a ef       	ldi	r20, 0xFA	; 250
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	89 ab       	std	Y+49, r24	; 0x31
    19a6:	9a ab       	std	Y+50, r25	; 0x32
    19a8:	ab ab       	std	Y+51, r26	; 0x33
    19aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <LCD_displayCharacter+0x32a>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	98 ab       	std	Y+48, r25	; 0x30
    19ca:	8f a7       	std	Y+47, r24	; 0x2f
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <LCD_displayCharacter+0x3a8>
	else if (__tmp > 65535)
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <LCD_displayCharacter+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6d a9       	ldd	r22, Y+53	; 0x35
    19e8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ea:	8f a9       	ldd	r24, Y+55	; 0x37
    19ec:	98 ad       	ldd	r25, Y+56	; 0x38
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <LCD_displayCharacter+0x38a>
    1a10:	88 ec       	ldi	r24, 0xC8	; 200
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	8d a7       	std	Y+45, r24	; 0x2d
    1a18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_displayCharacter+0x378>
    1a20:	9e a7       	std	Y+46, r25	; 0x2e
    1a22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a26:	98 a9       	ldd	r25, Y+48	; 0x30
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	98 ab       	std	Y+48, r25	; 0x30
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a30:	98 a9       	ldd	r25, Y+48	; 0x30
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <LCD_displayCharacter+0x36c>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <LCD_displayCharacter+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	98 ab       	std	Y+48, r25	; 0x30
    1a4a:	8f a7       	std	Y+47, r24	; 0x2f
    1a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a50:	9c a7       	std	Y+44, r25	; 0x2c
    1a52:	8b a7       	std	Y+43, r24	; 0x2b
    1a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_displayCharacter+0x3b4>
    1a5c:	9c a7       	std	Y+44, r25	; 0x2c
    1a5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	E = SET;		/* open Enable again to send last 4 bits of DATA */
    1a60:	e2 e3       	ldi	r30, 0x32	; 50
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 64       	ori	r24, 0x40	; 64
    1a68:	80 83       	st	Z, r24
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	a0 e8       	ldi	r26, 0x80	; 128
    1a70:	bf e3       	ldi	r27, 0x3F	; 63
    1a72:	8f a3       	std	Y+39, r24	; 0x27
    1a74:	98 a7       	std	Y+40, r25	; 0x28
    1a76:	a9 a7       	std	Y+41, r26	; 0x29
    1a78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	4a ef       	ldi	r20, 0xFA	; 250
    1a88:	54 e4       	ldi	r21, 0x44	; 68
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	8b a3       	std	Y+35, r24	; 0x23
    1a94:	9c a3       	std	Y+36, r25	; 0x24
    1a96:	ad a3       	std	Y+37, r26	; 0x25
    1a98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa0:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e8       	ldi	r20, 0x80	; 128
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aae:	88 23       	and	r24, r24
    1ab0:	2c f4       	brge	.+10     	; 0x1abc <LCD_displayCharacter+0x418>
		__ticks = 1;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9a a3       	std	Y+34, r25	; 0x22
    1ab8:	89 a3       	std	Y+33, r24	; 0x21
    1aba:	3f c0       	rjmp	.+126    	; 0x1b3a <LCD_displayCharacter+0x496>
	else if (__tmp > 65535)
    1abc:	6b a1       	ldd	r22, Y+35	; 0x23
    1abe:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	3f ef       	ldi	r19, 0xFF	; 255
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	57 e4       	ldi	r21, 0x47	; 71
    1acc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	4c f5       	brge	.+82     	; 0x1b26 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad8:	89 a5       	ldd	r24, Y+41	; 0x29
    1ada:	9a a5       	ldd	r25, Y+42	; 0x2a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e2       	ldi	r20, 0x20	; 32
    1ae2:	51 e4       	ldi	r21, 0x41	; 65
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9a a3       	std	Y+34, r25	; 0x22
    1afa:	89 a3       	std	Y+33, r24	; 0x21
    1afc:	0f c0       	rjmp	.+30     	; 0x1b1c <LCD_displayCharacter+0x478>
    1afe:	88 ec       	ldi	r24, 0xC8	; 200
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	98 a3       	std	Y+32, r25	; 0x20
    1b04:	8f 8f       	std	Y+31, r24	; 0x1f
    1b06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b08:	98 a1       	ldd	r25, Y+32	; 0x20
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_displayCharacter+0x466>
    1b0e:	98 a3       	std	Y+32, r25	; 0x20
    1b10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b12:	89 a1       	ldd	r24, Y+33	; 0x21
    1b14:	9a a1       	ldd	r25, Y+34	; 0x22
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	9a a3       	std	Y+34, r25	; 0x22
    1b1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	69 f7       	brne	.-38     	; 0x1afe <LCD_displayCharacter+0x45a>
    1b24:	14 c0       	rjmp	.+40     	; 0x1b4e <LCD_displayCharacter+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b26:	6b a1       	ldd	r22, Y+35	; 0x23
    1b28:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	9a a3       	std	Y+34, r25	; 0x22
    1b38:	89 a3       	std	Y+33, r24	; 0x21
    1b3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b40:	8d 8f       	std	Y+29, r24	; 0x1d
    1b42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <LCD_displayCharacter+0x4a2>
    1b4a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b4c:	8d 8f       	std	Y+29, r24	; 0x1d
	/* send the Least 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( (data << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif

#ifdef LOWER_MODE_BITS
	DATA_OUT=( (data ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    1b4e:	a5 e3       	ldi	r26, 0x35	; 53
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	fe 01       	movw	r30, r28
    1b54:	eb 5a       	subi	r30, 0xAB	; 171
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 81       	ld	r24, Z
    1b5a:	98 2f       	mov	r25, r24
    1b5c:	9f 70       	andi	r25, 0x0F	; 15
    1b5e:	e5 e3       	ldi	r30, 0x35	; 53
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	80 7f       	andi	r24, 0xF0	; 240
    1b66:	89 2b       	or	r24, r25
    1b68:	8c 93       	st	X, r24
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	a0 e8       	ldi	r26, 0x80	; 128
    1b70:	bf e3       	ldi	r27, 0x3F	; 63
    1b72:	89 8f       	std	Y+25, r24	; 0x19
    1b74:	9a 8f       	std	Y+26, r25	; 0x1a
    1b76:	ab 8f       	std	Y+27, r26	; 0x1b
    1b78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	4a ef       	ldi	r20, 0xFA	; 250
    1b88:	54 e4       	ldi	r21, 0x44	; 68
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	8d 8b       	std	Y+21, r24	; 0x15
    1b94:	9e 8b       	std	Y+22, r25	; 0x16
    1b96:	af 8b       	std	Y+23, r26	; 0x17
    1b98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e8       	ldi	r20, 0x80	; 128
    1ba8:	5f e3       	ldi	r21, 0x3F	; 63
    1baa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bae:	88 23       	and	r24, r24
    1bb0:	2c f4       	brge	.+10     	; 0x1bbc <LCD_displayCharacter+0x518>
		__ticks = 1;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	9c 8b       	std	Y+20, r25	; 0x14
    1bb8:	8b 8b       	std	Y+19, r24	; 0x13
    1bba:	3f c0       	rjmp	.+126    	; 0x1c3a <LCD_displayCharacter+0x596>
	else if (__tmp > 65535)
    1bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	3f ef       	ldi	r19, 0xFF	; 255
    1bc8:	4f e7       	ldi	r20, 0x7F	; 127
    1bca:	57 e4       	ldi	r21, 0x47	; 71
    1bcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd0:	18 16       	cp	r1, r24
    1bd2:	4c f5       	brge	.+82     	; 0x1c26 <LCD_displayCharacter+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e2       	ldi	r20, 0x20	; 32
    1be2:	51 e4       	ldi	r21, 0x41	; 65
    1be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	bc 01       	movw	r22, r24
    1bee:	cd 01       	movw	r24, r26
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9c 8b       	std	Y+20, r25	; 0x14
    1bfa:	8b 8b       	std	Y+19, r24	; 0x13
    1bfc:	0f c0       	rjmp	.+30     	; 0x1c1c <LCD_displayCharacter+0x578>
    1bfe:	88 ec       	ldi	r24, 0xC8	; 200
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9a 8b       	std	Y+18, r25	; 0x12
    1c04:	89 8b       	std	Y+17, r24	; 0x11
    1c06:	89 89       	ldd	r24, Y+17	; 0x11
    1c08:	9a 89       	ldd	r25, Y+18	; 0x12
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <LCD_displayCharacter+0x566>
    1c0e:	9a 8b       	std	Y+18, r25	; 0x12
    1c10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c12:	8b 89       	ldd	r24, Y+19	; 0x13
    1c14:	9c 89       	ldd	r25, Y+20	; 0x14
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	9c 8b       	std	Y+20, r25	; 0x14
    1c1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	69 f7       	brne	.-38     	; 0x1bfe <LCD_displayCharacter+0x55a>
    1c24:	14 c0       	rjmp	.+40     	; 0x1c4e <LCD_displayCharacter+0x5aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c26:	6d 89       	ldd	r22, Y+21	; 0x15
    1c28:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9c 8b       	std	Y+20, r25	; 0x14
    1c38:	8b 8b       	std	Y+19, r24	; 0x13
    1c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3e:	98 8b       	std	Y+16, r25	; 0x10
    1c40:	8f 87       	std	Y+15, r24	; 0x0f
    1c42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c44:	98 89       	ldd	r25, Y+16	; 0x10
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <LCD_displayCharacter+0x5a2>
    1c4a:	98 8b       	std	Y+16, r25	; 0x10
    1c4c:	8f 87       	std	Y+15, r24	; 0x0f
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    1c4e:	e2 e3       	ldi	r30, 0x32	; 50
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 7b       	andi	r24, 0xBF	; 191
    1c56:	80 83       	st	Z, r24
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	a0 e8       	ldi	r26, 0x80	; 128
    1c5e:	bf e3       	ldi	r27, 0x3F	; 63
    1c60:	8b 87       	std	Y+11, r24	; 0x0b
    1c62:	9c 87       	std	Y+12, r25	; 0x0c
    1c64:	ad 87       	std	Y+13, r26	; 0x0d
    1c66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	4a ef       	ldi	r20, 0xFA	; 250
    1c76:	54 e4       	ldi	r21, 0x44	; 68
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	8f 83       	std	Y+7, r24	; 0x07
    1c82:	98 87       	std	Y+8, r25	; 0x08
    1c84:	a9 87       	std	Y+9, r26	; 0x09
    1c86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c88:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8a:	78 85       	ldd	r23, Y+8	; 0x08
    1c8c:	89 85       	ldd	r24, Y+9	; 0x09
    1c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e8       	ldi	r20, 0x80	; 128
    1c96:	5f e3       	ldi	r21, 0x3F	; 63
    1c98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c9c:	88 23       	and	r24, r24
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <LCD_displayCharacter+0x606>
		__ticks = 1;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
    1ca8:	3f c0       	rjmp	.+126    	; 0x1d28 <LCD_displayCharacter+0x684>
	else if (__tmp > 65535)
    1caa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cac:	78 85       	ldd	r23, Y+8	; 0x08
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	3f ef       	ldi	r19, 0xFF	; 255
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	57 e4       	ldi	r21, 0x47	; 71
    1cba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	4c f5       	brge	.+82     	; 0x1d14 <LCD_displayCharacter+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e2       	ldi	r20, 0x20	; 32
    1cd0:	51 e4       	ldi	r21, 0x41	; 65
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	0f c0       	rjmp	.+30     	; 0x1d0a <LCD_displayCharacter+0x666>
    1cec:	88 ec       	ldi	r24, 0xC8	; 200
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9c 83       	std	Y+4, r25	; 0x04
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <LCD_displayCharacter+0x654>
    1cfc:	9c 83       	std	Y+4, r25	; 0x04
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	69 f7       	brne	.-38     	; 0x1cec <LCD_displayCharacter+0x648>
    1d12:	14 c0       	rjmp	.+40     	; 0x1d3c <LCD_displayCharacter+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_displayCharacter+0x690>
    1d38:	9a 83       	std	Y+2, r25	; 0x02
    1d3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
}
    1d3c:	cb 5a       	subi	r28, 0xAB	; 171
    1d3e:	df 4f       	sbci	r29, 0xFF	; 255
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	08 95       	ret

00001d54 <LCD_displayString>:

/*
 * Function responsible for Display more One character on LCD
 */
void LCD_displayString(const sint8 *Str) {
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <LCD_displayString+0x6>
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	0a c0       	rjmp	.+20     	; 0x1d78 <LCD_displayString+0x24>
	while (*Str != '\0') {
		LCD_displayCharacter(*Str);
    1d64:	e9 81       	ldd	r30, Y+1	; 0x01
    1d66:	fa 81       	ldd	r31, Y+2	; 0x02
    1d68:	80 81       	ld	r24, Z
    1d6a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_displayCharacter>
		Str++;
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	01 96       	adiw	r24, 0x01	; 1
    1d74:	9a 83       	std	Y+2, r25	; 0x02
    1d76:	89 83       	std	Y+1, r24	; 0x01

/*
 * Function responsible for Display more One character on LCD
 */
void LCD_displayString(const sint8 *Str) {
	while (*Str != '\0') {
    1d78:	e9 81       	ldd	r30, Y+1	; 0x01
    1d7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d7c:	80 81       	ld	r24, Z
    1d7e:	88 23       	and	r24, r24
    1d80:	89 f7       	brne	.-30     	; 0x1d64 <LCD_displayString+0x10>
	 }
	 ************************************************************/

	return;

}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <LCD_init>:

/*
 * Function responsible to initialize LCD pins and mode .... etc .
 */
void LCD_init(void) {
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	2e 97       	sbiw	r28, 0x0e	; 14
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
	RS_DIR = 1; /* select RS pin output pin */
    1da0:	e1 e3       	ldi	r30, 0x31	; 49
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	80 61       	ori	r24, 0x10	; 16
    1da8:	80 83       	st	Z, r24
	RW_DIR = 1; /* select RW pin output pin */
    1daa:	e1 e3       	ldi	r30, 0x31	; 49
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	80 62       	ori	r24, 0x20	; 32
    1db2:	80 83       	st	Z, r24
	E_DIR = 1; /* select Enable pin output pin */
    1db4:	e1 e3       	ldi	r30, 0x31	; 49
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	80 64       	ori	r24, 0x40	; 64
    1dbc:	80 83       	st	Z, r24
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

#if (DATA_MODE == 4)
	/* LCD Configuration Mode of number of DATA line = 4 lines */
	LCD_sendCommand(FOUR_BITS_MODE); /* initialize LCD in 4-bit mode */
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    1dc4:	88 e2       	ldi	r24, 0x28	; 40
    1dc6:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_sendCommand>
#ifdef UPPER_MODE_BITS
	DATA_DIR |= 0xF0; /* select highest 4 bits as a output pins */
#endif

#ifdef LOWER_MODE_BITS
	DATA_DIR |= 0x0F;	/* select first 4 bits as a output pins */
    1dca:	a4 e3       	ldi	r26, 0x34	; 52
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e4 e3       	ldi	r30, 0x34	; 52
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8f 60       	ori	r24, 0x0F	; 15
    1dd6:	8c 93       	st	X, r24
#endif
#endif
	LCD_sendCommand(CURSOR_OFF); /* hide cursor from LCD */
    1dd8:	8c e0       	ldi	r24, 0x0C	; 12
    1dda:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_sendCommand>
	LCD_sendCommand(AUTO_INCREMENT); /* hide cursor from LCD */
    1dde:	86 e0       	ldi	r24, 0x06	; 6
    1de0:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_sendCommand>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a0 e0       	ldi	r26, 0x00	; 0
    1df0:	b0 e4       	ldi	r27, 0x40	; 64
    1df2:	8b 87       	std	Y+11, r24	; 0x0b
    1df4:	9c 87       	std	Y+12, r25	; 0x0c
    1df6:	ad 87       	std	Y+13, r26	; 0x0d
    1df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4a ef       	ldi	r20, 0xFA	; 250
    1e08:	54 e4       	ldi	r21, 0x44	; 68
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	8f 83       	std	Y+7, r24	; 0x07
    1e14:	98 87       	std	Y+8, r25	; 0x08
    1e16:	a9 87       	std	Y+9, r26	; 0x09
    1e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1c:	78 85       	ldd	r23, Y+8	; 0x08
    1e1e:	89 85       	ldd	r24, Y+9	; 0x09
    1e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <LCD_init+0xb0>
		__ticks = 1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	3f c0       	rjmp	.+126    	; 0x1eba <LCD_init+0x12e>
	else if (__tmp > 65535)
    1e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3e:	78 85       	ldd	r23, Y+8	; 0x08
    1e40:	89 85       	ldd	r24, Y+9	; 0x09
    1e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	3f ef       	ldi	r19, 0xFF	; 255
    1e48:	4f e7       	ldi	r20, 0x7F	; 127
    1e4a:	57 e4       	ldi	r21, 0x47	; 71
    1e4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e50:	18 16       	cp	r1, r24
    1e52:	4c f5       	brge	.+82     	; 0x1ea6 <LCD_init+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e2       	ldi	r20, 0x20	; 32
    1e62:	51 e4       	ldi	r21, 0x41	; 65
    1e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	0f c0       	rjmp	.+30     	; 0x1e9c <LCD_init+0x110>
    1e7e:	88 ec       	ldi	r24, 0xC8	; 200
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9c 83       	std	Y+4, r25	; 0x04
    1e84:	8b 83       	std	Y+3, r24	; 0x03
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_init+0xfe>
    1e8e:	9c 83       	std	Y+4, r25	; 0x04
    1e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	69 f7       	brne	.-38     	; 0x1e7e <LCD_init+0xf2>
    1ea4:	14 c0       	rjmp	.+40     	; 0x1ece <LCD_init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea8:	78 85       	ldd	r23, Y+8	; 0x08
    1eaa:	89 85       	ldd	r24, Y+9	; 0x09
    1eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9e 83       	std	Y+6, r25	; 0x06
    1eb8:	8d 83       	std	Y+5, r24	; 0x05
    1eba:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_init+0x13a>
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    1ece:	80 e8       	ldi	r24, 0x80	; 128
    1ed0:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_sendCommand>
	return;
}
    1ed4:	2e 96       	adiw	r28, 0x0e	; 14
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <LCD_clearScreen>:

/*
 * Function responsible to send clear command to LCD
 */
void LCD_clearScreen(void) {
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    1ef4:	80 e8       	ldi	r24, 0x80	; 128
    1ef6:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_sendCommand>
	return;
}
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <LCD_displayStringRowColumn>:

/*
 * Function responsible for Display more One character on LCD & select place on screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const sint8 *Str) {
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <LCD_displayStringRowColumn+0x6>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <LCD_displayStringRowColumn+0x8>
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	6a 83       	std	Y+2, r22	; 0x02
    1f10:	5c 83       	std	Y+4, r21	; 0x04
    1f12:	4b 83       	std	Y+3, r20	; 0x03
	/* call LCD_goToRowColumn function to select cursor location */
	LCD_goToRowColumn(row, col);
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	6a 81       	ldd	r22, Y+2	; 0x02
    1f18:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_goToRowColumn>
	/* call LCD_displayString function to display string on LCD */
	LCD_displayString(Str);
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_displayString>
	return;
}
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <LCD_goToRowColumn>:

/*
 * Function responsible to select place on screen
 */
void LCD_goToRowColumn(uint8 row, uint8 col) {
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <LCD_goToRowColumn+0x6>
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <LCD_goToRowColumn+0x8>
    1f3a:	0f 92       	push	r0
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	8a 83       	std	Y+2, r24	; 0x02
    1f42:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch (row) {
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	3d 83       	std	Y+5, r19	; 0x05
    1f4c:	2c 83       	std	Y+4, r18	; 0x04
    1f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f50:	9d 81       	ldd	r25, Y+5	; 0x05
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	91 05       	cpc	r25, r1
    1f56:	c9 f0       	breq	.+50     	; 0x1f8a <LCD_goToRowColumn+0x58>
    1f58:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f5c:	22 30       	cpi	r18, 0x02	; 2
    1f5e:	31 05       	cpc	r19, r1
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <LCD_goToRowColumn+0x3a>
    1f62:	8c 81       	ldd	r24, Y+4	; 0x04
    1f64:	9d 81       	ldd	r25, Y+5	; 0x05
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	61 f0       	breq	.+24     	; 0x1f82 <LCD_goToRowColumn+0x50>
    1f6a:	1a c0       	rjmp	.+52     	; 0x1fa0 <LCD_goToRowColumn+0x6e>
    1f6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f70:	22 30       	cpi	r18, 0x02	; 2
    1f72:	31 05       	cpc	r19, r1
    1f74:	71 f0       	breq	.+28     	; 0x1f92 <LCD_goToRowColumn+0x60>
    1f76:	8c 81       	ldd	r24, Y+4	; 0x04
    1f78:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7a:	83 30       	cpi	r24, 0x03	; 3
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	69 f0       	breq	.+26     	; 0x1f9a <LCD_goToRowColumn+0x68>
    1f80:	0f c0       	rjmp	.+30     	; 0x1fa0 <LCD_goToRowColumn+0x6e>
	case 0:
		address =0x80 | col; /* first address in first line in LCD = 0x00 */
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	80 68       	ori	r24, 0x80	; 128
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	0b c0       	rjmp	.+22     	; 0x1fa0 <LCD_goToRowColumn+0x6e>
		break;
	case 1:
		address = col | 0xC0; /* first address in second line in LCD = 0x40 */
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	80 6c       	ori	r24, 0xC0	; 192
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	07 c0       	rjmp	.+14     	; 0x1fa0 <LCD_goToRowColumn+0x6e>
		break;
	case 2:
		address = col | 0x10; /* first address in 3th line in LCD = 0x10 */
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	80 61       	ori	r24, 0x10	; 16
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	03 c0       	rjmp	.+6      	; 0x1fa0 <LCD_goToRowColumn+0x6e>
		break;
	case 3:
		address = col | 0x50; /* first address in 4th line in LCD = 0x50 */
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	80 65       	ori	r24, 0x50	; 80
    1f9e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0x80+Address */
	LCD_sendCommand(address | CURSOR_HOME_LOCATION);
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	80 68       	ori	r24, 0x80	; 128
    1fa4:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_sendCommand>
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <LCD_intgerToString>:

/*
 * Function that transform number to string and display to LCD
 */
void LCD_intgerToString(sint32 data) {
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	6c 97       	sbiw	r28, 0x1c	; 28
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	69 8f       	std	Y+25, r22	; 0x19
    1fce:	7a 8f       	std	Y+26, r23	; 0x1a
    1fd0:	8b 8f       	std	Y+27, r24	; 0x1b
    1fd2:	9c 8f       	std	Y+28, r25	; 0x1c
	char buff[24]; /* String to hold the ASCII result */
	ltoa(data, buff, 10); /* 10 for decimal */
    1fd4:	89 8d       	ldd	r24, Y+25	; 0x19
    1fd6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fd8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1fda:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	9e 01       	movw	r18, r28
    1fe2:	2f 5f       	subi	r18, 0xFF	; 255
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe6:	a9 01       	movw	r20, r18
    1fe8:	2a e0       	ldi	r18, 0x0A	; 10
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <ltoa>
	LCD_displayString(buff);
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_displayString>

}
    1ff8:	6c 96       	adiw	r28, 0x1c	; 28
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <LCD_floatToString>:

void LCD_floatToString(float32 data) {
    200a:	ef 92       	push	r14
    200c:	ff 92       	push	r15
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	6e 97       	sbiw	r28, 0x1e	; 30
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	69 8f       	std	Y+25, r22	; 0x19
    2028:	7a 8f       	std	Y+26, r23	; 0x1a
    202a:	8b 8f       	std	Y+27, r24	; 0x1b
    202c:	9c 8f       	std	Y+28, r25	; 0x1c
	y=data*1000;
    202e:	69 8d       	ldd	r22, Y+25	; 0x19
    2030:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2032:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2034:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4a e7       	ldi	r20, 0x7A	; 122
    203c:	54 e4       	ldi	r21, 0x44	; 68
    203e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	80 93 99 01 	sts	0x0199, r24
    204a:	90 93 9a 01 	sts	0x019A, r25
    204e:	a0 93 9b 01 	sts	0x019B, r26
    2052:	b0 93 9c 01 	sts	0x019C, r27
	y=y-((sint32)data*1000);
    2056:	e0 90 99 01 	lds	r14, 0x0199
    205a:	f0 90 9a 01 	lds	r15, 0x019A
    205e:	00 91 9b 01 	lds	r16, 0x019B
    2062:	10 91 9c 01 	lds	r17, 0x019C
    2066:	69 8d       	ldd	r22, Y+25	; 0x19
    2068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    206a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    206c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    206e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	28 ee       	ldi	r18, 0xE8	; 232
    2078:	33 e0       	ldi	r19, 0x03	; 3
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__mulsi3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2092:	9b 01       	movw	r18, r22
    2094:	ac 01       	movw	r20, r24
    2096:	c8 01       	movw	r24, r16
    2098:	b7 01       	movw	r22, r14
    209a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	80 93 99 01 	sts	0x0199, r24
    20a6:	90 93 9a 01 	sts	0x019A, r25
    20aa:	a0 93 9b 01 	sts	0x019B, r26
    20ae:	b0 93 9c 01 	sts	0x019C, r27
	char buff[24]; /* String to hold the ASCII result */
	ltoa((sint32)data, buff, 10); /* 10 for decimal */
    20b2:	69 8d       	ldd	r22, Y+25	; 0x19
    20b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ba:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	9e 01       	movw	r18, r28
    20c8:	2f 5f       	subi	r18, 0xFF	; 255
    20ca:	3f 4f       	sbci	r19, 0xFF	; 255
    20cc:	a9 01       	movw	r20, r18
    20ce:	2a e0       	ldi	r18, 0x0A	; 10
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <ltoa>
	LCD_displayString(buff);
    20d6:	ce 01       	movw	r24, r28
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_displayString>
	LCD_displayCharacter('.');
    20de:	8e e2       	ldi	r24, 0x2E	; 46
    20e0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_displayCharacter>
	ltoa((sint32)(abs(y)), buff, 10); /* 10 for decimal */
    20e4:	80 91 99 01 	lds	r24, 0x0199
    20e8:	90 91 9a 01 	lds	r25, 0x019A
    20ec:	a0 91 9b 01 	lds	r26, 0x019B
    20f0:	b0 91 9c 01 	lds	r27, 0x019C
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9e 8f       	std	Y+30, r25	; 0x1e
    2102:	8d 8f       	std	Y+29, r24	; 0x1d
    2104:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2106:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2108:	33 23       	and	r19, r19
    210a:	3c f4       	brge	.+14     	; 0x211a <LCD_floatToString+0x110>
    210c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    210e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2110:	90 95       	com	r25
    2112:	81 95       	neg	r24
    2114:	9f 4f       	sbci	r25, 0xFF	; 255
    2116:	9e 8f       	std	Y+30, r25	; 0x1e
    2118:	8d 8f       	std	Y+29, r24	; 0x1d
    211a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    211c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    211e:	c9 01       	movw	r24, r18
    2120:	aa 27       	eor	r26, r26
    2122:	97 fd       	sbrc	r25, 7
    2124:	a0 95       	com	r26
    2126:	ba 2f       	mov	r27, r26
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	9e 01       	movw	r18, r28
    212e:	2f 5f       	subi	r18, 0xFF	; 255
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	a9 01       	movw	r20, r18
    2134:	2a e0       	ldi	r18, 0x0A	; 10
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <ltoa>
	LCD_displayString(buff);
    213c:	ce 01       	movw	r24, r28
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_displayString>
}
    2144:	6e 96       	adiw	r28, 0x1e	; 30
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	ff 90       	pop	r15
    215a:	ef 90       	pop	r14
    215c:	08 95       	ret

0000215e <LCD_creatCustomChar>:

/*
* Function that Create Custom Character in CGRAM
*/
void LCD_creatCustomChar(unsigned char loc, unsigned char *msg) {
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	00 d0       	rcall	.+0      	; 0x2164 <LCD_creatCustomChar+0x6>
    2164:	00 d0       	rcall	.+0      	; 0x2166 <LCD_creatCustomChar+0x8>
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	8a 83       	std	Y+2, r24	; 0x02
    216c:	7c 83       	std	Y+4, r23	; 0x04
    216e:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char i;
	if (loc < 8) {
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	88 30       	cpi	r24, 0x08	; 8
    2174:	f8 f4       	brcc	.+62     	; 0x21b4 <LCD_creatCustomChar+0x56>
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	80 64       	ori	r24, 0x40	; 64
    218a:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_sendCommand>
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    218e:	19 82       	std	Y+1, r1	; 0x01
    2190:	0e c0       	rjmp	.+28     	; 0x21ae <LCD_creatCustomChar+0x50>
			LCD_displayCustomChar(msg[i]);
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	fc 01       	movw	r30, r24
    219e:	e2 0f       	add	r30, r18
    21a0:	f3 1f       	adc	r31, r19
    21a2:	80 81       	ld	r24, Z
    21a4:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <LCD_displayCustomChar>
void LCD_creatCustomChar(unsigned char loc, unsigned char *msg) {
	unsigned char i;
	if (loc < 8) {
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	8f 5f       	subi	r24, 0xFF	; 255
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	88 30       	cpi	r24, 0x08	; 8
    21b2:	78 f3       	brcs	.-34     	; 0x2192 <LCD_creatCustomChar+0x34>
			LCD_displayCustomChar(msg[i]);
		}
	}
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <LCD_displayCustomChar>:

/*
* Function that Display Custom Character in CGRAM
*/
void LCD_displayCustomChar(unsigned char char_data) /* LCD data write function */
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	a7 97       	sbiw	r28, 0x27	; 39
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	8f a3       	std	Y+39, r24	; 0x27
	DATA_OUT = char_data;
    21d8:	e5 e3       	ldi	r30, 0x35	; 53
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	8f a1       	ldd	r24, Y+39	; 0x27
    21de:	80 83       	st	Z, r24
	RS = 1;/* RS=1 Data reg. */
    21e0:	e2 e3       	ldi	r30, 0x32	; 50
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	80 61       	ori	r24, 0x10	; 16
    21e8:	80 83       	st	Z, r24
	RW = 0; /* RW=0 write operation */
    21ea:	e2 e3       	ldi	r30, 0x32	; 50
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	8f 7d       	andi	r24, 0xDF	; 223
    21f2:	80 83       	st	Z, r24
	E = 1; /* Enable Pulse */
    21f4:	e2 e3       	ldi	r30, 0x32	; 50
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	80 64       	ori	r24, 0x40	; 64
    21fc:	80 83       	st	Z, r24
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e8       	ldi	r26, 0x80	; 128
    2204:	bf e3       	ldi	r27, 0x3F	; 63
    2206:	8b a3       	std	Y+35, r24	; 0x23
    2208:	9c a3       	std	Y+36, r25	; 0x24
    220a:	ad a3       	std	Y+37, r26	; 0x25
    220c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    220e:	6b a1       	ldd	r22, Y+35	; 0x23
    2210:	7c a1       	ldd	r23, Y+36	; 0x24
    2212:	8d a1       	ldd	r24, Y+37	; 0x25
    2214:	9e a1       	ldd	r25, Y+38	; 0x26
    2216:	2b ea       	ldi	r18, 0xAB	; 171
    2218:	3a ea       	ldi	r19, 0xAA	; 170
    221a:	4a e2       	ldi	r20, 0x2A	; 42
    221c:	50 e4       	ldi	r21, 0x40	; 64
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8f 8f       	std	Y+31, r24	; 0x1f
    2228:	98 a3       	std	Y+32, r25	; 0x20
    222a:	a9 a3       	std	Y+33, r26	; 0x21
    222c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    222e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2230:	78 a1       	ldd	r23, Y+32	; 0x20
    2232:	89 a1       	ldd	r24, Y+33	; 0x21
    2234:	9a a1       	ldd	r25, Y+34	; 0x22
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	1c f4       	brge	.+6      	; 0x224c <LCD_displayCustomChar+0x8a>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	8e 8f       	std	Y+30, r24	; 0x1e
    224a:	91 c0       	rjmp	.+290    	; 0x236e <LCD_displayCustomChar+0x1ac>
	else if (__tmp > 255)
    224c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    224e:	78 a1       	ldd	r23, Y+32	; 0x20
    2250:	89 a1       	ldd	r24, Y+33	; 0x21
    2252:	9a a1       	ldd	r25, Y+34	; 0x22
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	4f e7       	ldi	r20, 0x7F	; 127
    225a:	53 e4       	ldi	r21, 0x43	; 67
    225c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2260:	18 16       	cp	r1, r24
    2262:	0c f0       	brlt	.+2      	; 0x2266 <LCD_displayCustomChar+0xa4>
    2264:	7b c0       	rjmp	.+246    	; 0x235c <LCD_displayCustomChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2266:	6b a1       	ldd	r22, Y+35	; 0x23
    2268:	7c a1       	ldd	r23, Y+36	; 0x24
    226a:	8d a1       	ldd	r24, Y+37	; 0x25
    226c:	9e a1       	ldd	r25, Y+38	; 0x26
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a e7       	ldi	r20, 0x7A	; 122
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8a 8f       	std	Y+26, r24	; 0x1a
    2280:	9b 8f       	std	Y+27, r25	; 0x1b
    2282:	ac 8f       	std	Y+28, r26	; 0x1c
    2284:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2288:	7b 8d       	ldd	r23, Y+27	; 0x1b
    228a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    228c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a ef       	ldi	r20, 0xFA	; 250
    2294:	54 e4       	ldi	r21, 0x44	; 68
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8e 8b       	std	Y+22, r24	; 0x16
    22a0:	9f 8b       	std	Y+23, r25	; 0x17
    22a2:	a8 8f       	std	Y+24, r26	; 0x18
    22a4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    22a6:	6e 89       	ldd	r22, Y+22	; 0x16
    22a8:	7f 89       	ldd	r23, Y+23	; 0x17
    22aa:	88 8d       	ldd	r24, Y+24	; 0x18
    22ac:	99 8d       	ldd	r25, Y+25	; 0x19
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e8       	ldi	r20, 0x80	; 128
    22b4:	5f e3       	ldi	r21, 0x3F	; 63
    22b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22ba:	88 23       	and	r24, r24
    22bc:	2c f4       	brge	.+10     	; 0x22c8 <LCD_displayCustomChar+0x106>
		__ticks = 1;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9d 8b       	std	Y+21, r25	; 0x15
    22c4:	8c 8b       	std	Y+20, r24	; 0x14
    22c6:	3f c0       	rjmp	.+126    	; 0x2346 <LCD_displayCustomChar+0x184>
	else if (__tmp > 65535)
    22c8:	6e 89       	ldd	r22, Y+22	; 0x16
    22ca:	7f 89       	ldd	r23, Y+23	; 0x17
    22cc:	88 8d       	ldd	r24, Y+24	; 0x18
    22ce:	99 8d       	ldd	r25, Y+25	; 0x19
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	3f ef       	ldi	r19, 0xFF	; 255
    22d4:	4f e7       	ldi	r20, 0x7F	; 127
    22d6:	57 e4       	ldi	r21, 0x47	; 71
    22d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22dc:	18 16       	cp	r1, r24
    22de:	4c f5       	brge	.+82     	; 0x2332 <LCD_displayCustomChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22e2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9d 8b       	std	Y+21, r25	; 0x15
    2306:	8c 8b       	std	Y+20, r24	; 0x14
    2308:	0f c0       	rjmp	.+30     	; 0x2328 <LCD_displayCustomChar+0x166>
    230a:	88 ec       	ldi	r24, 0xC8	; 200
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9b 8b       	std	Y+19, r25	; 0x13
    2310:	8a 8b       	std	Y+18, r24	; 0x12
    2312:	8a 89       	ldd	r24, Y+18	; 0x12
    2314:	9b 89       	ldd	r25, Y+19	; 0x13
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <LCD_displayCustomChar+0x154>
    231a:	9b 8b       	std	Y+19, r25	; 0x13
    231c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231e:	8c 89       	ldd	r24, Y+20	; 0x14
    2320:	9d 89       	ldd	r25, Y+21	; 0x15
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	9d 8b       	std	Y+21, r25	; 0x15
    2326:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2328:	8c 89       	ldd	r24, Y+20	; 0x14
    232a:	9d 89       	ldd	r25, Y+21	; 0x15
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	69 f7       	brne	.-38     	; 0x230a <LCD_displayCustomChar+0x148>
    2330:	24 c0       	rjmp	.+72     	; 0x237a <LCD_displayCustomChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2332:	6e 89       	ldd	r22, Y+22	; 0x16
    2334:	7f 89       	ldd	r23, Y+23	; 0x17
    2336:	88 8d       	ldd	r24, Y+24	; 0x18
    2338:	99 8d       	ldd	r25, Y+25	; 0x19
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9d 8b       	std	Y+21, r25	; 0x15
    2344:	8c 8b       	std	Y+20, r24	; 0x14
    2346:	8c 89       	ldd	r24, Y+20	; 0x14
    2348:	9d 89       	ldd	r25, Y+21	; 0x15
    234a:	99 8b       	std	Y+17, r25	; 0x11
    234c:	88 8b       	std	Y+16, r24	; 0x10
    234e:	88 89       	ldd	r24, Y+16	; 0x10
    2350:	99 89       	ldd	r25, Y+17	; 0x11
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <LCD_displayCustomChar+0x190>
    2356:	99 8b       	std	Y+17, r25	; 0x11
    2358:	88 8b       	std	Y+16, r24	; 0x10
    235a:	0f c0       	rjmp	.+30     	; 0x237a <LCD_displayCustomChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    235c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    235e:	78 a1       	ldd	r23, Y+32	; 0x20
    2360:	89 a1       	ldd	r24, Y+33	; 0x21
    2362:	9a a1       	ldd	r25, Y+34	; 0x22
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	8e 8f       	std	Y+30, r24	; 0x1e
    236e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2370:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2372:	8f 85       	ldd	r24, Y+15	; 0x0f
    2374:	8a 95       	dec	r24
    2376:	f1 f7       	brne	.-4      	; 0x2374 <LCD_displayCustomChar+0x1b2>
    2378:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	E = 0;
    237a:	e2 e3       	ldi	r30, 0x32	; 50
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	8f 7b       	andi	r24, 0xBF	; 191
    2382:	80 83       	st	Z, r24
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a0 e0       	ldi	r26, 0x00	; 0
    238a:	b0 e4       	ldi	r27, 0x40	; 64
    238c:	8b 87       	std	Y+11, r24	; 0x0b
    238e:	9c 87       	std	Y+12, r25	; 0x0c
    2390:	ad 87       	std	Y+13, r26	; 0x0d
    2392:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2394:	6b 85       	ldd	r22, Y+11	; 0x0b
    2396:	7c 85       	ldd	r23, Y+12	; 0x0c
    2398:	8d 85       	ldd	r24, Y+13	; 0x0d
    239a:	9e 85       	ldd	r25, Y+14	; 0x0e
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a ef       	ldi	r20, 0xFA	; 250
    23a2:	54 e4       	ldi	r21, 0x44	; 68
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	8f 83       	std	Y+7, r24	; 0x07
    23ae:	98 87       	std	Y+8, r25	; 0x08
    23b0:	a9 87       	std	Y+9, r26	; 0x09
    23b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <LCD_displayCustomChar+0x214>
		__ticks = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
    23d4:	3f c0       	rjmp	.+126    	; 0x2454 <LCD_displayCustomChar+0x292>
	else if (__tmp > 65535)
    23d6:	6f 81       	ldd	r22, Y+7	; 0x07
    23d8:	78 85       	ldd	r23, Y+8	; 0x08
    23da:	89 85       	ldd	r24, Y+9	; 0x09
    23dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	4c f5       	brge	.+82     	; 0x2440 <LCD_displayCustomChar+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <LCD_displayCustomChar+0x274>
    2418:	88 ec       	ldi	r24, 0xC8	; 200
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9c 83       	std	Y+4, r25	; 0x04
    241e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_displayCustomChar+0x262>
    2428:	9c 83       	std	Y+4, r25	; 0x04
    242a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	9e 81       	ldd	r25, Y+6	; 0x06
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	69 f7       	brne	.-38     	; 0x2418 <LCD_displayCustomChar+0x256>
    243e:	14 c0       	rjmp	.+40     	; 0x2468 <LCD_displayCustomChar+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2440:	6f 81       	ldd	r22, Y+7	; 0x07
    2442:	78 85       	ldd	r23, Y+8	; 0x08
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9e 83       	std	Y+6, r25	; 0x06
    2452:	8d 83       	std	Y+5, r24	; 0x05
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	9e 81       	ldd	r25, Y+6	; 0x06
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <LCD_displayCustomChar+0x29e>
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); /* Data write delay */
}
    2468:	a7 96       	adiw	r28, 0x27	; 39
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <UART_init>:
 *******************************************************************************/

/*
 * Function responsible to initialize UART module .
 */
void UART_init(void) {
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA, U2X);
    2482:	ab e2       	ldi	r26, 0x2B	; 43
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	eb e2       	ldi	r30, 0x2B	; 43
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	82 60       	ori	r24, 0x02	; 2
    248e:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	SET_BIT(UCSRB, TXEN);
    2490:	aa e2       	ldi	r26, 0x2A	; 42
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	ea e2       	ldi	r30, 0x2A	; 42
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	88 60       	ori	r24, 0x08	; 8
    249c:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);
    249e:	aa e2       	ldi	r26, 0x2A	; 42
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	ea e2       	ldi	r30, 0x2A	; 42
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	80 61       	ori	r24, 0x10	; 16
    24aa:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRC, URSEL);
    24ac:	a0 e4       	ldi	r26, 0x40	; 64
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e0 e4       	ldi	r30, 0x40	; 64
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	80 68       	ori	r24, 0x80	; 128
    24b8:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
    24ba:	a0 e4       	ldi	r26, 0x40	; 64
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e0 e4       	ldi	r30, 0x40	; 64
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	84 60       	ori	r24, 0x04	; 4
    24c6:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
    24c8:	a0 e4       	ldi	r26, 0x40	; 64
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e0 e4       	ldi	r30, 0x40	; 64
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	82 60       	ori	r24, 0x02	; 2
    24d4:	8c 93       	st	X, r24

	/*	select type of parity */
	CLEAR_BIT(UCSRC, UPM1);
    24d6:	a0 e4       	ldi	r26, 0x40	; 64
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e0 e4       	ldi	r30, 0x40	; 64
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8f 7d       	andi	r24, 0xDF	; 223
    24e2:	8c 93       	st	X, r24
	/*SET_BIT(UCSRC, UPM1);*/

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = 12 >> 8;
    24e4:	e0 e4       	ldi	r30, 0x40	; 64
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	10 82       	st	Z, r1
	UBRRL = 12;
    24ea:	e9 e2       	ldi	r30, 0x29	; 41
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	8c e0       	ldi	r24, 0x0C	; 12
    24f0:	80 83       	st	Z, r24

}
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <UART_sendByte>:

/*
 * Function responsible to send byte to another device .
 */
void UART_sendByte(const uint8 data) {
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	0f 92       	push	r0
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	89 83       	std	Y+1, r24	; 0x01

	/* UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2504:	eb e2       	ldi	r30, 0x2B	; 43
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	80 72       	andi	r24, 0x20	; 32
    2510:	90 70       	andi	r25, 0x00	; 0
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	b9 f3       	breq	.-18     	; 0x2504 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    2516:	ec e2       	ldi	r30, 0x2C	; 44
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	80 83       	st	Z, r24
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/

}
    251e:	0f 90       	pop	r0
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <UART_recieveByte>:

/*
 * Function responsible to receive byte from another device .
 */
uint8 UART_recieveByte(void) {
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62

	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    252e:	eb e2       	ldi	r30, 0x2B	; 43
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	88 23       	and	r24, r24
    2536:	dc f7       	brge	.-10     	; 0x252e <UART_recieveByte+0x8>
	/* Read the received data from the RX buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    2538:	ec e2       	ldi	r30, 0x2C	; 44
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
}
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <UART_sendString>:

/*
 * Function responsible to send String from another device .
 */
void UART_sendString(const uint8 *Str) {
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	00 d0       	rcall	.+0      	; 0x254a <UART_sendString+0x6>
    254a:	0f 92       	push	r0
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	9b 83       	std	Y+3, r25	; 0x03
    2552:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2554:	19 82       	std	Y+1, r1	; 0x01
    2556:	0e c0       	rjmp	.+28     	; 0x2574 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);		/* send string character by character until null character */
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	9b 81       	ldd	r25, Y+3	; 0x03
    2562:	fc 01       	movw	r30, r24
    2564:	e2 0f       	add	r30, r18
    2566:	f3 1f       	adc	r31, r19
    2568:	80 81       	ld	r24, Z
    256a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <UART_sendByte>
		i++;
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	8f 5f       	subi	r24, 0xFF	; 255
    2572:	89 83       	std	Y+1, r24	; 0x01
 * Function responsible to send String from another device .
 */
void UART_sendString(const uint8 *Str) {

	uint8 i = 0;
	while(Str[i] != '\0')
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	9b 81       	ldd	r25, Y+3	; 0x03
    257e:	fc 01       	movw	r30, r24
    2580:	e2 0f       	add	r30, r18
    2582:	f3 1f       	adc	r31, r19
    2584:	80 81       	ld	r24, Z
    2586:	88 23       	and	r24, r24
    2588:	39 f7       	brne	.-50     	; 0x2558 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);		/* send string character by character until null character */
		i++;
	}
	UART_sendByte('#');
    258a:	83 e2       	ldi	r24, 0x23	; 35
    258c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <UART_sendByte>
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/

}
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <UART_receiveString>:

/*
 * Function responsible to receive String from another device .
 */
void UART_receiveString(uint8 *Str) {
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <UART_receiveString+0xa>
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <UART_receiveString+0xc>
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	9b 83       	std	Y+3, r25	; 0x03
    25ae:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    25b0:	19 82       	std	Y+1, r1	; 0x01
	do{

		Str[i] = UART_recieveByte();
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	9b 81       	ldd	r25, Y+3	; 0x03
    25bc:	8c 01       	movw	r16, r24
    25be:	02 0f       	add	r16, r18
    25c0:	13 1f       	adc	r17, r19
    25c2:	0e 94 93 12 	call	0x2526	; 0x2526 <UART_recieveByte>
    25c6:	f8 01       	movw	r30, r16
    25c8:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    25ca:	8a e2       	ldi	r24, 0x2A	; 42
    25cc:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_displayCharacter>
	}while(Str[i++] != '#');		/* still receive character until '#' symbol  send */
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	9b 81       	ldd	r25, Y+3	; 0x03
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	80 81       	ld	r24, Z
    25e2:	1c 82       	std	Y+4, r1	; 0x04
    25e4:	83 32       	cpi	r24, 0x23	; 35
    25e6:	11 f0       	breq	.+4      	; 0x25ec <UART_receiveString+0x50>
    25e8:	f1 e0       	ldi	r31, 0x01	; 1
    25ea:	fc 83       	std	Y+4, r31	; 0x04
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	8f 5f       	subi	r24, 0xFF	; 255
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	8c 81       	ldd	r24, Y+4	; 0x04
    25f4:	88 23       	and	r24, r24
    25f6:	e9 f6       	brne	.-70     	; 0x25b2 <UART_receiveString+0x16>

	Str[--i] = '\0';			/* add null character at the end of string */
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	81 50       	subi	r24, 0x01	; 1
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9b 81       	ldd	r25, Y+3	; 0x03
    2608:	fc 01       	movw	r30, r24
    260a:	e2 0f       	add	r30, r18
    260c:	f3 1f       	adc	r31, r19
    260e:	10 82       	st	Z, r1

}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	08 95       	ret

00002622 <main>:
uint8 compare(uint8*, uint8*);
void LED_init(void);
void arr_init(uint8*, uint8);
void IR_init(void);
void SLEEP_Mode(void);
int main(void) {
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	6c 97       	sbiw	r28, 0x1c	; 28
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
	INT0_Enable();
    2636:	0e 94 98 14 	call	0x2930	; 0x2930 <INT0_Enable>
	LCD_init();
    263a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_init>
	UART_init();
    263e:	0e 94 3d 12 	call	0x247a	; 0x247a <UART_init>
	LED_init();
    2642:	0e 94 48 15 	call	0x2a90	; 0x2a90 <LED_init>
	LCD_displayStringRowColumn(0, 3, "Enter Pass");
    2646:	20 e6       	ldi	r18, 0x60	; 96
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	63 e0       	ldi	r22, 0x03	; 3
    264e:	a9 01       	movw	r20, r18
    2650:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_displayStringRowColumn>
	IR_init();
    2654:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <IR_init>

	while (1) {
		if (BIT_IS_SET(PINB, 7)) {
    2658:	e6 e3       	ldi	r30, 0x36	; 54
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	88 23       	and	r24, r24
    2660:	0c f0       	brlt	.+2      	; 0x2664 <main+0x42>
    2662:	63 c1       	rjmp	.+710    	; 0x292a <main+0x308>
			//while(UART_recieveByte() != '#' );
			arr_init(arrPass, 10);
    2664:	8d e9       	ldi	r24, 0x9D	; 157
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	6a e0       	ldi	r22, 0x0A	; 10
    266a:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <arr_init>
			LCD_goToRowColumn(1, 0);
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_goToRowColumn>
			if (state == FALSE) {
    2676:	80 91 97 01 	lds	r24, 0x0197
    267a:	88 23       	and	r24, r24
    267c:	09 f0       	breq	.+2      	; 0x2680 <main+0x5e>
    267e:	98 c0       	rjmp	.+304    	; 0x27b0 <main+0x18e>
				index = 0;
    2680:	10 92 96 01 	sts	0x0196, r1

				do {
					flag = KeyPad_getPressedKey();
    2684:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <KeyPad_getPressedKey>
    2688:	80 93 98 01 	sts	0x0198, r24
					arrPass[index] = flag;
    268c:	80 91 96 01 	lds	r24, 0x0196
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	20 91 98 01 	lds	r18, 0x0198
    2698:	fc 01       	movw	r30, r24
    269a:	e3 56       	subi	r30, 0x63	; 99
    269c:	fe 4f       	sbci	r31, 0xFE	; 254
    269e:	20 83       	st	Z, r18
					index++;
    26a0:	80 91 96 01 	lds	r24, 0x0196
    26a4:	8f 5f       	subi	r24, 0xFF	; 255
    26a6:	80 93 96 01 	sts	0x0196, r24
					LCD_displayCharacter('*');
    26aa:	8a e2       	ldi	r24, 0x2A	; 42
    26ac:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_displayCharacter>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a8 ec       	ldi	r26, 0xC8	; 200
    26b6:	b2 e4       	ldi	r27, 0x42	; 66
    26b8:	89 8f       	std	Y+25, r24	; 0x19
    26ba:	9a 8f       	std	Y+26, r25	; 0x1a
    26bc:	ab 8f       	std	Y+27, r26	; 0x1b
    26be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c0:	69 8d       	ldd	r22, Y+25	; 0x19
    26c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	4a ef       	ldi	r20, 0xFA	; 250
    26ce:	54 e4       	ldi	r21, 0x44	; 68
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	8d 8b       	std	Y+21, r24	; 0x15
    26da:	9e 8b       	std	Y+22, r25	; 0x16
    26dc:	af 8b       	std	Y+23, r26	; 0x17
    26de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26e0:	6d 89       	ldd	r22, Y+21	; 0x15
    26e2:	7e 89       	ldd	r23, Y+22	; 0x16
    26e4:	8f 89       	ldd	r24, Y+23	; 0x17
    26e6:	98 8d       	ldd	r25, Y+24	; 0x18
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e8       	ldi	r20, 0x80	; 128
    26ee:	5f e3       	ldi	r21, 0x3F	; 63
    26f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f4:	88 23       	and	r24, r24
    26f6:	2c f4       	brge	.+10     	; 0x2702 <main+0xe0>
		__ticks = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	9c 8b       	std	Y+20, r25	; 0x14
    26fe:	8b 8b       	std	Y+19, r24	; 0x13
    2700:	3f c0       	rjmp	.+126    	; 0x2780 <main+0x15e>
	else if (__tmp > 65535)
    2702:	6d 89       	ldd	r22, Y+21	; 0x15
    2704:	7e 89       	ldd	r23, Y+22	; 0x16
    2706:	8f 89       	ldd	r24, Y+23	; 0x17
    2708:	98 8d       	ldd	r25, Y+24	; 0x18
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	3f ef       	ldi	r19, 0xFF	; 255
    270e:	4f e7       	ldi	r20, 0x7F	; 127
    2710:	57 e4       	ldi	r21, 0x47	; 71
    2712:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2716:	18 16       	cp	r1, r24
    2718:	4c f5       	brge	.+82     	; 0x276c <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271a:	69 8d       	ldd	r22, Y+25	; 0x19
    271c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    271e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2720:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e2       	ldi	r20, 0x20	; 32
    2728:	51 e4       	ldi	r21, 0x41	; 65
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	bc 01       	movw	r22, r24
    2734:	cd 01       	movw	r24, r26
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	9c 8b       	std	Y+20, r25	; 0x14
    2740:	8b 8b       	std	Y+19, r24	; 0x13
    2742:	0f c0       	rjmp	.+30     	; 0x2762 <main+0x140>
    2744:	88 ec       	ldi	r24, 0xC8	; 200
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9a 8b       	std	Y+18, r25	; 0x12
    274a:	89 8b       	std	Y+17, r24	; 0x11
    274c:	89 89       	ldd	r24, Y+17	; 0x11
    274e:	9a 89       	ldd	r25, Y+18	; 0x12
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <main+0x12e>
    2754:	9a 8b       	std	Y+18, r25	; 0x12
    2756:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2758:	8b 89       	ldd	r24, Y+19	; 0x13
    275a:	9c 89       	ldd	r25, Y+20	; 0x14
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	9c 8b       	std	Y+20, r25	; 0x14
    2760:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2762:	8b 89       	ldd	r24, Y+19	; 0x13
    2764:	9c 89       	ldd	r25, Y+20	; 0x14
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	69 f7       	brne	.-38     	; 0x2744 <main+0x122>
    276a:	14 c0       	rjmp	.+40     	; 0x2794 <main+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276c:	6d 89       	ldd	r22, Y+21	; 0x15
    276e:	7e 89       	ldd	r23, Y+22	; 0x16
    2770:	8f 89       	ldd	r24, Y+23	; 0x17
    2772:	98 8d       	ldd	r25, Y+24	; 0x18
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9c 8b       	std	Y+20, r25	; 0x14
    277e:	8b 8b       	std	Y+19, r24	; 0x13
    2780:	8b 89       	ldd	r24, Y+19	; 0x13
    2782:	9c 89       	ldd	r25, Y+20	; 0x14
    2784:	98 8b       	std	Y+16, r25	; 0x10
    2786:	8f 87       	std	Y+15, r24	; 0x0f
    2788:	8f 85       	ldd	r24, Y+15	; 0x0f
    278a:	98 89       	ldd	r25, Y+16	; 0x10
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <main+0x16a>
    2790:	98 8b       	std	Y+16, r25	; 0x10
    2792:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(100);

				} while (flag != '#');
    2794:	80 91 98 01 	lds	r24, 0x0198
    2798:	83 32       	cpi	r24, 0x23	; 35
    279a:	09 f0       	breq	.+2      	; 0x279e <main+0x17c>
    279c:	73 cf       	rjmp	.-282    	; 0x2684 <main+0x62>
				arrPass[index] = '\0';
    279e:	80 91 96 01 	lds	r24, 0x0196
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	fc 01       	movw	r30, r24
    27a8:	e3 56       	subi	r30, 0x63	; 99
    27aa:	fe 4f       	sbci	r31, 0xFE	; 254
    27ac:	10 82       	st	Z, r1
    27ae:	0f c0       	rjmp	.+30     	; 0x27ce <main+0x1ac>
			} else {
				while (UART_recieveByte() != '#');
    27b0:	0e 94 93 12 	call	0x2526	; 0x2526 <UART_recieveByte>
    27b4:	83 32       	cpi	r24, 0x23	; 35
    27b6:	e1 f7       	brne	.-8      	; 0x27b0 <main+0x18e>
				UART_receiveString(arrPass);
    27b8:	8d e9       	ldi	r24, 0x9D	; 157
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	0e 94 ce 12 	call	0x259c	; 0x259c <UART_receiveString>
				SET_BIT(PORTB, 1);
    27c0:	a8 e3       	ldi	r26, 0x38	; 56
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e8 e3       	ldi	r30, 0x38	; 56
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	82 60       	ori	r24, 0x02	; 2
    27cc:	8c 93       	st	X, r24
			}
			flag = compare(arrPass, passWord);
    27ce:	8d e9       	ldi	r24, 0x9D	; 157
    27d0:	91 e0       	ldi	r25, 0x01	; 1
    27d2:	2b e8       	ldi	r18, 0x8B	; 139
    27d4:	31 e0       	ldi	r19, 0x01	; 1
    27d6:	b9 01       	movw	r22, r18
    27d8:	0e 94 bb 14 	call	0x2976	; 0x2976 <compare>
    27dc:	80 93 98 01 	sts	0x0198, r24
			LCD_clearScreen();
    27e0:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>
			if (flag == 0) {
    27e4:	80 91 98 01 	lds	r24, 0x0198
    27e8:	88 23       	and	r24, r24
    27ea:	91 f4       	brne	.+36     	; 0x2810 <main+0x1ee>
				SET_BIT(PORTB, 0);
    27ec:	a8 e3       	ldi	r26, 0x38	; 56
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e8 e3       	ldi	r30, 0x38	; 56
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	81 60       	ori	r24, 0x01	; 1
    27f8:	8c 93       	st	X, r24
				LCD_displayStringRowColumn(0, 3, "Correct Pass");
    27fa:	2b e6       	ldi	r18, 0x6B	; 107
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	63 e0       	ldi	r22, 0x03	; 3
    2802:	a9 01       	movw	r20, r18
    2804:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_displayStringRowColumn>
				UART_sendByte('o');
    2808:	8f e6       	ldi	r24, 0x6F	; 111
    280a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <UART_sendByte>
    280e:	11 c0       	rjmp	.+34     	; 0x2832 <main+0x210>
			} else {
				CLEAR_BIT(PORTB, 0);
    2810:	a8 e3       	ldi	r26, 0x38	; 56
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e8 e3       	ldi	r30, 0x38	; 56
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8e 7f       	andi	r24, 0xFE	; 254
    281c:	8c 93       	st	X, r24
				LCD_displayStringRowColumn(0, 3, "Error Pass");
    281e:	28 e7       	ldi	r18, 0x78	; 120
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	63 e0       	ldi	r22, 0x03	; 3
    2826:	a9 01       	movw	r20, r18
    2828:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_displayStringRowColumn>
				UART_sendByte('N');
    282c:	8e e4       	ldi	r24, 0x4E	; 78
    282e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <UART_sendByte>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	aa ef       	ldi	r26, 0xFA	; 250
    2838:	b3 e4       	ldi	r27, 0x43	; 67
    283a:	8b 87       	std	Y+11, r24	; 0x0b
    283c:	9c 87       	std	Y+12, r25	; 0x0c
    283e:	ad 87       	std	Y+13, r26	; 0x0d
    2840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2842:	6b 85       	ldd	r22, Y+11	; 0x0b
    2844:	7c 85       	ldd	r23, Y+12	; 0x0c
    2846:	8d 85       	ldd	r24, Y+13	; 0x0d
    2848:	9e 85       	ldd	r25, Y+14	; 0x0e
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	4a ef       	ldi	r20, 0xFA	; 250
    2850:	54 e4       	ldi	r21, 0x44	; 68
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8f 83       	std	Y+7, r24	; 0x07
    285c:	98 87       	std	Y+8, r25	; 0x08
    285e:	a9 87       	std	Y+9, r26	; 0x09
    2860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2862:	6f 81       	ldd	r22, Y+7	; 0x07
    2864:	78 85       	ldd	r23, Y+8	; 0x08
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e8       	ldi	r20, 0x80	; 128
    2870:	5f e3       	ldi	r21, 0x3F	; 63
    2872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2876:	88 23       	and	r24, r24
    2878:	2c f4       	brge	.+10     	; 0x2884 <main+0x262>
		__ticks = 1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9e 83       	std	Y+6, r25	; 0x06
    2880:	8d 83       	std	Y+5, r24	; 0x05
    2882:	3f c0       	rjmp	.+126    	; 0x2902 <main+0x2e0>
	else if (__tmp > 65535)
    2884:	6f 81       	ldd	r22, Y+7	; 0x07
    2886:	78 85       	ldd	r23, Y+8	; 0x08
    2888:	89 85       	ldd	r24, Y+9	; 0x09
    288a:	9a 85       	ldd	r25, Y+10	; 0x0a
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	3f ef       	ldi	r19, 0xFF	; 255
    2890:	4f e7       	ldi	r20, 0x7F	; 127
    2892:	57 e4       	ldi	r21, 0x47	; 71
    2894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2898:	18 16       	cp	r1, r24
    289a:	4c f5       	brge	.+82     	; 0x28ee <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289c:	6b 85       	ldd	r22, Y+11	; 0x0b
    289e:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e2       	ldi	r20, 0x20	; 32
    28aa:	51 e4       	ldi	r21, 0x41	; 65
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	9e 83       	std	Y+6, r25	; 0x06
    28c2:	8d 83       	std	Y+5, r24	; 0x05
    28c4:	0f c0       	rjmp	.+30     	; 0x28e4 <main+0x2c2>
    28c6:	88 ec       	ldi	r24, 0xC8	; 200
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	9c 83       	std	Y+4, r25	; 0x04
    28cc:	8b 83       	std	Y+3, r24	; 0x03
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	9c 81       	ldd	r25, Y+4	; 0x04
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <main+0x2b0>
    28d6:	9c 83       	std	Y+4, r25	; 0x04
    28d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	69 f7       	brne	.-38     	; 0x28c6 <main+0x2a4>
    28ec:	14 c0       	rjmp	.+40     	; 0x2916 <main+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ee:	6f 81       	ldd	r22, Y+7	; 0x07
    28f0:	78 85       	ldd	r23, Y+8	; 0x08
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
    2902:	8d 81       	ldd	r24, Y+5	; 0x05
    2904:	9e 81       	ldd	r25, Y+6	; 0x06
    2906:	9a 83       	std	Y+2, r25	; 0x02
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <main+0x2ec>
    2912:	9a 83       	std	Y+2, r25	; 0x02
    2914:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(500);
			LCD_clearScreen();
    2916:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 3, "Enter Pass");
    291a:	20 e6       	ldi	r18, 0x60	; 96
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	63 e0       	ldi	r22, 0x03	; 3
    2922:	a9 01       	movw	r20, r18
    2924:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_displayStringRowColumn>
    2928:	97 ce       	rjmp	.-722    	; 0x2658 <main+0x36>
		}else{
			SLEEP_Mode();
    292a:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <SLEEP_Mode>
    292e:	94 ce       	rjmp	.-728    	; 0x2658 <main+0x36>

00002930 <INT0_Enable>:
		}
	}
	return 0;
}

void INT0_Enable(void) {
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    2938:	af e5       	ldi	r26, 0x5F	; 95
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	ef e5       	ldi	r30, 0x5F	; 95
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	80 68       	ori	r24, 0x80	; 128
    2944:	8c 93       	st	X, r24
	SET_BIT(GICR, 6);
    2946:	ab e5       	ldi	r26, 0x5B	; 91
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	eb e5       	ldi	r30, 0x5B	; 91
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	80 64       	ori	r24, 0x40	; 64
    2952:	8c 93       	st	X, r24
	SET_BIT(MCUCR, 0);
    2954:	a5 e5       	ldi	r26, 0x55	; 85
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e5 e5       	ldi	r30, 0x55	; 85
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	81 60       	ori	r24, 0x01	; 1
    2960:	8c 93       	st	X, r24
	SET_BIT(MCUCR, 1);
    2962:	a5 e5       	ldi	r26, 0x55	; 85
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e5 e5       	ldi	r30, 0x55	; 85
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	82 60       	ori	r24, 0x02	; 2
    296e:	8c 93       	st	X, r24
}
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	08 95       	ret

00002976 <compare>:

uint8 compare(uint8 *arr1, uint8 *arr2) {
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	28 97       	sbiw	r28, 0x08	; 8
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	78 87       	std	Y+8, r23	; 0x08
    2990:	6f 83       	std	Y+7, r22	; 0x07
	int index = 0, check = 0;
    2992:	1c 82       	std	Y+4, r1	; 0x04
    2994:	1b 82       	std	Y+3, r1	; 0x03
    2996:	1a 82       	std	Y+2, r1	; 0x02
    2998:	19 82       	std	Y+1, r1	; 0x01
    299a:	1d c0       	rjmp	.+58     	; 0x29d6 <compare+0x60>
	while (arr2[index] != '\0' && check == 0) {
		if (arr1[index] == arr2[index]) {
    299c:	2b 81       	ldd	r18, Y+3	; 0x03
    299e:	3c 81       	ldd	r19, Y+4	; 0x04
    29a0:	8d 81       	ldd	r24, Y+5	; 0x05
    29a2:	9e 81       	ldd	r25, Y+6	; 0x06
    29a4:	fc 01       	movw	r30, r24
    29a6:	e2 0f       	add	r30, r18
    29a8:	f3 1f       	adc	r31, r19
    29aa:	40 81       	ld	r20, Z
    29ac:	2b 81       	ldd	r18, Y+3	; 0x03
    29ae:	3c 81       	ldd	r19, Y+4	; 0x04
    29b0:	8f 81       	ldd	r24, Y+7	; 0x07
    29b2:	98 85       	ldd	r25, Y+8	; 0x08
    29b4:	fc 01       	movw	r30, r24
    29b6:	e2 0f       	add	r30, r18
    29b8:	f3 1f       	adc	r31, r19
    29ba:	80 81       	ld	r24, Z
    29bc:	48 17       	cp	r20, r24
    29be:	31 f4       	brne	.+12     	; 0x29cc <compare+0x56>
			index++;
    29c0:	8b 81       	ldd	r24, Y+3	; 0x03
    29c2:	9c 81       	ldd	r25, Y+4	; 0x04
    29c4:	01 96       	adiw	r24, 0x01	; 1
    29c6:	9c 83       	std	Y+4, r25	; 0x04
    29c8:	8b 83       	std	Y+3, r24	; 0x03
    29ca:	05 c0       	rjmp	.+10     	; 0x29d6 <compare+0x60>
		} else {
			check++;
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	9a 81       	ldd	r25, Y+2	; 0x02
    29d0:	01 96       	adiw	r24, 0x01	; 1
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(MCUCR, 1);
}

uint8 compare(uint8 *arr1, uint8 *arr2) {
	int index = 0, check = 0;
	while (arr2[index] != '\0' && check == 0) {
    29d6:	2b 81       	ldd	r18, Y+3	; 0x03
    29d8:	3c 81       	ldd	r19, Y+4	; 0x04
    29da:	8f 81       	ldd	r24, Y+7	; 0x07
    29dc:	98 85       	ldd	r25, Y+8	; 0x08
    29de:	fc 01       	movw	r30, r24
    29e0:	e2 0f       	add	r30, r18
    29e2:	f3 1f       	adc	r31, r19
    29e4:	80 81       	ld	r24, Z
    29e6:	88 23       	and	r24, r24
    29e8:	21 f0       	breq	.+8      	; 0x29f2 <compare+0x7c>
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	9a 81       	ldd	r25, Y+2	; 0x02
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	a9 f2       	breq	.-86     	; 0x299c <compare+0x26>
		} else {
			check++;
		}

	}
	return check;
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    29f4:	28 96       	adiw	r28, 0x08	; 8
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <__vector_1>:

ISR(INT0_vect) {
    2a06:	1f 92       	push	r1
    2a08:	0f 92       	push	r0
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	0f 92       	push	r0
    2a0e:	11 24       	eor	r1, r1
    2a10:	2f 93       	push	r18
    2a12:	3f 93       	push	r19
    2a14:	4f 93       	push	r20
    2a16:	5f 93       	push	r21
    2a18:	6f 93       	push	r22
    2a1a:	7f 93       	push	r23
    2a1c:	8f 93       	push	r24
    2a1e:	9f 93       	push	r25
    2a20:	af 93       	push	r26
    2a22:	bf 93       	push	r27
    2a24:	ef 93       	push	r30
    2a26:	ff 93       	push	r31
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	0f 92       	push	r0
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
	state = !(state);
    2a32:	80 91 97 01 	lds	r24, 0x0197
    2a36:	19 82       	std	Y+1, r1	; 0x01
    2a38:	88 23       	and	r24, r24
    2a3a:	11 f4       	brne	.+4      	; 0x2a40 <__vector_1+0x3a>
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	80 93 97 01 	sts	0x0197, r24
	TOGGLE_BIT(PORTB, 1);
    2a46:	a8 e3       	ldi	r26, 0x38	; 56
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e8 e3       	ldi	r30, 0x38	; 56
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	90 81       	ld	r25, Z
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	89 27       	eor	r24, r25
    2a54:	8c 93       	st	X, r24
	LCD_goToRowColumn(1, 0);
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_goToRowColumn>
	LCD_displayCharacter(state + '0');
    2a5e:	80 91 97 01 	lds	r24, 0x0197
    2a62:	80 5d       	subi	r24, 0xD0	; 208
    2a64:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_displayCharacter>
}
    2a68:	0f 90       	pop	r0
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	ff 91       	pop	r31
    2a70:	ef 91       	pop	r30
    2a72:	bf 91       	pop	r27
    2a74:	af 91       	pop	r26
    2a76:	9f 91       	pop	r25
    2a78:	8f 91       	pop	r24
    2a7a:	7f 91       	pop	r23
    2a7c:	6f 91       	pop	r22
    2a7e:	5f 91       	pop	r21
    2a80:	4f 91       	pop	r20
    2a82:	3f 91       	pop	r19
    2a84:	2f 91       	pop	r18
    2a86:	0f 90       	pop	r0
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	0f 90       	pop	r0
    2a8c:	1f 90       	pop	r1
    2a8e:	18 95       	reti

00002a90 <LED_init>:

void LED_init(void) {
    2a90:	df 93       	push	r29
    2a92:	cf 93       	push	r28
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB, 0);
    2a98:	a7 e3       	ldi	r26, 0x37	; 55
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	e7 e3       	ldi	r30, 0x37	; 55
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	81 60       	ori	r24, 0x01	; 1
    2aa4:	8c 93       	st	X, r24
	SET_BIT(DDRB, 1);
    2aa6:	a7 e3       	ldi	r26, 0x37	; 55
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e7 e3       	ldi	r30, 0x37	; 55
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	82 60       	ori	r24, 0x02	; 2
    2ab2:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, 0);
    2ab4:	a8 e3       	ldi	r26, 0x38	; 56
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e8 e3       	ldi	r30, 0x38	; 56
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	8e 7f       	andi	r24, 0xFE	; 254
    2ac0:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, 1);
    2ac2:	a8 e3       	ldi	r26, 0x38	; 56
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	e8 e3       	ldi	r30, 0x38	; 56
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	8d 7f       	andi	r24, 0xFD	; 253
    2ace:	8c 93       	st	X, r24
}
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <arr_init>:

void arr_init(uint8 *arr, uint8 x) {
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <arr_init+0x6>
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <arr_init+0x8>
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	9b 83       	std	Y+3, r25	; 0x03
    2ae4:	8a 83       	std	Y+2, r24	; 0x02
    2ae6:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8 i = 0; i < x; i++) {
    2ae8:	19 82       	std	Y+1, r1	; 0x01
    2aea:	0c c0       	rjmp	.+24     	; 0x2b04 <arr_init+0x2e>
		arr[i] = 0;
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	9b 81       	ldd	r25, Y+3	; 0x03
    2af6:	fc 01       	movw	r30, r24
    2af8:	e2 0f       	add	r30, r18
    2afa:	f3 1f       	adc	r31, r19
    2afc:	10 82       	st	Z, r1
	CLEAR_BIT(PORTB, 0);
	CLEAR_BIT(PORTB, 1);
}

void arr_init(uint8 *arr, uint8 x) {
	for (uint8 i = 0; i < x; i++) {
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	8f 5f       	subi	r24, 0xFF	; 255
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	99 81       	ldd	r25, Y+1	; 0x01
    2b06:	8c 81       	ldd	r24, Y+4	; 0x04
    2b08:	98 17       	cp	r25, r24
    2b0a:	80 f3       	brcs	.-32     	; 0x2aec <arr_init+0x16>
		arr[i] = 0;
	}

}
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <IR_init>:

void IR_init(void) {
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(DDRB, 7);
    2b22:	a7 e3       	ldi	r26, 0x37	; 55
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e7 e3       	ldi	r30, 0x37	; 55
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	8f 77       	andi	r24, 0x7F	; 127
    2b2e:	8c 93       	st	X, r24
}
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <SLEEP_Mode>:

void SLEEP_Mode(void){
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2b3e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>
}
    2b42:	cf 91       	pop	r28
    2b44:	df 91       	pop	r29
    2b46:	08 95       	ret

00002b48 <__mulsi3>:
    2b48:	62 9f       	mul	r22, r18
    2b4a:	d0 01       	movw	r26, r0
    2b4c:	73 9f       	mul	r23, r19
    2b4e:	f0 01       	movw	r30, r0
    2b50:	82 9f       	mul	r24, r18
    2b52:	e0 0d       	add	r30, r0
    2b54:	f1 1d       	adc	r31, r1
    2b56:	64 9f       	mul	r22, r20
    2b58:	e0 0d       	add	r30, r0
    2b5a:	f1 1d       	adc	r31, r1
    2b5c:	92 9f       	mul	r25, r18
    2b5e:	f0 0d       	add	r31, r0
    2b60:	83 9f       	mul	r24, r19
    2b62:	f0 0d       	add	r31, r0
    2b64:	74 9f       	mul	r23, r20
    2b66:	f0 0d       	add	r31, r0
    2b68:	65 9f       	mul	r22, r21
    2b6a:	f0 0d       	add	r31, r0
    2b6c:	99 27       	eor	r25, r25
    2b6e:	72 9f       	mul	r23, r18
    2b70:	b0 0d       	add	r27, r0
    2b72:	e1 1d       	adc	r30, r1
    2b74:	f9 1f       	adc	r31, r25
    2b76:	63 9f       	mul	r22, r19
    2b78:	b0 0d       	add	r27, r0
    2b7a:	e1 1d       	adc	r30, r1
    2b7c:	f9 1f       	adc	r31, r25
    2b7e:	bd 01       	movw	r22, r26
    2b80:	cf 01       	movw	r24, r30
    2b82:	11 24       	eor	r1, r1
    2b84:	08 95       	ret

00002b86 <__prologue_saves__>:
    2b86:	2f 92       	push	r2
    2b88:	3f 92       	push	r3
    2b8a:	4f 92       	push	r4
    2b8c:	5f 92       	push	r5
    2b8e:	6f 92       	push	r6
    2b90:	7f 92       	push	r7
    2b92:	8f 92       	push	r8
    2b94:	9f 92       	push	r9
    2b96:	af 92       	push	r10
    2b98:	bf 92       	push	r11
    2b9a:	cf 92       	push	r12
    2b9c:	df 92       	push	r13
    2b9e:	ef 92       	push	r14
    2ba0:	ff 92       	push	r15
    2ba2:	0f 93       	push	r16
    2ba4:	1f 93       	push	r17
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	ca 1b       	sub	r28, r26
    2bb0:	db 0b       	sbc	r29, r27
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	09 94       	ijmp

00002bbe <__epilogue_restores__>:
    2bbe:	2a 88       	ldd	r2, Y+18	; 0x12
    2bc0:	39 88       	ldd	r3, Y+17	; 0x11
    2bc2:	48 88       	ldd	r4, Y+16	; 0x10
    2bc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bca:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bce:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bd0:	b9 84       	ldd	r11, Y+9	; 0x09
    2bd2:	c8 84       	ldd	r12, Y+8	; 0x08
    2bd4:	df 80       	ldd	r13, Y+7	; 0x07
    2bd6:	ee 80       	ldd	r14, Y+6	; 0x06
    2bd8:	fd 80       	ldd	r15, Y+5	; 0x05
    2bda:	0c 81       	ldd	r16, Y+4	; 0x04
    2bdc:	1b 81       	ldd	r17, Y+3	; 0x03
    2bde:	aa 81       	ldd	r26, Y+2	; 0x02
    2be0:	b9 81       	ldd	r27, Y+1	; 0x01
    2be2:	ce 0f       	add	r28, r30
    2be4:	d1 1d       	adc	r29, r1
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	f8 94       	cli
    2bea:	de bf       	out	0x3e, r29	; 62
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	cd bf       	out	0x3d, r28	; 61
    2bf0:	ed 01       	movw	r28, r26
    2bf2:	08 95       	ret

00002bf4 <ltoa>:
    2bf4:	fa 01       	movw	r30, r20
    2bf6:	cf 93       	push	r28
    2bf8:	ff 93       	push	r31
    2bfa:	ef 93       	push	r30
    2bfc:	22 30       	cpi	r18, 0x02	; 2
    2bfe:	44 f1       	brlt	.+80     	; 0x2c50 <ltoa+0x5c>
    2c00:	25 32       	cpi	r18, 0x25	; 37
    2c02:	34 f5       	brge	.+76     	; 0x2c50 <ltoa+0x5c>
    2c04:	c2 2f       	mov	r28, r18
    2c06:	e8 94       	clt
    2c08:	ca 30       	cpi	r28, 0x0A	; 10
    2c0a:	49 f4       	brne	.+18     	; 0x2c1e <ltoa+0x2a>
    2c0c:	97 fb       	bst	r25, 7
    2c0e:	3e f4       	brtc	.+14     	; 0x2c1e <ltoa+0x2a>
    2c10:	90 95       	com	r25
    2c12:	80 95       	com	r24
    2c14:	70 95       	com	r23
    2c16:	61 95       	neg	r22
    2c18:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1e:	2c 2f       	mov	r18, r28
    2c20:	33 27       	eor	r19, r19
    2c22:	44 27       	eor	r20, r20
    2c24:	55 27       	eor	r21, r21
    2c26:	ff 93       	push	r31
    2c28:	ef 93       	push	r30
    2c2a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__udivmodsi4>
    2c2e:	ef 91       	pop	r30
    2c30:	ff 91       	pop	r31
    2c32:	60 5d       	subi	r22, 0xD0	; 208
    2c34:	6a 33       	cpi	r22, 0x3A	; 58
    2c36:	0c f0       	brlt	.+2      	; 0x2c3a <ltoa+0x46>
    2c38:	69 5d       	subi	r22, 0xD9	; 217
    2c3a:	61 93       	st	Z+, r22
    2c3c:	b9 01       	movw	r22, r18
    2c3e:	ca 01       	movw	r24, r20
    2c40:	60 50       	subi	r22, 0x00	; 0
    2c42:	70 40       	sbci	r23, 0x00	; 0
    2c44:	80 40       	sbci	r24, 0x00	; 0
    2c46:	90 40       	sbci	r25, 0x00	; 0
    2c48:	51 f7       	brne	.-44     	; 0x2c1e <ltoa+0x2a>
    2c4a:	16 f4       	brtc	.+4      	; 0x2c50 <ltoa+0x5c>
    2c4c:	cd e2       	ldi	r28, 0x2D	; 45
    2c4e:	c1 93       	st	Z+, r28
    2c50:	10 82       	st	Z, r1
    2c52:	8f 91       	pop	r24
    2c54:	9f 91       	pop	r25
    2c56:	cf 91       	pop	r28
    2c58:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <strrev>

00002c5c <strrev>:
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	fc 01       	movw	r30, r24
    2c60:	67 2f       	mov	r22, r23
    2c62:	71 91       	ld	r23, Z+
    2c64:	77 23       	and	r23, r23
    2c66:	e1 f7       	brne	.-8      	; 0x2c60 <strrev+0x4>
    2c68:	32 97       	sbiw	r30, 0x02	; 2
    2c6a:	04 c0       	rjmp	.+8      	; 0x2c74 <strrev+0x18>
    2c6c:	7c 91       	ld	r23, X
    2c6e:	6d 93       	st	X+, r22
    2c70:	70 83       	st	Z, r23
    2c72:	62 91       	ld	r22, -Z
    2c74:	ae 17       	cp	r26, r30
    2c76:	bf 07       	cpc	r27, r31
    2c78:	c8 f3       	brcs	.-14     	; 0x2c6c <strrev+0x10>
    2c7a:	08 95       	ret

00002c7c <__udivmodsi4>:
    2c7c:	a1 e2       	ldi	r26, 0x21	; 33
    2c7e:	1a 2e       	mov	r1, r26
    2c80:	aa 1b       	sub	r26, r26
    2c82:	bb 1b       	sub	r27, r27
    2c84:	fd 01       	movw	r30, r26
    2c86:	0d c0       	rjmp	.+26     	; 0x2ca2 <__udivmodsi4_ep>

00002c88 <__udivmodsi4_loop>:
    2c88:	aa 1f       	adc	r26, r26
    2c8a:	bb 1f       	adc	r27, r27
    2c8c:	ee 1f       	adc	r30, r30
    2c8e:	ff 1f       	adc	r31, r31
    2c90:	a2 17       	cp	r26, r18
    2c92:	b3 07       	cpc	r27, r19
    2c94:	e4 07       	cpc	r30, r20
    2c96:	f5 07       	cpc	r31, r21
    2c98:	20 f0       	brcs	.+8      	; 0x2ca2 <__udivmodsi4_ep>
    2c9a:	a2 1b       	sub	r26, r18
    2c9c:	b3 0b       	sbc	r27, r19
    2c9e:	e4 0b       	sbc	r30, r20
    2ca0:	f5 0b       	sbc	r31, r21

00002ca2 <__udivmodsi4_ep>:
    2ca2:	66 1f       	adc	r22, r22
    2ca4:	77 1f       	adc	r23, r23
    2ca6:	88 1f       	adc	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	1a 94       	dec	r1
    2cac:	69 f7       	brne	.-38     	; 0x2c88 <__udivmodsi4_loop>
    2cae:	60 95       	com	r22
    2cb0:	70 95       	com	r23
    2cb2:	80 95       	com	r24
    2cb4:	90 95       	com	r25
    2cb6:	9b 01       	movw	r18, r22
    2cb8:	ac 01       	movw	r20, r24
    2cba:	bd 01       	movw	r22, r26
    2cbc:	cf 01       	movw	r24, r30
    2cbe:	08 95       	ret

00002cc0 <_exit>:
    2cc0:	f8 94       	cli

00002cc2 <__stop_program>:
    2cc2:	ff cf       	rjmp	.-2      	; 0x2cc2 <__stop_program>
