
Flame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000390  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000067e  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
    DDRB&=~(1<<0);
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	8c 93       	st	X, r24
    DDRC|=(1<<0);
  82:	a4 e3       	ldi	r26, 0x34	; 52
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 e3       	ldi	r30, 0x34	; 52
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	8c 93       	st	X, r24
    DDRC|=(1<<1);
  90:	a4 e3       	ldi	r26, 0x34	; 52
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e4 e3       	ldi	r30, 0x34	; 52
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	8c 93       	st	X, r24
    DDRC|=(1<<2);
  9e:	a4 e3       	ldi	r26, 0x34	; 52
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e4 e3       	ldi	r30, 0x34	; 52
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	8c 93       	st	X, r24
    PORTC&=(1<<0);
  ac:	a5 e3       	ldi	r26, 0x35	; 53
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e5 e3       	ldi	r30, 0x35	; 53
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 70       	andi	r24, 0x01	; 1
  b8:	8c 93       	st	X, r24
    PORTC&=(1<<1);
  ba:	a5 e3       	ldi	r26, 0x35	; 53
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e5 e3       	ldi	r30, 0x35	; 53
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 70       	andi	r24, 0x02	; 2
  c6:	8c 93       	st	X, r24
    PORTC&=(1<<2);
  c8:	a5 e3       	ldi	r26, 0x35	; 53
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e5 e3       	ldi	r30, 0x35	; 53
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	84 70       	andi	r24, 0x04	; 4
  d4:	8c 93       	st	X, r24


    while(1)
    {
     if(PINB & (1<<PB0))
  d6:	e6 e3       	ldi	r30, 0x36	; 54
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 2f       	mov	r24, r24
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	81 70       	andi	r24, 0x01	; 1
  e2:	90 70       	andi	r25, 0x00	; 0
  e4:	88 23       	and	r24, r24
  e6:	b1 f0       	breq	.+44     	; 0x114 <main+0xa8>
		{
			PORTC &= (~(1<<PC0));
  e8:	a5 e3       	ldi	r26, 0x35	; 53
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e5 e3       	ldi	r30, 0x35	; 53
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	8c 93       	st	X, r24
			PORTC |= (1<<PC1);
  f6:	a5 e3       	ldi	r26, 0x35	; 53
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e5 e3       	ldi	r30, 0x35	; 53
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	8c 93       	st	X, r24
			PORTC |= (1<<PC2);
 104:	a5 e3       	ldi	r26, 0x35	; 53
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e5 e3       	ldi	r30, 0x35	; 53
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	8c 93       	st	X, r24
 112:	e1 cf       	rjmp	.-62     	; 0xd6 <main+0x6a>
		}
		else
            {
			PORTC &= (~(1<<PC0));
 114:	a5 e3       	ldi	r26, 0x35	; 53
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	e5 e3       	ldi	r30, 0x35	; 53
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	8c 93       	st	X, r24
			PORTC &= (~(1<<PC1));
 122:	a5 e3       	ldi	r26, 0x35	; 53
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e5 e3       	ldi	r30, 0x35	; 53
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	8c 93       	st	X, r24
			PORTC &= (~(1<<PC2));
 130:	a5 e3       	ldi	r26, 0x35	; 53
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e5 e3       	ldi	r30, 0x35	; 53
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	8c 93       	st	X, r24
 13e:	cb cf       	rjmp	.-106    	; 0xd6 <main+0x6a>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
