
ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000017f0  00001884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800070  00800070  00001894  2**0
                  ALLOC
  3 .stab         00000d38  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a87  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00003053  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000031b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00003342  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00005387  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00006488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000740c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000758c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000784e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000080dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__vector_1>
       8:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
uint16 arr[4] = { 97, 194, 291, 316 };
uint8 indx = 0;

void servo_INIT(void);

int main(void) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	6c 97       	sbiw	r28, 0x1c	; 28
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	CLEAR_BIT(DDRB, 2);
     cb2:	a7 e3       	ldi	r26, 0x37	; 55
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e7 e3       	ldi	r30, 0x37	; 55
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8b 7f       	andi	r24, 0xFB	; 251
     cbe:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB, 3);
     cc0:	a7 e3       	ldi	r26, 0x37	; 55
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e7 e3       	ldi	r30, 0x37	; 55
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	8c 93       	st	X, r24
	SET_BIT(DDRB, 0);
     cce:	a7 e3       	ldi	r26, 0x37	; 55
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e3       	ldi	r30, 0x37	; 55
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	8c 93       	st	X, r24
	SET_BIT(DDRC, 4);
     cdc:	a4 e3       	ldi	r26, 0x34	; 52
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e4 e3       	ldi	r30, 0x34	; 52
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	80 61       	ori	r24, 0x10	; 16
     ce8:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, 4);
     cea:	a5 e3       	ldi	r26, 0x35	; 53
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e5 e3       	ldi	r30, 0x35	; 53
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8f 7e       	andi	r24, 0xEF	; 239
     cf6:	8c 93       	st	X, r24
	SET_BIT(DDRC, 0);
     cf8:	a4 e3       	ldi	r26, 0x34	; 52
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e4 e3       	ldi	r30, 0x34	; 52
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	81 60       	ori	r24, 0x01	; 1
     d04:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, 0);
     d06:	a5 e3       	ldi	r26, 0x35	; 53
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e5 e3       	ldi	r30, 0x35	; 53
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8e 7f       	andi	r24, 0xFE	; 254
     d12:	8c 93       	st	X, r24
	SET_BIT(DDRC, 1);
     d14:	a4 e3       	ldi	r26, 0x34	; 52
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e4 e3       	ldi	r30, 0x34	; 52
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	82 60       	ori	r24, 0x02	; 2
     d20:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, 1);
     d22:	a5 e3       	ldi	r26, 0x35	; 53
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e5 e3       	ldi	r30, 0x35	; 53
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8d 7f       	andi	r24, 0xFD	; 253
     d2e:	8c 93       	st	X, r24
	SET_BIT(DDRC, 2);
     d30:	a4 e3       	ldi	r26, 0x34	; 52
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e4 e3       	ldi	r30, 0x34	; 52
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	84 60       	ori	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC, 2);
     d3e:	a5 e3       	ldi	r26, 0x35	; 53
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e5 e3       	ldi	r30, 0x35	; 53
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	8b 7f       	andi	r24, 0xFB	; 251
     d4a:	8c 93       	st	X, r24

	ultrasonic_init();
     d4c:	0e 94 66 08 	call	0x10cc	; 0x10cc <ultrasonic_init>
	INT0_Init();
     d50:	0e 94 4a 0b 	call	0x1694	; 0x1694 <INT0_Init>
	SET_BIT(DDRA, PA1);  // Configure pin PC0 in PORTC as output pin
     d54:	aa e3       	ldi	r26, 0x3A	; 58
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	ea e3       	ldi	r30, 0x3A	; 58
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	82 60       	ori	r24, 0x02	; 2
     d60:	8c 93       	st	X, r24
	CLEAR_BIT(PORTA, PA1); // Initialization Led is off at the beginning(Negative Logic)
     d62:	ab e3       	ldi	r26, 0x3B	; 59
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	eb e3       	ldi	r30, 0x3B	; 59
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	8d 7f       	andi	r24, 0xFD	; 253
     d6e:	8c 93       	st	X, r24
	DDRB &= ~(1 << PB1);
     d70:	a7 e3       	ldi	r26, 0x37	; 55
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e7 e3       	ldi	r30, 0x37	; 55
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8d 7f       	andi	r24, 0xFD	; 253
     d7c:	8c 93       	st	X, r24
	//FOR TIMER1
	servo_INIT();
     d7e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <servo_INIT>
	while (1) {
		if (BIT_IS_SET(PINB, 1)) {
     d82:	e6 e3       	ldi	r30, 0x36	; 54
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	82 70       	andi	r24, 0x02	; 2
     d8e:	90 70       	andi	r25, 0x00	; 0
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	39 f0       	breq	.+14     	; 0xda2 <main+0x104>
			OCR1A = 316;  //90 degree
     d94:	ea e4       	ldi	r30, 0x4A	; 74
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	8c e3       	ldi	r24, 0x3C	; 60
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24
     da0:	06 c0       	rjmp	.+12     	; 0xdae <main+0x110>
		} else {
			OCR1A = 97;   //0 degree
     da2:	ea e4       	ldi	r30, 0x4A	; 74
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	81 e6       	ldi	r24, 0x61	; 97
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	80 83       	st	Z, r24
		}
		if (BIT_IS_SET(PINB, 2)) {
     dae:	e6 e3       	ldi	r30, 0x36	; 54
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	84 70       	andi	r24, 0x04	; 4
     dba:	90 70       	andi	r25, 0x00	; 0
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	19 f0       	breq	.+6      	; 0xdc6 <main+0x128>
			ultrasonic_triger();
     dc0:	0e 94 99 08 	call	0x1132	; 0x1132 <ultrasonic_triger>
     dc4:	07 c0       	rjmp	.+14     	; 0xdd4 <main+0x136>
		} else {
			CLEAR_BIT(PORTA, 0);
     dc6:	ab e3       	ldi	r26, 0x3B	; 59
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	eb e3       	ldi	r30, 0x3B	; 59
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8e 7f       	andi	r24, 0xFE	; 254
     dd2:	8c 93       	st	X, r24
		}
		if (PINB & (1 << PB0)) {
     dd4:	e6 e3       	ldi	r30, 0x36	; 54
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	90 70       	andi	r25, 0x00	; 0
     de2:	88 23       	and	r24, r24
     de4:	29 f0       	breq	.+10     	; 0xdf0 <main+0x152>
			PORTC = 0b00000110;
     de6:	e5 e3       	ldi	r30, 0x35	; 53
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	86 e0       	ldi	r24, 0x06	; 6
     dec:	80 83       	st	Z, r24
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <main+0x158>
		} else {
			PORTC = 0x00;
     df0:	e5 e3       	ldi	r30, 0x35	; 53
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	10 82       	st	Z, r1
		}
		if (BIT_IS_SET(PINB, 3)) {
     df6:	e6 e3       	ldi	r30, 0x36	; 54
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	88 70       	andi	r24, 0x08	; 8
     e02:	90 70       	andi	r25, 0x00	; 0
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	09 f4       	brne	.+2      	; 0xe0a <main+0x16c>
     e08:	bc cf       	rjmp	.-136    	; 0xd82 <main+0xe4>
			SET_BIT(PORTC, 4);
     e0a:	a5 e3       	ldi	r26, 0x35	; 53
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e3       	ldi	r30, 0x35	; 53
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 61       	ori	r24, 0x10	; 16
     e16:	8c 93       	st	X, r24
			for (indx = 0; indx < 4; indx++) {
     e18:	10 92 7b 00 	sts	0x007B, r1
     e1c:	87 c0       	rjmp	.+270    	; 0xf2c <main+0x28e>
				OCR1A = arr[indx];
     e1e:	aa e4       	ldi	r26, 0x4A	; 74
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	80 91 7b 00 	lds	r24, 0x007B
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	fc 01       	movw	r30, r24
     e30:	e8 59       	subi	r30, 0x98	; 152
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	11 96       	adiw	r26, 0x01	; 1
     e3a:	9c 93       	st	X, r25
     e3c:	8e 93       	st	-X, r24
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	aa ef       	ldi	r26, 0xFA	; 250
     e44:	b4 e4       	ldi	r27, 0x44	; 68
     e46:	89 8f       	std	Y+25, r24	; 0x19
     e48:	9a 8f       	std	Y+26, r25	; 0x1a
     e4a:	ab 8f       	std	Y+27, r26	; 0x1b
     e4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4e:	69 8d       	ldd	r22, Y+25	; 0x19
     e50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	4a ef       	ldi	r20, 0xFA	; 250
     e5c:	54 e4       	ldi	r21, 0x44	; 68
     e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	8d 8b       	std	Y+21, r24	; 0x15
     e68:	9e 8b       	std	Y+22, r25	; 0x16
     e6a:	af 8b       	std	Y+23, r26	; 0x17
     e6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e6e:	6d 89       	ldd	r22, Y+21	; 0x15
     e70:	7e 89       	ldd	r23, Y+22	; 0x16
     e72:	8f 89       	ldd	r24, Y+23	; 0x17
     e74:	98 8d       	ldd	r25, Y+24	; 0x18
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e8       	ldi	r20, 0x80	; 128
     e7c:	5f e3       	ldi	r21, 0x3F	; 63
     e7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e82:	88 23       	and	r24, r24
     e84:	2c f4       	brge	.+10     	; 0xe90 <main+0x1f2>
		__ticks = 1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	9c 8b       	std	Y+20, r25	; 0x14
     e8c:	8b 8b       	std	Y+19, r24	; 0x13
     e8e:	3f c0       	rjmp	.+126    	; 0xf0e <main+0x270>
	else if (__tmp > 65535)
     e90:	6d 89       	ldd	r22, Y+21	; 0x15
     e92:	7e 89       	ldd	r23, Y+22	; 0x16
     e94:	8f 89       	ldd	r24, Y+23	; 0x17
     e96:	98 8d       	ldd	r25, Y+24	; 0x18
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	3f ef       	ldi	r19, 0xFF	; 255
     e9c:	4f e7       	ldi	r20, 0x7F	; 127
     e9e:	57 e4       	ldi	r21, 0x47	; 71
     ea0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ea4:	18 16       	cp	r1, r24
     ea6:	4c f5       	brge	.+82     	; 0xefa <main+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea8:	69 8d       	ldd	r22, Y+25	; 0x19
     eaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e2       	ldi	r20, 0x20	; 32
     eb6:	51 e4       	ldi	r21, 0x41	; 65
     eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9c 8b       	std	Y+20, r25	; 0x14
     ece:	8b 8b       	std	Y+19, r24	; 0x13
     ed0:	0f c0       	rjmp	.+30     	; 0xef0 <main+0x252>
     ed2:	88 ec       	ldi	r24, 0xC8	; 200
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9a 8b       	std	Y+18, r25	; 0x12
     ed8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eda:	89 89       	ldd	r24, Y+17	; 0x11
     edc:	9a 89       	ldd	r25, Y+18	; 0x12
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <main+0x240>
     ee2:	9a 8b       	std	Y+18, r25	; 0x12
     ee4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee6:	8b 89       	ldd	r24, Y+19	; 0x13
     ee8:	9c 89       	ldd	r25, Y+20	; 0x14
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	9c 8b       	std	Y+20, r25	; 0x14
     eee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef0:	8b 89       	ldd	r24, Y+19	; 0x13
     ef2:	9c 89       	ldd	r25, Y+20	; 0x14
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	69 f7       	brne	.-38     	; 0xed2 <main+0x234>
     ef8:	14 c0       	rjmp	.+40     	; 0xf22 <main+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efa:	6d 89       	ldd	r22, Y+21	; 0x15
     efc:	7e 89       	ldd	r23, Y+22	; 0x16
     efe:	8f 89       	ldd	r24, Y+23	; 0x17
     f00:	98 8d       	ldd	r25, Y+24	; 0x18
     f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	9c 8b       	std	Y+20, r25	; 0x14
     f0c:	8b 8b       	std	Y+19, r24	; 0x13
     f0e:	8b 89       	ldd	r24, Y+19	; 0x13
     f10:	9c 89       	ldd	r25, Y+20	; 0x14
     f12:	98 8b       	std	Y+16, r25	; 0x10
     f14:	8f 87       	std	Y+15, r24	; 0x0f
     f16:	8f 85       	ldd	r24, Y+15	; 0x0f
     f18:	98 89       	ldd	r25, Y+16	; 0x10
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <main+0x27c>
     f1e:	98 8b       	std	Y+16, r25	; 0x10
     f20:	8f 87       	std	Y+15, r24	; 0x0f
		} else {
			PORTC = 0x00;
		}
		if (BIT_IS_SET(PINB, 3)) {
			SET_BIT(PORTC, 4);
			for (indx = 0; indx < 4; indx++) {
     f22:	80 91 7b 00 	lds	r24, 0x007B
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	80 93 7b 00 	sts	0x007B, r24
     f2c:	80 91 7b 00 	lds	r24, 0x007B
     f30:	84 30       	cpi	r24, 0x04	; 4
     f32:	08 f4       	brcc	.+2      	; 0xf36 <main+0x298>
     f34:	74 cf       	rjmp	.-280    	; 0xe1e <main+0x180>
				OCR1A = arr[indx];
				_delay_ms(2000);
			}
			CLEAR_BIT(PORTC, 4);
     f36:	a5 e3       	ldi	r26, 0x35	; 53
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e5 e3       	ldi	r30, 0x35	; 53
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8f 7e       	andi	r24, 0xEF	; 239
     f42:	8c 93       	st	X, r24
			SET_BIT(PORTC, 1);
     f44:	a5 e3       	ldi	r26, 0x35	; 53
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e5 e3       	ldi	r30, 0x35	; 53
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	82 60       	ori	r24, 0x02	; 2
     f50:	8c 93       	st	X, r24
			SET_BIT(PORTC, 2);
     f52:	a5 e3       	ldi	r26, 0x35	; 53
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e5 e3       	ldi	r30, 0x35	; 53
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	84 60       	ori	r24, 0x04	; 4
     f5e:	8c 93       	st	X, r24
			for (indx = 0; indx < 4; indx++) {
     f60:	10 92 7b 00 	sts	0x007B, r1
     f64:	87 c0       	rjmp	.+270    	; 0x1074 <main+0x3d6>
				OCR1A = arr[indx];
     f66:	aa e4       	ldi	r26, 0x4A	; 74
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	80 91 7b 00 	lds	r24, 0x007B
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	fc 01       	movw	r30, r24
     f78:	e8 59       	subi	r30, 0x98	; 152
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	11 96       	adiw	r26, 0x01	; 1
     f82:	9c 93       	st	X, r25
     f84:	8e 93       	st	-X, r24
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	aa ef       	ldi	r26, 0xFA	; 250
     f8c:	b4 e4       	ldi	r27, 0x44	; 68
     f8e:	8b 87       	std	Y+11, r24	; 0x0b
     f90:	9c 87       	std	Y+12, r25	; 0x0c
     f92:	ad 87       	std	Y+13, r26	; 0x0d
     f94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f96:	6b 85       	ldd	r22, Y+11	; 0x0b
     f98:	7c 85       	ldd	r23, Y+12	; 0x0c
     f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	4a ef       	ldi	r20, 0xFA	; 250
     fa4:	54 e4       	ldi	r21, 0x44	; 68
     fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	8f 83       	std	Y+7, r24	; 0x07
     fb0:	98 87       	std	Y+8, r25	; 0x08
     fb2:	a9 87       	std	Y+9, r26	; 0x09
     fb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fb6:	6f 81       	ldd	r22, Y+7	; 0x07
     fb8:	78 85       	ldd	r23, Y+8	; 0x08
     fba:	89 85       	ldd	r24, Y+9	; 0x09
     fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e8       	ldi	r20, 0x80	; 128
     fc4:	5f e3       	ldi	r21, 0x3F	; 63
     fc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fca:	88 23       	and	r24, r24
     fcc:	2c f4       	brge	.+10     	; 0xfd8 <main+0x33a>
		__ticks = 1;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	9e 83       	std	Y+6, r25	; 0x06
     fd4:	8d 83       	std	Y+5, r24	; 0x05
     fd6:	3f c0       	rjmp	.+126    	; 0x1056 <main+0x3b8>
	else if (__tmp > 65535)
     fd8:	6f 81       	ldd	r22, Y+7	; 0x07
     fda:	78 85       	ldd	r23, Y+8	; 0x08
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	3f ef       	ldi	r19, 0xFF	; 255
     fe4:	4f e7       	ldi	r20, 0x7F	; 127
     fe6:	57 e4       	ldi	r21, 0x47	; 71
     fe8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fec:	18 16       	cp	r1, r24
     fee:	4c f5       	brge	.+82     	; 0x1042 <main+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e2       	ldi	r20, 0x20	; 32
     ffe:	51 e4       	ldi	r21, 0x41	; 65
    1000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	bc 01       	movw	r22, r24
    100a:	cd 01       	movw	r24, r26
    100c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	9e 83       	std	Y+6, r25	; 0x06
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	0f c0       	rjmp	.+30     	; 0x1038 <main+0x39a>
    101a:	88 ec       	ldi	r24, 0xC8	; 200
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	9c 83       	std	Y+4, r25	; 0x04
    1020:	8b 83       	std	Y+3, r24	; 0x03
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	9c 81       	ldd	r25, Y+4	; 0x04
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <main+0x388>
    102a:	9c 83       	std	Y+4, r25	; 0x04
    102c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	9e 83       	std	Y+6, r25	; 0x06
    1036:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	69 f7       	brne	.-38     	; 0x101a <main+0x37c>
    1040:	14 c0       	rjmp	.+40     	; 0x106a <main+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1042:	6f 81       	ldd	r22, Y+7	; 0x07
    1044:	78 85       	ldd	r23, Y+8	; 0x08
    1046:	89 85       	ldd	r24, Y+9	; 0x09
    1048:	9a 85       	ldd	r25, Y+10	; 0x0a
    104a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	9e 83       	std	Y+6, r25	; 0x06
    1054:	8d 83       	std	Y+5, r24	; 0x05
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	9a 81       	ldd	r25, Y+2	; 0x02
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <main+0x3c4>
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2000);
			}
			CLEAR_BIT(PORTC, 4);
			SET_BIT(PORTC, 1);
			SET_BIT(PORTC, 2);
			for (indx = 0; indx < 4; indx++) {
    106a:	80 91 7b 00 	lds	r24, 0x007B
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	80 93 7b 00 	sts	0x007B, r24
    1074:	80 91 7b 00 	lds	r24, 0x007B
    1078:	84 30       	cpi	r24, 0x04	; 4
    107a:	08 f4       	brcc	.+2      	; 0x107e <main+0x3e0>
    107c:	74 cf       	rjmp	.-280    	; 0xf66 <main+0x2c8>
				OCR1A = arr[indx];
				_delay_ms(2000);
			}
			CLEAR_BIT(PORTC, 1);
    107e:	a5 e3       	ldi	r26, 0x35	; 53
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e3       	ldi	r30, 0x35	; 53
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	8d 7f       	andi	r24, 0xFD	; 253
    108a:	8c 93       	st	X, r24
			CLEAR_BIT(PORTC, 2);
    108c:	a5 e3       	ldi	r26, 0x35	; 53
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e5 e3       	ldi	r30, 0x35	; 53
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8b 7f       	andi	r24, 0xFB	; 251
    1098:	8c 93       	st	X, r24
    109a:	73 ce       	rjmp	.-794    	; 0xd82 <main+0xe4>

0000109c <timer0_init>:

	}
	return 0;
}

void timer0_init() {
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (1 << CS00); // initialising the timer with no prescaling
    10a4:	a3 e5       	ldi	r26, 0x53	; 83
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e3 e5       	ldi	r30, 0x53	; 83
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	8c 93       	st	X, r24
	TCNT0 = 0; // initialize timer
    10b2:	e2 e5       	ldi	r30, 0x52	; 82
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	10 82       	st	Z, r1
	TIMSK |= (1 << TOIE0);
    10b8:	a9 e5       	ldi	r26, 0x59	; 89
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e9 e5       	ldi	r30, 0x59	; 89
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	81 60       	ori	r24, 0x01	; 1
    10c4:	8c 93       	st	X, r24
}
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <ultrasonic_init>:

void ultrasonic_init(void) {
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62

	sei();
    10d4:	78 94       	sei
	Buzzer_DDR = 0b00000001;
    10d6:	ea e3       	ldi	r30, 0x3A	; 58
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 83       	st	Z, r24
	TRIGER_DDR |= (1 << TRIGER);
    10de:	a1 e3       	ldi	r26, 0x31	; 49
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e1 e3       	ldi	r30, 0x31	; 49
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	81 60       	ori	r24, 0x01	; 1
    10ea:	8c 93       	st	X, r24
	ECHO_DDR &= ~(1 << ECHO);
    10ec:	a1 e3       	ldi	r26, 0x31	; 49
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e1 e3       	ldi	r30, 0x31	; 49
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	87 7f       	andi	r24, 0xF7	; 247
    10f8:	8c 93       	st	X, r24
	//ECHO_PULLUP |= (1 << ECHO);
	enable_ex_interrupt();
    10fa:	0e 94 84 08 	call	0x1108	; 0x1108 <enable_ex_interrupt>
	timer0_init();
    10fe:	0e 94 4e 08 	call	0x109c	; 0x109c <timer0_init>
}
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <enable_ex_interrupt>:

void enable_ex_interrupt(void) {
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62

	MCUCR |= (1 << ISC10);		// Trigger INT1 on any logic change.
    1110:	a5 e5       	ldi	r26, 0x55	; 85
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e5 e5       	ldi	r30, 0x55	; 85
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	84 60       	ori	r24, 0x04	; 4
    111c:	8c 93       	st	X, r24
	GICR |= (1 << INT1);			// Enable INT1 interrupts.
    111e:	ab e5       	ldi	r26, 0x5B	; 91
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	eb e5       	ldi	r30, 0x5B	; 91
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 68       	ori	r24, 0x80	; 128
    112a:	8c 93       	st	X, r24

	return;
}
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <ultrasonic_triger>:

void ultrasonic_triger(void) {
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	68 97       	sbiw	r28, 0x18	; 24
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
	if (!sensor_working) {
    1146:	80 91 70 00 	lds	r24, 0x0070
    114a:	88 23       	and	r24, r24
    114c:	09 f0       	breq	.+2      	; 0x1150 <ultrasonic_triger+0x1e>
    114e:	cf c0       	rjmp	.+414    	; 0x12ee <ultrasonic_triger+0x1bc>
		TRIGER_PORT |= (1 << TRIGER);
    1150:	a2 e3       	ldi	r26, 0x32	; 50
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e2 e3       	ldi	r30, 0x32	; 50
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	81 60       	ori	r24, 0x01	; 1
    115c:	8c 93       	st	X, r24
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a0 e2       	ldi	r26, 0x20	; 32
    1164:	b1 e4       	ldi	r27, 0x41	; 65
    1166:	8d 8b       	std	Y+21, r24	; 0x15
    1168:	9e 8b       	std	Y+22, r25	; 0x16
    116a:	af 8b       	std	Y+23, r26	; 0x17
    116c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    116e:	6d 89       	ldd	r22, Y+21	; 0x15
    1170:	7e 89       	ldd	r23, Y+22	; 0x16
    1172:	8f 89       	ldd	r24, Y+23	; 0x17
    1174:	98 8d       	ldd	r25, Y+24	; 0x18
    1176:	2b ea       	ldi	r18, 0xAB	; 171
    1178:	3a ea       	ldi	r19, 0xAA	; 170
    117a:	4a e2       	ldi	r20, 0x2A	; 42
    117c:	50 e4       	ldi	r21, 0x40	; 64
    117e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	89 8b       	std	Y+17, r24	; 0x11
    1188:	9a 8b       	std	Y+18, r25	; 0x12
    118a:	ab 8b       	std	Y+19, r26	; 0x13
    118c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    118e:	69 89       	ldd	r22, Y+17	; 0x11
    1190:	7a 89       	ldd	r23, Y+18	; 0x12
    1192:	8b 89       	ldd	r24, Y+19	; 0x13
    1194:	9c 89       	ldd	r25, Y+20	; 0x14
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e8       	ldi	r20, 0x80	; 128
    119c:	5f e3       	ldi	r21, 0x3F	; 63
    119e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11a2:	88 23       	and	r24, r24
    11a4:	1c f4       	brge	.+6      	; 0x11ac <ultrasonic_triger+0x7a>
		__ticks = 1;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	88 8b       	std	Y+16, r24	; 0x10
    11aa:	91 c0       	rjmp	.+290    	; 0x12ce <ultrasonic_triger+0x19c>
	else if (__tmp > 255)
    11ac:	69 89       	ldd	r22, Y+17	; 0x11
    11ae:	7a 89       	ldd	r23, Y+18	; 0x12
    11b0:	8b 89       	ldd	r24, Y+19	; 0x13
    11b2:	9c 89       	ldd	r25, Y+20	; 0x14
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	4f e7       	ldi	r20, 0x7F	; 127
    11ba:	53 e4       	ldi	r21, 0x43	; 67
    11bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11c0:	18 16       	cp	r1, r24
    11c2:	0c f0       	brlt	.+2      	; 0x11c6 <ultrasonic_triger+0x94>
    11c4:	7b c0       	rjmp	.+246    	; 0x12bc <ultrasonic_triger+0x18a>
	{
		_delay_ms(__us / 1000.0);
    11c6:	6d 89       	ldd	r22, Y+21	; 0x15
    11c8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ca:	8f 89       	ldd	r24, Y+23	; 0x17
    11cc:	98 8d       	ldd	r25, Y+24	; 0x18
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	4a e7       	ldi	r20, 0x7A	; 122
    11d4:	54 e4       	ldi	r21, 0x44	; 68
    11d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	8c 87       	std	Y+12, r24	; 0x0c
    11e0:	9d 87       	std	Y+13, r25	; 0x0d
    11e2:	ae 87       	std	Y+14, r26	; 0x0e
    11e4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    11e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    11ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    11ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	4a ef       	ldi	r20, 0xFA	; 250
    11f4:	54 e4       	ldi	r21, 0x44	; 68
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	88 87       	std	Y+8, r24	; 0x08
    1200:	99 87       	std	Y+9, r25	; 0x09
    1202:	aa 87       	std	Y+10, r26	; 0x0a
    1204:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1206:	68 85       	ldd	r22, Y+8	; 0x08
    1208:	79 85       	ldd	r23, Y+9	; 0x09
    120a:	8a 85       	ldd	r24, Y+10	; 0x0a
    120c:	9b 85       	ldd	r25, Y+11	; 0x0b
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e8       	ldi	r20, 0x80	; 128
    1214:	5f e3       	ldi	r21, 0x3F	; 63
    1216:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    121a:	88 23       	and	r24, r24
    121c:	2c f4       	brge	.+10     	; 0x1228 <ultrasonic_triger+0xf6>
		__ticks = 1;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	9f 83       	std	Y+7, r25	; 0x07
    1224:	8e 83       	std	Y+6, r24	; 0x06
    1226:	3f c0       	rjmp	.+126    	; 0x12a6 <ultrasonic_triger+0x174>
	else if (__tmp > 65535)
    1228:	68 85       	ldd	r22, Y+8	; 0x08
    122a:	79 85       	ldd	r23, Y+9	; 0x09
    122c:	8a 85       	ldd	r24, Y+10	; 0x0a
    122e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	3f ef       	ldi	r19, 0xFF	; 255
    1234:	4f e7       	ldi	r20, 0x7F	; 127
    1236:	57 e4       	ldi	r21, 0x47	; 71
    1238:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    123c:	18 16       	cp	r1, r24
    123e:	4c f5       	brge	.+82     	; 0x1292 <ultrasonic_triger+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1240:	6c 85       	ldd	r22, Y+12	; 0x0c
    1242:	7d 85       	ldd	r23, Y+13	; 0x0d
    1244:	8e 85       	ldd	r24, Y+14	; 0x0e
    1246:	9f 85       	ldd	r25, Y+15	; 0x0f
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e2       	ldi	r20, 0x20	; 32
    124e:	51 e4       	ldi	r21, 0x41	; 65
    1250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	bc 01       	movw	r22, r24
    125a:	cd 01       	movw	r24, r26
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	9f 83       	std	Y+7, r25	; 0x07
    1266:	8e 83       	std	Y+6, r24	; 0x06
    1268:	0f c0       	rjmp	.+30     	; 0x1288 <ultrasonic_triger+0x156>
    126a:	88 ec       	ldi	r24, 0xC8	; 200
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9d 83       	std	Y+5, r25	; 0x05
    1270:	8c 83       	std	Y+4, r24	; 0x04
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <ultrasonic_triger+0x144>
    127a:	9d 83       	std	Y+5, r25	; 0x05
    127c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127e:	8e 81       	ldd	r24, Y+6	; 0x06
    1280:	9f 81       	ldd	r25, Y+7	; 0x07
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	9f 83       	std	Y+7, r25	; 0x07
    1286:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1288:	8e 81       	ldd	r24, Y+6	; 0x06
    128a:	9f 81       	ldd	r25, Y+7	; 0x07
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	69 f7       	brne	.-38     	; 0x126a <ultrasonic_triger+0x138>
    1290:	24 c0       	rjmp	.+72     	; 0x12da <ultrasonic_triger+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1292:	68 85       	ldd	r22, Y+8	; 0x08
    1294:	79 85       	ldd	r23, Y+9	; 0x09
    1296:	8a 85       	ldd	r24, Y+10	; 0x0a
    1298:	9b 85       	ldd	r25, Y+11	; 0x0b
    129a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	9f 83       	std	Y+7, r25	; 0x07
    12a4:	8e 83       	std	Y+6, r24	; 0x06
    12a6:	8e 81       	ldd	r24, Y+6	; 0x06
    12a8:	9f 81       	ldd	r25, Y+7	; 0x07
    12aa:	9b 83       	std	Y+3, r25	; 0x03
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	9b 81       	ldd	r25, Y+3	; 0x03
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <ultrasonic_triger+0x180>
    12b6:	9b 83       	std	Y+3, r25	; 0x03
    12b8:	8a 83       	std	Y+2, r24	; 0x02
    12ba:	0f c0       	rjmp	.+30     	; 0x12da <ultrasonic_triger+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12bc:	69 89       	ldd	r22, Y+17	; 0x11
    12be:	7a 89       	ldd	r23, Y+18	; 0x12
    12c0:	8b 89       	ldd	r24, Y+19	; 0x13
    12c2:	9c 89       	ldd	r25, Y+20	; 0x14
    12c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	88 8b       	std	Y+16, r24	; 0x10
    12ce:	88 89       	ldd	r24, Y+16	; 0x10
    12d0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	8a 95       	dec	r24
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <ultrasonic_triger+0x1a2>
    12d8:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		TRIGER_PORT &= ~(1 << TRIGER);
    12da:	a2 e3       	ldi	r26, 0x32	; 50
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e2 e3       	ldi	r30, 0x32	; 50
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8e 7f       	andi	r24, 0xFE	; 254
    12e6:	8c 93       	st	X, r24
		sensor_working = 1;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 93 70 00 	sts	0x0070, r24
	}
}
    12ee:	68 96       	adiw	r28, 0x18	; 24
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <__vector_2>:

ISR(INT1_vect) {
    1300:	1f 92       	push	r1
    1302:	0f 92       	push	r0
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	0f 92       	push	r0
    1308:	11 24       	eor	r1, r1
    130a:	2f 93       	push	r18
    130c:	3f 93       	push	r19
    130e:	4f 93       	push	r20
    1310:	5f 93       	push	r21
    1312:	6f 93       	push	r22
    1314:	7f 93       	push	r23
    1316:	8f 93       	push	r24
    1318:	9f 93       	push	r25
    131a:	af 93       	push	r26
    131c:	bf 93       	push	r27
    131e:	ef 93       	push	r30
    1320:	ff 93       	push	r31
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	2e 97       	sbiw	r28, 0x0e	; 14
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	cd bf       	out	0x3d, r28	; 61
	if (sensor_working == 1) {
    1330:	80 91 70 00 	lds	r24, 0x0070
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	09 f0       	breq	.+2      	; 0x133a <__vector_2+0x3a>
    1338:	e0 c0       	rjmp	.+448    	; 0x14fa <__vector_2+0x1fa>
		if (rising_edge == 0) {
    133a:	80 91 71 00 	lds	r24, 0x0071
    133e:	88 23       	and	r24, r24
    1340:	79 f4       	brne	.+30     	; 0x1360 <__vector_2+0x60>
			TCNT0 = 0x00;
    1342:	e2 e5       	ldi	r30, 0x52	; 82
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	10 82       	st	Z, r1
			rising_edge = 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	80 93 71 00 	sts	0x0071, r24
			timer_counter = 0;
    134e:	10 92 72 00 	sts	0x0072, r1
    1352:	10 92 73 00 	sts	0x0073, r1
    1356:	10 92 74 00 	sts	0x0074, r1
    135a:	10 92 75 00 	sts	0x0075, r1
    135e:	cd c0       	rjmp	.+410    	; 0x14fa <__vector_2+0x1fa>
		} else {
			distance = (timer_counter * 256 + TCNT0) / 446;
    1360:	80 91 72 00 	lds	r24, 0x0072
    1364:	90 91 73 00 	lds	r25, 0x0073
    1368:	a0 91 74 00 	lds	r26, 0x0074
    136c:	b0 91 75 00 	lds	r27, 0x0075
    1370:	22 27       	eor	r18, r18
    1372:	38 2f       	mov	r19, r24
    1374:	49 2f       	mov	r20, r25
    1376:	5a 2f       	mov	r21, r26
    1378:	e2 e5       	ldi	r30, 0x52	; 82
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a0 e0       	ldi	r26, 0x00	; 0
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	82 0f       	add	r24, r18
    1388:	93 1f       	adc	r25, r19
    138a:	a4 1f       	adc	r26, r20
    138c:	b5 1f       	adc	r27, r21
    138e:	2e eb       	ldi	r18, 0xBE	; 190
    1390:	31 e0       	ldi	r19, 0x01	; 1
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	0e 94 9d 0b 	call	0x173a	; 0x173a <__udivmodsi4>
    139e:	da 01       	movw	r26, r20
    13a0:	c9 01       	movw	r24, r18
    13a2:	80 93 76 00 	sts	0x0076, r24
    13a6:	90 93 77 00 	sts	0x0077, r25
    13aa:	a0 93 78 00 	sts	0x0078, r26
    13ae:	b0 93 79 00 	sts	0x0079, r27
			// lcd_goto_xy(1,0);
			//	itoa(distance,distance_str,10);
			if (distance <= 20) {
    13b2:	80 91 76 00 	lds	r24, 0x0076
    13b6:	90 91 77 00 	lds	r25, 0x0077
    13ba:	a0 91 78 00 	lds	r26, 0x0078
    13be:	b0 91 79 00 	lds	r27, 0x0079
    13c2:	85 31       	cpi	r24, 0x15	; 21
    13c4:	91 05       	cpc	r25, r1
    13c6:	a1 05       	cpc	r26, r1
    13c8:	b1 05       	cpc	r27, r1
    13ca:	38 f4       	brcc	.+14     	; 0x13da <__vector_2+0xda>
				SET_BIT(Buzzer_port, Buzzer_pin);
    13cc:	ab e3       	ldi	r26, 0x3B	; 59
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	eb e3       	ldi	r30, 0x3B	; 59
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	81 60       	ori	r24, 0x01	; 1
    13d8:	8c 93       	st	X, r24
			}
			if (distance > 20) {
    13da:	80 91 76 00 	lds	r24, 0x0076
    13de:	90 91 77 00 	lds	r25, 0x0077
    13e2:	a0 91 78 00 	lds	r26, 0x0078
    13e6:	b0 91 79 00 	lds	r27, 0x0079
    13ea:	85 31       	cpi	r24, 0x15	; 21
    13ec:	91 05       	cpc	r25, r1
    13ee:	a1 05       	cpc	r26, r1
    13f0:	b1 05       	cpc	r27, r1
    13f2:	38 f0       	brcs	.+14     	; 0x1402 <__vector_2+0x102>
				CLEAR_BIT(Buzzer_port, Buzzer_pin);
    13f4:	ab e3       	ldi	r26, 0x3B	; 59
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	eb e3       	ldi	r30, 0x3B	; 59
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	8e 7f       	andi	r24, 0xFE	; 254
    1400:	8c 93       	st	X, r24
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a8 e4       	ldi	r26, 0x48	; 72
    1408:	b3 e4       	ldi	r27, 0x43	; 67
    140a:	8b 87       	std	Y+11, r24	; 0x0b
    140c:	9c 87       	std	Y+12, r25	; 0x0c
    140e:	ad 87       	std	Y+13, r26	; 0x0d
    1410:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1412:	6b 85       	ldd	r22, Y+11	; 0x0b
    1414:	7c 85       	ldd	r23, Y+12	; 0x0c
    1416:	8d 85       	ldd	r24, Y+13	; 0x0d
    1418:	9e 85       	ldd	r25, Y+14	; 0x0e
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	4a ef       	ldi	r20, 0xFA	; 250
    1420:	54 e4       	ldi	r21, 0x44	; 68
    1422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	8f 83       	std	Y+7, r24	; 0x07
    142c:	98 87       	std	Y+8, r25	; 0x08
    142e:	a9 87       	std	Y+9, r26	; 0x09
    1430:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1432:	6f 81       	ldd	r22, Y+7	; 0x07
    1434:	78 85       	ldd	r23, Y+8	; 0x08
    1436:	89 85       	ldd	r24, Y+9	; 0x09
    1438:	9a 85       	ldd	r25, Y+10	; 0x0a
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e8       	ldi	r20, 0x80	; 128
    1440:	5f e3       	ldi	r21, 0x3F	; 63
    1442:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1446:	88 23       	and	r24, r24
    1448:	2c f4       	brge	.+10     	; 0x1454 <__vector_2+0x154>
		__ticks = 1;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05
    1452:	3f c0       	rjmp	.+126    	; 0x14d2 <__vector_2+0x1d2>
	else if (__tmp > 65535)
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	3f ef       	ldi	r19, 0xFF	; 255
    1460:	4f e7       	ldi	r20, 0x7F	; 127
    1462:	57 e4       	ldi	r21, 0x47	; 71
    1464:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1468:	18 16       	cp	r1, r24
    146a:	4c f5       	brge	.+82     	; 0x14be <__vector_2+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146c:	6b 85       	ldd	r22, Y+11	; 0x0b
    146e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1470:	8d 85       	ldd	r24, Y+13	; 0x0d
    1472:	9e 85       	ldd	r25, Y+14	; 0x0e
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e2       	ldi	r20, 0x20	; 32
    147a:	51 e4       	ldi	r21, 0x41	; 65
    147c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	bc 01       	movw	r22, r24
    1486:	cd 01       	movw	r24, r26
    1488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05
    1494:	0f c0       	rjmp	.+30     	; 0x14b4 <__vector_2+0x1b4>
    1496:	88 ec       	ldi	r24, 0xC8	; 200
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	9c 83       	std	Y+4, r25	; 0x04
    149c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <__vector_2+0x1a2>
    14a6:	9c 83       	std	Y+4, r25	; 0x04
    14a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	69 f7       	brne	.-38     	; 0x1496 <__vector_2+0x196>
    14bc:	14 c0       	rjmp	.+40     	; 0x14e6 <__vector_2+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14be:	6f 81       	ldd	r22, Y+7	; 0x07
    14c0:	78 85       	ldd	r23, Y+8	; 0x08
    14c2:	89 85       	ldd	r24, Y+9	; 0x09
    14c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	9e 83       	std	Y+6, r25	; 0x06
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <__vector_2+0x1de>
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01

			}
			//strcat(distance_str, " cm ");
			//lcd_write_word(distance_str);
			_delay_ms(200);
			timer_counter = 0;
    14e6:	10 92 72 00 	sts	0x0072, r1
    14ea:	10 92 73 00 	sts	0x0073, r1
    14ee:	10 92 74 00 	sts	0x0074, r1
    14f2:	10 92 75 00 	sts	0x0075, r1
			rising_edge = 0;
    14f6:	10 92 71 00 	sts	0x0071, r1
		}
	}
}
    14fa:	2e 96       	adiw	r28, 0x0e	; 14
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	ff 91       	pop	r31
    1506:	ef 91       	pop	r30
    1508:	bf 91       	pop	r27
    150a:	af 91       	pop	r26
    150c:	9f 91       	pop	r25
    150e:	8f 91       	pop	r24
    1510:	7f 91       	pop	r23
    1512:	6f 91       	pop	r22
    1514:	5f 91       	pop	r21
    1516:	4f 91       	pop	r20
    1518:	3f 91       	pop	r19
    151a:	2f 91       	pop	r18
    151c:	0f 90       	pop	r0
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	0f 90       	pop	r0
    1522:	1f 90       	pop	r1
    1524:	18 95       	reti

00001526 <__vector_9>:

ISR(TIMER0_OVF_vect) {
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	2f 93       	push	r18
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	af 93       	push	r26
    1538:	bf 93       	push	r27
    153a:	ef 93       	push	r30
    153c:	ff 93       	push	r31
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
	timer_counter++;
    1546:	80 91 72 00 	lds	r24, 0x0072
    154a:	90 91 73 00 	lds	r25, 0x0073
    154e:	a0 91 74 00 	lds	r26, 0x0074
    1552:	b0 91 75 00 	lds	r27, 0x0075
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	a1 1d       	adc	r26, r1
    155a:	b1 1d       	adc	r27, r1
    155c:	80 93 72 00 	sts	0x0072, r24
    1560:	90 93 73 00 	sts	0x0073, r25
    1564:	a0 93 74 00 	sts	0x0074, r26
    1568:	b0 93 75 00 	sts	0x0075, r27
	if (timer_counter > 730) {
    156c:	80 91 72 00 	lds	r24, 0x0072
    1570:	90 91 73 00 	lds	r25, 0x0073
    1574:	a0 91 74 00 	lds	r26, 0x0074
    1578:	b0 91 75 00 	lds	r27, 0x0075
    157c:	8b 3d       	cpi	r24, 0xDB	; 219
    157e:	22 e0       	ldi	r18, 0x02	; 2
    1580:	92 07       	cpc	r25, r18
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	a2 07       	cpc	r26, r18
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	b2 07       	cpc	r27, r18
    158a:	78 f0       	brcs	.+30     	; 0x15aa <__vector_9+0x84>
		TCNT0 = 0x00;
    158c:	e2 e5       	ldi	r30, 0x52	; 82
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	10 82       	st	Z, r1
		sensor_working = 0;
    1592:	10 92 70 00 	sts	0x0070, r1
		rising_edge = 0;
    1596:	10 92 71 00 	sts	0x0071, r1
		timer_counter = 0;
    159a:	10 92 72 00 	sts	0x0072, r1
    159e:	10 92 73 00 	sts	0x0073, r1
    15a2:	10 92 74 00 	sts	0x0074, r1
    15a6:	10 92 75 00 	sts	0x0075, r1
	}
}
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	ff 91       	pop	r31
    15b0:	ef 91       	pop	r30
    15b2:	bf 91       	pop	r27
    15b4:	af 91       	pop	r26
    15b6:	9f 91       	pop	r25
    15b8:	8f 91       	pop	r24
    15ba:	2f 91       	pop	r18
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <__vector_1>:

/* External INT0 Interrupt Service Routine */
ISR(INT0_vect) {
    15c6:	1f 92       	push	r1
    15c8:	0f 92       	push	r0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	0f 92       	push	r0
    15ce:	11 24       	eor	r1, r1
    15d0:	8f 93       	push	r24
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	ef 93       	push	r30
    15d8:	ff 93       	push	r31
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62

	if (1 == STATE) {
    15e2:	80 91 7a 00 	lds	r24, 0x007A
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	31 f5       	brne	.+76     	; 0x1636 <__vector_1+0x70>
		SET_BIT(PORTA, 1);
    15ea:	ab e3       	ldi	r26, 0x3B	; 59
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	eb e3       	ldi	r30, 0x3B	; 59
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	82 60       	ori	r24, 0x02	; 2
    15f6:	8c 93       	st	X, r24
		SREG &= ~(1 << 7);
    15f8:	af e5       	ldi	r26, 0x5F	; 95
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	ef e5       	ldi	r30, 0x5F	; 95
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8f 77       	andi	r24, 0x7F	; 127
    1604:	8c 93       	st	X, r24
		MCUCR |= (1 << ISC01);
    1606:	a5 e5       	ldi	r26, 0x55	; 85
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e5 e5       	ldi	r30, 0x55	; 85
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	82 60       	ori	r24, 0x02	; 2
    1612:	8c 93       	st	X, r24
		MCUCR &= ~(1 << ISC00);
    1614:	a5 e5       	ldi	r26, 0x55	; 85
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e5 e5       	ldi	r30, 0x55	; 85
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	8e 7f       	andi	r24, 0xFE	; 254
    1620:	8c 93       	st	X, r24
		SREG |= (1 << 7);
    1622:	af e5       	ldi	r26, 0x5F	; 95
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ef e5       	ldi	r30, 0x5F	; 95
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	80 68       	ori	r24, 0x80	; 128
    162e:	8c 93       	st	X, r24
		STATE = 0;
    1630:	10 92 7a 00 	sts	0x007A, r1
    1634:	23 c0       	rjmp	.+70     	; 0x167c <__vector_1+0xb6>
	} else if (0 == STATE) {
    1636:	80 91 7a 00 	lds	r24, 0x007A
    163a:	88 23       	and	r24, r24
    163c:	f9 f4       	brne	.+62     	; 0x167c <__vector_1+0xb6>
		CLEAR_BIT(PORTA, 1);
    163e:	ab e3       	ldi	r26, 0x3B	; 59
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	eb e3       	ldi	r30, 0x3B	; 59
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8d 7f       	andi	r24, 0xFD	; 253
    164a:	8c 93       	st	X, r24
		STATE = 1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	80 93 7a 00 	sts	0x007A, r24
		SREG &= ~(1 << 7);
    1652:	af e5       	ldi	r26, 0x5F	; 95
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ef e5       	ldi	r30, 0x5F	; 95
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8f 77       	andi	r24, 0x7F	; 127
    165e:	8c 93       	st	X, r24
		MCUCR |= (1 << ISC01) | (1 << ISC00);
    1660:	a5 e5       	ldi	r26, 0x55	; 85
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e5 e5       	ldi	r30, 0x55	; 85
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	83 60       	ori	r24, 0x03	; 3
    166c:	8c 93       	st	X, r24
		SREG |= (1 << 7);
    166e:	af e5       	ldi	r26, 0x5F	; 95
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ef e5       	ldi	r30, 0x5F	; 95
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	80 68       	ori	r24, 0x80	; 128
    167a:	8c 93       	st	X, r24
	}

}
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	ff 91       	pop	r31
    1682:	ef 91       	pop	r30
    1684:	bf 91       	pop	r27
    1686:	af 91       	pop	r26
    1688:	8f 91       	pop	r24
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <INT0_Init>:

/* External INT0 enable and configuration function */
void INT0_Init(void) {
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
	SREG &= ~(1 << 7);                   // Disable interrupts by clearing I-bit
    169c:	af e5       	ldi	r26, 0x5F	; 95
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	ef e5       	ldi	r30, 0x5F	; 95
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8f 77       	andi	r24, 0x7F	; 127
    16a8:	8c 93       	st	X, r24
	DDRD &= (~(1 << PD2));               // Configure INT0/PD2 as input pin
    16aa:	a1 e3       	ldi	r26, 0x31	; 49
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e1 e3       	ldi	r30, 0x31	; 49
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8b 7f       	andi	r24, 0xFB	; 251
    16b6:	8c 93       	st	X, r24
	GICR |= (1 << INT0);                 // Enable external interrupt pin INT0
    16b8:	ab e5       	ldi	r26, 0x5B	; 91
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	eb e5       	ldi	r30, 0x5B	; 91
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	80 64       	ori	r24, 0x40	; 64
    16c4:	8c 93       	st	X, r24
	MCUCR |= (1 << ISC00) | (1 << ISC01);  // Trigger INT0 with the raising edge
    16c6:	a5 e5       	ldi	r26, 0x55	; 85
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e5 e5       	ldi	r30, 0x55	; 85
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	83 60       	ori	r24, 0x03	; 3
    16d2:	8c 93       	st	X, r24
	SREG |= (1 << 7);                    // Enable interrupts by setting I-bit
    16d4:	af e5       	ldi	r26, 0x5F	; 95
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	ef e5       	ldi	r30, 0x5F	; 95
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 68       	ori	r24, 0x80	; 128
    16e0:	8c 93       	st	X, r24
}
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <servo_INIT>:

void servo_INIT(void) {
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);   //NON Inverted PWM
    16f0:	af e4       	ldi	r26, 0x4F	; 79
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ef e4       	ldi	r30, 0x4F	; 79
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	82 6a       	ori	r24, 0xA2	; 162
    16fc:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS10); //PRESCALER=64 MODE 14(FAST PWM)
    16fe:	ae e4       	ldi	r26, 0x4E	; 78
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ee e4       	ldi	r30, 0x4E	; 78
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	8b 61       	ori	r24, 0x1B	; 27
    170a:	8c 93       	st	X, r24
	ICR1 = 4999;  //fPWM=50Hz
    170c:	e6 e4       	ldi	r30, 0x46	; 70
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	87 e8       	ldi	r24, 0x87	; 135
    1712:	93 e1       	ldi	r25, 0x13	; 19
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
	DDRD |= (1 << PD5);   //PWM Pins as Output
    1718:	a1 e3       	ldi	r26, 0x31	; 49
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e1 e3       	ldi	r30, 0x31	; 49
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 62       	ori	r24, 0x20	; 32
    1724:	8c 93       	st	X, r24
}
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <timer2_init>:

void timer2_init(void) {
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62

}
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <__udivmodsi4>:
    173a:	a1 e2       	ldi	r26, 0x21	; 33
    173c:	1a 2e       	mov	r1, r26
    173e:	aa 1b       	sub	r26, r26
    1740:	bb 1b       	sub	r27, r27
    1742:	fd 01       	movw	r30, r26
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <__udivmodsi4_ep>

00001746 <__udivmodsi4_loop>:
    1746:	aa 1f       	adc	r26, r26
    1748:	bb 1f       	adc	r27, r27
    174a:	ee 1f       	adc	r30, r30
    174c:	ff 1f       	adc	r31, r31
    174e:	a2 17       	cp	r26, r18
    1750:	b3 07       	cpc	r27, r19
    1752:	e4 07       	cpc	r30, r20
    1754:	f5 07       	cpc	r31, r21
    1756:	20 f0       	brcs	.+8      	; 0x1760 <__udivmodsi4_ep>
    1758:	a2 1b       	sub	r26, r18
    175a:	b3 0b       	sbc	r27, r19
    175c:	e4 0b       	sbc	r30, r20
    175e:	f5 0b       	sbc	r31, r21

00001760 <__udivmodsi4_ep>:
    1760:	66 1f       	adc	r22, r22
    1762:	77 1f       	adc	r23, r23
    1764:	88 1f       	adc	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	1a 94       	dec	r1
    176a:	69 f7       	brne	.-38     	; 0x1746 <__udivmodsi4_loop>
    176c:	60 95       	com	r22
    176e:	70 95       	com	r23
    1770:	80 95       	com	r24
    1772:	90 95       	com	r25
    1774:	9b 01       	movw	r18, r22
    1776:	ac 01       	movw	r20, r24
    1778:	bd 01       	movw	r22, r26
    177a:	cf 01       	movw	r24, r30
    177c:	08 95       	ret

0000177e <__prologue_saves__>:
    177e:	2f 92       	push	r2
    1780:	3f 92       	push	r3
    1782:	4f 92       	push	r4
    1784:	5f 92       	push	r5
    1786:	6f 92       	push	r6
    1788:	7f 92       	push	r7
    178a:	8f 92       	push	r8
    178c:	9f 92       	push	r9
    178e:	af 92       	push	r10
    1790:	bf 92       	push	r11
    1792:	cf 92       	push	r12
    1794:	df 92       	push	r13
    1796:	ef 92       	push	r14
    1798:	ff 92       	push	r15
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	ca 1b       	sub	r28, r26
    17a8:	db 0b       	sbc	r29, r27
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	09 94       	ijmp

000017b6 <__epilogue_restores__>:
    17b6:	2a 88       	ldd	r2, Y+18	; 0x12
    17b8:	39 88       	ldd	r3, Y+17	; 0x11
    17ba:	48 88       	ldd	r4, Y+16	; 0x10
    17bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    17be:	6e 84       	ldd	r6, Y+14	; 0x0e
    17c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    17c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    17c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    17c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    17c8:	b9 84       	ldd	r11, Y+9	; 0x09
    17ca:	c8 84       	ldd	r12, Y+8	; 0x08
    17cc:	df 80       	ldd	r13, Y+7	; 0x07
    17ce:	ee 80       	ldd	r14, Y+6	; 0x06
    17d0:	fd 80       	ldd	r15, Y+5	; 0x05
    17d2:	0c 81       	ldd	r16, Y+4	; 0x04
    17d4:	1b 81       	ldd	r17, Y+3	; 0x03
    17d6:	aa 81       	ldd	r26, Y+2	; 0x02
    17d8:	b9 81       	ldd	r27, Y+1	; 0x01
    17da:	ce 0f       	add	r28, r30
    17dc:	d1 1d       	adc	r29, r1
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	ed 01       	movw	r28, r26
    17ea:	08 95       	ret

000017ec <_exit>:
    17ec:	f8 94       	cli

000017ee <__stop_program>:
    17ee:	ff cf       	rjmp	.-2      	; 0x17ee <__stop_program>
