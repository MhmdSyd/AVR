
example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00002d5e  00002df2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010e  0080010e  00002e00  2**0
                  ALLOC
  3 .stab         00002cd0  00000000  00000000  00002e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010df  00000000  00000000  00005ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006baf  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006bc0  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000140  00000000  00000000  00006c00  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000bbc  00000000  00000000  00006d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000a7a  00000000  00000000  000078fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000651  00000000  00000000  00008376  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000042e  00000000  00000000  000089c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ee e5       	ldi	r30, 0x5E	; 94
      90:	fd e2       	ldi	r31, 0x2D	; 45
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ae 30       	cpi	r26, 0x0E	; 14
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	ae e0       	ldi	r26, 0x0E	; 14
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ac 31       	cpi	r26, 0x1C	; 28
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <main>
      b2:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <KeyPad_getPressedKey>:


/*
 * Function responsible for getting the pressed keypad key
 */
uint8 KeyPad_getPressedKey(void) {
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	00 d0       	rcall	.+0      	; 0xc0 <KeyPad_getPressedKey+0x6>
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62

	uint8 col,row;
		while(1)
		{
			for(col=0;col<N_col;col++) /* loop for columns */
      c4:	19 82       	std	Y+1, r1	; 0x01
      c6:	47 c0       	rjmp	.+142    	; 0x156 <KeyPad_getPressedKey+0x9c>
			{
				/*
				 * each time only one of the column pins will be output and
				 * the rest will be input pins include the row pins
				 */
				KEYPAD_DIR = (0b00010000<<col);
      c8:	89 81       	ldd	r24, Y+1	; 0x01
      ca:	28 2f       	mov	r18, r24
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	80 e1       	ldi	r24, 0x10	; 16
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	ac 01       	movw	r20, r24
      d4:	02 c0       	rjmp	.+4      	; 0xda <KeyPad_getPressedKey+0x20>
      d6:	44 0f       	add	r20, r20
      d8:	55 1f       	adc	r21, r21
      da:	2a 95       	dec	r18
      dc:	e2 f7       	brpl	.-8      	; 0xd6 <KeyPad_getPressedKey+0x1c>
      de:	9a 01       	movw	r18, r20
      e0:	8a e3       	ldi	r24, 0x3A	; 58
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18

				/*
				 * clear the output pin column in this trace and enable the internal
				 * pull up resistors for the rows pins
				 */
				KEYPAD_PORT = (~(0b00010000<<col));
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	28 2f       	mov	r18, r24
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	80 e1       	ldi	r24, 0x10	; 16
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <KeyPad_getPressedKey+0x3e>
      f4:	88 0f       	add	r24, r24
      f6:	99 1f       	adc	r25, r25
      f8:	2a 95       	dec	r18
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <KeyPad_getPressedKey+0x3a>
      fc:	28 2f       	mov	r18, r24
      fe:	8b e3       	ldi	r24, 0x3B	; 59
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	20 95       	com	r18
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
				for(row=0;row<N_row;row++) /* loop for rows */
     108:	1a 82       	std	Y+2, r1	; 0x02
     10a:	1f c0       	rjmp	.+62     	; 0x14a <KeyPad_getPressedKey+0x90>
				{
					if(BIT_IS_CLEAR(KEYPAD_PIN,row)) /* if the switch is press in this row */
     10c:	89 e3       	ldi	r24, 0x39	; 57
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	fc 01       	movw	r30, r24
     112:	80 81       	ld	r24, Z
     114:	88 2f       	mov	r24, r24
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	2a 81       	ldd	r18, Y+2	; 0x02
     11a:	22 2f       	mov	r18, r18
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	02 c0       	rjmp	.+4      	; 0x124 <KeyPad_getPressedKey+0x6a>
     120:	95 95       	asr	r25
     122:	87 95       	ror	r24
     124:	2a 95       	dec	r18
     126:	e2 f7       	brpl	.-8      	; 0x120 <KeyPad_getPressedKey+0x66>
     128:	81 70       	andi	r24, 0x01	; 1
     12a:	99 27       	eor	r25, r25
     12c:	89 2b       	or	r24, r25
     12e:	51 f4       	brne	.+20     	; 0x144 <KeyPad_getPressedKey+0x8a>
					{
						#if (N_col == 3)
							return KeyPad_4x3_ReturnASCII((row*N_col)+col+1);
						#elif (N_col == 4)
							return KeyPad_4x4_ReturnASCII((row*N_col)+col+1);
     130:	8a 81       	ldd	r24, Y+2	; 0x02
     132:	98 2f       	mov	r25, r24
     134:	99 0f       	add	r25, r25
     136:	99 0f       	add	r25, r25
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	89 0f       	add	r24, r25
     13c:	8f 5f       	subi	r24, 0xFF	; 255
     13e:	0e 94 b5 00 	call	0x16a	; 0x16a <KeyPad_4x4_ReturnASCII>
     142:	0e c0       	rjmp	.+28     	; 0x160 <KeyPad_getPressedKey+0xa6>
				for(row=0;row<N_row;row++) /* loop for rows */
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	8f 5f       	subi	r24, 0xFF	; 255
     148:	8a 83       	std	Y+2, r24	; 0x02
     14a:	8a 81       	ldd	r24, Y+2	; 0x02
     14c:	84 30       	cpi	r24, 0x04	; 4
     14e:	f0 f2       	brcs	.-68     	; 0x10c <KeyPad_getPressedKey+0x52>
			for(col=0;col<N_col;col++) /* loop for columns */
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	8f 5f       	subi	r24, 0xFF	; 255
     154:	89 83       	std	Y+1, r24	; 0x01
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	84 30       	cpi	r24, 0x04	; 4
     15a:	08 f4       	brcc	.+2      	; 0x15e <KeyPad_getPressedKey+0xa4>
     15c:	b5 cf       	rjmp	.-150    	; 0xc8 <KeyPad_getPressedKey+0xe>
     15e:	b2 cf       	rjmp	.-156    	; 0xc4 <KeyPad_getPressedKey+0xa>
						#endif
					}
				}
			}
		}
	}
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <KeyPad_4x4_ReturnASCII>:
		break;
	}
	return 0;
}
#elif(N_col ==4)
static uint8 KeyPad_4x4_ReturnASCII(uint8 num) {
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	0f 92       	push	r0
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	89 83       	std	Y+1, r24	; 0x01
	switch (num) {
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	88 2f       	mov	r24, r24
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	09 2e       	mov	r0, r25
     17e:	00 0c       	add	r0, r0
     180:	aa 0b       	sbc	r26, r26
     182:	bb 0b       	sbc	r27, r27
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	a1 09       	sbc	r26, r1
     188:	b1 09       	sbc	r27, r1
     18a:	80 31       	cpi	r24, 0x10	; 16
     18c:	91 05       	cpc	r25, r1
     18e:	a1 05       	cpc	r26, r1
     190:	b1 05       	cpc	r27, r1
     192:	28 f5       	brcc	.+74     	; 0x1de <KeyPad_4x4_ReturnASCII+0x74>
     194:	81 56       	subi	r24, 0x61	; 97
     196:	99 4e       	sbci	r25, 0xE9	; 233
     198:	fc 01       	movw	r30, r24
     19a:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__tablejump2__>
	case 1:		return '7';
     19e:	87 e3       	ldi	r24, 0x37	; 55
     1a0:	1f c0       	rjmp	.+62     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 2:		return '8';
     1a2:	88 e3       	ldi	r24, 0x38	; 56
     1a4:	1d c0       	rjmp	.+58     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 3:		return '9';
     1a6:	89 e3       	ldi	r24, 0x39	; 57
     1a8:	1b c0       	rjmp	.+54     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 4:		return '/';
     1aa:	8f e2       	ldi	r24, 0x2F	; 47
     1ac:	19 c0       	rjmp	.+50     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 5:		return '4';
     1ae:	84 e3       	ldi	r24, 0x34	; 52
     1b0:	17 c0       	rjmp	.+46     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 6:		return '5';
     1b2:	85 e3       	ldi	r24, 0x35	; 53
     1b4:	15 c0       	rjmp	.+42     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 7:		return '6';
     1b6:	86 e3       	ldi	r24, 0x36	; 54
     1b8:	13 c0       	rjmp	.+38     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 8:		return '*';
     1ba:	8a e2       	ldi	r24, 0x2A	; 42
     1bc:	11 c0       	rjmp	.+34     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 9:		return '1';
     1be:	81 e3       	ldi	r24, 0x31	; 49
     1c0:	0f c0       	rjmp	.+30     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 10:	return '2';
     1c2:	82 e3       	ldi	r24, 0x32	; 50
     1c4:	0d c0       	rjmp	.+26     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 11:	return '3';
     1c6:	83 e3       	ldi	r24, 0x33	; 51
     1c8:	0b c0       	rjmp	.+22     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 12:	return '-';
     1ca:	8d e2       	ldi	r24, 0x2D	; 45
     1cc:	09 c0       	rjmp	.+18     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 13:	return 8;
     1ce:	88 e0       	ldi	r24, 0x08	; 8
     1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 14:	return '0';
     1d2:	80 e3       	ldi	r24, 0x30	; 48
     1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 15:	return '=';
     1d6:	8d e3       	ldi	r24, 0x3D	; 61
     1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 16:	return '+';
     1da:	8b e2       	ldi	r24, 0x2B	; 43
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <KeyPad_4x4_ReturnASCII+0x76>
			break;
	default:	return '\0';
     1de:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return 0;
}
     1e0:	0f 90       	pop	r0
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <LCD_sendCommand>:
 *******************************************************************************/

/*
 * Function responsible for Send Order to LCD
 */
void LCD_sendCommand(uint8 command) {
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	cd 5c       	subi	r28, 0xCD	; 205
     1f6:	d1 09       	sbc	r29, r1
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	cd bf       	out	0x3d, r28	; 61
     202:	9e 01       	movw	r18, r28
     204:	2b 5a       	subi	r18, 0xAB	; 171
     206:	3f 4f       	sbci	r19, 0xFF	; 255
     208:	d9 01       	movw	r26, r18
     20a:	8c 93       	st	X, r24
	RS = CLEAR; /* tell LCD that data which will send now is command */
     20c:	82 e3       	ldi	r24, 0x32	; 50
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	fc 01       	movw	r30, r24
     212:	20 81       	ld	r18, Z
     214:	2f 7e       	andi	r18, 0xEF	; 239
     216:	dc 01       	movw	r26, r24
     218:	2c 93       	st	X, r18
	RW = CLEAR; /* select write Mode on LCD */
     21a:	82 e3       	ldi	r24, 0x32	; 50
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	fc 01       	movw	r30, r24
     220:	20 81       	ld	r18, Z
     222:	2f 7d       	andi	r18, 0xDF	; 223
     224:	dc 01       	movw	r26, r24
     226:	2c 93       	st	X, r18
     228:	9e 01       	movw	r18, r28
     22a:	29 5b       	subi	r18, 0xB9	; 185
     22c:	3f 4f       	sbci	r19, 0xFF	; 255
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	a0 e8       	ldi	r26, 0x80	; 128
     234:	bf e3       	ldi	r27, 0x3F	; 63
     236:	f9 01       	movw	r30, r18
     238:	80 83       	st	Z, r24
     23a:	91 83       	std	Z+1, r25	; 0x01
     23c:	a2 83       	std	Z+2, r26	; 0x02
     23e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     240:	8e 01       	movw	r16, r28
     242:	05 5b       	subi	r16, 0xB5	; 181
     244:	1f 4f       	sbci	r17, 0xFF	; 255
     246:	ce 01       	movw	r24, r28
     248:	89 5b       	subi	r24, 0xB9	; 185
     24a:	9f 4f       	sbci	r25, 0xFF	; 255
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e4       	ldi	r19, 0x40	; 64
     250:	4c e9       	ldi	r20, 0x9C	; 156
     252:	55 e4       	ldi	r21, 0x45	; 69
     254:	dc 01       	movw	r26, r24
     256:	6d 91       	ld	r22, X+
     258:	7d 91       	ld	r23, X+
     25a:	8d 91       	ld	r24, X+
     25c:	9c 91       	ld	r25, X
     25e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     262:	e2 96       	adiw	r28, 0x32	; 50
     264:	6c af       	std	Y+60, r22	; 0x3c
     266:	7d af       	std	Y+61, r23	; 0x3d
     268:	8e af       	std	Y+62, r24	; 0x3e
     26a:	9f af       	std	Y+63, r25	; 0x3f
     26c:	e2 97       	sbiw	r28, 0x32	; 50
     26e:	e2 96       	adiw	r28, 0x32	; 50
     270:	2c ad       	ldd	r18, Y+60	; 0x3c
     272:	3d ad       	ldd	r19, Y+61	; 0x3d
     274:	4e ad       	ldd	r20, Y+62	; 0x3e
     276:	5f ad       	ldd	r21, Y+63	; 0x3f
     278:	e2 97       	sbiw	r28, 0x32	; 50
     27a:	d8 01       	movw	r26, r16
     27c:	2d 93       	st	X+, r18
     27e:	3d 93       	st	X+, r19
     280:	4d 93       	st	X+, r20
     282:	5c 93       	st	X, r21
     284:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
     286:	ce 01       	movw	r24, r28
     288:	85 5b       	subi	r24, 0xB5	; 181
     28a:	9f 4f       	sbci	r25, 0xFF	; 255
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e8       	ldi	r20, 0x80	; 128
     292:	5f e3       	ldi	r21, 0x3F	; 63
     294:	fc 01       	movw	r30, r24
     296:	60 81       	ld	r22, Z
     298:	71 81       	ldd	r23, Z+1	; 0x01
     29a:	82 81       	ldd	r24, Z+2	; 0x02
     29c:	93 81       	ldd	r25, Z+3	; 0x03
     29e:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
     2a2:	88 23       	and	r24, r24
     2a4:	4c f4       	brge	.+18     	; 0x2b8 <LCD_sendCommand+0xd0>
		__ticks = 1;
     2a6:	ce 01       	movw	r24, r28
     2a8:	81 5b       	subi	r24, 0xB1	; 177
     2aa:	9f 4f       	sbci	r25, 0xFF	; 255
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	dc 01       	movw	r26, r24
     2b2:	2d 93       	st	X+, r18
     2b4:	3c 93       	st	X, r19
     2b6:	92 c0       	rjmp	.+292    	; 0x3dc <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     2b8:	ce 01       	movw	r24, r28
     2ba:	85 5b       	subi	r24, 0xB5	; 181
     2bc:	9f 4f       	sbci	r25, 0xFF	; 255
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	3f ef       	ldi	r19, 0xFF	; 255
     2c2:	4f e7       	ldi	r20, 0x7F	; 127
     2c4:	57 e4       	ldi	r21, 0x47	; 71
     2c6:	fc 01       	movw	r30, r24
     2c8:	60 81       	ld	r22, Z
     2ca:	71 81       	ldd	r23, Z+1	; 0x01
     2cc:	82 81       	ldd	r24, Z+2	; 0x02
     2ce:	93 81       	ldd	r25, Z+3	; 0x03
     2d0:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
     2d4:	18 16       	cp	r1, r24
     2d6:	0c f0       	brlt	.+2      	; 0x2da <LCD_sendCommand+0xf2>
     2d8:	67 c0       	rjmp	.+206    	; 0x3a8 <LCD_sendCommand+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2da:	ce 01       	movw	r24, r28
     2dc:	89 5b       	subi	r24, 0xB9	; 185
     2de:	9f 4f       	sbci	r25, 0xFF	; 255
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e2       	ldi	r20, 0x20	; 32
     2e6:	51 e4       	ldi	r21, 0x41	; 65
     2e8:	dc 01       	movw	r26, r24
     2ea:	6d 91       	ld	r22, X+
     2ec:	7d 91       	ld	r23, X+
     2ee:	8d 91       	ld	r24, X+
     2f0:	9c 91       	ld	r25, X
     2f2:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     2f6:	e6 96       	adiw	r28, 0x36	; 54
     2f8:	6c af       	std	Y+60, r22	; 0x3c
     2fa:	7d af       	std	Y+61, r23	; 0x3d
     2fc:	8e af       	std	Y+62, r24	; 0x3e
     2fe:	9f af       	std	Y+63, r25	; 0x3f
     300:	e6 97       	sbiw	r28, 0x36	; 54
     302:	e6 96       	adiw	r28, 0x36	; 54
     304:	2c ad       	ldd	r18, Y+60	; 0x3c
     306:	3d ad       	ldd	r19, Y+61	; 0x3d
     308:	4e ad       	ldd	r20, Y+62	; 0x3e
     30a:	5f ad       	ldd	r21, Y+63	; 0x3f
     30c:	e6 97       	sbiw	r28, 0x36	; 54
     30e:	ae 96       	adiw	r28, 0x2e	; 46
     310:	2c af       	std	Y+60, r18	; 0x3c
     312:	3d af       	std	Y+61, r19	; 0x3d
     314:	4e af       	std	Y+62, r20	; 0x3e
     316:	5f af       	std	Y+63, r21	; 0x3f
     318:	ae 97       	sbiw	r28, 0x2e	; 46
     31a:	8e 01       	movw	r16, r28
     31c:	01 5b       	subi	r16, 0xB1	; 177
     31e:	1f 4f       	sbci	r17, 0xFF	; 255
     320:	ae 96       	adiw	r28, 0x2e	; 46
     322:	6c ad       	ldd	r22, Y+60	; 0x3c
     324:	7d ad       	ldd	r23, Y+61	; 0x3d
     326:	8e ad       	ldd	r24, Y+62	; 0x3e
     328:	9f ad       	ldd	r25, Y+63	; 0x3f
     32a:	ae 97       	sbiw	r28, 0x2e	; 46
     32c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     330:	ea 96       	adiw	r28, 0x3a	; 58
     332:	6c af       	std	Y+60, r22	; 0x3c
     334:	7d af       	std	Y+61, r23	; 0x3d
     336:	8e af       	std	Y+62, r24	; 0x3e
     338:	9f af       	std	Y+63, r25	; 0x3f
     33a:	ea 97       	sbiw	r28, 0x3a	; 58
     33c:	e8 96       	adiw	r28, 0x38	; 56
     33e:	ee ad       	ldd	r30, Y+62	; 0x3e
     340:	ff ad       	ldd	r31, Y+63	; 0x3f
     342:	e8 97       	sbiw	r28, 0x38	; 56
     344:	d8 01       	movw	r26, r16
     346:	ed 93       	st	X+, r30
     348:	fc 93       	st	X, r31
		while(__ticks)
     34a:	25 c0       	rjmp	.+74     	; 0x396 <LCD_sendCommand+0x1ae>
     34c:	ce 01       	movw	r24, r28
     34e:	8f 5a       	subi	r24, 0xAF	; 175
     350:	9f 4f       	sbci	r25, 0xFF	; 255
     352:	24 ef       	ldi	r18, 0xF4	; 244
     354:	31 e0       	ldi	r19, 0x01	; 1
     356:	dc 01       	movw	r26, r24
     358:	2d 93       	st	X+, r18
     35a:	3c 93       	st	X, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     35c:	ce 01       	movw	r24, r28
     35e:	8f 5a       	subi	r24, 0xAF	; 175
     360:	9f 4f       	sbci	r25, 0xFF	; 255
     362:	fc 01       	movw	r30, r24
     364:	80 81       	ld	r24, Z
     366:	91 81       	ldd	r25, Z+1	; 0x01
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_sendCommand+0x180>
     36c:	9e 01       	movw	r18, r28
     36e:	2f 5a       	subi	r18, 0xAF	; 175
     370:	3f 4f       	sbci	r19, 0xFF	; 255
     372:	d9 01       	movw	r26, r18
     374:	8d 93       	st	X+, r24
     376:	9c 93       	st	X, r25
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     378:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     37a:	ce 01       	movw	r24, r28
     37c:	81 5b       	subi	r24, 0xB1	; 177
     37e:	9f 4f       	sbci	r25, 0xFF	; 255
     380:	9e 01       	movw	r18, r28
     382:	21 5b       	subi	r18, 0xB1	; 177
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	f9 01       	movw	r30, r18
     388:	20 81       	ld	r18, Z
     38a:	31 81       	ldd	r19, Z+1	; 0x01
     38c:	21 50       	subi	r18, 0x01	; 1
     38e:	31 09       	sbc	r19, r1
     390:	dc 01       	movw	r26, r24
     392:	2d 93       	st	X+, r18
     394:	3c 93       	st	X, r19
		while(__ticks)
     396:	ce 01       	movw	r24, r28
     398:	81 5b       	subi	r24, 0xB1	; 177
     39a:	9f 4f       	sbci	r25, 0xFF	; 255
     39c:	fc 01       	movw	r30, r24
     39e:	80 81       	ld	r24, Z
     3a0:	91 81       	ldd	r25, Z+1	; 0x01
     3a2:	89 2b       	or	r24, r25
     3a4:	99 f6       	brne	.-90     	; 0x34c <LCD_sendCommand+0x164>
		}
		return;
     3a6:	35 c0       	rjmp	.+106    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
	}
	else
		__ticks = (uint16_t)__tmp;
     3a8:	8e 01       	movw	r16, r28
     3aa:	01 5b       	subi	r16, 0xB1	; 177
     3ac:	1f 4f       	sbci	r17, 0xFF	; 255
     3ae:	ce 01       	movw	r24, r28
     3b0:	85 5b       	subi	r24, 0xB5	; 181
     3b2:	9f 4f       	sbci	r25, 0xFF	; 255
     3b4:	dc 01       	movw	r26, r24
     3b6:	6d 91       	ld	r22, X+
     3b8:	7d 91       	ld	r23, X+
     3ba:	8d 91       	ld	r24, X+
     3bc:	9c 91       	ld	r25, X
     3be:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     3c2:	ee 96       	adiw	r28, 0x3e	; 62
     3c4:	6c af       	std	Y+60, r22	; 0x3c
     3c6:	7d af       	std	Y+61, r23	; 0x3d
     3c8:	8e af       	std	Y+62, r24	; 0x3e
     3ca:	9f af       	std	Y+63, r25	; 0x3f
     3cc:	ee 97       	sbiw	r28, 0x3e	; 62
     3ce:	ec 96       	adiw	r28, 0x3c	; 60
     3d0:	2e ad       	ldd	r18, Y+62	; 0x3e
     3d2:	3f ad       	ldd	r19, Y+63	; 0x3f
     3d4:	ec 97       	sbiw	r28, 0x3c	; 60
     3d6:	f8 01       	movw	r30, r16
     3d8:	31 83       	std	Z+1, r19	; 0x01
     3da:	20 83       	st	Z, r18
     3dc:	ce 01       	movw	r24, r28
     3de:	8d 5a       	subi	r24, 0xAD	; 173
     3e0:	9f 4f       	sbci	r25, 0xFF	; 255
     3e2:	9e 01       	movw	r18, r28
     3e4:	21 5b       	subi	r18, 0xB1	; 177
     3e6:	3f 4f       	sbci	r19, 0xFF	; 255
     3e8:	d9 01       	movw	r26, r18
     3ea:	2d 91       	ld	r18, X+
     3ec:	3c 91       	ld	r19, X
     3ee:	fc 01       	movw	r30, r24
     3f0:	31 83       	std	Z+1, r19	; 0x01
     3f2:	20 83       	st	Z, r18
	__asm__ volatile (
     3f4:	ce 01       	movw	r24, r28
     3f6:	8d 5a       	subi	r24, 0xAD	; 173
     3f8:	9f 4f       	sbci	r25, 0xFF	; 255
     3fa:	dc 01       	movw	r26, r24
     3fc:	8d 91       	ld	r24, X+
     3fe:	9c 91       	ld	r25, X
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <__FUSE_REGION_LENGTH__>
     404:	9e 01       	movw	r18, r28
     406:	2d 5a       	subi	r18, 0xAD	; 173
     408:	3f 4f       	sbci	r19, 0xFF	; 255
     40a:	f9 01       	movw	r30, r18
     40c:	91 83       	std	Z+1, r25	; 0x01
     40e:	80 83       	st	Z, r24
}
     410:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
     412:	82 e3       	ldi	r24, 0x32	; 50
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	dc 01       	movw	r26, r24
     418:	2c 91       	ld	r18, X
     41a:	20 64       	ori	r18, 0x40	; 64
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	a0 e8       	ldi	r26, 0x80	; 128
     426:	bf e3       	ldi	r27, 0x3F	; 63
     428:	89 af       	std	Y+57, r24	; 0x39
     42a:	9a af       	std	Y+58, r25	; 0x3a
     42c:	ab af       	std	Y+59, r26	; 0x3b
     42e:	bc af       	std	Y+60, r27	; 0x3c
	__tmp = ((F_CPU) / 4e3) * __ms;
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e4       	ldi	r19, 0x40	; 64
     434:	4c e9       	ldi	r20, 0x9C	; 156
     436:	55 e4       	ldi	r21, 0x45	; 69
     438:	69 ad       	ldd	r22, Y+57	; 0x39
     43a:	7a ad       	ldd	r23, Y+58	; 0x3a
     43c:	8b ad       	ldd	r24, Y+59	; 0x3b
     43e:	9c ad       	ldd	r25, Y+60	; 0x3c
     440:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     444:	c2 58       	subi	r28, 0x82	; 130
     446:	df 4f       	sbci	r29, 0xFF	; 255
     448:	68 83       	st	Y, r22
     44a:	79 83       	std	Y+1, r23	; 0x01
     44c:	8a 83       	std	Y+2, r24	; 0x02
     44e:	9b 83       	std	Y+3, r25	; 0x03
     450:	ce 57       	subi	r28, 0x7E	; 126
     452:	d0 40       	sbci	r29, 0x00	; 0
     454:	ce 01       	movw	r24, r28
     456:	cd 96       	adiw	r24, 0x3d	; 61
     458:	c2 58       	subi	r28, 0x82	; 130
     45a:	df 4f       	sbci	r29, 0xFF	; 255
     45c:	28 81       	ld	r18, Y
     45e:	39 81       	ldd	r19, Y+1	; 0x01
     460:	4a 81       	ldd	r20, Y+2	; 0x02
     462:	5b 81       	ldd	r21, Y+3	; 0x03
     464:	ce 57       	subi	r28, 0x7E	; 126
     466:	d0 40       	sbci	r29, 0x00	; 0
     468:	dc 01       	movw	r26, r24
     46a:	2d 93       	st	X+, r18
     46c:	3d 93       	st	X+, r19
     46e:	4d 93       	st	X+, r20
     470:	5c 93       	st	X, r21
     472:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	40 e8       	ldi	r20, 0x80	; 128
     47a:	5f e3       	ldi	r21, 0x3F	; 63
     47c:	ce 01       	movw	r24, r28
     47e:	cd 96       	adiw	r24, 0x3d	; 61
     480:	fc 01       	movw	r30, r24
     482:	60 81       	ld	r22, Z
     484:	71 81       	ldd	r23, Z+1	; 0x01
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	93 81       	ldd	r25, Z+3	; 0x03
     48a:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
     48e:	88 23       	and	r24, r24
     490:	4c f4       	brge	.+18     	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
		__ticks = 1;
     492:	ce 01       	movw	r24, r28
     494:	8f 5b       	subi	r24, 0xBF	; 191
     496:	9f 4f       	sbci	r25, 0xFF	; 255
     498:	21 e0       	ldi	r18, 0x01	; 1
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	dc 01       	movw	r26, r24
     49e:	2d 93       	st	X+, r18
     4a0:	3c 93       	st	X, r19
     4a2:	98 c0       	rjmp	.+304    	; 0x5d4 <__FUSE_REGION_LENGTH__+0x1d4>
	else if (__tmp > 65535)
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	3f ef       	ldi	r19, 0xFF	; 255
     4a8:	4f e7       	ldi	r20, 0x7F	; 127
     4aa:	57 e4       	ldi	r21, 0x47	; 71
     4ac:	ce 01       	movw	r24, r28
     4ae:	cd 96       	adiw	r24, 0x3d	; 61
     4b0:	fc 01       	movw	r30, r24
     4b2:	60 81       	ld	r22, Z
     4b4:	71 81       	ldd	r23, Z+1	; 0x01
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	93 81       	ldd	r25, Z+3	; 0x03
     4ba:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
     4be:	18 16       	cp	r1, r24
     4c0:	0c f0       	brlt	.+2      	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
     4c2:	6b c0       	rjmp	.+214    	; 0x59a <__FUSE_REGION_LENGTH__+0x19a>
		__ticks = (uint16_t) (__ms * 10.0);
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 e2       	ldi	r20, 0x20	; 32
     4ca:	51 e4       	ldi	r21, 0x41	; 65
     4cc:	69 ad       	ldd	r22, Y+57	; 0x39
     4ce:	7a ad       	ldd	r23, Y+58	; 0x3a
     4d0:	8b ad       	ldd	r24, Y+59	; 0x3b
     4d2:	9c ad       	ldd	r25, Y+60	; 0x3c
     4d4:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     4d8:	ce 57       	subi	r28, 0x7E	; 126
     4da:	df 4f       	sbci	r29, 0xFF	; 255
     4dc:	68 83       	st	Y, r22
     4de:	79 83       	std	Y+1, r23	; 0x01
     4e0:	8a 83       	std	Y+2, r24	; 0x02
     4e2:	9b 83       	std	Y+3, r25	; 0x03
     4e4:	c2 58       	subi	r28, 0x82	; 130
     4e6:	d0 40       	sbci	r29, 0x00	; 0
     4e8:	ce 57       	subi	r28, 0x7E	; 126
     4ea:	df 4f       	sbci	r29, 0xFF	; 255
     4ec:	28 81       	ld	r18, Y
     4ee:	39 81       	ldd	r19, Y+1	; 0x01
     4f0:	4a 81       	ldd	r20, Y+2	; 0x02
     4f2:	5b 81       	ldd	r21, Y+3	; 0x03
     4f4:	c2 58       	subi	r28, 0x82	; 130
     4f6:	d0 40       	sbci	r29, 0x00	; 0
     4f8:	aa 96       	adiw	r28, 0x2a	; 42
     4fa:	2c af       	std	Y+60, r18	; 0x3c
     4fc:	3d af       	std	Y+61, r19	; 0x3d
     4fe:	4e af       	std	Y+62, r20	; 0x3e
     500:	5f af       	std	Y+63, r21	; 0x3f
     502:	aa 97       	sbiw	r28, 0x2a	; 42
     504:	8e 01       	movw	r16, r28
     506:	0f 5b       	subi	r16, 0xBF	; 191
     508:	1f 4f       	sbci	r17, 0xFF	; 255
     50a:	aa 96       	adiw	r28, 0x2a	; 42
     50c:	6c ad       	ldd	r22, Y+60	; 0x3c
     50e:	7d ad       	ldd	r23, Y+61	; 0x3d
     510:	8e ad       	ldd	r24, Y+62	; 0x3e
     512:	9f ad       	ldd	r25, Y+63	; 0x3f
     514:	aa 97       	sbiw	r28, 0x2a	; 42
     516:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     51a:	ca 57       	subi	r28, 0x7A	; 122
     51c:	df 4f       	sbci	r29, 0xFF	; 255
     51e:	68 83       	st	Y, r22
     520:	79 83       	std	Y+1, r23	; 0x01
     522:	8a 83       	std	Y+2, r24	; 0x02
     524:	9b 83       	std	Y+3, r25	; 0x03
     526:	c6 58       	subi	r28, 0x86	; 134
     528:	d0 40       	sbci	r29, 0x00	; 0
     52a:	ca 57       	subi	r28, 0x7A	; 122
     52c:	df 4f       	sbci	r29, 0xFF	; 255
     52e:	e8 81       	ld	r30, Y
     530:	f9 81       	ldd	r31, Y+1	; 0x01
     532:	c6 58       	subi	r28, 0x86	; 134
     534:	d0 40       	sbci	r29, 0x00	; 0
     536:	d8 01       	movw	r26, r16
     538:	ed 93       	st	X+, r30
     53a:	fc 93       	st	X, r31
		while(__ticks)
     53c:	25 c0       	rjmp	.+74     	; 0x588 <__FUSE_REGION_LENGTH__+0x188>
     53e:	ce 01       	movw	r24, r28
     540:	8d 5b       	subi	r24, 0xBD	; 189
     542:	9f 4f       	sbci	r25, 0xFF	; 255
     544:	24 ef       	ldi	r18, 0xF4	; 244
     546:	31 e0       	ldi	r19, 0x01	; 1
     548:	dc 01       	movw	r26, r24
     54a:	2d 93       	st	X+, r18
     54c:	3c 93       	st	X, r19
	__asm__ volatile (
     54e:	ce 01       	movw	r24, r28
     550:	8d 5b       	subi	r24, 0xBD	; 189
     552:	9f 4f       	sbci	r25, 0xFF	; 255
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	91 81       	ldd	r25, Z+1	; 0x01
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	f1 f7       	brne	.-4      	; 0x55a <__FUSE_REGION_LENGTH__+0x15a>
     55e:	9e 01       	movw	r18, r28
     560:	2d 5b       	subi	r18, 0xBD	; 189
     562:	3f 4f       	sbci	r19, 0xFF	; 255
     564:	d9 01       	movw	r26, r18
     566:	8d 93       	st	X+, r24
     568:	9c 93       	st	X, r25
}
     56a:	00 00       	nop
			__ticks --;
     56c:	ce 01       	movw	r24, r28
     56e:	8f 5b       	subi	r24, 0xBF	; 191
     570:	9f 4f       	sbci	r25, 0xFF	; 255
     572:	9e 01       	movw	r18, r28
     574:	2f 5b       	subi	r18, 0xBF	; 191
     576:	3f 4f       	sbci	r19, 0xFF	; 255
     578:	f9 01       	movw	r30, r18
     57a:	20 81       	ld	r18, Z
     57c:	31 81       	ldd	r19, Z+1	; 0x01
     57e:	21 50       	subi	r18, 0x01	; 1
     580:	31 09       	sbc	r19, r1
     582:	dc 01       	movw	r26, r24
     584:	2d 93       	st	X+, r18
     586:	3c 93       	st	X, r19
		while(__ticks)
     588:	ce 01       	movw	r24, r28
     58a:	8f 5b       	subi	r24, 0xBF	; 191
     58c:	9f 4f       	sbci	r25, 0xFF	; 255
     58e:	fc 01       	movw	r30, r24
     590:	80 81       	ld	r24, Z
     592:	91 81       	ldd	r25, Z+1	; 0x01
     594:	89 2b       	or	r24, r25
     596:	99 f6       	brne	.-90     	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
		return;
     598:	38 c0       	rjmp	.+112    	; 0x60a <__FUSE_REGION_LENGTH__+0x20a>
		__ticks = (uint16_t)__tmp;
     59a:	8e 01       	movw	r16, r28
     59c:	0f 5b       	subi	r16, 0xBF	; 191
     59e:	1f 4f       	sbci	r17, 0xFF	; 255
     5a0:	ce 01       	movw	r24, r28
     5a2:	cd 96       	adiw	r24, 0x3d	; 61
     5a4:	dc 01       	movw	r26, r24
     5a6:	6d 91       	ld	r22, X+
     5a8:	7d 91       	ld	r23, X+
     5aa:	8d 91       	ld	r24, X+
     5ac:	9c 91       	ld	r25, X
     5ae:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     5b2:	c6 57       	subi	r28, 0x76	; 118
     5b4:	df 4f       	sbci	r29, 0xFF	; 255
     5b6:	68 83       	st	Y, r22
     5b8:	79 83       	std	Y+1, r23	; 0x01
     5ba:	8a 83       	std	Y+2, r24	; 0x02
     5bc:	9b 83       	std	Y+3, r25	; 0x03
     5be:	ca 58       	subi	r28, 0x8A	; 138
     5c0:	d0 40       	sbci	r29, 0x00	; 0
     5c2:	c6 57       	subi	r28, 0x76	; 118
     5c4:	df 4f       	sbci	r29, 0xFF	; 255
     5c6:	28 81       	ld	r18, Y
     5c8:	39 81       	ldd	r19, Y+1	; 0x01
     5ca:	ca 58       	subi	r28, 0x8A	; 138
     5cc:	d0 40       	sbci	r29, 0x00	; 0
     5ce:	f8 01       	movw	r30, r16
     5d0:	31 83       	std	Z+1, r19	; 0x01
     5d2:	20 83       	st	Z, r18
     5d4:	ce 01       	movw	r24, r28
     5d6:	8b 5b       	subi	r24, 0xBB	; 187
     5d8:	9f 4f       	sbci	r25, 0xFF	; 255
     5da:	9e 01       	movw	r18, r28
     5dc:	2f 5b       	subi	r18, 0xBF	; 191
     5de:	3f 4f       	sbci	r19, 0xFF	; 255
     5e0:	d9 01       	movw	r26, r18
     5e2:	2d 91       	ld	r18, X+
     5e4:	3c 91       	ld	r19, X
     5e6:	fc 01       	movw	r30, r24
     5e8:	31 83       	std	Z+1, r19	; 0x01
     5ea:	20 83       	st	Z, r18
	__asm__ volatile (
     5ec:	ce 01       	movw	r24, r28
     5ee:	8b 5b       	subi	r24, 0xBB	; 187
     5f0:	9f 4f       	sbci	r25, 0xFF	; 255
     5f2:	dc 01       	movw	r26, r24
     5f4:	8d 91       	ld	r24, X+
     5f6:	9c 91       	ld	r25, X
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <__FUSE_REGION_LENGTH__+0x1f8>
     5fc:	9e 01       	movw	r18, r28
     5fe:	2b 5b       	subi	r18, 0xBB	; 187
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	f9 01       	movw	r30, r18
     604:	91 83       	std	Z+1, r25	; 0x01
     606:	80 83       	st	Z, r24
}
     608:	00 00       	nop
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required command to the data bus D4 --> D7 */
	DATA_OUT=( command  & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT=( (command >>4 ) & 0x0F ) | ( DATA_OUT & 0xF0 );
     60a:	ce 01       	movw	r24, r28
     60c:	8b 5a       	subi	r24, 0xAB	; 171
     60e:	9f 4f       	sbci	r25, 0xFF	; 255
     610:	dc 01       	movw	r26, r24
     612:	8c 91       	ld	r24, X
     614:	82 95       	swap	r24
     616:	8f 70       	andi	r24, 0x0F	; 15
     618:	28 2f       	mov	r18, r24
     61a:	88 e2       	ldi	r24, 0x28	; 40
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
     622:	80 7f       	andi	r24, 0xF0	; 240
     624:	28 2b       	or	r18, r24
     626:	88 e2       	ldi	r24, 0x28	; 40
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	dc 01       	movw	r26, r24
     62c:	2c 93       	st	X, r18
#endif

	E = CLEAR;	 /* close Enable to prevent data share between LCD and AVR */
     62e:	82 e3       	ldi	r24, 0x32	; 50
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	fc 01       	movw	r30, r24
     634:	20 81       	ld	r18, Z
     636:	2f 7b       	andi	r18, 0xBF	; 191
     638:	dc 01       	movw	r26, r24
     63a:	2c 93       	st	X, r18
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	a0 e8       	ldi	r26, 0x80	; 128
     642:	bf e3       	ldi	r27, 0x3F	; 63
     644:	8b a7       	std	Y+43, r24	; 0x2b
     646:	9c a7       	std	Y+44, r25	; 0x2c
     648:	ad a7       	std	Y+45, r26	; 0x2d
     64a:	be a7       	std	Y+46, r27	; 0x2e
	__tmp = ((F_CPU) / 4e3) * __ms;
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e4       	ldi	r19, 0x40	; 64
     650:	4c e9       	ldi	r20, 0x9C	; 156
     652:	55 e4       	ldi	r21, 0x45	; 69
     654:	6b a5       	ldd	r22, Y+43	; 0x2b
     656:	7c a5       	ldd	r23, Y+44	; 0x2c
     658:	8d a5       	ldd	r24, Y+45	; 0x2d
     65a:	9e a5       	ldd	r25, Y+46	; 0x2e
     65c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     660:	c2 57       	subi	r28, 0x72	; 114
     662:	df 4f       	sbci	r29, 0xFF	; 255
     664:	68 83       	st	Y, r22
     666:	79 83       	std	Y+1, r23	; 0x01
     668:	8a 83       	std	Y+2, r24	; 0x02
     66a:	9b 83       	std	Y+3, r25	; 0x03
     66c:	ce 58       	subi	r28, 0x8E	; 142
     66e:	d0 40       	sbci	r29, 0x00	; 0
     670:	c2 57       	subi	r28, 0x72	; 114
     672:	df 4f       	sbci	r29, 0xFF	; 255
     674:	28 81       	ld	r18, Y
     676:	39 81       	ldd	r19, Y+1	; 0x01
     678:	4a 81       	ldd	r20, Y+2	; 0x02
     67a:	5b 81       	ldd	r21, Y+3	; 0x03
     67c:	ce 58       	subi	r28, 0x8E	; 142
     67e:	d0 40       	sbci	r29, 0x00	; 0
     680:	2f a7       	std	Y+47, r18	; 0x2f
     682:	38 ab       	std	Y+48, r19	; 0x30
     684:	49 ab       	std	Y+49, r20	; 0x31
     686:	5a ab       	std	Y+50, r21	; 0x32
	if (__tmp < 1.0)
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e8       	ldi	r20, 0x80	; 128
     68e:	5f e3       	ldi	r21, 0x3F	; 63
     690:	6f a5       	ldd	r22, Y+47	; 0x2f
     692:	78 a9       	ldd	r23, Y+48	; 0x30
     694:	89 a9       	ldd	r24, Y+49	; 0x31
     696:	9a a9       	ldd	r25, Y+50	; 0x32
     698:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
     69c:	88 23       	and	r24, r24
     69e:	2c f4       	brge	.+10     	; 0x6aa <__FUSE_REGION_LENGTH__+0x2aa>
		__ticks = 1;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	9c ab       	std	Y+52, r25	; 0x34
     6a6:	8b ab       	std	Y+51, r24	; 0x33
     6a8:	71 c0       	rjmp	.+226    	; 0x78c <__FUSE_REGION_LENGTH__+0x38c>
	else if (__tmp > 65535)
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	3f ef       	ldi	r19, 0xFF	; 255
     6ae:	4f e7       	ldi	r20, 0x7F	; 127
     6b0:	57 e4       	ldi	r21, 0x47	; 71
     6b2:	6f a5       	ldd	r22, Y+47	; 0x2f
     6b4:	78 a9       	ldd	r23, Y+48	; 0x30
     6b6:	89 a9       	ldd	r24, Y+49	; 0x31
     6b8:	9a a9       	ldd	r25, Y+50	; 0x32
     6ba:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
     6be:	18 16       	cp	r1, r24
     6c0:	0c f0       	brlt	.+2      	; 0x6c4 <__FUSE_REGION_LENGTH__+0x2c4>
     6c2:	4e c0       	rjmp	.+156    	; 0x760 <__FUSE_REGION_LENGTH__+0x360>
		__ticks = (uint16_t) (__ms * 10.0);
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e2       	ldi	r20, 0x20	; 32
     6ca:	51 e4       	ldi	r21, 0x41	; 65
     6cc:	6b a5       	ldd	r22, Y+43	; 0x2b
     6ce:	7c a5       	ldd	r23, Y+44	; 0x2c
     6d0:	8d a5       	ldd	r24, Y+45	; 0x2d
     6d2:	9e a5       	ldd	r25, Y+46	; 0x2e
     6d4:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     6d8:	ce 56       	subi	r28, 0x6E	; 110
     6da:	df 4f       	sbci	r29, 0xFF	; 255
     6dc:	68 83       	st	Y, r22
     6de:	79 83       	std	Y+1, r23	; 0x01
     6e0:	8a 83       	std	Y+2, r24	; 0x02
     6e2:	9b 83       	std	Y+3, r25	; 0x03
     6e4:	c2 59       	subi	r28, 0x92	; 146
     6e6:	d0 40       	sbci	r29, 0x00	; 0
     6e8:	ce 56       	subi	r28, 0x6E	; 110
     6ea:	df 4f       	sbci	r29, 0xFF	; 255
     6ec:	88 81       	ld	r24, Y
     6ee:	99 81       	ldd	r25, Y+1	; 0x01
     6f0:	aa 81       	ldd	r26, Y+2	; 0x02
     6f2:	bb 81       	ldd	r27, Y+3	; 0x03
     6f4:	c2 59       	subi	r28, 0x92	; 146
     6f6:	d0 40       	sbci	r29, 0x00	; 0
     6f8:	a6 96       	adiw	r28, 0x26	; 38
     6fa:	8c af       	std	Y+60, r24	; 0x3c
     6fc:	9d af       	std	Y+61, r25	; 0x3d
     6fe:	ae af       	std	Y+62, r26	; 0x3e
     700:	bf af       	std	Y+63, r27	; 0x3f
     702:	a6 97       	sbiw	r28, 0x26	; 38
     704:	a6 96       	adiw	r28, 0x26	; 38
     706:	6c ad       	ldd	r22, Y+60	; 0x3c
     708:	7d ad       	ldd	r23, Y+61	; 0x3d
     70a:	8e ad       	ldd	r24, Y+62	; 0x3e
     70c:	9f ad       	ldd	r25, Y+63	; 0x3f
     70e:	a6 97       	sbiw	r28, 0x26	; 38
     710:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     714:	ca 56       	subi	r28, 0x6A	; 106
     716:	df 4f       	sbci	r29, 0xFF	; 255
     718:	68 83       	st	Y, r22
     71a:	79 83       	std	Y+1, r23	; 0x01
     71c:	8a 83       	std	Y+2, r24	; 0x02
     71e:	9b 83       	std	Y+3, r25	; 0x03
     720:	c6 59       	subi	r28, 0x96	; 150
     722:	d0 40       	sbci	r29, 0x00	; 0
     724:	ca 56       	subi	r28, 0x6A	; 106
     726:	df 4f       	sbci	r29, 0xFF	; 255
     728:	a8 81       	ld	r26, Y
     72a:	b9 81       	ldd	r27, Y+1	; 0x01
     72c:	c6 59       	subi	r28, 0x96	; 150
     72e:	d0 40       	sbci	r29, 0x00	; 0
     730:	bc ab       	std	Y+52, r27	; 0x34
     732:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
     734:	10 c0       	rjmp	.+32     	; 0x756 <__FUSE_REGION_LENGTH__+0x356>
     736:	84 ef       	ldi	r24, 0xF4	; 244
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	9e ab       	std	Y+54, r25	; 0x36
     73c:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
     73e:	8d a9       	ldd	r24, Y+53	; 0x35
     740:	9e a9       	ldd	r25, Y+54	; 0x36
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <__FUSE_REGION_LENGTH__+0x342>
     746:	9e ab       	std	Y+54, r25	; 0x36
     748:	8d ab       	std	Y+53, r24	; 0x35
}
     74a:	00 00       	nop
			__ticks --;
     74c:	8b a9       	ldd	r24, Y+51	; 0x33
     74e:	9c a9       	ldd	r25, Y+52	; 0x34
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	9c ab       	std	Y+52, r25	; 0x34
     754:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	89 2b       	or	r24, r25
     75c:	61 f7       	brne	.-40     	; 0x736 <__FUSE_REGION_LENGTH__+0x336>
		return;
     75e:	21 c0       	rjmp	.+66     	; 0x7a2 <__FUSE_REGION_LENGTH__+0x3a2>
		__ticks = (uint16_t)__tmp;
     760:	6f a5       	ldd	r22, Y+47	; 0x2f
     762:	78 a9       	ldd	r23, Y+48	; 0x30
     764:	89 a9       	ldd	r24, Y+49	; 0x31
     766:	9a a9       	ldd	r25, Y+50	; 0x32
     768:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     76c:	c6 56       	subi	r28, 0x66	; 102
     76e:	df 4f       	sbci	r29, 0xFF	; 255
     770:	68 83       	st	Y, r22
     772:	79 83       	std	Y+1, r23	; 0x01
     774:	8a 83       	std	Y+2, r24	; 0x02
     776:	9b 83       	std	Y+3, r25	; 0x03
     778:	ca 59       	subi	r28, 0x9A	; 154
     77a:	d0 40       	sbci	r29, 0x00	; 0
     77c:	c6 56       	subi	r28, 0x66	; 102
     77e:	df 4f       	sbci	r29, 0xFF	; 255
     780:	e8 81       	ld	r30, Y
     782:	f9 81       	ldd	r31, Y+1	; 0x01
     784:	ca 59       	subi	r28, 0x9A	; 154
     786:	d0 40       	sbci	r29, 0x00	; 0
     788:	fc ab       	std	Y+52, r31	; 0x34
     78a:	eb ab       	std	Y+51, r30	; 0x33
     78c:	8b a9       	ldd	r24, Y+51	; 0x33
     78e:	9c a9       	ldd	r25, Y+52	; 0x34
     790:	98 af       	std	Y+56, r25	; 0x38
     792:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
     794:	8f a9       	ldd	r24, Y+55	; 0x37
     796:	98 ad       	ldd	r25, Y+56	; 0x38
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
     79c:	98 af       	std	Y+56, r25	; 0x38
     79e:	8f ab       	std	Y+55, r24	; 0x37
}
     7a0:	00 00       	nop
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	E = SET;		/* open Enable again to send last 4 bits of command */
     7a2:	82 e3       	ldi	r24, 0x32	; 50
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	dc 01       	movw	r26, r24
     7a8:	2c 91       	ld	r18, X
     7aa:	20 64       	ori	r18, 0x40	; 64
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	a0 e8       	ldi	r26, 0x80	; 128
     7b6:	bf e3       	ldi	r27, 0x3F	; 63
     7b8:	8d 8f       	std	Y+29, r24	; 0x1d
     7ba:	9e 8f       	std	Y+30, r25	; 0x1e
     7bc:	af 8f       	std	Y+31, r26	; 0x1f
     7be:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e4       	ldi	r19, 0x40	; 64
     7c4:	4c e9       	ldi	r20, 0x9C	; 156
     7c6:	55 e4       	ldi	r21, 0x45	; 69
     7c8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7ca:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7ce:	98 a1       	ldd	r25, Y+32	; 0x20
     7d0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     7d4:	c2 56       	subi	r28, 0x62	; 98
     7d6:	df 4f       	sbci	r29, 0xFF	; 255
     7d8:	68 83       	st	Y, r22
     7da:	79 83       	std	Y+1, r23	; 0x01
     7dc:	8a 83       	std	Y+2, r24	; 0x02
     7de:	9b 83       	std	Y+3, r25	; 0x03
     7e0:	ce 59       	subi	r28, 0x9E	; 158
     7e2:	d0 40       	sbci	r29, 0x00	; 0
     7e4:	c2 56       	subi	r28, 0x62	; 98
     7e6:	df 4f       	sbci	r29, 0xFF	; 255
     7e8:	28 81       	ld	r18, Y
     7ea:	39 81       	ldd	r19, Y+1	; 0x01
     7ec:	4a 81       	ldd	r20, Y+2	; 0x02
     7ee:	5b 81       	ldd	r21, Y+3	; 0x03
     7f0:	ce 59       	subi	r28, 0x9E	; 158
     7f2:	d0 40       	sbci	r29, 0x00	; 0
     7f4:	29 a3       	std	Y+33, r18	; 0x21
     7f6:	3a a3       	std	Y+34, r19	; 0x22
     7f8:	4b a3       	std	Y+35, r20	; 0x23
     7fa:	5c a3       	std	Y+36, r21	; 0x24
	if (__tmp < 1.0)
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 e8       	ldi	r20, 0x80	; 128
     802:	5f e3       	ldi	r21, 0x3F	; 63
     804:	69 a1       	ldd	r22, Y+33	; 0x21
     806:	7a a1       	ldd	r23, Y+34	; 0x22
     808:	8b a1       	ldd	r24, Y+35	; 0x23
     80a:	9c a1       	ldd	r25, Y+36	; 0x24
     80c:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
     810:	88 23       	and	r24, r24
     812:	2c f4       	brge	.+10     	; 0x81e <__FUSE_REGION_LENGTH__+0x41e>
		__ticks = 1;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	9e a3       	std	Y+38, r25	; 0x26
     81a:	8d a3       	std	Y+37, r24	; 0x25
     81c:	71 c0       	rjmp	.+226    	; 0x900 <__stack+0x1>
	else if (__tmp > 65535)
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	3f ef       	ldi	r19, 0xFF	; 255
     822:	4f e7       	ldi	r20, 0x7F	; 127
     824:	57 e4       	ldi	r21, 0x47	; 71
     826:	69 a1       	ldd	r22, Y+33	; 0x21
     828:	7a a1       	ldd	r23, Y+34	; 0x22
     82a:	8b a1       	ldd	r24, Y+35	; 0x23
     82c:	9c a1       	ldd	r25, Y+36	; 0x24
     82e:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
     832:	18 16       	cp	r1, r24
     834:	0c f0       	brlt	.+2      	; 0x838 <__FUSE_REGION_LENGTH__+0x438>
     836:	4e c0       	rjmp	.+156    	; 0x8d4 <__FUSE_REGION_LENGTH__+0x4d4>
		__ticks = (uint16_t) (__ms * 10.0);
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e2       	ldi	r20, 0x20	; 32
     83e:	51 e4       	ldi	r21, 0x41	; 65
     840:	6d 8d       	ldd	r22, Y+29	; 0x1d
     842:	7e 8d       	ldd	r23, Y+30	; 0x1e
     844:	8f 8d       	ldd	r24, Y+31	; 0x1f
     846:	98 a1       	ldd	r25, Y+32	; 0x20
     848:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     84c:	ce 55       	subi	r28, 0x5E	; 94
     84e:	df 4f       	sbci	r29, 0xFF	; 255
     850:	68 83       	st	Y, r22
     852:	79 83       	std	Y+1, r23	; 0x01
     854:	8a 83       	std	Y+2, r24	; 0x02
     856:	9b 83       	std	Y+3, r25	; 0x03
     858:	c2 5a       	subi	r28, 0xA2	; 162
     85a:	d0 40       	sbci	r29, 0x00	; 0
     85c:	ce 55       	subi	r28, 0x5E	; 94
     85e:	df 4f       	sbci	r29, 0xFF	; 255
     860:	88 81       	ld	r24, Y
     862:	99 81       	ldd	r25, Y+1	; 0x01
     864:	aa 81       	ldd	r26, Y+2	; 0x02
     866:	bb 81       	ldd	r27, Y+3	; 0x03
     868:	c2 5a       	subi	r28, 0xA2	; 162
     86a:	d0 40       	sbci	r29, 0x00	; 0
     86c:	a2 96       	adiw	r28, 0x22	; 34
     86e:	8c af       	std	Y+60, r24	; 0x3c
     870:	9d af       	std	Y+61, r25	; 0x3d
     872:	ae af       	std	Y+62, r26	; 0x3e
     874:	bf af       	std	Y+63, r27	; 0x3f
     876:	a2 97       	sbiw	r28, 0x22	; 34
     878:	a2 96       	adiw	r28, 0x22	; 34
     87a:	6c ad       	ldd	r22, Y+60	; 0x3c
     87c:	7d ad       	ldd	r23, Y+61	; 0x3d
     87e:	8e ad       	ldd	r24, Y+62	; 0x3e
     880:	9f ad       	ldd	r25, Y+63	; 0x3f
     882:	a2 97       	sbiw	r28, 0x22	; 34
     884:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     888:	ca 55       	subi	r28, 0x5A	; 90
     88a:	df 4f       	sbci	r29, 0xFF	; 255
     88c:	68 83       	st	Y, r22
     88e:	79 83       	std	Y+1, r23	; 0x01
     890:	8a 83       	std	Y+2, r24	; 0x02
     892:	9b 83       	std	Y+3, r25	; 0x03
     894:	c6 5a       	subi	r28, 0xA6	; 166
     896:	d0 40       	sbci	r29, 0x00	; 0
     898:	ca 55       	subi	r28, 0x5A	; 90
     89a:	df 4f       	sbci	r29, 0xFF	; 255
     89c:	a8 81       	ld	r26, Y
     89e:	b9 81       	ldd	r27, Y+1	; 0x01
     8a0:	c6 5a       	subi	r28, 0xA6	; 166
     8a2:	d0 40       	sbci	r29, 0x00	; 0
     8a4:	be a3       	std	Y+38, r27	; 0x26
     8a6:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
     8a8:	10 c0       	rjmp	.+32     	; 0x8ca <__FUSE_REGION_LENGTH__+0x4ca>
     8aa:	84 ef       	ldi	r24, 0xF4	; 244
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a7       	std	Y+40, r25	; 0x28
     8b0:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
     8b2:	8f a1       	ldd	r24, Y+39	; 0x27
     8b4:	98 a5       	ldd	r25, Y+40	; 0x28
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <__FUSE_REGION_LENGTH__+0x4b6>
     8ba:	98 a7       	std	Y+40, r25	; 0x28
     8bc:	8f a3       	std	Y+39, r24	; 0x27
}
     8be:	00 00       	nop
			__ticks --;
     8c0:	8d a1       	ldd	r24, Y+37	; 0x25
     8c2:	9e a1       	ldd	r25, Y+38	; 0x26
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	9e a3       	std	Y+38, r25	; 0x26
     8c8:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
     8ca:	8d a1       	ldd	r24, Y+37	; 0x25
     8cc:	9e a1       	ldd	r25, Y+38	; 0x26
     8ce:	89 2b       	or	r24, r25
     8d0:	61 f7       	brne	.-40     	; 0x8aa <__FUSE_REGION_LENGTH__+0x4aa>
		return;
     8d2:	21 c0       	rjmp	.+66     	; 0x916 <__stack+0x17>
		__ticks = (uint16_t)__tmp;
     8d4:	69 a1       	ldd	r22, Y+33	; 0x21
     8d6:	7a a1       	ldd	r23, Y+34	; 0x22
     8d8:	8b a1       	ldd	r24, Y+35	; 0x23
     8da:	9c a1       	ldd	r25, Y+36	; 0x24
     8dc:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     8e0:	c6 55       	subi	r28, 0x56	; 86
     8e2:	df 4f       	sbci	r29, 0xFF	; 255
     8e4:	68 83       	st	Y, r22
     8e6:	79 83       	std	Y+1, r23	; 0x01
     8e8:	8a 83       	std	Y+2, r24	; 0x02
     8ea:	9b 83       	std	Y+3, r25	; 0x03
     8ec:	ca 5a       	subi	r28, 0xAA	; 170
     8ee:	d0 40       	sbci	r29, 0x00	; 0
     8f0:	c6 55       	subi	r28, 0x56	; 86
     8f2:	df 4f       	sbci	r29, 0xFF	; 255
     8f4:	e8 81       	ld	r30, Y
     8f6:	f9 81       	ldd	r31, Y+1	; 0x01
     8f8:	ca 5a       	subi	r28, 0xAA	; 170
     8fa:	d0 40       	sbci	r29, 0x00	; 0
     8fc:	fe a3       	std	Y+38, r31	; 0x26
     8fe:	ed a3       	std	Y+37, r30	; 0x25
     900:	8d a1       	ldd	r24, Y+37	; 0x25
     902:	9e a1       	ldd	r25, Y+38	; 0x26
     904:	9a a7       	std	Y+42, r25	; 0x2a
     906:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
     908:	89 a5       	ldd	r24, Y+41	; 0x29
     90a:	9a a5       	ldd	r25, Y+42	; 0x2a
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <__stack+0xd>
     910:	9a a7       	std	Y+42, r25	; 0x2a
     912:	89 a7       	std	Y+41, r24	; 0x29
}
     914:	00 00       	nop
	/* send the Least 4 bits of the required command to the data bus D0 --> D3 */
	DATA_OUT=( (command << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif

#ifdef LOWER_MODE_BITS
	DATA_OUT=( (command ) & 0x0F ) | ( DATA_OUT & 0xF0 );
     916:	ce 01       	movw	r24, r28
     918:	8b 5a       	subi	r24, 0xAB	; 171
     91a:	9f 4f       	sbci	r25, 0xFF	; 255
     91c:	dc 01       	movw	r26, r24
     91e:	8c 91       	ld	r24, X
     920:	28 2f       	mov	r18, r24
     922:	2f 70       	andi	r18, 0x0F	; 15
     924:	88 e2       	ldi	r24, 0x28	; 40
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	80 7f       	andi	r24, 0xF0	; 240
     92e:	28 2b       	or	r18, r24
     930:	88 e2       	ldi	r24, 0x28	; 40
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	dc 01       	movw	r26, r24
     936:	2c 93       	st	X, r18
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e8       	ldi	r26, 0x80	; 128
     93e:	bf e3       	ldi	r27, 0x3F	; 63
     940:	8f 87       	std	Y+15, r24	; 0x0f
     942:	98 8b       	std	Y+16, r25	; 0x10
     944:	a9 8b       	std	Y+17, r26	; 0x11
     946:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e4       	ldi	r19, 0x40	; 64
     94c:	4c e9       	ldi	r20, 0x9C	; 156
     94e:	55 e4       	ldi	r21, 0x45	; 69
     950:	6f 85       	ldd	r22, Y+15	; 0x0f
     952:	78 89       	ldd	r23, Y+16	; 0x10
     954:	89 89       	ldd	r24, Y+17	; 0x11
     956:	9a 89       	ldd	r25, Y+18	; 0x12
     958:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     95c:	c2 55       	subi	r28, 0x52	; 82
     95e:	df 4f       	sbci	r29, 0xFF	; 255
     960:	68 83       	st	Y, r22
     962:	79 83       	std	Y+1, r23	; 0x01
     964:	8a 83       	std	Y+2, r24	; 0x02
     966:	9b 83       	std	Y+3, r25	; 0x03
     968:	ce 5a       	subi	r28, 0xAE	; 174
     96a:	d0 40       	sbci	r29, 0x00	; 0
     96c:	c2 55       	subi	r28, 0x52	; 82
     96e:	df 4f       	sbci	r29, 0xFF	; 255
     970:	28 81       	ld	r18, Y
     972:	39 81       	ldd	r19, Y+1	; 0x01
     974:	4a 81       	ldd	r20, Y+2	; 0x02
     976:	5b 81       	ldd	r21, Y+3	; 0x03
     978:	ce 5a       	subi	r28, 0xAE	; 174
     97a:	d0 40       	sbci	r29, 0x00	; 0
     97c:	2b 8b       	std	Y+19, r18	; 0x13
     97e:	3c 8b       	std	Y+20, r19	; 0x14
     980:	4d 8b       	std	Y+21, r20	; 0x15
     982:	5e 8b       	std	Y+22, r21	; 0x16
	if (__tmp < 1.0)
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e8       	ldi	r20, 0x80	; 128
     98a:	5f e3       	ldi	r21, 0x3F	; 63
     98c:	6b 89       	ldd	r22, Y+19	; 0x13
     98e:	7c 89       	ldd	r23, Y+20	; 0x14
     990:	8d 89       	ldd	r24, Y+21	; 0x15
     992:	9e 89       	ldd	r25, Y+22	; 0x16
     994:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
     998:	88 23       	and	r24, r24
     99a:	2c f4       	brge	.+10     	; 0x9a6 <__stack+0xa7>
		__ticks = 1;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	98 8f       	std	Y+24, r25	; 0x18
     9a2:	8f 8b       	std	Y+23, r24	; 0x17
     9a4:	71 c0       	rjmp	.+226    	; 0xa88 <__stack+0x189>
	else if (__tmp > 65535)
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	3f ef       	ldi	r19, 0xFF	; 255
     9aa:	4f e7       	ldi	r20, 0x7F	; 127
     9ac:	57 e4       	ldi	r21, 0x47	; 71
     9ae:	6b 89       	ldd	r22, Y+19	; 0x13
     9b0:	7c 89       	ldd	r23, Y+20	; 0x14
     9b2:	8d 89       	ldd	r24, Y+21	; 0x15
     9b4:	9e 89       	ldd	r25, Y+22	; 0x16
     9b6:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
     9ba:	18 16       	cp	r1, r24
     9bc:	0c f0       	brlt	.+2      	; 0x9c0 <__stack+0xc1>
     9be:	4e c0       	rjmp	.+156    	; 0xa5c <__stack+0x15d>
		__ticks = (uint16_t) (__ms * 10.0);
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e2       	ldi	r20, 0x20	; 32
     9c6:	51 e4       	ldi	r21, 0x41	; 65
     9c8:	6f 85       	ldd	r22, Y+15	; 0x0f
     9ca:	78 89       	ldd	r23, Y+16	; 0x10
     9cc:	89 89       	ldd	r24, Y+17	; 0x11
     9ce:	9a 89       	ldd	r25, Y+18	; 0x12
     9d0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     9d4:	ce 54       	subi	r28, 0x4E	; 78
     9d6:	df 4f       	sbci	r29, 0xFF	; 255
     9d8:	68 83       	st	Y, r22
     9da:	79 83       	std	Y+1, r23	; 0x01
     9dc:	8a 83       	std	Y+2, r24	; 0x02
     9de:	9b 83       	std	Y+3, r25	; 0x03
     9e0:	c2 5b       	subi	r28, 0xB2	; 178
     9e2:	d0 40       	sbci	r29, 0x00	; 0
     9e4:	ce 54       	subi	r28, 0x4E	; 78
     9e6:	df 4f       	sbci	r29, 0xFF	; 255
     9e8:	88 81       	ld	r24, Y
     9ea:	99 81       	ldd	r25, Y+1	; 0x01
     9ec:	aa 81       	ldd	r26, Y+2	; 0x02
     9ee:	bb 81       	ldd	r27, Y+3	; 0x03
     9f0:	c2 5b       	subi	r28, 0xB2	; 178
     9f2:	d0 40       	sbci	r29, 0x00	; 0
     9f4:	6e 96       	adiw	r28, 0x1e	; 30
     9f6:	8c af       	std	Y+60, r24	; 0x3c
     9f8:	9d af       	std	Y+61, r25	; 0x3d
     9fa:	ae af       	std	Y+62, r26	; 0x3e
     9fc:	bf af       	std	Y+63, r27	; 0x3f
     9fe:	6e 97       	sbiw	r28, 0x1e	; 30
     a00:	6e 96       	adiw	r28, 0x1e	; 30
     a02:	6c ad       	ldd	r22, Y+60	; 0x3c
     a04:	7d ad       	ldd	r23, Y+61	; 0x3d
     a06:	8e ad       	ldd	r24, Y+62	; 0x3e
     a08:	9f ad       	ldd	r25, Y+63	; 0x3f
     a0a:	6e 97       	sbiw	r28, 0x1e	; 30
     a0c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     a10:	ca 54       	subi	r28, 0x4A	; 74
     a12:	df 4f       	sbci	r29, 0xFF	; 255
     a14:	68 83       	st	Y, r22
     a16:	79 83       	std	Y+1, r23	; 0x01
     a18:	8a 83       	std	Y+2, r24	; 0x02
     a1a:	9b 83       	std	Y+3, r25	; 0x03
     a1c:	c6 5b       	subi	r28, 0xB6	; 182
     a1e:	d0 40       	sbci	r29, 0x00	; 0
     a20:	ca 54       	subi	r28, 0x4A	; 74
     a22:	df 4f       	sbci	r29, 0xFF	; 255
     a24:	a8 81       	ld	r26, Y
     a26:	b9 81       	ldd	r27, Y+1	; 0x01
     a28:	c6 5b       	subi	r28, 0xB6	; 182
     a2a:	d0 40       	sbci	r29, 0x00	; 0
     a2c:	b8 8f       	std	Y+24, r27	; 0x18
     a2e:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     a30:	10 c0       	rjmp	.+32     	; 0xa52 <__stack+0x153>
     a32:	84 ef       	ldi	r24, 0xF4	; 244
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	9a 8f       	std	Y+26, r25	; 0x1a
     a38:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
     a3a:	89 8d       	ldd	r24, Y+25	; 0x19
     a3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <__stack+0x13f>
     a42:	9a 8f       	std	Y+26, r25	; 0x1a
     a44:	89 8f       	std	Y+25, r24	; 0x19
}
     a46:	00 00       	nop
			__ticks --;
     a48:	8f 89       	ldd	r24, Y+23	; 0x17
     a4a:	98 8d       	ldd	r25, Y+24	; 0x18
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	98 8f       	std	Y+24, r25	; 0x18
     a50:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
     a52:	8f 89       	ldd	r24, Y+23	; 0x17
     a54:	98 8d       	ldd	r25, Y+24	; 0x18
     a56:	89 2b       	or	r24, r25
     a58:	61 f7       	brne	.-40     	; 0xa32 <__stack+0x133>
		return;
     a5a:	21 c0       	rjmp	.+66     	; 0xa9e <__stack+0x19f>
		__ticks = (uint16_t)__tmp;
     a5c:	6b 89       	ldd	r22, Y+19	; 0x13
     a5e:	7c 89       	ldd	r23, Y+20	; 0x14
     a60:	8d 89       	ldd	r24, Y+21	; 0x15
     a62:	9e 89       	ldd	r25, Y+22	; 0x16
     a64:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     a68:	c6 54       	subi	r28, 0x46	; 70
     a6a:	df 4f       	sbci	r29, 0xFF	; 255
     a6c:	68 83       	st	Y, r22
     a6e:	79 83       	std	Y+1, r23	; 0x01
     a70:	8a 83       	std	Y+2, r24	; 0x02
     a72:	9b 83       	std	Y+3, r25	; 0x03
     a74:	ca 5b       	subi	r28, 0xBA	; 186
     a76:	d0 40       	sbci	r29, 0x00	; 0
     a78:	c6 54       	subi	r28, 0x46	; 70
     a7a:	df 4f       	sbci	r29, 0xFF	; 255
     a7c:	e8 81       	ld	r30, Y
     a7e:	f9 81       	ldd	r31, Y+1	; 0x01
     a80:	ca 5b       	subi	r28, 0xBA	; 186
     a82:	d0 40       	sbci	r29, 0x00	; 0
     a84:	f8 8f       	std	Y+24, r31	; 0x18
     a86:	ef 8b       	std	Y+23, r30	; 0x17
     a88:	8f 89       	ldd	r24, Y+23	; 0x17
     a8a:	98 8d       	ldd	r25, Y+24	; 0x18
     a8c:	9c 8f       	std	Y+28, r25	; 0x1c
     a8e:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
     a90:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a92:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <__stack+0x195>
     a98:	9c 8f       	std	Y+28, r25	; 0x1c
     a9a:	8b 8f       	std	Y+27, r24	; 0x1b
}
     a9c:	00 00       	nop
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
     a9e:	82 e3       	ldi	r24, 0x32	; 50
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	dc 01       	movw	r26, r24
     aa4:	2c 91       	ld	r18, X
     aa6:	2f 7b       	andi	r18, 0xBF	; 191
     aa8:	fc 01       	movw	r30, r24
     aaa:	20 83       	st	Z, r18
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e8       	ldi	r26, 0x80	; 128
     ab2:	bf e3       	ldi	r27, 0x3F	; 63
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	9a 83       	std	Y+2, r25	; 0x02
     ab8:	ab 83       	std	Y+3, r26	; 0x03
     aba:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e4       	ldi	r19, 0x40	; 64
     ac0:	4c e9       	ldi	r20, 0x9C	; 156
     ac2:	55 e4       	ldi	r21, 0x45	; 69
     ac4:	69 81       	ldd	r22, Y+1	; 0x01
     ac6:	7a 81       	ldd	r23, Y+2	; 0x02
     ac8:	8b 81       	ldd	r24, Y+3	; 0x03
     aca:	9c 81       	ldd	r25, Y+4	; 0x04
     acc:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     ad0:	c2 54       	subi	r28, 0x42	; 66
     ad2:	df 4f       	sbci	r29, 0xFF	; 255
     ad4:	68 83       	st	Y, r22
     ad6:	79 83       	std	Y+1, r23	; 0x01
     ad8:	8a 83       	std	Y+2, r24	; 0x02
     ada:	9b 83       	std	Y+3, r25	; 0x03
     adc:	ce 5b       	subi	r28, 0xBE	; 190
     ade:	d0 40       	sbci	r29, 0x00	; 0
     ae0:	c2 54       	subi	r28, 0x42	; 66
     ae2:	df 4f       	sbci	r29, 0xFF	; 255
     ae4:	28 81       	ld	r18, Y
     ae6:	39 81       	ldd	r19, Y+1	; 0x01
     ae8:	4a 81       	ldd	r20, Y+2	; 0x02
     aea:	5b 81       	ldd	r21, Y+3	; 0x03
     aec:	ce 5b       	subi	r28, 0xBE	; 190
     aee:	d0 40       	sbci	r29, 0x00	; 0
     af0:	2d 83       	std	Y+5, r18	; 0x05
     af2:	3e 83       	std	Y+6, r19	; 0x06
     af4:	4f 83       	std	Y+7, r20	; 0x07
     af6:	58 87       	std	Y+8, r21	; 0x08
	if (__tmp < 1.0)
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e8       	ldi	r20, 0x80	; 128
     afe:	5f e3       	ldi	r21, 0x3F	; 63
     b00:	6d 81       	ldd	r22, Y+5	; 0x05
     b02:	7e 81       	ldd	r23, Y+6	; 0x06
     b04:	8f 81       	ldd	r24, Y+7	; 0x07
     b06:	98 85       	ldd	r25, Y+8	; 0x08
     b08:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
     b0c:	88 23       	and	r24, r24
     b0e:	2c f4       	brge	.+10     	; 0xb1a <__stack+0x21b>
		__ticks = 1;
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	9a 87       	std	Y+10, r25	; 0x0a
     b16:	89 87       	std	Y+9, r24	; 0x09
     b18:	71 c0       	rjmp	.+226    	; 0xbfc <__stack+0x2fd>
	else if (__tmp > 65535)
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	3f ef       	ldi	r19, 0xFF	; 255
     b1e:	4f e7       	ldi	r20, 0x7F	; 127
     b20:	57 e4       	ldi	r21, 0x47	; 71
     b22:	6d 81       	ldd	r22, Y+5	; 0x05
     b24:	7e 81       	ldd	r23, Y+6	; 0x06
     b26:	8f 81       	ldd	r24, Y+7	; 0x07
     b28:	98 85       	ldd	r25, Y+8	; 0x08
     b2a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
     b2e:	18 16       	cp	r1, r24
     b30:	0c f0       	brlt	.+2      	; 0xb34 <__stack+0x235>
     b32:	4e c0       	rjmp	.+156    	; 0xbd0 <__stack+0x2d1>
		__ticks = (uint16_t) (__ms * 10.0);
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e2       	ldi	r20, 0x20	; 32
     b3a:	51 e4       	ldi	r21, 0x41	; 65
     b3c:	69 81       	ldd	r22, Y+1	; 0x01
     b3e:	7a 81       	ldd	r23, Y+2	; 0x02
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	9c 81       	ldd	r25, Y+4	; 0x04
     b44:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     b48:	ce 53       	subi	r28, 0x3E	; 62
     b4a:	df 4f       	sbci	r29, 0xFF	; 255
     b4c:	68 83       	st	Y, r22
     b4e:	79 83       	std	Y+1, r23	; 0x01
     b50:	8a 83       	std	Y+2, r24	; 0x02
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	c2 5c       	subi	r28, 0xC2	; 194
     b56:	d0 40       	sbci	r29, 0x00	; 0
     b58:	ce 53       	subi	r28, 0x3E	; 62
     b5a:	df 4f       	sbci	r29, 0xFF	; 255
     b5c:	88 81       	ld	r24, Y
     b5e:	99 81       	ldd	r25, Y+1	; 0x01
     b60:	aa 81       	ldd	r26, Y+2	; 0x02
     b62:	bb 81       	ldd	r27, Y+3	; 0x03
     b64:	c2 5c       	subi	r28, 0xC2	; 194
     b66:	d0 40       	sbci	r29, 0x00	; 0
     b68:	6a 96       	adiw	r28, 0x1a	; 26
     b6a:	8c af       	std	Y+60, r24	; 0x3c
     b6c:	9d af       	std	Y+61, r25	; 0x3d
     b6e:	ae af       	std	Y+62, r26	; 0x3e
     b70:	bf af       	std	Y+63, r27	; 0x3f
     b72:	6a 97       	sbiw	r28, 0x1a	; 26
     b74:	6a 96       	adiw	r28, 0x1a	; 26
     b76:	6c ad       	ldd	r22, Y+60	; 0x3c
     b78:	7d ad       	ldd	r23, Y+61	; 0x3d
     b7a:	8e ad       	ldd	r24, Y+62	; 0x3e
     b7c:	9f ad       	ldd	r25, Y+63	; 0x3f
     b7e:	6a 97       	sbiw	r28, 0x1a	; 26
     b80:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     b84:	ca 53       	subi	r28, 0x3A	; 58
     b86:	df 4f       	sbci	r29, 0xFF	; 255
     b88:	68 83       	st	Y, r22
     b8a:	79 83       	std	Y+1, r23	; 0x01
     b8c:	8a 83       	std	Y+2, r24	; 0x02
     b8e:	9b 83       	std	Y+3, r25	; 0x03
     b90:	c6 5c       	subi	r28, 0xC6	; 198
     b92:	d0 40       	sbci	r29, 0x00	; 0
     b94:	ca 53       	subi	r28, 0x3A	; 58
     b96:	df 4f       	sbci	r29, 0xFF	; 255
     b98:	a8 81       	ld	r26, Y
     b9a:	b9 81       	ldd	r27, Y+1	; 0x01
     b9c:	c6 5c       	subi	r28, 0xC6	; 198
     b9e:	d0 40       	sbci	r29, 0x00	; 0
     ba0:	ba 87       	std	Y+10, r27	; 0x0a
     ba2:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     ba4:	10 c0       	rjmp	.+32     	; 0xbc6 <__stack+0x2c7>
     ba6:	84 ef       	ldi	r24, 0xF4	; 244
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	9c 87       	std	Y+12, r25	; 0x0c
     bac:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
     bae:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <__stack+0x2b3>
     bb6:	9c 87       	std	Y+12, r25	; 0x0c
     bb8:	8b 87       	std	Y+11, r24	; 0x0b
}
     bba:	00 00       	nop
			__ticks --;
     bbc:	89 85       	ldd	r24, Y+9	; 0x09
     bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	9a 87       	std	Y+10, r25	; 0x0a
     bc4:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     bc6:	89 85       	ldd	r24, Y+9	; 0x09
     bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bca:	89 2b       	or	r24, r25
     bcc:	61 f7       	brne	.-40     	; 0xba6 <__stack+0x2a7>
		return;
     bce:	21 c0       	rjmp	.+66     	; 0xc12 <__stack+0x313>
		__ticks = (uint16_t)__tmp;
     bd0:	6d 81       	ldd	r22, Y+5	; 0x05
     bd2:	7e 81       	ldd	r23, Y+6	; 0x06
     bd4:	8f 81       	ldd	r24, Y+7	; 0x07
     bd6:	98 85       	ldd	r25, Y+8	; 0x08
     bd8:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     bdc:	c6 53       	subi	r28, 0x36	; 54
     bde:	df 4f       	sbci	r29, 0xFF	; 255
     be0:	68 83       	st	Y, r22
     be2:	79 83       	std	Y+1, r23	; 0x01
     be4:	8a 83       	std	Y+2, r24	; 0x02
     be6:	9b 83       	std	Y+3, r25	; 0x03
     be8:	ca 5c       	subi	r28, 0xCA	; 202
     bea:	d0 40       	sbci	r29, 0x00	; 0
     bec:	c6 53       	subi	r28, 0x36	; 54
     bee:	df 4f       	sbci	r29, 0xFF	; 255
     bf0:	e8 81       	ld	r30, Y
     bf2:	f9 81       	ldd	r31, Y+1	; 0x01
     bf4:	ca 5c       	subi	r28, 0xCA	; 202
     bf6:	d0 40       	sbci	r29, 0x00	; 0
     bf8:	fa 87       	std	Y+10, r31	; 0x0a
     bfa:	e9 87       	std	Y+9, r30	; 0x09
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	9e 87       	std	Y+14, r25	; 0x0e
     c02:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
     c04:	8d 85       	ldd	r24, Y+13	; 0x0d
     c06:	9e 85       	ldd	r25, Y+14	; 0x0e
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <__stack+0x309>
     c0c:	9e 87       	std	Y+14, r25	; 0x0e
     c0e:	8d 87       	std	Y+13, r24	; 0x0d
}
     c10:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
     c12:	00 00       	nop
}
     c14:	c3 53       	subi	r28, 0x33	; 51
     c16:	df 4f       	sbci	r29, 0xFF	; 255
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	08 95       	ret

00000c2c <LCD_displayCharacter>:

/*
 * Function responsible for Display only One character on LCD
 */
void LCD_displayCharacter(uint8 data) {
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	cd 5c       	subi	r28, 0xCD	; 205
     c3a:	d1 09       	sbc	r29, r1
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	9e 01       	movw	r18, r28
     c48:	2b 5a       	subi	r18, 0xAB	; 171
     c4a:	3f 4f       	sbci	r19, 0xFF	; 255
     c4c:	d9 01       	movw	r26, r18
     c4e:	8c 93       	st	X, r24
	RS = SET; /* tell LCD that data which will send now is DATA */
     c50:	82 e3       	ldi	r24, 0x32	; 50
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	fc 01       	movw	r30, r24
     c56:	20 81       	ld	r18, Z
     c58:	20 61       	ori	r18, 0x10	; 16
     c5a:	dc 01       	movw	r26, r24
     c5c:	2c 93       	st	X, r18
	RW = CLEAR; /* select write Mode on LCD */
     c5e:	82 e3       	ldi	r24, 0x32	; 50
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	fc 01       	movw	r30, r24
     c64:	20 81       	ld	r18, Z
     c66:	2f 7d       	andi	r18, 0xDF	; 223
     c68:	dc 01       	movw	r26, r24
     c6a:	2c 93       	st	X, r18
     c6c:	9e 01       	movw	r18, r28
     c6e:	29 5b       	subi	r18, 0xB9	; 185
     c70:	3f 4f       	sbci	r19, 0xFF	; 255
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	a0 e8       	ldi	r26, 0x80	; 128
     c78:	bf e3       	ldi	r27, 0x3F	; 63
     c7a:	f9 01       	movw	r30, r18
     c7c:	80 83       	st	Z, r24
     c7e:	91 83       	std	Z+1, r25	; 0x01
     c80:	a2 83       	std	Z+2, r26	; 0x02
     c82:	b3 83       	std	Z+3, r27	; 0x03
	__tmp = ((F_CPU) / 4e3) * __ms;
     c84:	8e 01       	movw	r16, r28
     c86:	05 5b       	subi	r16, 0xB5	; 181
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	ce 01       	movw	r24, r28
     c8c:	89 5b       	subi	r24, 0xB9	; 185
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e4       	ldi	r19, 0x40	; 64
     c94:	4c e9       	ldi	r20, 0x9C	; 156
     c96:	55 e4       	ldi	r21, 0x45	; 69
     c98:	dc 01       	movw	r26, r24
     c9a:	6d 91       	ld	r22, X+
     c9c:	7d 91       	ld	r23, X+
     c9e:	8d 91       	ld	r24, X+
     ca0:	9c 91       	ld	r25, X
     ca2:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     ca6:	e2 96       	adiw	r28, 0x32	; 50
     ca8:	6c af       	std	Y+60, r22	; 0x3c
     caa:	7d af       	std	Y+61, r23	; 0x3d
     cac:	8e af       	std	Y+62, r24	; 0x3e
     cae:	9f af       	std	Y+63, r25	; 0x3f
     cb0:	e2 97       	sbiw	r28, 0x32	; 50
     cb2:	e2 96       	adiw	r28, 0x32	; 50
     cb4:	2c ad       	ldd	r18, Y+60	; 0x3c
     cb6:	3d ad       	ldd	r19, Y+61	; 0x3d
     cb8:	4e ad       	ldd	r20, Y+62	; 0x3e
     cba:	5f ad       	ldd	r21, Y+63	; 0x3f
     cbc:	e2 97       	sbiw	r28, 0x32	; 50
     cbe:	d8 01       	movw	r26, r16
     cc0:	2d 93       	st	X+, r18
     cc2:	3d 93       	st	X+, r19
     cc4:	4d 93       	st	X+, r20
     cc6:	5c 93       	st	X, r21
     cc8:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
     cca:	ce 01       	movw	r24, r28
     ccc:	85 5b       	subi	r24, 0xB5	; 181
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e8       	ldi	r20, 0x80	; 128
     cd6:	5f e3       	ldi	r21, 0x3F	; 63
     cd8:	fc 01       	movw	r30, r24
     cda:	60 81       	ld	r22, Z
     cdc:	71 81       	ldd	r23, Z+1	; 0x01
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
     ce6:	88 23       	and	r24, r24
     ce8:	4c f4       	brge	.+18     	; 0xcfc <LCD_displayCharacter+0xd0>
		__ticks = 1;
     cea:	ce 01       	movw	r24, r28
     cec:	81 5b       	subi	r24, 0xB1	; 177
     cee:	9f 4f       	sbci	r25, 0xFF	; 255
     cf0:	21 e0       	ldi	r18, 0x01	; 1
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	dc 01       	movw	r26, r24
     cf6:	2d 93       	st	X+, r18
     cf8:	3c 93       	st	X, r19
     cfa:	92 c0       	rjmp	.+292    	; 0xe20 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
     cfc:	ce 01       	movw	r24, r28
     cfe:	85 5b       	subi	r24, 0xB5	; 181
     d00:	9f 4f       	sbci	r25, 0xFF	; 255
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	3f ef       	ldi	r19, 0xFF	; 255
     d06:	4f e7       	ldi	r20, 0x7F	; 127
     d08:	57 e4       	ldi	r21, 0x47	; 71
     d0a:	fc 01       	movw	r30, r24
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
     d18:	18 16       	cp	r1, r24
     d1a:	0c f0       	brlt	.+2      	; 0xd1e <LCD_displayCharacter+0xf2>
     d1c:	67 c0       	rjmp	.+206    	; 0xdec <LCD_displayCharacter+0x1c0>
		__ticks = (uint16_t) (__ms * 10.0);
     d1e:	ce 01       	movw	r24, r28
     d20:	89 5b       	subi	r24, 0xB9	; 185
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e2       	ldi	r20, 0x20	; 32
     d2a:	51 e4       	ldi	r21, 0x41	; 65
     d2c:	dc 01       	movw	r26, r24
     d2e:	6d 91       	ld	r22, X+
     d30:	7d 91       	ld	r23, X+
     d32:	8d 91       	ld	r24, X+
     d34:	9c 91       	ld	r25, X
     d36:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     d3a:	e6 96       	adiw	r28, 0x36	; 54
     d3c:	6c af       	std	Y+60, r22	; 0x3c
     d3e:	7d af       	std	Y+61, r23	; 0x3d
     d40:	8e af       	std	Y+62, r24	; 0x3e
     d42:	9f af       	std	Y+63, r25	; 0x3f
     d44:	e6 97       	sbiw	r28, 0x36	; 54
     d46:	e6 96       	adiw	r28, 0x36	; 54
     d48:	2c ad       	ldd	r18, Y+60	; 0x3c
     d4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     d4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     d4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     d50:	e6 97       	sbiw	r28, 0x36	; 54
     d52:	ae 96       	adiw	r28, 0x2e	; 46
     d54:	2c af       	std	Y+60, r18	; 0x3c
     d56:	3d af       	std	Y+61, r19	; 0x3d
     d58:	4e af       	std	Y+62, r20	; 0x3e
     d5a:	5f af       	std	Y+63, r21	; 0x3f
     d5c:	ae 97       	sbiw	r28, 0x2e	; 46
     d5e:	8e 01       	movw	r16, r28
     d60:	01 5b       	subi	r16, 0xB1	; 177
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	ae 96       	adiw	r28, 0x2e	; 46
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	ae 97       	sbiw	r28, 0x2e	; 46
     d70:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     d74:	ea 96       	adiw	r28, 0x3a	; 58
     d76:	6c af       	std	Y+60, r22	; 0x3c
     d78:	7d af       	std	Y+61, r23	; 0x3d
     d7a:	8e af       	std	Y+62, r24	; 0x3e
     d7c:	9f af       	std	Y+63, r25	; 0x3f
     d7e:	ea 97       	sbiw	r28, 0x3a	; 58
     d80:	e8 96       	adiw	r28, 0x38	; 56
     d82:	ee ad       	ldd	r30, Y+62	; 0x3e
     d84:	ff ad       	ldd	r31, Y+63	; 0x3f
     d86:	e8 97       	sbiw	r28, 0x38	; 56
     d88:	d8 01       	movw	r26, r16
     d8a:	ed 93       	st	X+, r30
     d8c:	fc 93       	st	X, r31
		while(__ticks)
     d8e:	25 c0       	rjmp	.+74     	; 0xdda <LCD_displayCharacter+0x1ae>
     d90:	ce 01       	movw	r24, r28
     d92:	8f 5a       	subi	r24, 0xAF	; 175
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	24 ef       	ldi	r18, 0xF4	; 244
     d98:	31 e0       	ldi	r19, 0x01	; 1
     d9a:	dc 01       	movw	r26, r24
     d9c:	2d 93       	st	X+, r18
     d9e:	3c 93       	st	X, r19
	__asm__ volatile (
     da0:	ce 01       	movw	r24, r28
     da2:	8f 5a       	subi	r24, 0xAF	; 175
     da4:	9f 4f       	sbci	r25, 0xFF	; 255
     da6:	fc 01       	movw	r30, r24
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <LCD_displayCharacter+0x180>
     db0:	9e 01       	movw	r18, r28
     db2:	2f 5a       	subi	r18, 0xAF	; 175
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	d9 01       	movw	r26, r18
     db8:	8d 93       	st	X+, r24
     dba:	9c 93       	st	X, r25
}
     dbc:	00 00       	nop
			__ticks --;
     dbe:	ce 01       	movw	r24, r28
     dc0:	81 5b       	subi	r24, 0xB1	; 177
     dc2:	9f 4f       	sbci	r25, 0xFF	; 255
     dc4:	9e 01       	movw	r18, r28
     dc6:	21 5b       	subi	r18, 0xB1	; 177
     dc8:	3f 4f       	sbci	r19, 0xFF	; 255
     dca:	f9 01       	movw	r30, r18
     dcc:	20 81       	ld	r18, Z
     dce:	31 81       	ldd	r19, Z+1	; 0x01
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	31 09       	sbc	r19, r1
     dd4:	dc 01       	movw	r26, r24
     dd6:	2d 93       	st	X+, r18
     dd8:	3c 93       	st	X, r19
		while(__ticks)
     dda:	ce 01       	movw	r24, r28
     ddc:	81 5b       	subi	r24, 0xB1	; 177
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	fc 01       	movw	r30, r24
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	89 2b       	or	r24, r25
     de8:	99 f6       	brne	.-90     	; 0xd90 <LCD_displayCharacter+0x164>
		return;
     dea:	35 c0       	rjmp	.+106    	; 0xe56 <LCD_displayCharacter+0x22a>
		__ticks = (uint16_t)__tmp;
     dec:	8e 01       	movw	r16, r28
     dee:	01 5b       	subi	r16, 0xB1	; 177
     df0:	1f 4f       	sbci	r17, 0xFF	; 255
     df2:	ce 01       	movw	r24, r28
     df4:	85 5b       	subi	r24, 0xB5	; 181
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	dc 01       	movw	r26, r24
     dfa:	6d 91       	ld	r22, X+
     dfc:	7d 91       	ld	r23, X+
     dfe:	8d 91       	ld	r24, X+
     e00:	9c 91       	ld	r25, X
     e02:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     e06:	ee 96       	adiw	r28, 0x3e	; 62
     e08:	6c af       	std	Y+60, r22	; 0x3c
     e0a:	7d af       	std	Y+61, r23	; 0x3d
     e0c:	8e af       	std	Y+62, r24	; 0x3e
     e0e:	9f af       	std	Y+63, r25	; 0x3f
     e10:	ee 97       	sbiw	r28, 0x3e	; 62
     e12:	ec 96       	adiw	r28, 0x3c	; 60
     e14:	2e ad       	ldd	r18, Y+62	; 0x3e
     e16:	3f ad       	ldd	r19, Y+63	; 0x3f
     e18:	ec 97       	sbiw	r28, 0x3c	; 60
     e1a:	f8 01       	movw	r30, r16
     e1c:	31 83       	std	Z+1, r19	; 0x01
     e1e:	20 83       	st	Z, r18
     e20:	ce 01       	movw	r24, r28
     e22:	8d 5a       	subi	r24, 0xAD	; 173
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	9e 01       	movw	r18, r28
     e28:	21 5b       	subi	r18, 0xB1	; 177
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
     e2c:	d9 01       	movw	r26, r18
     e2e:	2d 91       	ld	r18, X+
     e30:	3c 91       	ld	r19, X
     e32:	fc 01       	movw	r30, r24
     e34:	31 83       	std	Z+1, r19	; 0x01
     e36:	20 83       	st	Z, r18
	__asm__ volatile (
     e38:	ce 01       	movw	r24, r28
     e3a:	8d 5a       	subi	r24, 0xAD	; 173
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	dc 01       	movw	r26, r24
     e40:	8d 91       	ld	r24, X+
     e42:	9c 91       	ld	r25, X
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <LCD_displayCharacter+0x218>
     e48:	9e 01       	movw	r18, r28
     e4a:	2d 5a       	subi	r18, 0xAD	; 173
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
     e4e:	f9 01       	movw	r30, r18
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	80 83       	st	Z, r24
}
     e54:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
     e56:	82 e3       	ldi	r24, 0x32	; 50
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	dc 01       	movw	r26, r24
     e5c:	2c 91       	ld	r18, X
     e5e:	20 64       	ori	r18, 0x40	; 64
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a0 e8       	ldi	r26, 0x80	; 128
     e6a:	bf e3       	ldi	r27, 0x3F	; 63
     e6c:	89 af       	std	Y+57, r24	; 0x39
     e6e:	9a af       	std	Y+58, r25	; 0x3a
     e70:	ab af       	std	Y+59, r26	; 0x3b
     e72:	bc af       	std	Y+60, r27	; 0x3c
	__tmp = ((F_CPU) / 4e3) * __ms;
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e4       	ldi	r19, 0x40	; 64
     e78:	4c e9       	ldi	r20, 0x9C	; 156
     e7a:	55 e4       	ldi	r21, 0x45	; 69
     e7c:	69 ad       	ldd	r22, Y+57	; 0x39
     e7e:	7a ad       	ldd	r23, Y+58	; 0x3a
     e80:	8b ad       	ldd	r24, Y+59	; 0x3b
     e82:	9c ad       	ldd	r25, Y+60	; 0x3c
     e84:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     e88:	c2 58       	subi	r28, 0x82	; 130
     e8a:	df 4f       	sbci	r29, 0xFF	; 255
     e8c:	68 83       	st	Y, r22
     e8e:	79 83       	std	Y+1, r23	; 0x01
     e90:	8a 83       	std	Y+2, r24	; 0x02
     e92:	9b 83       	std	Y+3, r25	; 0x03
     e94:	ce 57       	subi	r28, 0x7E	; 126
     e96:	d0 40       	sbci	r29, 0x00	; 0
     e98:	ce 01       	movw	r24, r28
     e9a:	cd 96       	adiw	r24, 0x3d	; 61
     e9c:	c2 58       	subi	r28, 0x82	; 130
     e9e:	df 4f       	sbci	r29, 0xFF	; 255
     ea0:	28 81       	ld	r18, Y
     ea2:	39 81       	ldd	r19, Y+1	; 0x01
     ea4:	4a 81       	ldd	r20, Y+2	; 0x02
     ea6:	5b 81       	ldd	r21, Y+3	; 0x03
     ea8:	ce 57       	subi	r28, 0x7E	; 126
     eaa:	d0 40       	sbci	r29, 0x00	; 0
     eac:	dc 01       	movw	r26, r24
     eae:	2d 93       	st	X+, r18
     eb0:	3d 93       	st	X+, r19
     eb2:	4d 93       	st	X+, r20
     eb4:	5c 93       	st	X, r21
     eb6:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	5f e3       	ldi	r21, 0x3F	; 63
     ec0:	ce 01       	movw	r24, r28
     ec2:	cd 96       	adiw	r24, 0x3d	; 61
     ec4:	fc 01       	movw	r30, r24
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
     ed2:	88 23       	and	r24, r24
     ed4:	4c f4       	brge	.+18     	; 0xee8 <LCD_displayCharacter+0x2bc>
		__ticks = 1;
     ed6:	ce 01       	movw	r24, r28
     ed8:	8f 5b       	subi	r24, 0xBF	; 191
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	21 e0       	ldi	r18, 0x01	; 1
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	dc 01       	movw	r26, r24
     ee2:	2d 93       	st	X+, r18
     ee4:	3c 93       	st	X, r19
     ee6:	98 c0       	rjmp	.+304    	; 0x1018 <LCD_displayCharacter+0x3ec>
	else if (__tmp > 65535)
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	3f ef       	ldi	r19, 0xFF	; 255
     eec:	4f e7       	ldi	r20, 0x7F	; 127
     eee:	57 e4       	ldi	r21, 0x47	; 71
     ef0:	ce 01       	movw	r24, r28
     ef2:	cd 96       	adiw	r24, 0x3d	; 61
     ef4:	fc 01       	movw	r30, r24
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
     f02:	18 16       	cp	r1, r24
     f04:	0c f0       	brlt	.+2      	; 0xf08 <LCD_displayCharacter+0x2dc>
     f06:	6b c0       	rjmp	.+214    	; 0xfde <LCD_displayCharacter+0x3b2>
		__ticks = (uint16_t) (__ms * 10.0);
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e2       	ldi	r20, 0x20	; 32
     f0e:	51 e4       	ldi	r21, 0x41	; 65
     f10:	69 ad       	ldd	r22, Y+57	; 0x39
     f12:	7a ad       	ldd	r23, Y+58	; 0x3a
     f14:	8b ad       	ldd	r24, Y+59	; 0x3b
     f16:	9c ad       	ldd	r25, Y+60	; 0x3c
     f18:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
     f1c:	ce 57       	subi	r28, 0x7E	; 126
     f1e:	df 4f       	sbci	r29, 0xFF	; 255
     f20:	68 83       	st	Y, r22
     f22:	79 83       	std	Y+1, r23	; 0x01
     f24:	8a 83       	std	Y+2, r24	; 0x02
     f26:	9b 83       	std	Y+3, r25	; 0x03
     f28:	c2 58       	subi	r28, 0x82	; 130
     f2a:	d0 40       	sbci	r29, 0x00	; 0
     f2c:	ce 57       	subi	r28, 0x7E	; 126
     f2e:	df 4f       	sbci	r29, 0xFF	; 255
     f30:	28 81       	ld	r18, Y
     f32:	39 81       	ldd	r19, Y+1	; 0x01
     f34:	4a 81       	ldd	r20, Y+2	; 0x02
     f36:	5b 81       	ldd	r21, Y+3	; 0x03
     f38:	c2 58       	subi	r28, 0x82	; 130
     f3a:	d0 40       	sbci	r29, 0x00	; 0
     f3c:	aa 96       	adiw	r28, 0x2a	; 42
     f3e:	2c af       	std	Y+60, r18	; 0x3c
     f40:	3d af       	std	Y+61, r19	; 0x3d
     f42:	4e af       	std	Y+62, r20	; 0x3e
     f44:	5f af       	std	Y+63, r21	; 0x3f
     f46:	aa 97       	sbiw	r28, 0x2a	; 42
     f48:	8e 01       	movw	r16, r28
     f4a:	0f 5b       	subi	r16, 0xBF	; 191
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	aa 96       	adiw	r28, 0x2a	; 42
     f50:	6c ad       	ldd	r22, Y+60	; 0x3c
     f52:	7d ad       	ldd	r23, Y+61	; 0x3d
     f54:	8e ad       	ldd	r24, Y+62	; 0x3e
     f56:	9f ad       	ldd	r25, Y+63	; 0x3f
     f58:	aa 97       	sbiw	r28, 0x2a	; 42
     f5a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     f5e:	ca 57       	subi	r28, 0x7A	; 122
     f60:	df 4f       	sbci	r29, 0xFF	; 255
     f62:	68 83       	st	Y, r22
     f64:	79 83       	std	Y+1, r23	; 0x01
     f66:	8a 83       	std	Y+2, r24	; 0x02
     f68:	9b 83       	std	Y+3, r25	; 0x03
     f6a:	c6 58       	subi	r28, 0x86	; 134
     f6c:	d0 40       	sbci	r29, 0x00	; 0
     f6e:	ca 57       	subi	r28, 0x7A	; 122
     f70:	df 4f       	sbci	r29, 0xFF	; 255
     f72:	e8 81       	ld	r30, Y
     f74:	f9 81       	ldd	r31, Y+1	; 0x01
     f76:	c6 58       	subi	r28, 0x86	; 134
     f78:	d0 40       	sbci	r29, 0x00	; 0
     f7a:	d8 01       	movw	r26, r16
     f7c:	ed 93       	st	X+, r30
     f7e:	fc 93       	st	X, r31
		while(__ticks)
     f80:	25 c0       	rjmp	.+74     	; 0xfcc <LCD_displayCharacter+0x3a0>
     f82:	ce 01       	movw	r24, r28
     f84:	8d 5b       	subi	r24, 0xBD	; 189
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	24 ef       	ldi	r18, 0xF4	; 244
     f8a:	31 e0       	ldi	r19, 0x01	; 1
     f8c:	dc 01       	movw	r26, r24
     f8e:	2d 93       	st	X+, r18
     f90:	3c 93       	st	X, r19
	__asm__ volatile (
     f92:	ce 01       	movw	r24, r28
     f94:	8d 5b       	subi	r24, 0xBD	; 189
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	fc 01       	movw	r30, r24
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <LCD_displayCharacter+0x372>
     fa2:	9e 01       	movw	r18, r28
     fa4:	2d 5b       	subi	r18, 0xBD	; 189
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	d9 01       	movw	r26, r18
     faa:	8d 93       	st	X+, r24
     fac:	9c 93       	st	X, r25
}
     fae:	00 00       	nop
			__ticks --;
     fb0:	ce 01       	movw	r24, r28
     fb2:	8f 5b       	subi	r24, 0xBF	; 191
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	9e 01       	movw	r18, r28
     fb8:	2f 5b       	subi	r18, 0xBF	; 191
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	f9 01       	movw	r30, r18
     fbe:	20 81       	ld	r18, Z
     fc0:	31 81       	ldd	r19, Z+1	; 0x01
     fc2:	21 50       	subi	r18, 0x01	; 1
     fc4:	31 09       	sbc	r19, r1
     fc6:	dc 01       	movw	r26, r24
     fc8:	2d 93       	st	X+, r18
     fca:	3c 93       	st	X, r19
		while(__ticks)
     fcc:	ce 01       	movw	r24, r28
     fce:	8f 5b       	subi	r24, 0xBF	; 191
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	fc 01       	movw	r30, r24
     fd4:	80 81       	ld	r24, Z
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	89 2b       	or	r24, r25
     fda:	99 f6       	brne	.-90     	; 0xf82 <LCD_displayCharacter+0x356>
		return;
     fdc:	38 c0       	rjmp	.+112    	; 0x104e <LCD_displayCharacter+0x422>
		__ticks = (uint16_t)__tmp;
     fde:	8e 01       	movw	r16, r28
     fe0:	0f 5b       	subi	r16, 0xBF	; 191
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	ce 01       	movw	r24, r28
     fe6:	cd 96       	adiw	r24, 0x3d	; 61
     fe8:	dc 01       	movw	r26, r24
     fea:	6d 91       	ld	r22, X+
     fec:	7d 91       	ld	r23, X+
     fee:	8d 91       	ld	r24, X+
     ff0:	9c 91       	ld	r25, X
     ff2:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     ff6:	c6 57       	subi	r28, 0x76	; 118
     ff8:	df 4f       	sbci	r29, 0xFF	; 255
     ffa:	68 83       	st	Y, r22
     ffc:	79 83       	std	Y+1, r23	; 0x01
     ffe:	8a 83       	std	Y+2, r24	; 0x02
    1000:	9b 83       	std	Y+3, r25	; 0x03
    1002:	ca 58       	subi	r28, 0x8A	; 138
    1004:	d0 40       	sbci	r29, 0x00	; 0
    1006:	c6 57       	subi	r28, 0x76	; 118
    1008:	df 4f       	sbci	r29, 0xFF	; 255
    100a:	28 81       	ld	r18, Y
    100c:	39 81       	ldd	r19, Y+1	; 0x01
    100e:	ca 58       	subi	r28, 0x8A	; 138
    1010:	d0 40       	sbci	r29, 0x00	; 0
    1012:	f8 01       	movw	r30, r16
    1014:	31 83       	std	Z+1, r19	; 0x01
    1016:	20 83       	st	Z, r18
    1018:	ce 01       	movw	r24, r28
    101a:	8b 5b       	subi	r24, 0xBB	; 187
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	9e 01       	movw	r18, r28
    1020:	2f 5b       	subi	r18, 0xBF	; 191
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
    1024:	d9 01       	movw	r26, r18
    1026:	2d 91       	ld	r18, X+
    1028:	3c 91       	ld	r19, X
    102a:	fc 01       	movw	r30, r24
    102c:	31 83       	std	Z+1, r19	; 0x01
    102e:	20 83       	st	Z, r18
	__asm__ volatile (
    1030:	ce 01       	movw	r24, r28
    1032:	8b 5b       	subi	r24, 0xBB	; 187
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	dc 01       	movw	r26, r24
    1038:	8d 91       	ld	r24, X+
    103a:	9c 91       	ld	r25, X
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <LCD_displayCharacter+0x410>
    1040:	9e 01       	movw	r18, r28
    1042:	2b 5b       	subi	r18, 0xBB	; 187
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	f9 01       	movw	r30, r18
    1048:	91 83       	std	Z+1, r25	; 0x01
    104a:	80 83       	st	Z, r24
}
    104c:	00 00       	nop
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( data  & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT=( (data >>4 ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    104e:	ce 01       	movw	r24, r28
    1050:	8b 5a       	subi	r24, 0xAB	; 171
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	dc 01       	movw	r26, r24
    1056:	8c 91       	ld	r24, X
    1058:	82 95       	swap	r24
    105a:	8f 70       	andi	r24, 0x0F	; 15
    105c:	28 2f       	mov	r18, r24
    105e:	88 e2       	ldi	r24, 0x28	; 40
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	fc 01       	movw	r30, r24
    1064:	80 81       	ld	r24, Z
    1066:	80 7f       	andi	r24, 0xF0	; 240
    1068:	28 2b       	or	r18, r24
    106a:	88 e2       	ldi	r24, 0x28	; 40
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	dc 01       	movw	r26, r24
    1070:	2c 93       	st	X, r18
#endif

	E = CLEAR;	 /* close Enable to prevent data share between LCD and AVR */
    1072:	82 e3       	ldi	r24, 0x32	; 50
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	fc 01       	movw	r30, r24
    1078:	20 81       	ld	r18, Z
    107a:	2f 7b       	andi	r18, 0xBF	; 191
    107c:	dc 01       	movw	r26, r24
    107e:	2c 93       	st	X, r18
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	a0 e8       	ldi	r26, 0x80	; 128
    1086:	bf e3       	ldi	r27, 0x3F	; 63
    1088:	8b a7       	std	Y+43, r24	; 0x2b
    108a:	9c a7       	std	Y+44, r25	; 0x2c
    108c:	ad a7       	std	Y+45, r26	; 0x2d
    108e:	be a7       	std	Y+46, r27	; 0x2e
	__tmp = ((F_CPU) / 4e3) * __ms;
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e4       	ldi	r19, 0x40	; 64
    1094:	4c e9       	ldi	r20, 0x9C	; 156
    1096:	55 e4       	ldi	r21, 0x45	; 69
    1098:	6b a5       	ldd	r22, Y+43	; 0x2b
    109a:	7c a5       	ldd	r23, Y+44	; 0x2c
    109c:	8d a5       	ldd	r24, Y+45	; 0x2d
    109e:	9e a5       	ldd	r25, Y+46	; 0x2e
    10a0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    10a4:	c2 57       	subi	r28, 0x72	; 114
    10a6:	df 4f       	sbci	r29, 0xFF	; 255
    10a8:	68 83       	st	Y, r22
    10aa:	79 83       	std	Y+1, r23	; 0x01
    10ac:	8a 83       	std	Y+2, r24	; 0x02
    10ae:	9b 83       	std	Y+3, r25	; 0x03
    10b0:	ce 58       	subi	r28, 0x8E	; 142
    10b2:	d0 40       	sbci	r29, 0x00	; 0
    10b4:	c2 57       	subi	r28, 0x72	; 114
    10b6:	df 4f       	sbci	r29, 0xFF	; 255
    10b8:	28 81       	ld	r18, Y
    10ba:	39 81       	ldd	r19, Y+1	; 0x01
    10bc:	4a 81       	ldd	r20, Y+2	; 0x02
    10be:	5b 81       	ldd	r21, Y+3	; 0x03
    10c0:	ce 58       	subi	r28, 0x8E	; 142
    10c2:	d0 40       	sbci	r29, 0x00	; 0
    10c4:	2f a7       	std	Y+47, r18	; 0x2f
    10c6:	38 ab       	std	Y+48, r19	; 0x30
    10c8:	49 ab       	std	Y+49, r20	; 0x31
    10ca:	5a ab       	std	Y+50, r21	; 0x32
	if (__tmp < 1.0)
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	5f e3       	ldi	r21, 0x3F	; 63
    10d4:	6f a5       	ldd	r22, Y+47	; 0x2f
    10d6:	78 a9       	ldd	r23, Y+48	; 0x30
    10d8:	89 a9       	ldd	r24, Y+49	; 0x31
    10da:	9a a9       	ldd	r25, Y+50	; 0x32
    10dc:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    10e0:	88 23       	and	r24, r24
    10e2:	2c f4       	brge	.+10     	; 0x10ee <LCD_displayCharacter+0x4c2>
		__ticks = 1;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	9c ab       	std	Y+52, r25	; 0x34
    10ea:	8b ab       	std	Y+51, r24	; 0x33
    10ec:	71 c0       	rjmp	.+226    	; 0x11d0 <LCD_displayCharacter+0x5a4>
	else if (__tmp > 65535)
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	3f ef       	ldi	r19, 0xFF	; 255
    10f2:	4f e7       	ldi	r20, 0x7F	; 127
    10f4:	57 e4       	ldi	r21, 0x47	; 71
    10f6:	6f a5       	ldd	r22, Y+47	; 0x2f
    10f8:	78 a9       	ldd	r23, Y+48	; 0x30
    10fa:	89 a9       	ldd	r24, Y+49	; 0x31
    10fc:	9a a9       	ldd	r25, Y+50	; 0x32
    10fe:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    1102:	18 16       	cp	r1, r24
    1104:	0c f0       	brlt	.+2      	; 0x1108 <LCD_displayCharacter+0x4dc>
    1106:	4e c0       	rjmp	.+156    	; 0x11a4 <LCD_displayCharacter+0x578>
		__ticks = (uint16_t) (__ms * 10.0);
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e2       	ldi	r20, 0x20	; 32
    110e:	51 e4       	ldi	r21, 0x41	; 65
    1110:	6b a5       	ldd	r22, Y+43	; 0x2b
    1112:	7c a5       	ldd	r23, Y+44	; 0x2c
    1114:	8d a5       	ldd	r24, Y+45	; 0x2d
    1116:	9e a5       	ldd	r25, Y+46	; 0x2e
    1118:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    111c:	ce 56       	subi	r28, 0x6E	; 110
    111e:	df 4f       	sbci	r29, 0xFF	; 255
    1120:	68 83       	st	Y, r22
    1122:	79 83       	std	Y+1, r23	; 0x01
    1124:	8a 83       	std	Y+2, r24	; 0x02
    1126:	9b 83       	std	Y+3, r25	; 0x03
    1128:	c2 59       	subi	r28, 0x92	; 146
    112a:	d0 40       	sbci	r29, 0x00	; 0
    112c:	ce 56       	subi	r28, 0x6E	; 110
    112e:	df 4f       	sbci	r29, 0xFF	; 255
    1130:	88 81       	ld	r24, Y
    1132:	99 81       	ldd	r25, Y+1	; 0x01
    1134:	aa 81       	ldd	r26, Y+2	; 0x02
    1136:	bb 81       	ldd	r27, Y+3	; 0x03
    1138:	c2 59       	subi	r28, 0x92	; 146
    113a:	d0 40       	sbci	r29, 0x00	; 0
    113c:	a6 96       	adiw	r28, 0x26	; 38
    113e:	8c af       	std	Y+60, r24	; 0x3c
    1140:	9d af       	std	Y+61, r25	; 0x3d
    1142:	ae af       	std	Y+62, r26	; 0x3e
    1144:	bf af       	std	Y+63, r27	; 0x3f
    1146:	a6 97       	sbiw	r28, 0x26	; 38
    1148:	a6 96       	adiw	r28, 0x26	; 38
    114a:	6c ad       	ldd	r22, Y+60	; 0x3c
    114c:	7d ad       	ldd	r23, Y+61	; 0x3d
    114e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1150:	9f ad       	ldd	r25, Y+63	; 0x3f
    1152:	a6 97       	sbiw	r28, 0x26	; 38
    1154:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1158:	ca 56       	subi	r28, 0x6A	; 106
    115a:	df 4f       	sbci	r29, 0xFF	; 255
    115c:	68 83       	st	Y, r22
    115e:	79 83       	std	Y+1, r23	; 0x01
    1160:	8a 83       	std	Y+2, r24	; 0x02
    1162:	9b 83       	std	Y+3, r25	; 0x03
    1164:	c6 59       	subi	r28, 0x96	; 150
    1166:	d0 40       	sbci	r29, 0x00	; 0
    1168:	ca 56       	subi	r28, 0x6A	; 106
    116a:	df 4f       	sbci	r29, 0xFF	; 255
    116c:	a8 81       	ld	r26, Y
    116e:	b9 81       	ldd	r27, Y+1	; 0x01
    1170:	c6 59       	subi	r28, 0x96	; 150
    1172:	d0 40       	sbci	r29, 0x00	; 0
    1174:	bc ab       	std	Y+52, r27	; 0x34
    1176:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
    1178:	10 c0       	rjmp	.+32     	; 0x119a <LCD_displayCharacter+0x56e>
    117a:	84 ef       	ldi	r24, 0xF4	; 244
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	9e ab       	std	Y+54, r25	; 0x36
    1180:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
    1182:	8d a9       	ldd	r24, Y+53	; 0x35
    1184:	9e a9       	ldd	r25, Y+54	; 0x36
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <LCD_displayCharacter+0x55a>
    118a:	9e ab       	std	Y+54, r25	; 0x36
    118c:	8d ab       	std	Y+53, r24	; 0x35
}
    118e:	00 00       	nop
			__ticks --;
    1190:	8b a9       	ldd	r24, Y+51	; 0x33
    1192:	9c a9       	ldd	r25, Y+52	; 0x34
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	9c ab       	std	Y+52, r25	; 0x34
    1198:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
    119a:	8b a9       	ldd	r24, Y+51	; 0x33
    119c:	9c a9       	ldd	r25, Y+52	; 0x34
    119e:	89 2b       	or	r24, r25
    11a0:	61 f7       	brne	.-40     	; 0x117a <LCD_displayCharacter+0x54e>
		return;
    11a2:	21 c0       	rjmp	.+66     	; 0x11e6 <LCD_displayCharacter+0x5ba>
		__ticks = (uint16_t)__tmp;
    11a4:	6f a5       	ldd	r22, Y+47	; 0x2f
    11a6:	78 a9       	ldd	r23, Y+48	; 0x30
    11a8:	89 a9       	ldd	r24, Y+49	; 0x31
    11aa:	9a a9       	ldd	r25, Y+50	; 0x32
    11ac:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    11b0:	c6 56       	subi	r28, 0x66	; 102
    11b2:	df 4f       	sbci	r29, 0xFF	; 255
    11b4:	68 83       	st	Y, r22
    11b6:	79 83       	std	Y+1, r23	; 0x01
    11b8:	8a 83       	std	Y+2, r24	; 0x02
    11ba:	9b 83       	std	Y+3, r25	; 0x03
    11bc:	ca 59       	subi	r28, 0x9A	; 154
    11be:	d0 40       	sbci	r29, 0x00	; 0
    11c0:	c6 56       	subi	r28, 0x66	; 102
    11c2:	df 4f       	sbci	r29, 0xFF	; 255
    11c4:	e8 81       	ld	r30, Y
    11c6:	f9 81       	ldd	r31, Y+1	; 0x01
    11c8:	ca 59       	subi	r28, 0x9A	; 154
    11ca:	d0 40       	sbci	r29, 0x00	; 0
    11cc:	fc ab       	std	Y+52, r31	; 0x34
    11ce:	eb ab       	std	Y+51, r30	; 0x33
    11d0:	8b a9       	ldd	r24, Y+51	; 0x33
    11d2:	9c a9       	ldd	r25, Y+52	; 0x34
    11d4:	98 af       	std	Y+56, r25	; 0x38
    11d6:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
    11d8:	8f a9       	ldd	r24, Y+55	; 0x37
    11da:	98 ad       	ldd	r25, Y+56	; 0x38
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <LCD_displayCharacter+0x5b0>
    11e0:	98 af       	std	Y+56, r25	; 0x38
    11e2:	8f ab       	std	Y+55, r24	; 0x37
}
    11e4:	00 00       	nop
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	E = SET;		/* open Enable again to send last 4 bits of DATA */
    11e6:	82 e3       	ldi	r24, 0x32	; 50
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	dc 01       	movw	r26, r24
    11ec:	2c 91       	ld	r18, X
    11ee:	20 64       	ori	r18, 0x40	; 64
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 83       	st	Z, r18
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a0 e8       	ldi	r26, 0x80	; 128
    11fa:	bf e3       	ldi	r27, 0x3F	; 63
    11fc:	8d 8f       	std	Y+29, r24	; 0x1d
    11fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1200:	af 8f       	std	Y+31, r26	; 0x1f
    1202:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e4       	ldi	r19, 0x40	; 64
    1208:	4c e9       	ldi	r20, 0x9C	; 156
    120a:	55 e4       	ldi	r21, 0x45	; 69
    120c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    120e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1210:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1212:	98 a1       	ldd	r25, Y+32	; 0x20
    1214:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1218:	c2 56       	subi	r28, 0x62	; 98
    121a:	df 4f       	sbci	r29, 0xFF	; 255
    121c:	68 83       	st	Y, r22
    121e:	79 83       	std	Y+1, r23	; 0x01
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	9b 83       	std	Y+3, r25	; 0x03
    1224:	ce 59       	subi	r28, 0x9E	; 158
    1226:	d0 40       	sbci	r29, 0x00	; 0
    1228:	c2 56       	subi	r28, 0x62	; 98
    122a:	df 4f       	sbci	r29, 0xFF	; 255
    122c:	28 81       	ld	r18, Y
    122e:	39 81       	ldd	r19, Y+1	; 0x01
    1230:	4a 81       	ldd	r20, Y+2	; 0x02
    1232:	5b 81       	ldd	r21, Y+3	; 0x03
    1234:	ce 59       	subi	r28, 0x9E	; 158
    1236:	d0 40       	sbci	r29, 0x00	; 0
    1238:	29 a3       	std	Y+33, r18	; 0x21
    123a:	3a a3       	std	Y+34, r19	; 0x22
    123c:	4b a3       	std	Y+35, r20	; 0x23
    123e:	5c a3       	std	Y+36, r21	; 0x24
	if (__tmp < 1.0)
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e8       	ldi	r20, 0x80	; 128
    1246:	5f e3       	ldi	r21, 0x3F	; 63
    1248:	69 a1       	ldd	r22, Y+33	; 0x21
    124a:	7a a1       	ldd	r23, Y+34	; 0x22
    124c:	8b a1       	ldd	r24, Y+35	; 0x23
    124e:	9c a1       	ldd	r25, Y+36	; 0x24
    1250:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    1254:	88 23       	and	r24, r24
    1256:	2c f4       	brge	.+10     	; 0x1262 <LCD_displayCharacter+0x636>
		__ticks = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9e a3       	std	Y+38, r25	; 0x26
    125e:	8d a3       	std	Y+37, r24	; 0x25
    1260:	71 c0       	rjmp	.+226    	; 0x1344 <LCD_displayCharacter+0x718>
	else if (__tmp > 65535)
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	3f ef       	ldi	r19, 0xFF	; 255
    1266:	4f e7       	ldi	r20, 0x7F	; 127
    1268:	57 e4       	ldi	r21, 0x47	; 71
    126a:	69 a1       	ldd	r22, Y+33	; 0x21
    126c:	7a a1       	ldd	r23, Y+34	; 0x22
    126e:	8b a1       	ldd	r24, Y+35	; 0x23
    1270:	9c a1       	ldd	r25, Y+36	; 0x24
    1272:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    1276:	18 16       	cp	r1, r24
    1278:	0c f0       	brlt	.+2      	; 0x127c <LCD_displayCharacter+0x650>
    127a:	4e c0       	rjmp	.+156    	; 0x1318 <LCD_displayCharacter+0x6ec>
		__ticks = (uint16_t) (__ms * 10.0);
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1286:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1288:	8f 8d       	ldd	r24, Y+31	; 0x1f
    128a:	98 a1       	ldd	r25, Y+32	; 0x20
    128c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1290:	ce 55       	subi	r28, 0x5E	; 94
    1292:	df 4f       	sbci	r29, 0xFF	; 255
    1294:	68 83       	st	Y, r22
    1296:	79 83       	std	Y+1, r23	; 0x01
    1298:	8a 83       	std	Y+2, r24	; 0x02
    129a:	9b 83       	std	Y+3, r25	; 0x03
    129c:	c2 5a       	subi	r28, 0xA2	; 162
    129e:	d0 40       	sbci	r29, 0x00	; 0
    12a0:	ce 55       	subi	r28, 0x5E	; 94
    12a2:	df 4f       	sbci	r29, 0xFF	; 255
    12a4:	88 81       	ld	r24, Y
    12a6:	99 81       	ldd	r25, Y+1	; 0x01
    12a8:	aa 81       	ldd	r26, Y+2	; 0x02
    12aa:	bb 81       	ldd	r27, Y+3	; 0x03
    12ac:	c2 5a       	subi	r28, 0xA2	; 162
    12ae:	d0 40       	sbci	r29, 0x00	; 0
    12b0:	a2 96       	adiw	r28, 0x22	; 34
    12b2:	8c af       	std	Y+60, r24	; 0x3c
    12b4:	9d af       	std	Y+61, r25	; 0x3d
    12b6:	ae af       	std	Y+62, r26	; 0x3e
    12b8:	bf af       	std	Y+63, r27	; 0x3f
    12ba:	a2 97       	sbiw	r28, 0x22	; 34
    12bc:	a2 96       	adiw	r28, 0x22	; 34
    12be:	6c ad       	ldd	r22, Y+60	; 0x3c
    12c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    12c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    12c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    12c6:	a2 97       	sbiw	r28, 0x22	; 34
    12c8:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    12cc:	ca 55       	subi	r28, 0x5A	; 90
    12ce:	df 4f       	sbci	r29, 0xFF	; 255
    12d0:	68 83       	st	Y, r22
    12d2:	79 83       	std	Y+1, r23	; 0x01
    12d4:	8a 83       	std	Y+2, r24	; 0x02
    12d6:	9b 83       	std	Y+3, r25	; 0x03
    12d8:	c6 5a       	subi	r28, 0xA6	; 166
    12da:	d0 40       	sbci	r29, 0x00	; 0
    12dc:	ca 55       	subi	r28, 0x5A	; 90
    12de:	df 4f       	sbci	r29, 0xFF	; 255
    12e0:	a8 81       	ld	r26, Y
    12e2:	b9 81       	ldd	r27, Y+1	; 0x01
    12e4:	c6 5a       	subi	r28, 0xA6	; 166
    12e6:	d0 40       	sbci	r29, 0x00	; 0
    12e8:	be a3       	std	Y+38, r27	; 0x26
    12ea:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
    12ec:	10 c0       	rjmp	.+32     	; 0x130e <LCD_displayCharacter+0x6e2>
    12ee:	84 ef       	ldi	r24, 0xF4	; 244
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	98 a7       	std	Y+40, r25	; 0x28
    12f4:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
    12f6:	8f a1       	ldd	r24, Y+39	; 0x27
    12f8:	98 a5       	ldd	r25, Y+40	; 0x28
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <LCD_displayCharacter+0x6ce>
    12fe:	98 a7       	std	Y+40, r25	; 0x28
    1300:	8f a3       	std	Y+39, r24	; 0x27
}
    1302:	00 00       	nop
			__ticks --;
    1304:	8d a1       	ldd	r24, Y+37	; 0x25
    1306:	9e a1       	ldd	r25, Y+38	; 0x26
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9e a3       	std	Y+38, r25	; 0x26
    130c:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
    130e:	8d a1       	ldd	r24, Y+37	; 0x25
    1310:	9e a1       	ldd	r25, Y+38	; 0x26
    1312:	89 2b       	or	r24, r25
    1314:	61 f7       	brne	.-40     	; 0x12ee <LCD_displayCharacter+0x6c2>
		return;
    1316:	21 c0       	rjmp	.+66     	; 0x135a <LCD_displayCharacter+0x72e>
		__ticks = (uint16_t)__tmp;
    1318:	69 a1       	ldd	r22, Y+33	; 0x21
    131a:	7a a1       	ldd	r23, Y+34	; 0x22
    131c:	8b a1       	ldd	r24, Y+35	; 0x23
    131e:	9c a1       	ldd	r25, Y+36	; 0x24
    1320:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1324:	c6 55       	subi	r28, 0x56	; 86
    1326:	df 4f       	sbci	r29, 0xFF	; 255
    1328:	68 83       	st	Y, r22
    132a:	79 83       	std	Y+1, r23	; 0x01
    132c:	8a 83       	std	Y+2, r24	; 0x02
    132e:	9b 83       	std	Y+3, r25	; 0x03
    1330:	ca 5a       	subi	r28, 0xAA	; 170
    1332:	d0 40       	sbci	r29, 0x00	; 0
    1334:	c6 55       	subi	r28, 0x56	; 86
    1336:	df 4f       	sbci	r29, 0xFF	; 255
    1338:	e8 81       	ld	r30, Y
    133a:	f9 81       	ldd	r31, Y+1	; 0x01
    133c:	ca 5a       	subi	r28, 0xAA	; 170
    133e:	d0 40       	sbci	r29, 0x00	; 0
    1340:	fe a3       	std	Y+38, r31	; 0x26
    1342:	ed a3       	std	Y+37, r30	; 0x25
    1344:	8d a1       	ldd	r24, Y+37	; 0x25
    1346:	9e a1       	ldd	r25, Y+38	; 0x26
    1348:	9a a7       	std	Y+42, r25	; 0x2a
    134a:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
    134c:	89 a5       	ldd	r24, Y+41	; 0x29
    134e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <LCD_displayCharacter+0x724>
    1354:	9a a7       	std	Y+42, r25	; 0x2a
    1356:	89 a7       	std	Y+41, r24	; 0x29
}
    1358:	00 00       	nop
	/* send the Least 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( (data << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif

#ifdef LOWER_MODE_BITS
	DATA_OUT=( (data ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    135a:	ce 01       	movw	r24, r28
    135c:	8b 5a       	subi	r24, 0xAB	; 171
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	dc 01       	movw	r26, r24
    1362:	8c 91       	ld	r24, X
    1364:	28 2f       	mov	r18, r24
    1366:	2f 70       	andi	r18, 0x0F	; 15
    1368:	88 e2       	ldi	r24, 0x28	; 40
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	fc 01       	movw	r30, r24
    136e:	80 81       	ld	r24, Z
    1370:	80 7f       	andi	r24, 0xF0	; 240
    1372:	28 2b       	or	r18, r24
    1374:	88 e2       	ldi	r24, 0x28	; 40
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	dc 01       	movw	r26, r24
    137a:	2c 93       	st	X, r18
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a0 e8       	ldi	r26, 0x80	; 128
    1382:	bf e3       	ldi	r27, 0x3F	; 63
    1384:	8f 87       	std	Y+15, r24	; 0x0f
    1386:	98 8b       	std	Y+16, r25	; 0x10
    1388:	a9 8b       	std	Y+17, r26	; 0x11
    138a:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e4       	ldi	r19, 0x40	; 64
    1390:	4c e9       	ldi	r20, 0x9C	; 156
    1392:	55 e4       	ldi	r21, 0x45	; 69
    1394:	6f 85       	ldd	r22, Y+15	; 0x0f
    1396:	78 89       	ldd	r23, Y+16	; 0x10
    1398:	89 89       	ldd	r24, Y+17	; 0x11
    139a:	9a 89       	ldd	r25, Y+18	; 0x12
    139c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    13a0:	c2 55       	subi	r28, 0x52	; 82
    13a2:	df 4f       	sbci	r29, 0xFF	; 255
    13a4:	68 83       	st	Y, r22
    13a6:	79 83       	std	Y+1, r23	; 0x01
    13a8:	8a 83       	std	Y+2, r24	; 0x02
    13aa:	9b 83       	std	Y+3, r25	; 0x03
    13ac:	ce 5a       	subi	r28, 0xAE	; 174
    13ae:	d0 40       	sbci	r29, 0x00	; 0
    13b0:	c2 55       	subi	r28, 0x52	; 82
    13b2:	df 4f       	sbci	r29, 0xFF	; 255
    13b4:	28 81       	ld	r18, Y
    13b6:	39 81       	ldd	r19, Y+1	; 0x01
    13b8:	4a 81       	ldd	r20, Y+2	; 0x02
    13ba:	5b 81       	ldd	r21, Y+3	; 0x03
    13bc:	ce 5a       	subi	r28, 0xAE	; 174
    13be:	d0 40       	sbci	r29, 0x00	; 0
    13c0:	2b 8b       	std	Y+19, r18	; 0x13
    13c2:	3c 8b       	std	Y+20, r19	; 0x14
    13c4:	4d 8b       	std	Y+21, r20	; 0x15
    13c6:	5e 8b       	std	Y+22, r21	; 0x16
	if (__tmp < 1.0)
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	6b 89       	ldd	r22, Y+19	; 0x13
    13d2:	7c 89       	ldd	r23, Y+20	; 0x14
    13d4:	8d 89       	ldd	r24, Y+21	; 0x15
    13d6:	9e 89       	ldd	r25, Y+22	; 0x16
    13d8:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    13dc:	88 23       	and	r24, r24
    13de:	2c f4       	brge	.+10     	; 0x13ea <LCD_displayCharacter+0x7be>
		__ticks = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	98 8f       	std	Y+24, r25	; 0x18
    13e6:	8f 8b       	std	Y+23, r24	; 0x17
    13e8:	71 c0       	rjmp	.+226    	; 0x14cc <LCD_displayCharacter+0x8a0>
	else if (__tmp > 65535)
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	6b 89       	ldd	r22, Y+19	; 0x13
    13f4:	7c 89       	ldd	r23, Y+20	; 0x14
    13f6:	8d 89       	ldd	r24, Y+21	; 0x15
    13f8:	9e 89       	ldd	r25, Y+22	; 0x16
    13fa:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    13fe:	18 16       	cp	r1, r24
    1400:	0c f0       	brlt	.+2      	; 0x1404 <LCD_displayCharacter+0x7d8>
    1402:	4e c0       	rjmp	.+156    	; 0x14a0 <LCD_displayCharacter+0x874>
		__ticks = (uint16_t) (__ms * 10.0);
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e2       	ldi	r20, 0x20	; 32
    140a:	51 e4       	ldi	r21, 0x41	; 65
    140c:	6f 85       	ldd	r22, Y+15	; 0x0f
    140e:	78 89       	ldd	r23, Y+16	; 0x10
    1410:	89 89       	ldd	r24, Y+17	; 0x11
    1412:	9a 89       	ldd	r25, Y+18	; 0x12
    1414:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1418:	ce 54       	subi	r28, 0x4E	; 78
    141a:	df 4f       	sbci	r29, 0xFF	; 255
    141c:	68 83       	st	Y, r22
    141e:	79 83       	std	Y+1, r23	; 0x01
    1420:	8a 83       	std	Y+2, r24	; 0x02
    1422:	9b 83       	std	Y+3, r25	; 0x03
    1424:	c2 5b       	subi	r28, 0xB2	; 178
    1426:	d0 40       	sbci	r29, 0x00	; 0
    1428:	ce 54       	subi	r28, 0x4E	; 78
    142a:	df 4f       	sbci	r29, 0xFF	; 255
    142c:	88 81       	ld	r24, Y
    142e:	99 81       	ldd	r25, Y+1	; 0x01
    1430:	aa 81       	ldd	r26, Y+2	; 0x02
    1432:	bb 81       	ldd	r27, Y+3	; 0x03
    1434:	c2 5b       	subi	r28, 0xB2	; 178
    1436:	d0 40       	sbci	r29, 0x00	; 0
    1438:	6e 96       	adiw	r28, 0x1e	; 30
    143a:	8c af       	std	Y+60, r24	; 0x3c
    143c:	9d af       	std	Y+61, r25	; 0x3d
    143e:	ae af       	std	Y+62, r26	; 0x3e
    1440:	bf af       	std	Y+63, r27	; 0x3f
    1442:	6e 97       	sbiw	r28, 0x1e	; 30
    1444:	6e 96       	adiw	r28, 0x1e	; 30
    1446:	6c ad       	ldd	r22, Y+60	; 0x3c
    1448:	7d ad       	ldd	r23, Y+61	; 0x3d
    144a:	8e ad       	ldd	r24, Y+62	; 0x3e
    144c:	9f ad       	ldd	r25, Y+63	; 0x3f
    144e:	6e 97       	sbiw	r28, 0x1e	; 30
    1450:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1454:	ca 54       	subi	r28, 0x4A	; 74
    1456:	df 4f       	sbci	r29, 0xFF	; 255
    1458:	68 83       	st	Y, r22
    145a:	79 83       	std	Y+1, r23	; 0x01
    145c:	8a 83       	std	Y+2, r24	; 0x02
    145e:	9b 83       	std	Y+3, r25	; 0x03
    1460:	c6 5b       	subi	r28, 0xB6	; 182
    1462:	d0 40       	sbci	r29, 0x00	; 0
    1464:	ca 54       	subi	r28, 0x4A	; 74
    1466:	df 4f       	sbci	r29, 0xFF	; 255
    1468:	a8 81       	ld	r26, Y
    146a:	b9 81       	ldd	r27, Y+1	; 0x01
    146c:	c6 5b       	subi	r28, 0xB6	; 182
    146e:	d0 40       	sbci	r29, 0x00	; 0
    1470:	b8 8f       	std	Y+24, r27	; 0x18
    1472:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
    1474:	10 c0       	rjmp	.+32     	; 0x1496 <LCD_displayCharacter+0x86a>
    1476:	84 ef       	ldi	r24, 0xF4	; 244
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	9a 8f       	std	Y+26, r25	; 0x1a
    147c:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
    147e:	89 8d       	ldd	r24, Y+25	; 0x19
    1480:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <LCD_displayCharacter+0x856>
    1486:	9a 8f       	std	Y+26, r25	; 0x1a
    1488:	89 8f       	std	Y+25, r24	; 0x19
}
    148a:	00 00       	nop
			__ticks --;
    148c:	8f 89       	ldd	r24, Y+23	; 0x17
    148e:	98 8d       	ldd	r25, Y+24	; 0x18
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	98 8f       	std	Y+24, r25	; 0x18
    1494:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
    1496:	8f 89       	ldd	r24, Y+23	; 0x17
    1498:	98 8d       	ldd	r25, Y+24	; 0x18
    149a:	89 2b       	or	r24, r25
    149c:	61 f7       	brne	.-40     	; 0x1476 <LCD_displayCharacter+0x84a>
		return;
    149e:	21 c0       	rjmp	.+66     	; 0x14e2 <LCD_displayCharacter+0x8b6>
		__ticks = (uint16_t)__tmp;
    14a0:	6b 89       	ldd	r22, Y+19	; 0x13
    14a2:	7c 89       	ldd	r23, Y+20	; 0x14
    14a4:	8d 89       	ldd	r24, Y+21	; 0x15
    14a6:	9e 89       	ldd	r25, Y+22	; 0x16
    14a8:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    14ac:	c6 54       	subi	r28, 0x46	; 70
    14ae:	df 4f       	sbci	r29, 0xFF	; 255
    14b0:	68 83       	st	Y, r22
    14b2:	79 83       	std	Y+1, r23	; 0x01
    14b4:	8a 83       	std	Y+2, r24	; 0x02
    14b6:	9b 83       	std	Y+3, r25	; 0x03
    14b8:	ca 5b       	subi	r28, 0xBA	; 186
    14ba:	d0 40       	sbci	r29, 0x00	; 0
    14bc:	c6 54       	subi	r28, 0x46	; 70
    14be:	df 4f       	sbci	r29, 0xFF	; 255
    14c0:	e8 81       	ld	r30, Y
    14c2:	f9 81       	ldd	r31, Y+1	; 0x01
    14c4:	ca 5b       	subi	r28, 0xBA	; 186
    14c6:	d0 40       	sbci	r29, 0x00	; 0
    14c8:	f8 8f       	std	Y+24, r31	; 0x18
    14ca:	ef 8b       	std	Y+23, r30	; 0x17
    14cc:	8f 89       	ldd	r24, Y+23	; 0x17
    14ce:	98 8d       	ldd	r25, Y+24	; 0x18
    14d0:	9c 8f       	std	Y+28, r25	; 0x1c
    14d2:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
    14d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <LCD_displayCharacter+0x8ac>
    14dc:	9c 8f       	std	Y+28, r25	; 0x1c
    14de:	8b 8f       	std	Y+27, r24	; 0x1b
}
    14e0:	00 00       	nop
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    14e2:	82 e3       	ldi	r24, 0x32	; 50
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	dc 01       	movw	r26, r24
    14e8:	2c 91       	ld	r18, X
    14ea:	2f 7b       	andi	r18, 0xBF	; 191
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a0 e8       	ldi	r26, 0x80	; 128
    14f6:	bf e3       	ldi	r27, 0x3F	; 63
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	ab 83       	std	Y+3, r26	; 0x03
    14fe:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e4       	ldi	r19, 0x40	; 64
    1504:	4c e9       	ldi	r20, 0x9C	; 156
    1506:	55 e4       	ldi	r21, 0x45	; 69
    1508:	69 81       	ldd	r22, Y+1	; 0x01
    150a:	7a 81       	ldd	r23, Y+2	; 0x02
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1514:	c2 54       	subi	r28, 0x42	; 66
    1516:	df 4f       	sbci	r29, 0xFF	; 255
    1518:	68 83       	st	Y, r22
    151a:	79 83       	std	Y+1, r23	; 0x01
    151c:	8a 83       	std	Y+2, r24	; 0x02
    151e:	9b 83       	std	Y+3, r25	; 0x03
    1520:	ce 5b       	subi	r28, 0xBE	; 190
    1522:	d0 40       	sbci	r29, 0x00	; 0
    1524:	c2 54       	subi	r28, 0x42	; 66
    1526:	df 4f       	sbci	r29, 0xFF	; 255
    1528:	28 81       	ld	r18, Y
    152a:	39 81       	ldd	r19, Y+1	; 0x01
    152c:	4a 81       	ldd	r20, Y+2	; 0x02
    152e:	5b 81       	ldd	r21, Y+3	; 0x03
    1530:	ce 5b       	subi	r28, 0xBE	; 190
    1532:	d0 40       	sbci	r29, 0x00	; 0
    1534:	2d 83       	std	Y+5, r18	; 0x05
    1536:	3e 83       	std	Y+6, r19	; 0x06
    1538:	4f 83       	std	Y+7, r20	; 0x07
    153a:	58 87       	std	Y+8, r21	; 0x08
	if (__tmp < 1.0)
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e8       	ldi	r20, 0x80	; 128
    1542:	5f e3       	ldi	r21, 0x3F	; 63
    1544:	6d 81       	ldd	r22, Y+5	; 0x05
    1546:	7e 81       	ldd	r23, Y+6	; 0x06
    1548:	8f 81       	ldd	r24, Y+7	; 0x07
    154a:	98 85       	ldd	r25, Y+8	; 0x08
    154c:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    1550:	88 23       	and	r24, r24
    1552:	2c f4       	brge	.+10     	; 0x155e <LCD_displayCharacter+0x932>
		__ticks = 1;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9a 87       	std	Y+10, r25	; 0x0a
    155a:	89 87       	std	Y+9, r24	; 0x09
    155c:	71 c0       	rjmp	.+226    	; 0x1640 <LCD_displayCharacter+0xa14>
	else if (__tmp > 65535)
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	3f ef       	ldi	r19, 0xFF	; 255
    1562:	4f e7       	ldi	r20, 0x7F	; 127
    1564:	57 e4       	ldi	r21, 0x47	; 71
    1566:	6d 81       	ldd	r22, Y+5	; 0x05
    1568:	7e 81       	ldd	r23, Y+6	; 0x06
    156a:	8f 81       	ldd	r24, Y+7	; 0x07
    156c:	98 85       	ldd	r25, Y+8	; 0x08
    156e:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    1572:	18 16       	cp	r1, r24
    1574:	0c f0       	brlt	.+2      	; 0x1578 <LCD_displayCharacter+0x94c>
    1576:	4e c0       	rjmp	.+156    	; 0x1614 <LCD_displayCharacter+0x9e8>
		__ticks = (uint16_t) (__ms * 10.0);
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	69 81       	ldd	r22, Y+1	; 0x01
    1582:	7a 81       	ldd	r23, Y+2	; 0x02
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    158c:	ce 53       	subi	r28, 0x3E	; 62
    158e:	df 4f       	sbci	r29, 0xFF	; 255
    1590:	68 83       	st	Y, r22
    1592:	79 83       	std	Y+1, r23	; 0x01
    1594:	8a 83       	std	Y+2, r24	; 0x02
    1596:	9b 83       	std	Y+3, r25	; 0x03
    1598:	c2 5c       	subi	r28, 0xC2	; 194
    159a:	d0 40       	sbci	r29, 0x00	; 0
    159c:	ce 53       	subi	r28, 0x3E	; 62
    159e:	df 4f       	sbci	r29, 0xFF	; 255
    15a0:	88 81       	ld	r24, Y
    15a2:	99 81       	ldd	r25, Y+1	; 0x01
    15a4:	aa 81       	ldd	r26, Y+2	; 0x02
    15a6:	bb 81       	ldd	r27, Y+3	; 0x03
    15a8:	c2 5c       	subi	r28, 0xC2	; 194
    15aa:	d0 40       	sbci	r29, 0x00	; 0
    15ac:	6a 96       	adiw	r28, 0x1a	; 26
    15ae:	8c af       	std	Y+60, r24	; 0x3c
    15b0:	9d af       	std	Y+61, r25	; 0x3d
    15b2:	ae af       	std	Y+62, r26	; 0x3e
    15b4:	bf af       	std	Y+63, r27	; 0x3f
    15b6:	6a 97       	sbiw	r28, 0x1a	; 26
    15b8:	6a 96       	adiw	r28, 0x1a	; 26
    15ba:	6c ad       	ldd	r22, Y+60	; 0x3c
    15bc:	7d ad       	ldd	r23, Y+61	; 0x3d
    15be:	8e ad       	ldd	r24, Y+62	; 0x3e
    15c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    15c2:	6a 97       	sbiw	r28, 0x1a	; 26
    15c4:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    15c8:	ca 53       	subi	r28, 0x3A	; 58
    15ca:	df 4f       	sbci	r29, 0xFF	; 255
    15cc:	68 83       	st	Y, r22
    15ce:	79 83       	std	Y+1, r23	; 0x01
    15d0:	8a 83       	std	Y+2, r24	; 0x02
    15d2:	9b 83       	std	Y+3, r25	; 0x03
    15d4:	c6 5c       	subi	r28, 0xC6	; 198
    15d6:	d0 40       	sbci	r29, 0x00	; 0
    15d8:	ca 53       	subi	r28, 0x3A	; 58
    15da:	df 4f       	sbci	r29, 0xFF	; 255
    15dc:	a8 81       	ld	r26, Y
    15de:	b9 81       	ldd	r27, Y+1	; 0x01
    15e0:	c6 5c       	subi	r28, 0xC6	; 198
    15e2:	d0 40       	sbci	r29, 0x00	; 0
    15e4:	ba 87       	std	Y+10, r27	; 0x0a
    15e6:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    15e8:	10 c0       	rjmp	.+32     	; 0x160a <LCD_displayCharacter+0x9de>
    15ea:	84 ef       	ldi	r24, 0xF4	; 244
    15ec:	91 e0       	ldi	r25, 0x01	; 1
    15ee:	9c 87       	std	Y+12, r25	; 0x0c
    15f0:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    15f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <LCD_displayCharacter+0x9ca>
    15fa:	9c 87       	std	Y+12, r25	; 0x0c
    15fc:	8b 87       	std	Y+11, r24	; 0x0b
}
    15fe:	00 00       	nop
			__ticks --;
    1600:	89 85       	ldd	r24, Y+9	; 0x09
    1602:	9a 85       	ldd	r25, Y+10	; 0x0a
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	9a 87       	std	Y+10, r25	; 0x0a
    1608:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	89 2b       	or	r24, r25
    1610:	61 f7       	brne	.-40     	; 0x15ea <LCD_displayCharacter+0x9be>
		return;
    1612:	21 c0       	rjmp	.+66     	; 0x1656 <LCD_displayCharacter+0xa2a>
		__ticks = (uint16_t)__tmp;
    1614:	6d 81       	ldd	r22, Y+5	; 0x05
    1616:	7e 81       	ldd	r23, Y+6	; 0x06
    1618:	8f 81       	ldd	r24, Y+7	; 0x07
    161a:	98 85       	ldd	r25, Y+8	; 0x08
    161c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1620:	c6 53       	subi	r28, 0x36	; 54
    1622:	df 4f       	sbci	r29, 0xFF	; 255
    1624:	68 83       	st	Y, r22
    1626:	79 83       	std	Y+1, r23	; 0x01
    1628:	8a 83       	std	Y+2, r24	; 0x02
    162a:	9b 83       	std	Y+3, r25	; 0x03
    162c:	ca 5c       	subi	r28, 0xCA	; 202
    162e:	d0 40       	sbci	r29, 0x00	; 0
    1630:	c6 53       	subi	r28, 0x36	; 54
    1632:	df 4f       	sbci	r29, 0xFF	; 255
    1634:	e8 81       	ld	r30, Y
    1636:	f9 81       	ldd	r31, Y+1	; 0x01
    1638:	ca 5c       	subi	r28, 0xCA	; 202
    163a:	d0 40       	sbci	r29, 0x00	; 0
    163c:	fa 87       	std	Y+10, r31	; 0x0a
    163e:	e9 87       	std	Y+9, r30	; 0x09
    1640:	89 85       	ldd	r24, Y+9	; 0x09
    1642:	9a 85       	ldd	r25, Y+10	; 0x0a
    1644:	9e 87       	std	Y+14, r25	; 0x0e
    1646:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    1648:	8d 85       	ldd	r24, Y+13	; 0x0d
    164a:	9e 85       	ldd	r25, Y+14	; 0x0e
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <LCD_displayCharacter+0xa20>
    1650:	9e 87       	std	Y+14, r25	; 0x0e
    1652:	8d 87       	std	Y+13, r24	; 0x0d
}
    1654:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
    1656:	00 00       	nop
}
    1658:	c3 53       	subi	r28, 0x33	; 51
    165a:	df 4f       	sbci	r29, 0xFF	; 255
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	08 95       	ret

00001670 <LCD_displayString>:

/*
 * Function responsible for Display more One character on LCD
 */
void LCD_displayString(const sint8 *Str) {
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	00 d0       	rcall	.+0      	; 0x1676 <LCD_displayString+0x6>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	89 83       	std	Y+1, r24	; 0x01
	while (*Str != '\0') {
    167e:	0b c0       	rjmp	.+22     	; 0x1696 <LCD_displayString+0x26>
		LCD_displayCharacter(*Str);
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	fc 01       	movw	r30, r24
    1686:	80 81       	ld	r24, Z
    1688:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_displayCharacter>
		Str++;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	89 83       	std	Y+1, r24	; 0x01
	while (*Str != '\0') {
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	fc 01       	movw	r30, r24
    169c:	80 81       	ld	r24, Z
    169e:	88 23       	and	r24, r24
    16a0:	79 f7       	brne	.-34     	; 0x1680 <LCD_displayString+0x10>
	 LCD_displayCharacter(Str[i]);
	 i++;
	 }
	 ************************************************************/

	return;
    16a2:	00 00       	nop

}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <LCD_init>:

/*
 * Function responsible to initialize LCD pins and mode .... etc .
 */
void LCD_init(void) {
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	a2 97       	sbiw	r28, 0x22	; 34
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
	RS_DIR = 1; /* select RS pin output pin */
    16c2:	81 e3       	ldi	r24, 0x31	; 49
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	dc 01       	movw	r26, r24
    16c8:	2c 91       	ld	r18, X
    16ca:	20 61       	ori	r18, 0x10	; 16
    16cc:	fc 01       	movw	r30, r24
    16ce:	20 83       	st	Z, r18
	RW_DIR = 1; /* select RW pin output pin */
    16d0:	81 e3       	ldi	r24, 0x31	; 49
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	dc 01       	movw	r26, r24
    16d6:	2c 91       	ld	r18, X
    16d8:	20 62       	ori	r18, 0x20	; 32
    16da:	fc 01       	movw	r30, r24
    16dc:	20 83       	st	Z, r18
	E_DIR = 1; /* select Enable pin output pin */
    16de:	81 e3       	ldi	r24, 0x31	; 49
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	dc 01       	movw	r26, r24
    16e4:	2c 91       	ld	r18, X
    16e6:	20 64       	ori	r18, 0x40	; 64
    16e8:	fc 01       	movw	r30, r24
    16ea:	20 83       	st	Z, r18
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

#if (DATA_MODE == 4)
	/* LCD Configuration Mode of number of DATA line = 4 lines */
	LCD_sendCommand(FOUR_BITS_MODE); /* initialize LCD in 4-bit mode */
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    16f2:	88 e2       	ldi	r24, 0x28	; 40
    16f4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
#ifdef UPPER_MODE_BITS
	DATA_DIR |= 0xF0; /* select highest 4 bits as a output pins */
#endif

#ifdef LOWER_MODE_BITS
	DATA_DIR |= 0x0F;	/* select first 4 bits as a output pins */
    16f8:	87 e2       	ldi	r24, 0x27	; 39
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	dc 01       	movw	r26, r24
    16fe:	2c 91       	ld	r18, X
    1700:	87 e2       	ldi	r24, 0x27	; 39
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	2f 60       	ori	r18, 0x0F	; 15
    1706:	fc 01       	movw	r30, r24
    1708:	20 83       	st	Z, r18
#endif
#endif
	LCD_sendCommand(CURSOR_OFF); /* hide cursor from LCD */
    170a:	8c e0       	ldi	r24, 0x0C	; 12
    170c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
	LCD_sendCommand(AUTO_INCREMENT); /* hide cursor from LCD */
    1710:	86 e0       	ldi	r24, 0x06	; 6
    1712:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e4       	ldi	r27, 0x40	; 64
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	ab 83       	std	Y+3, r26	; 0x03
    172a:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e4       	ldi	r19, 0x40	; 64
    1730:	4c e9       	ldi	r20, 0x9C	; 156
    1732:	55 e4       	ldi	r21, 0x45	; 69
    1734:	69 81       	ldd	r22, Y+1	; 0x01
    1736:	7a 81       	ldd	r23, Y+2	; 0x02
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	9c 81       	ldd	r25, Y+4	; 0x04
    173c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1740:	6b 8b       	std	Y+19, r22	; 0x13
    1742:	7c 8b       	std	Y+20, r23	; 0x14
    1744:	8d 8b       	std	Y+21, r24	; 0x15
    1746:	9e 8b       	std	Y+22, r25	; 0x16
    1748:	8b 89       	ldd	r24, Y+19	; 0x13
    174a:	9c 89       	ldd	r25, Y+20	; 0x14
    174c:	ad 89       	ldd	r26, Y+21	; 0x15
    174e:	be 89       	ldd	r27, Y+22	; 0x16
    1750:	8d 83       	std	Y+5, r24	; 0x05
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	af 83       	std	Y+7, r26	; 0x07
    1756:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	40 e8       	ldi	r20, 0x80	; 128
    175e:	5f e3       	ldi	r21, 0x3F	; 63
    1760:	6d 81       	ldd	r22, Y+5	; 0x05
    1762:	7e 81       	ldd	r23, Y+6	; 0x06
    1764:	8f 81       	ldd	r24, Y+7	; 0x07
    1766:	98 85       	ldd	r25, Y+8	; 0x08
    1768:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    176c:	88 23       	and	r24, r24
    176e:	2c f4       	brge	.+10     	; 0x177a <LCD_init+0xcc>
		__ticks = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9a 87       	std	Y+10, r25	; 0x0a
    1776:	89 87       	std	Y+9, r24	; 0x09
    1778:	54 c0       	rjmp	.+168    	; 0x1822 <LCD_init+0x174>
	else if (__tmp > 65535)
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	3f ef       	ldi	r19, 0xFF	; 255
    177e:	4f e7       	ldi	r20, 0x7F	; 127
    1780:	57 e4       	ldi	r21, 0x47	; 71
    1782:	6d 81       	ldd	r22, Y+5	; 0x05
    1784:	7e 81       	ldd	r23, Y+6	; 0x06
    1786:	8f 81       	ldd	r24, Y+7	; 0x07
    1788:	98 85       	ldd	r25, Y+8	; 0x08
    178a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    178e:	18 16       	cp	r1, r24
    1790:	d4 f5       	brge	.+116    	; 0x1806 <LCD_init+0x158>
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e2       	ldi	r20, 0x20	; 32
    1798:	51 e4       	ldi	r21, 0x41	; 65
    179a:	69 81       	ldd	r22, Y+1	; 0x01
    179c:	7a 81       	ldd	r23, Y+2	; 0x02
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    17a6:	6f 8b       	std	Y+23, r22	; 0x17
    17a8:	78 8f       	std	Y+24, r23	; 0x18
    17aa:	89 8f       	std	Y+25, r24	; 0x19
    17ac:	9a 8f       	std	Y+26, r25	; 0x1a
    17ae:	8f 89       	ldd	r24, Y+23	; 0x17
    17b0:	98 8d       	ldd	r25, Y+24	; 0x18
    17b2:	a9 8d       	ldd	r26, Y+25	; 0x19
    17b4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    17b6:	8f 87       	std	Y+15, r24	; 0x0f
    17b8:	98 8b       	std	Y+16, r25	; 0x10
    17ba:	a9 8b       	std	Y+17, r26	; 0x11
    17bc:	ba 8b       	std	Y+18, r27	; 0x12
    17be:	6f 85       	ldd	r22, Y+15	; 0x0f
    17c0:	78 89       	ldd	r23, Y+16	; 0x10
    17c2:	89 89       	ldd	r24, Y+17	; 0x11
    17c4:	9a 89       	ldd	r25, Y+18	; 0x12
    17c6:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    17ca:	6b 8f       	std	Y+27, r22	; 0x1b
    17cc:	7c 8f       	std	Y+28, r23	; 0x1c
    17ce:	8d 8f       	std	Y+29, r24	; 0x1d
    17d0:	9e 8f       	std	Y+30, r25	; 0x1e
    17d2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    17d4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    17d6:	ba 87       	std	Y+10, r27	; 0x0a
    17d8:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    17da:	10 c0       	rjmp	.+32     	; 0x17fc <LCD_init+0x14e>
    17dc:	84 ef       	ldi	r24, 0xF4	; 244
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	9c 87       	std	Y+12, r25	; 0x0c
    17e2:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    17e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    17e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_init+0x13a>
    17ec:	9c 87       	std	Y+12, r25	; 0x0c
    17ee:	8b 87       	std	Y+11, r24	; 0x0b
}
    17f0:	00 00       	nop
			__ticks --;
    17f2:	89 85       	ldd	r24, Y+9	; 0x09
    17f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	9a 87       	std	Y+10, r25	; 0x0a
    17fa:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	89 2b       	or	r24, r25
    1802:	61 f7       	brne	.-40     	; 0x17dc <LCD_init+0x12e>
		return;
    1804:	19 c0       	rjmp	.+50     	; 0x1838 <LCD_init+0x18a>
		__ticks = (uint16_t)__tmp;
    1806:	6d 81       	ldd	r22, Y+5	; 0x05
    1808:	7e 81       	ldd	r23, Y+6	; 0x06
    180a:	8f 81       	ldd	r24, Y+7	; 0x07
    180c:	98 85       	ldd	r25, Y+8	; 0x08
    180e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1812:	6f 8f       	std	Y+31, r22	; 0x1f
    1814:	78 a3       	std	Y+32, r23	; 0x20
    1816:	89 a3       	std	Y+33, r24	; 0x21
    1818:	9a a3       	std	Y+34, r25	; 0x22
    181a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    181c:	f8 a1       	ldd	r31, Y+32	; 0x20
    181e:	fa 87       	std	Y+10, r31	; 0x0a
    1820:	e9 87       	std	Y+9, r30	; 0x09
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	9e 87       	std	Y+14, r25	; 0x0e
    1828:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    182a:	8d 85       	ldd	r24, Y+13	; 0x0d
    182c:	9e 85       	ldd	r25, Y+14	; 0x0e
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_init+0x180>
    1832:	9e 87       	std	Y+14, r25	; 0x0e
    1834:	8d 87       	std	Y+13, r24	; 0x0d
}
    1836:	00 00       	nop
	_delay_ms(2);
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    1838:	80 e8       	ldi	r24, 0x80	; 128
    183a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
	return;
    183e:	00 00       	nop
}
    1840:	a2 96       	adiw	r28, 0x22	; 34
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <LCD_clearScreen>:

/*
 * Function responsible to send clear command to LCD
 */
void LCD_clearScreen(void) {
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    1860:	80 e8       	ldi	r24, 0x80	; 128
    1862:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
	return;
    1866:	00 00       	nop
}
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <LCD_displayStringRowColumn>:

/*
 * Function responsible for Display more One character on LCD & select place on screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const sint8 *Str) {
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	00 d0       	rcall	.+0      	; 0x1874 <LCD_displayStringRowColumn+0x6>
    1874:	00 d0       	rcall	.+0      	; 0x1876 <LCD_displayStringRowColumn+0x8>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	6a 83       	std	Y+2, r22	; 0x02
    187e:	5c 83       	std	Y+4, r21	; 0x04
    1880:	4b 83       	std	Y+3, r20	; 0x03
	/* call LCD_goToRowColumn function to select cursor location */
	LCD_goToRowColumn(row, col);
    1882:	6a 81       	ldd	r22, Y+2	; 0x02
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <LCD_goToRowColumn>
	/* call LCD_displayString function to display string on LCD */
	LCD_displayString(Str);
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	0e 94 38 0b 	call	0x1670	; 0x1670 <LCD_displayString>
	return;
    1892:	00 00       	nop
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	08 95       	ret

000018a2 <LCD_goToRowColumn>:

/*
 * Function responsible to select place on screen
 */
void LCD_goToRowColumn(uint8 row, uint8 col) {
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <LCD_goToRowColumn+0x6>
    18a8:	0f 92       	push	r0
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	8a 83       	std	Y+2, r24	; 0x02
    18b0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch (row) {
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	83 30       	cpi	r24, 0x03	; 3
    18ba:	91 05       	cpc	r25, r1
    18bc:	d1 f0       	breq	.+52     	; 0x18f2 <LCD_goToRowColumn+0x50>
    18be:	84 30       	cpi	r24, 0x04	; 4
    18c0:	91 05       	cpc	r25, r1
    18c2:	dc f4       	brge	.+54     	; 0x18fa <LCD_goToRowColumn+0x58>
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	91 05       	cpc	r25, r1
    18c8:	81 f0       	breq	.+32     	; 0x18ea <LCD_goToRowColumn+0x48>
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	91 05       	cpc	r25, r1
    18ce:	ac f4       	brge	.+42     	; 0x18fa <LCD_goToRowColumn+0x58>
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	19 f0       	breq	.+6      	; 0x18da <LCD_goToRowColumn+0x38>
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	29 f0       	breq	.+10     	; 0x18e2 <LCD_goToRowColumn+0x40>
    18d8:	10 c0       	rjmp	.+32     	; 0x18fa <LCD_goToRowColumn+0x58>
	case 0:
		address =0x80 | col; /* first address in first line in LCD = 0x00 */
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	80 68       	ori	r24, 0x80	; 128
    18de:	89 83       	std	Y+1, r24	; 0x01
		break;
    18e0:	0c c0       	rjmp	.+24     	; 0x18fa <LCD_goToRowColumn+0x58>
	case 1:
		address = col | 0xC0; /* first address in second line in LCD = 0x40 */
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	80 6c       	ori	r24, 0xC0	; 192
    18e6:	89 83       	std	Y+1, r24	; 0x01
		break;
    18e8:	08 c0       	rjmp	.+16     	; 0x18fa <LCD_goToRowColumn+0x58>
	case 2:
		address = col | 0x10; /* first address in 3th line in LCD = 0x10 */
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	80 61       	ori	r24, 0x10	; 16
    18ee:	89 83       	std	Y+1, r24	; 0x01
		break;
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <LCD_goToRowColumn+0x58>
	case 3:
		address = col | 0x50; /* first address in 4th line in LCD = 0x50 */
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	80 65       	ori	r24, 0x50	; 80
    18f6:	89 83       	std	Y+1, r24	; 0x01
		break;
    18f8:	00 00       	nop
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0x80+Address */
	LCD_sendCommand(address | CURSOR_HOME_LOCATION);
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	80 68       	ori	r24, 0x80	; 128
    18fe:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
}
    1902:	00 00       	nop
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	08 95       	ret

00001910 <LCD_intgerToString>:

/*
 * Function that transform number to string and display to LCD
 */
void LCD_intgerToString(int data) {
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	62 97       	sbiw	r28, 0x12	; 18
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	9a 8b       	std	Y+18, r25	; 0x12
    1926:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data, buff, 10); /* 10 for decimal */
    1928:	89 89       	ldd	r24, Y+17	; 0x11
    192a:	9a 89       	ldd	r25, Y+18	; 0x12
    192c:	4a e0       	ldi	r20, 0x0A	; 10
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	9e 01       	movw	r18, r28
    1932:	2f 5f       	subi	r18, 0xFF	; 255
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	b9 01       	movw	r22, r18
    1938:	0e 94 5d 16 	call	0x2cba	; 0x2cba <itoa>
	LCD_displayString(buff);
    193c:	ce 01       	movw	r24, r28
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	0e 94 38 0b 	call	0x1670	; 0x1670 <LCD_displayString>
}
    1944:	00 00       	nop
    1946:	62 96       	adiw	r28, 0x12	; 18
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	08 95       	ret

00001958 <LCD_creatCustomChar>:

/*
* Function that Create Custom Character in CGRAM
*/
void LCD_creatCustomChar(unsigned char loc, unsigned char *msg) {
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	00 d0       	rcall	.+0      	; 0x195e <LCD_creatCustomChar+0x6>
    195e:	00 d0       	rcall	.+0      	; 0x1960 <LCD_creatCustomChar+0x8>
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	8a 83       	std	Y+2, r24	; 0x02
    1966:	7c 83       	std	Y+4, r23	; 0x04
    1968:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char i;
	if (loc < 8) {
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	88 30       	cpi	r24, 0x08	; 8
    196e:	d0 f4       	brcc	.+52     	; 0x19a4 <LCD_creatCustomChar+0x4c>
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	88 0f       	add	r24, r24
    1974:	88 0f       	add	r24, r24
    1976:	88 0f       	add	r24, r24
    1978:	80 64       	ori	r24, 0x40	; 64
    197a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	0e c0       	rjmp	.+28     	; 0x199e <LCD_creatCustomChar+0x46>
			LCD_displayCustomChar(msg[i]);
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	88 2f       	mov	r24, r24
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	2b 81       	ldd	r18, Y+3	; 0x03
    198a:	3c 81       	ldd	r19, Y+4	; 0x04
    198c:	82 0f       	add	r24, r18
    198e:	93 1f       	adc	r25, r19
    1990:	fc 01       	movw	r30, r24
    1992:	80 81       	ld	r24, Z
    1994:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <LCD_displayCustomChar>
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	8f 5f       	subi	r24, 0xFF	; 255
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	88 30       	cpi	r24, 0x08	; 8
    19a2:	78 f3       	brcs	.-34     	; 0x1982 <LCD_creatCustomChar+0x2a>
		}
	}
}
    19a4:	00 00       	nop
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <LCD_displayCustomChar>:

/*
* Function that Display Custom Character in CGRAM
*/
void LCD_displayCustomChar(unsigned char char_data) /* LCD data write function */
{
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	cb 56       	subi	r28, 0x6B	; 107
    19be:	d1 09       	sbc	r29, r1
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	8f a7       	std	Y+47, r24	; 0x2f
	DATA_OUT = char_data;
    19cc:	88 e2       	ldi	r24, 0x28	; 40
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	2f a5       	ldd	r18, Y+47	; 0x2f
    19d2:	dc 01       	movw	r26, r24
    19d4:	2c 93       	st	X, r18
	RS = 1;/* RS=1 Data reg. */
    19d6:	82 e3       	ldi	r24, 0x32	; 50
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	fc 01       	movw	r30, r24
    19dc:	20 81       	ld	r18, Z
    19de:	20 61       	ori	r18, 0x10	; 16
    19e0:	dc 01       	movw	r26, r24
    19e2:	2c 93       	st	X, r18
	RW = 0; /* RW=0 write operation */
    19e4:	82 e3       	ldi	r24, 0x32	; 50
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	fc 01       	movw	r30, r24
    19ea:	20 81       	ld	r18, Z
    19ec:	2f 7d       	andi	r18, 0xDF	; 223
    19ee:	dc 01       	movw	r26, r24
    19f0:	2c 93       	st	X, r18
	E = 1; /* Enable Pulse */
    19f2:	82 e3       	ldi	r24, 0x32	; 50
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	fc 01       	movw	r30, r24
    19f8:	20 81       	ld	r18, Z
    19fa:	20 64       	ori	r18, 0x40	; 64
    19fc:	dc 01       	movw	r26, r24
    19fe:	2c 93       	st	X, r18
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a0 e8       	ldi	r26, 0x80	; 128
    1a06:	bf e3       	ldi	r27, 0x3F	; 63
    1a08:	8f 87       	std	Y+15, r24	; 0x0f
    1a0a:	98 8b       	std	Y+16, r25	; 0x10
    1a0c:	a9 8b       	std	Y+17, r26	; 0x11
    1a0e:	ba 8b       	std	Y+18, r27	; 0x12
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1a10:	25 e5       	ldi	r18, 0x55	; 85
    1a12:	35 e5       	ldi	r19, 0x55	; 85
    1a14:	45 ed       	ldi	r20, 0xD5	; 213
    1a16:	50 e4       	ldi	r21, 0x40	; 64
    1a18:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a1a:	78 89       	ldd	r23, Y+16	; 0x10
    1a1c:	89 89       	ldd	r24, Y+17	; 0x11
    1a1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a20:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1a24:	68 af       	std	Y+56, r22	; 0x38
    1a26:	79 af       	std	Y+57, r23	; 0x39
    1a28:	8a af       	std	Y+58, r24	; 0x3a
    1a2a:	9b af       	std	Y+59, r25	; 0x3b
    1a2c:	88 ad       	ldd	r24, Y+56	; 0x38
    1a2e:	99 ad       	ldd	r25, Y+57	; 0x39
    1a30:	aa ad       	ldd	r26, Y+58	; 0x3a
    1a32:	bb ad       	ldd	r27, Y+59	; 0x3b
    1a34:	8b 8b       	std	Y+19, r24	; 0x13
    1a36:	9c 8b       	std	Y+20, r25	; 0x14
    1a38:	ad 8b       	std	Y+21, r26	; 0x15
    1a3a:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 ea       	ldi	r20, 0xA0	; 160
    1a42:	50 e4       	ldi	r21, 0x40	; 64
    1a44:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a46:	78 89       	ldd	r23, Y+16	; 0x10
    1a48:	89 89       	ldd	r24, Y+17	; 0x11
    1a4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1a50:	6c af       	std	Y+60, r22	; 0x3c
    1a52:	7d af       	std	Y+61, r23	; 0x3d
    1a54:	8e af       	std	Y+62, r24	; 0x3e
    1a56:	9f af       	std	Y+63, r25	; 0x3f
    1a58:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a5a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a5c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a5e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a60:	8f 8b       	std	Y+23, r24	; 0x17
    1a62:	98 8f       	std	Y+24, r25	; 0x18
    1a64:	a9 8f       	std	Y+25, r26	; 0x19
    1a66:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	6b 89       	ldd	r22, Y+19	; 0x13
    1a72:	7c 89       	ldd	r23, Y+20	; 0x14
    1a74:	8d 89       	ldd	r24, Y+21	; 0x15
    1a76:	9e 89       	ldd	r25, Y+22	; 0x16
    1a78:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	1c f4       	brge	.+6      	; 0x1a86 <LCD_displayCustomChar+0xd2>
		__ticks = 1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	8b 8f       	std	Y+27, r24	; 0x1b
    1a84:	f8 c0       	rjmp	.+496    	; 0x1c76 <LCD_displayCustomChar+0x2c2>
	else if (__tmp2 > 65535)
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	3f ef       	ldi	r19, 0xFF	; 255
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	57 e4       	ldi	r21, 0x47	; 71
    1a8e:	6f 89       	ldd	r22, Y+23	; 0x17
    1a90:	78 8d       	ldd	r23, Y+24	; 0x18
    1a92:	89 8d       	ldd	r24, Y+25	; 0x19
    1a94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a96:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	0c f0       	brlt	.+2      	; 0x1aa0 <LCD_displayCustomChar+0xec>
    1a9e:	b1 c0       	rjmp	.+354    	; 0x1c02 <LCD_displayCustomChar+0x24e>
	{
		_delay_ms(__us / 1000.0);
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	4a e7       	ldi	r20, 0x7A	; 122
    1aa6:	54 e4       	ldi	r21, 0x44	; 68
    1aa8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1aaa:	78 89       	ldd	r23, Y+16	; 0x10
    1aac:	89 89       	ldd	r24, Y+17	; 0x11
    1aae:	9a 89       	ldd	r25, Y+18	; 0x12
    1ab0:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__divsf3>
    1ab4:	24 96       	adiw	r28, 0x04	; 4
    1ab6:	6c af       	std	Y+60, r22	; 0x3c
    1ab8:	7d af       	std	Y+61, r23	; 0x3d
    1aba:	8e af       	std	Y+62, r24	; 0x3e
    1abc:	9f af       	std	Y+63, r25	; 0x3f
    1abe:	24 97       	sbiw	r28, 0x04	; 4
    1ac0:	24 96       	adiw	r28, 0x04	; 4
    1ac2:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ac4:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ac6:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ac8:	bf ad       	ldd	r27, Y+63	; 0x3f
    1aca:	24 97       	sbiw	r28, 0x04	; 4
    1acc:	8c 8f       	std	Y+28, r24	; 0x1c
    1ace:	9d 8f       	std	Y+29, r25	; 0x1d
    1ad0:	ae 8f       	std	Y+30, r26	; 0x1e
    1ad2:	bf 8f       	std	Y+31, r27	; 0x1f
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e4       	ldi	r19, 0x40	; 64
    1ad8:	4c e9       	ldi	r20, 0x9C	; 156
    1ada:	55 e4       	ldi	r21, 0x45	; 69
    1adc:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1ade:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1ae0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ae2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ae4:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1ae8:	28 96       	adiw	r28, 0x08	; 8
    1aea:	6c af       	std	Y+60, r22	; 0x3c
    1aec:	7d af       	std	Y+61, r23	; 0x3d
    1aee:	8e af       	std	Y+62, r24	; 0x3e
    1af0:	9f af       	std	Y+63, r25	; 0x3f
    1af2:	28 97       	sbiw	r28, 0x08	; 8
    1af4:	28 96       	adiw	r28, 0x08	; 8
    1af6:	8c ad       	ldd	r24, Y+60	; 0x3c
    1af8:	9d ad       	ldd	r25, Y+61	; 0x3d
    1afa:	ae ad       	ldd	r26, Y+62	; 0x3e
    1afc:	bf ad       	ldd	r27, Y+63	; 0x3f
    1afe:	28 97       	sbiw	r28, 0x08	; 8
    1b00:	88 a3       	std	Y+32, r24	; 0x20
    1b02:	99 a3       	std	Y+33, r25	; 0x21
    1b04:	aa a3       	std	Y+34, r26	; 0x22
    1b06:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e8       	ldi	r20, 0x80	; 128
    1b0e:	5f e3       	ldi	r21, 0x3F	; 63
    1b10:	68 a1       	ldd	r22, Y+32	; 0x20
    1b12:	79 a1       	ldd	r23, Y+33	; 0x21
    1b14:	8a a1       	ldd	r24, Y+34	; 0x22
    1b16:	9b a1       	ldd	r25, Y+35	; 0x23
    1b18:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    1b1c:	88 23       	and	r24, r24
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <LCD_displayCustomChar+0x176>
		__ticks = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9d a3       	std	Y+37, r25	; 0x25
    1b26:	8c a3       	std	Y+36, r24	; 0x24
    1b28:	61 c0       	rjmp	.+194    	; 0x1bec <LCD_displayCustomChar+0x238>
	else if (__tmp > 65535)
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	3f ef       	ldi	r19, 0xFF	; 255
    1b2e:	4f e7       	ldi	r20, 0x7F	; 127
    1b30:	57 e4       	ldi	r21, 0x47	; 71
    1b32:	68 a1       	ldd	r22, Y+32	; 0x20
    1b34:	79 a1       	ldd	r23, Y+33	; 0x21
    1b36:	8a a1       	ldd	r24, Y+34	; 0x22
    1b38:	9b a1       	ldd	r25, Y+35	; 0x23
    1b3a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	0c f0       	brlt	.+2      	; 0x1b44 <LCD_displayCustomChar+0x190>
    1b42:	42 c0       	rjmp	.+132    	; 0x1bc8 <LCD_displayCustomChar+0x214>
		__ticks = (uint16_t) (__ms * 10.0);
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e2       	ldi	r20, 0x20	; 32
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1b4e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1b50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b52:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b54:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1b58:	2c 96       	adiw	r28, 0x0c	; 12
    1b5a:	6c af       	std	Y+60, r22	; 0x3c
    1b5c:	7d af       	std	Y+61, r23	; 0x3d
    1b5e:	8e af       	std	Y+62, r24	; 0x3e
    1b60:	9f af       	std	Y+63, r25	; 0x3f
    1b62:	2c 97       	sbiw	r28, 0x0c	; 12
    1b64:	2c 96       	adiw	r28, 0x0c	; 12
    1b66:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b68:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b6a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b6c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b6e:	2c 97       	sbiw	r28, 0x0c	; 12
    1b70:	8c ab       	std	Y+52, r24	; 0x34
    1b72:	9d ab       	std	Y+53, r25	; 0x35
    1b74:	ae ab       	std	Y+54, r26	; 0x36
    1b76:	bf ab       	std	Y+55, r27	; 0x37
    1b78:	6c a9       	ldd	r22, Y+52	; 0x34
    1b7a:	7d a9       	ldd	r23, Y+53	; 0x35
    1b7c:	8e a9       	ldd	r24, Y+54	; 0x36
    1b7e:	9f a9       	ldd	r25, Y+55	; 0x37
    1b80:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1b84:	60 96       	adiw	r28, 0x10	; 16
    1b86:	6c af       	std	Y+60, r22	; 0x3c
    1b88:	7d af       	std	Y+61, r23	; 0x3d
    1b8a:	8e af       	std	Y+62, r24	; 0x3e
    1b8c:	9f af       	std	Y+63, r25	; 0x3f
    1b8e:	60 97       	sbiw	r28, 0x10	; 16
    1b90:	2e 96       	adiw	r28, 0x0e	; 14
    1b92:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b94:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b96:	2e 97       	sbiw	r28, 0x0e	; 14
    1b98:	bd a3       	std	Y+37, r27	; 0x25
    1b9a:	ac a3       	std	Y+36, r26	; 0x24
		while(__ticks)
    1b9c:	10 c0       	rjmp	.+32     	; 0x1bbe <LCD_displayCustomChar+0x20a>
    1b9e:	84 ef       	ldi	r24, 0xF4	; 244
    1ba0:	91 e0       	ldi	r25, 0x01	; 1
    1ba2:	9f a3       	std	Y+39, r25	; 0x27
    1ba4:	8e a3       	std	Y+38, r24	; 0x26
	__asm__ volatile (
    1ba6:	8e a1       	ldd	r24, Y+38	; 0x26
    1ba8:	9f a1       	ldd	r25, Y+39	; 0x27
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_displayCustomChar+0x1f6>
    1bae:	9f a3       	std	Y+39, r25	; 0x27
    1bb0:	8e a3       	std	Y+38, r24	; 0x26
}
    1bb2:	00 00       	nop
			__ticks --;
    1bb4:	8c a1       	ldd	r24, Y+36	; 0x24
    1bb6:	9d a1       	ldd	r25, Y+37	; 0x25
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	9d a3       	std	Y+37, r25	; 0x25
    1bbc:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
    1bbe:	8c a1       	ldd	r24, Y+36	; 0x24
    1bc0:	9d a1       	ldd	r25, Y+37	; 0x25
    1bc2:	89 2b       	or	r24, r25
    1bc4:	61 f7       	brne	.-40     	; 0x1b9e <LCD_displayCustomChar+0x1ea>
		return;
    1bc6:	57 c0       	rjmp	.+174    	; 0x1c76 <LCD_displayCustomChar+0x2c2>
		__ticks = (uint16_t)__tmp;
    1bc8:	68 a1       	ldd	r22, Y+32	; 0x20
    1bca:	79 a1       	ldd	r23, Y+33	; 0x21
    1bcc:	8a a1       	ldd	r24, Y+34	; 0x22
    1bce:	9b a1       	ldd	r25, Y+35	; 0x23
    1bd0:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1bd4:	64 96       	adiw	r28, 0x14	; 20
    1bd6:	6c af       	std	Y+60, r22	; 0x3c
    1bd8:	7d af       	std	Y+61, r23	; 0x3d
    1bda:	8e af       	std	Y+62, r24	; 0x3e
    1bdc:	9f af       	std	Y+63, r25	; 0x3f
    1bde:	64 97       	sbiw	r28, 0x14	; 20
    1be0:	62 96       	adiw	r28, 0x12	; 18
    1be2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1be4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1be6:	62 97       	sbiw	r28, 0x12	; 18
    1be8:	fd a3       	std	Y+37, r31	; 0x25
    1bea:	ec a3       	std	Y+36, r30	; 0x24
    1bec:	8c a1       	ldd	r24, Y+36	; 0x24
    1bee:	9d a1       	ldd	r25, Y+37	; 0x25
    1bf0:	99 a7       	std	Y+41, r25	; 0x29
    1bf2:	88 a7       	std	Y+40, r24	; 0x28
	__asm__ volatile (
    1bf4:	88 a5       	ldd	r24, Y+40	; 0x28
    1bf6:	99 a5       	ldd	r25, Y+41	; 0x29
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <LCD_displayCustomChar+0x244>
    1bfc:	99 a7       	std	Y+41, r25	; 0x29
    1bfe:	88 a7       	std	Y+40, r24	; 0x28
}
    1c00:	3a c0       	rjmp	.+116    	; 0x1c76 <LCD_displayCustomChar+0x2c2>
	}
	else if (__tmp > 255)
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	53 e4       	ldi	r21, 0x43	; 67
    1c0a:	6b 89       	ldd	r22, Y+19	; 0x13
    1c0c:	7c 89       	ldd	r23, Y+20	; 0x14
    1c0e:	8d 89       	ldd	r24, Y+21	; 0x15
    1c10:	9e 89       	ldd	r25, Y+22	; 0x16
    1c12:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    1c16:	18 16       	cp	r1, r24
    1c18:	f4 f4       	brge	.+60     	; 0x1c56 <LCD_displayCustomChar+0x2a2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1c1a:	6f 89       	ldd	r22, Y+23	; 0x17
    1c1c:	78 8d       	ldd	r23, Y+24	; 0x18
    1c1e:	89 8d       	ldd	r24, Y+25	; 0x19
    1c20:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c22:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1c26:	68 96       	adiw	r28, 0x18	; 24
    1c28:	6c af       	std	Y+60, r22	; 0x3c
    1c2a:	7d af       	std	Y+61, r23	; 0x3d
    1c2c:	8e af       	std	Y+62, r24	; 0x3e
    1c2e:	9f af       	std	Y+63, r25	; 0x3f
    1c30:	68 97       	sbiw	r28, 0x18	; 24
    1c32:	66 96       	adiw	r28, 0x16	; 22
    1c34:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c36:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c38:	66 97       	sbiw	r28, 0x16	; 22
    1c3a:	9b a7       	std	Y+43, r25	; 0x2b
    1c3c:	8a a7       	std	Y+42, r24	; 0x2a
    1c3e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c40:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c42:	9d a7       	std	Y+45, r25	; 0x2d
    1c44:	8c a7       	std	Y+44, r24	; 0x2c
	__asm__ volatile (
    1c46:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c48:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <LCD_displayCustomChar+0x296>
    1c4e:	9d a7       	std	Y+45, r25	; 0x2d
    1c50:	8c a7       	std	Y+44, r24	; 0x2c
}
    1c52:	00 00       	nop
		_delay_loop_2(__ticks);
		return;
    1c54:	17 c0       	rjmp	.+46     	; 0x1c84 <LCD_displayCustomChar+0x2d0>
	}
	else
		__ticks = (uint8_t)__tmp;
    1c56:	6b 89       	ldd	r22, Y+19	; 0x13
    1c58:	7c 89       	ldd	r23, Y+20	; 0x14
    1c5a:	8d 89       	ldd	r24, Y+21	; 0x15
    1c5c:	9e 89       	ldd	r25, Y+22	; 0x16
    1c5e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1c62:	6c 96       	adiw	r28, 0x1c	; 28
    1c64:	6c af       	std	Y+60, r22	; 0x3c
    1c66:	7d af       	std	Y+61, r23	; 0x3d
    1c68:	8e af       	std	Y+62, r24	; 0x3e
    1c6a:	9f af       	std	Y+63, r25	; 0x3f
    1c6c:	6c 97       	sbiw	r28, 0x1c	; 28
    1c6e:	69 96       	adiw	r28, 0x19	; 25
    1c70:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c72:	69 97       	sbiw	r28, 0x19	; 25
    1c74:	9b 8f       	std	Y+27, r25	; 0x1b
    1c76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c78:	8e a7       	std	Y+46, r24	; 0x2e
	__asm__ volatile (
    1c7a:	8e a5       	ldd	r24, Y+46	; 0x2e
    1c7c:	8a 95       	dec	r24
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_displayCustomChar+0x2c8>
    1c80:	8e a7       	std	Y+46, r24	; 0x2e
}
    1c82:	00 00       	nop
	_delay_us(1);
	E = 0;
    1c84:	82 e3       	ldi	r24, 0x32	; 50
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	dc 01       	movw	r26, r24
    1c8a:	2c 91       	ld	r18, X
    1c8c:	2f 7b       	andi	r18, 0xBF	; 191
    1c8e:	fc 01       	movw	r30, r24
    1c90:	20 83       	st	Z, r18
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 e0       	ldi	r26, 0x00	; 0
    1c98:	b0 e4       	ldi	r27, 0x40	; 64
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	ab 83       	std	Y+3, r26	; 0x03
    1ca0:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e4       	ldi	r19, 0x40	; 64
    1ca6:	4c e9       	ldi	r20, 0x9C	; 156
    1ca8:	55 e4       	ldi	r21, 0x45	; 69
    1caa:	69 81       	ldd	r22, Y+1	; 0x01
    1cac:	7a 81       	ldd	r23, Y+2	; 0x02
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1cb6:	a0 96       	adiw	r28, 0x20	; 32
    1cb8:	6c af       	std	Y+60, r22	; 0x3c
    1cba:	7d af       	std	Y+61, r23	; 0x3d
    1cbc:	8e af       	std	Y+62, r24	; 0x3e
    1cbe:	9f af       	std	Y+63, r25	; 0x3f
    1cc0:	a0 97       	sbiw	r28, 0x20	; 32
    1cc2:	a0 96       	adiw	r28, 0x20	; 32
    1cc4:	8c ad       	ldd	r24, Y+60	; 0x3c
    1cc6:	9d ad       	ldd	r25, Y+61	; 0x3d
    1cc8:	ae ad       	ldd	r26, Y+62	; 0x3e
    1cca:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ccc:	a0 97       	sbiw	r28, 0x20	; 32
    1cce:	8d 83       	std	Y+5, r24	; 0x05
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	af 83       	std	Y+7, r26	; 0x07
    1cd4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	6d 81       	ldd	r22, Y+5	; 0x05
    1ce0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce4:	98 85       	ldd	r25, Y+8	; 0x08
    1ce6:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    1cea:	88 23       	and	r24, r24
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <LCD_displayCustomChar+0x344>
		__ticks = 1;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9a 87       	std	Y+10, r25	; 0x0a
    1cf4:	89 87       	std	Y+9, r24	; 0x09
    1cf6:	61 c0       	rjmp	.+194    	; 0x1dba <LCD_displayCustomChar+0x406>
	else if (__tmp > 65535)
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	6d 81       	ldd	r22, Y+5	; 0x05
    1d02:	7e 81       	ldd	r23, Y+6	; 0x06
    1d04:	8f 81       	ldd	r24, Y+7	; 0x07
    1d06:	98 85       	ldd	r25, Y+8	; 0x08
    1d08:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    1d0c:	18 16       	cp	r1, r24
    1d0e:	0c f0       	brlt	.+2      	; 0x1d12 <LCD_displayCustomChar+0x35e>
    1d10:	42 c0       	rjmp	.+132    	; 0x1d96 <LCD_displayCustomChar+0x3e2>
		__ticks = (uint16_t) (__ms * 10.0);
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	69 81       	ldd	r22, Y+1	; 0x01
    1d1c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1d26:	a4 96       	adiw	r28, 0x24	; 36
    1d28:	6c af       	std	Y+60, r22	; 0x3c
    1d2a:	7d af       	std	Y+61, r23	; 0x3d
    1d2c:	8e af       	std	Y+62, r24	; 0x3e
    1d2e:	9f af       	std	Y+63, r25	; 0x3f
    1d30:	a4 97       	sbiw	r28, 0x24	; 36
    1d32:	a4 96       	adiw	r28, 0x24	; 36
    1d34:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d36:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d38:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d3a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d3c:	a4 97       	sbiw	r28, 0x24	; 36
    1d3e:	88 ab       	std	Y+48, r24	; 0x30
    1d40:	99 ab       	std	Y+49, r25	; 0x31
    1d42:	aa ab       	std	Y+50, r26	; 0x32
    1d44:	bb ab       	std	Y+51, r27	; 0x33
    1d46:	68 a9       	ldd	r22, Y+48	; 0x30
    1d48:	79 a9       	ldd	r23, Y+49	; 0x31
    1d4a:	8a a9       	ldd	r24, Y+50	; 0x32
    1d4c:	9b a9       	ldd	r25, Y+51	; 0x33
    1d4e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1d52:	a8 96       	adiw	r28, 0x28	; 40
    1d54:	6c af       	std	Y+60, r22	; 0x3c
    1d56:	7d af       	std	Y+61, r23	; 0x3d
    1d58:	8e af       	std	Y+62, r24	; 0x3e
    1d5a:	9f af       	std	Y+63, r25	; 0x3f
    1d5c:	a8 97       	sbiw	r28, 0x28	; 40
    1d5e:	a6 96       	adiw	r28, 0x26	; 38
    1d60:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d62:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d64:	a6 97       	sbiw	r28, 0x26	; 38
    1d66:	ba 87       	std	Y+10, r27	; 0x0a
    1d68:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    1d6a:	10 c0       	rjmp	.+32     	; 0x1d8c <LCD_displayCustomChar+0x3d8>
    1d6c:	84 ef       	ldi	r24, 0xF4	; 244
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	9c 87       	std	Y+12, r25	; 0x0c
    1d72:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    1d74:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d76:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_displayCustomChar+0x3c4>
    1d7c:	9c 87       	std	Y+12, r25	; 0x0c
    1d7e:	8b 87       	std	Y+11, r24	; 0x0b
}
    1d80:	00 00       	nop
			__ticks --;
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	9a 87       	std	Y+10, r25	; 0x0a
    1d8a:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    1d8c:	89 85       	ldd	r24, Y+9	; 0x09
    1d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d90:	89 2b       	or	r24, r25
    1d92:	61 f7       	brne	.-40     	; 0x1d6c <LCD_displayCustomChar+0x3b8>
		return;
    1d94:	1d c0       	rjmp	.+58     	; 0x1dd0 <LCD_displayCustomChar+0x41c>
		__ticks = (uint16_t)__tmp;
    1d96:	6d 81       	ldd	r22, Y+5	; 0x05
    1d98:	7e 81       	ldd	r23, Y+6	; 0x06
    1d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9c:	98 85       	ldd	r25, Y+8	; 0x08
    1d9e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1da2:	ac 96       	adiw	r28, 0x2c	; 44
    1da4:	6c af       	std	Y+60, r22	; 0x3c
    1da6:	7d af       	std	Y+61, r23	; 0x3d
    1da8:	8e af       	std	Y+62, r24	; 0x3e
    1daa:	9f af       	std	Y+63, r25	; 0x3f
    1dac:	ac 97       	sbiw	r28, 0x2c	; 44
    1dae:	aa 96       	adiw	r28, 0x2a	; 42
    1db0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1db2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1db4:	aa 97       	sbiw	r28, 0x2a	; 42
    1db6:	fa 87       	std	Y+10, r31	; 0x0a
    1db8:	e9 87       	std	Y+9, r30	; 0x09
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	9e 87       	std	Y+14, r25	; 0x0e
    1dc0:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    1dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <LCD_displayCustomChar+0x412>
    1dca:	9e 87       	std	Y+14, r25	; 0x0e
    1dcc:	8d 87       	std	Y+13, r24	; 0x0d
}
    1dce:	00 00       	nop
	_delay_ms(2); /* Data write delay */
}
    1dd0:	00 00       	nop
    1dd2:	c5 59       	subi	r28, 0x95	; 149
    1dd4:	df 4f       	sbci	r29, 0xFF	; 255
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <main>:
uint8 key_num = 0;
sint32 num1 = 0;
sint32 num2 = 0;
uint8 operand = 0;
sint32 result = 0;
int main(void) {
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	ca 5a       	subi	r28, 0xAA	; 170
    1df4:	d1 09       	sbc	r29, r1
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    1e00:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_init>
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    1e04:	80 e8       	ldi	r24, 0x80	; 128
    1e06:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
	LCD_goToRowColumn(0, 3);
    1e0a:	63 e0       	ldi	r22, 0x03	; 3
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <LCD_goToRowColumn>
	LCD_displayString(String);
    1e12:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <String>
    1e16:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <String+0x1>
    1e1a:	0e 94 38 0b 	call	0x1670	; 0x1670 <LCD_displayString>
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	aa e7       	ldi	r26, 0x7A	; 122
    1e24:	b4 e4       	ldi	r27, 0x44	; 68
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	ab 83       	std	Y+3, r26	; 0x03
    1e2c:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e4       	ldi	r19, 0x40	; 64
    1e32:	4c e9       	ldi	r20, 0x9C	; 156
    1e34:	55 e4       	ldi	r21, 0x45	; 69
    1e36:	69 81       	ldd	r22, Y+1	; 0x01
    1e38:	7a 81       	ldd	r23, Y+2	; 0x02
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1e42:	6f 96       	adiw	r28, 0x1f	; 31
    1e44:	6c af       	std	Y+60, r22	; 0x3c
    1e46:	7d af       	std	Y+61, r23	; 0x3d
    1e48:	8e af       	std	Y+62, r24	; 0x3e
    1e4a:	9f af       	std	Y+63, r25	; 0x3f
    1e4c:	6f 97       	sbiw	r28, 0x1f	; 31
    1e4e:	6f 96       	adiw	r28, 0x1f	; 31
    1e50:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e52:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e54:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e56:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e58:	6f 97       	sbiw	r28, 0x1f	; 31
    1e5a:	2d 83       	std	Y+5, r18	; 0x05
    1e5c:	3e 83       	std	Y+6, r19	; 0x06
    1e5e:	4f 83       	std	Y+7, r20	; 0x07
    1e60:	58 87       	std	Y+8, r21	; 0x08
	if (__tmp < 1.0)
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e8       	ldi	r20, 0x80	; 128
    1e68:	5f e3       	ldi	r21, 0x3F	; 63
    1e6a:	6d 81       	ldd	r22, Y+5	; 0x05
    1e6c:	7e 81       	ldd	r23, Y+6	; 0x06
    1e6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e70:	98 85       	ldd	r25, Y+8	; 0x08
    1e72:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    1e76:	88 23       	and	r24, r24
    1e78:	2c f4       	brge	.+10     	; 0x1e84 <main+0x9e>
		__ticks = 1;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9a 87       	std	Y+10, r25	; 0x0a
    1e80:	89 87       	std	Y+9, r24	; 0x09
    1e82:	65 c0       	rjmp	.+202    	; 0x1f4e <main+0x168>
	else if (__tmp > 65535)
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	57 e4       	ldi	r21, 0x47	; 71
    1e8c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e8e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e90:	8f 81       	ldd	r24, Y+7	; 0x07
    1e92:	98 85       	ldd	r25, Y+8	; 0x08
    1e94:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    1e98:	18 16       	cp	r1, r24
    1e9a:	0c f0       	brlt	.+2      	; 0x1e9e <main+0xb8>
    1e9c:	46 c0       	rjmp	.+140    	; 0x1f2a <main+0x144>
		__ticks = (uint16_t) (__ms * 10.0);
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	69 81       	ldd	r22, Y+1	; 0x01
    1ea8:	7a 81       	ldd	r23, Y+2	; 0x02
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1eb2:	a3 96       	adiw	r28, 0x23	; 35
    1eb4:	6c af       	std	Y+60, r22	; 0x3c
    1eb6:	7d af       	std	Y+61, r23	; 0x3d
    1eb8:	8e af       	std	Y+62, r24	; 0x3e
    1eba:	9f af       	std	Y+63, r25	; 0x3f
    1ebc:	a3 97       	sbiw	r28, 0x23	; 35
    1ebe:	a3 96       	adiw	r28, 0x23	; 35
    1ec0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ec2:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ec4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ec6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ec8:	a3 97       	sbiw	r28, 0x23	; 35
    1eca:	2b 96       	adiw	r28, 0x0b	; 11
    1ecc:	8c af       	std	Y+60, r24	; 0x3c
    1ece:	9d af       	std	Y+61, r25	; 0x3d
    1ed0:	ae af       	std	Y+62, r26	; 0x3e
    1ed2:	bf af       	std	Y+63, r27	; 0x3f
    1ed4:	2b 97       	sbiw	r28, 0x0b	; 11
    1ed6:	2b 96       	adiw	r28, 0x0b	; 11
    1ed8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1eda:	7d ad       	ldd	r23, Y+61	; 0x3d
    1edc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ede:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ee0:	2b 97       	sbiw	r28, 0x0b	; 11
    1ee2:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1ee6:	a7 96       	adiw	r28, 0x27	; 39
    1ee8:	6c af       	std	Y+60, r22	; 0x3c
    1eea:	7d af       	std	Y+61, r23	; 0x3d
    1eec:	8e af       	std	Y+62, r24	; 0x3e
    1eee:	9f af       	std	Y+63, r25	; 0x3f
    1ef0:	a7 97       	sbiw	r28, 0x27	; 39
    1ef2:	a5 96       	adiw	r28, 0x25	; 37
    1ef4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ef6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ef8:	a5 97       	sbiw	r28, 0x25	; 37
    1efa:	ba 87       	std	Y+10, r27	; 0x0a
    1efc:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    1efe:	10 c0       	rjmp	.+32     	; 0x1f20 <main+0x13a>
    1f00:	84 ef       	ldi	r24, 0xF4	; 244
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	9c 87       	std	Y+12, r25	; 0x0c
    1f06:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    1f08:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <main+0x126>
    1f10:	9c 87       	std	Y+12, r25	; 0x0c
    1f12:	8b 87       	std	Y+11, r24	; 0x0b
}
    1f14:	00 00       	nop
			__ticks --;
    1f16:	89 85       	ldd	r24, Y+9	; 0x09
    1f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9a 87       	std	Y+10, r25	; 0x0a
    1f1e:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	89 2b       	or	r24, r25
    1f26:	61 f7       	brne	.-40     	; 0x1f00 <main+0x11a>
		return;
    1f28:	1d c0       	rjmp	.+58     	; 0x1f64 <main+0x17e>
		__ticks = (uint16_t)__tmp;
    1f2a:	6d 81       	ldd	r22, Y+5	; 0x05
    1f2c:	7e 81       	ldd	r23, Y+6	; 0x06
    1f2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f30:	98 85       	ldd	r25, Y+8	; 0x08
    1f32:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1f36:	ab 96       	adiw	r28, 0x2b	; 43
    1f38:	6c af       	std	Y+60, r22	; 0x3c
    1f3a:	7d af       	std	Y+61, r23	; 0x3d
    1f3c:	8e af       	std	Y+62, r24	; 0x3e
    1f3e:	9f af       	std	Y+63, r25	; 0x3f
    1f40:	ab 97       	sbiw	r28, 0x2b	; 43
    1f42:	a9 96       	adiw	r28, 0x29	; 41
    1f44:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f46:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f48:	a9 97       	sbiw	r28, 0x29	; 41
    1f4a:	fa 87       	std	Y+10, r31	; 0x0a
    1f4c:	e9 87       	std	Y+9, r30	; 0x09
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	9e 87       	std	Y+14, r25	; 0x0e
    1f54:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    1f56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <main+0x174>
    1f5e:	9e 87       	std	Y+14, r25	; 0x0e
    1f60:	8d 87       	std	Y+13, r24	; 0x0d
}
    1f62:	00 00       	nop
	_delay_ms(1000);
	LCD_sendCommand(CURSOR_ON);
    1f64:	8e e0       	ldi	r24, 0x0E	; 14
    1f66:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
	while (1) {
		LCD_clearScreen();
    1f6a:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_clearScreen>
		LCD_goToRowColumn(0, 0);
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <LCD_goToRowColumn>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	aa ef       	ldi	r26, 0xFA	; 250
    1f7c:	b3 e4       	ldi	r27, 0x43	; 67
    1f7e:	8f 87       	std	Y+15, r24	; 0x0f
    1f80:	98 8b       	std	Y+16, r25	; 0x10
    1f82:	a9 8b       	std	Y+17, r26	; 0x11
    1f84:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e4       	ldi	r19, 0x40	; 64
    1f8a:	4c e9       	ldi	r20, 0x9C	; 156
    1f8c:	55 e4       	ldi	r21, 0x45	; 69
    1f8e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f90:	78 89       	ldd	r23, Y+16	; 0x10
    1f92:	89 89       	ldd	r24, Y+17	; 0x11
    1f94:	9a 89       	ldd	r25, Y+18	; 0x12
    1f96:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    1f9a:	af 96       	adiw	r28, 0x2f	; 47
    1f9c:	6c af       	std	Y+60, r22	; 0x3c
    1f9e:	7d af       	std	Y+61, r23	; 0x3d
    1fa0:	8e af       	std	Y+62, r24	; 0x3e
    1fa2:	9f af       	std	Y+63, r25	; 0x3f
    1fa4:	af 97       	sbiw	r28, 0x2f	; 47
    1fa6:	af 96       	adiw	r28, 0x2f	; 47
    1fa8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1faa:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fac:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fae:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fb0:	af 97       	sbiw	r28, 0x2f	; 47
    1fb2:	2b 8b       	std	Y+19, r18	; 0x13
    1fb4:	3c 8b       	std	Y+20, r19	; 0x14
    1fb6:	4d 8b       	std	Y+21, r20	; 0x15
    1fb8:	5e 8b       	std	Y+22, r21	; 0x16
	if (__tmp < 1.0)
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e8       	ldi	r20, 0x80	; 128
    1fc0:	5f e3       	ldi	r21, 0x3F	; 63
    1fc2:	6b 89       	ldd	r22, Y+19	; 0x13
    1fc4:	7c 89       	ldd	r23, Y+20	; 0x14
    1fc6:	8d 89       	ldd	r24, Y+21	; 0x15
    1fc8:	9e 89       	ldd	r25, Y+22	; 0x16
    1fca:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	2c f4       	brge	.+10     	; 0x1fdc <main+0x1f6>
		__ticks = 1;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	98 8f       	std	Y+24, r25	; 0x18
    1fd8:	8f 8b       	std	Y+23, r24	; 0x17
    1fda:	65 c0       	rjmp	.+202    	; 0x20a6 <main+0x2c0>
	else if (__tmp > 65535)
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	3f ef       	ldi	r19, 0xFF	; 255
    1fe0:	4f e7       	ldi	r20, 0x7F	; 127
    1fe2:	57 e4       	ldi	r21, 0x47	; 71
    1fe4:	6b 89       	ldd	r22, Y+19	; 0x13
    1fe6:	7c 89       	ldd	r23, Y+20	; 0x14
    1fe8:	8d 89       	ldd	r24, Y+21	; 0x15
    1fea:	9e 89       	ldd	r25, Y+22	; 0x16
    1fec:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    1ff0:	18 16       	cp	r1, r24
    1ff2:	0c f0       	brlt	.+2      	; 0x1ff6 <main+0x210>
    1ff4:	46 c0       	rjmp	.+140    	; 0x2082 <main+0x29c>
		__ticks = (uint16_t) (__ms * 10.0);
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	51 e4       	ldi	r21, 0x41	; 65
    1ffe:	6f 85       	ldd	r22, Y+15	; 0x0f
    2000:	78 89       	ldd	r23, Y+16	; 0x10
    2002:	89 89       	ldd	r24, Y+17	; 0x11
    2004:	9a 89       	ldd	r25, Y+18	; 0x12
    2006:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    200a:	e3 96       	adiw	r28, 0x33	; 51
    200c:	6c af       	std	Y+60, r22	; 0x3c
    200e:	7d af       	std	Y+61, r23	; 0x3d
    2010:	8e af       	std	Y+62, r24	; 0x3e
    2012:	9f af       	std	Y+63, r25	; 0x3f
    2014:	e3 97       	sbiw	r28, 0x33	; 51
    2016:	e3 96       	adiw	r28, 0x33	; 51
    2018:	8c ad       	ldd	r24, Y+60	; 0x3c
    201a:	9d ad       	ldd	r25, Y+61	; 0x3d
    201c:	ae ad       	ldd	r26, Y+62	; 0x3e
    201e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2020:	e3 97       	sbiw	r28, 0x33	; 51
    2022:	2f 96       	adiw	r28, 0x0f	; 15
    2024:	8c af       	std	Y+60, r24	; 0x3c
    2026:	9d af       	std	Y+61, r25	; 0x3d
    2028:	ae af       	std	Y+62, r26	; 0x3e
    202a:	bf af       	std	Y+63, r27	; 0x3f
    202c:	2f 97       	sbiw	r28, 0x0f	; 15
    202e:	2f 96       	adiw	r28, 0x0f	; 15
    2030:	6c ad       	ldd	r22, Y+60	; 0x3c
    2032:	7d ad       	ldd	r23, Y+61	; 0x3d
    2034:	8e ad       	ldd	r24, Y+62	; 0x3e
    2036:	9f ad       	ldd	r25, Y+63	; 0x3f
    2038:	2f 97       	sbiw	r28, 0x0f	; 15
    203a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    203e:	e7 96       	adiw	r28, 0x37	; 55
    2040:	6c af       	std	Y+60, r22	; 0x3c
    2042:	7d af       	std	Y+61, r23	; 0x3d
    2044:	8e af       	std	Y+62, r24	; 0x3e
    2046:	9f af       	std	Y+63, r25	; 0x3f
    2048:	e7 97       	sbiw	r28, 0x37	; 55
    204a:	e5 96       	adiw	r28, 0x35	; 53
    204c:	ae ad       	ldd	r26, Y+62	; 0x3e
    204e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2050:	e5 97       	sbiw	r28, 0x35	; 53
    2052:	b8 8f       	std	Y+24, r27	; 0x18
    2054:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
    2056:	10 c0       	rjmp	.+32     	; 0x2078 <main+0x292>
    2058:	84 ef       	ldi	r24, 0xF4	; 244
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	9a 8f       	std	Y+26, r25	; 0x1a
    205e:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
    2060:	89 8d       	ldd	r24, Y+25	; 0x19
    2062:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <main+0x27e>
    2068:	9a 8f       	std	Y+26, r25	; 0x1a
    206a:	89 8f       	std	Y+25, r24	; 0x19
}
    206c:	00 00       	nop
			__ticks --;
    206e:	8f 89       	ldd	r24, Y+23	; 0x17
    2070:	98 8d       	ldd	r25, Y+24	; 0x18
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	98 8f       	std	Y+24, r25	; 0x18
    2076:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
    2078:	8f 89       	ldd	r24, Y+23	; 0x17
    207a:	98 8d       	ldd	r25, Y+24	; 0x18
    207c:	89 2b       	or	r24, r25
    207e:	61 f7       	brne	.-40     	; 0x2058 <main+0x272>
		return;
    2080:	1d c0       	rjmp	.+58     	; 0x20bc <main+0x2d6>
		__ticks = (uint16_t)__tmp;
    2082:	6b 89       	ldd	r22, Y+19	; 0x13
    2084:	7c 89       	ldd	r23, Y+20	; 0x14
    2086:	8d 89       	ldd	r24, Y+21	; 0x15
    2088:	9e 89       	ldd	r25, Y+22	; 0x16
    208a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    208e:	eb 96       	adiw	r28, 0x3b	; 59
    2090:	6c af       	std	Y+60, r22	; 0x3c
    2092:	7d af       	std	Y+61, r23	; 0x3d
    2094:	8e af       	std	Y+62, r24	; 0x3e
    2096:	9f af       	std	Y+63, r25	; 0x3f
    2098:	eb 97       	sbiw	r28, 0x3b	; 59
    209a:	e9 96       	adiw	r28, 0x39	; 57
    209c:	ee ad       	ldd	r30, Y+62	; 0x3e
    209e:	ff ad       	ldd	r31, Y+63	; 0x3f
    20a0:	e9 97       	sbiw	r28, 0x39	; 57
    20a2:	f8 8f       	std	Y+24, r31	; 0x18
    20a4:	ef 8b       	std	Y+23, r30	; 0x17
    20a6:	8f 89       	ldd	r24, Y+23	; 0x17
    20a8:	98 8d       	ldd	r25, Y+24	; 0x18
    20aa:	9c 8f       	std	Y+28, r25	; 0x1c
    20ac:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
    20ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <main+0x2cc>
    20b6:	9c 8f       	std	Y+28, r25	; 0x1c
    20b8:	8b 8f       	std	Y+27, r24	; 0x1b
}
    20ba:	00 00       	nop
		_delay_ms(500);
		LCD_clearScreen();
    20bc:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_clearScreen>
		LCD_sendCommand(CURSOR_HOME_LOCATION);
    20c0:	80 e8       	ldi	r24, 0x80	; 128
    20c2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_sendCommand>
		do {
				key_num = KeyPad_getPressedKey();
    20c6:	0e 94 5d 00 	call	0xba	; 0xba <KeyPad_getPressedKey>
    20ca:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
				if ((key_num <= 57) && (key_num >= 48)) {
    20ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    20d2:	8a 33       	cpi	r24, 0x3A	; 58
    20d4:	b8 f5       	brcc	.+110    	; 0x2144 <main+0x35e>
    20d6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    20da:	80 33       	cpi	r24, 0x30	; 48
    20dc:	98 f1       	brcs	.+102    	; 0x2144 <main+0x35e>
					LCD_displayCharacter(key_num);
    20de:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    20e2:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_displayCharacter>
					num1 = (sint32) (key_num - 48) + (num1 * 10);
    20e6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	c0 97       	sbiw	r24, 0x30	; 48
    20f0:	8c 01       	movw	r16, r24
    20f2:	99 0f       	add	r25, r25
    20f4:	22 0b       	sbc	r18, r18
    20f6:	33 0b       	sbc	r19, r19
    20f8:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <num1>
    20fc:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <num1+0x1>
    2100:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <num1+0x2>
    2104:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <num1+0x3>
    2108:	db 01       	movw	r26, r22
    210a:	ca 01       	movw	r24, r20
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	aa 1f       	adc	r26, r26
    2112:	bb 1f       	adc	r27, r27
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	aa 1f       	adc	r26, r26
    211a:	bb 1f       	adc	r27, r27
    211c:	84 0f       	add	r24, r20
    211e:	95 1f       	adc	r25, r21
    2120:	a6 1f       	adc	r26, r22
    2122:	b7 1f       	adc	r27, r23
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	aa 1f       	adc	r26, r26
    212a:	bb 1f       	adc	r27, r27
    212c:	80 0f       	add	r24, r16
    212e:	91 1f       	adc	r25, r17
    2130:	a2 1f       	adc	r26, r18
    2132:	b3 1f       	adc	r27, r19
    2134:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <num1>
    2138:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <num1+0x1>
    213c:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <num1+0x2>
    2140:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <num1+0x3>
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	aa ef       	ldi	r26, 0xFA	; 250
    214a:	b3 e4       	ldi	r27, 0x43	; 67
    214c:	8d 8f       	std	Y+29, r24	; 0x1d
    214e:	9e 8f       	std	Y+30, r25	; 0x1e
    2150:	af 8f       	std	Y+31, r26	; 0x1f
    2152:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e4       	ldi	r19, 0x40	; 64
    2158:	4c e9       	ldi	r20, 0x9C	; 156
    215a:	55 e4       	ldi	r21, 0x45	; 69
    215c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    215e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2160:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2162:	98 a1       	ldd	r25, Y+32	; 0x20
    2164:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    2168:	ef 96       	adiw	r28, 0x3f	; 63
    216a:	6c af       	std	Y+60, r22	; 0x3c
    216c:	7d af       	std	Y+61, r23	; 0x3d
    216e:	8e af       	std	Y+62, r24	; 0x3e
    2170:	9f af       	std	Y+63, r25	; 0x3f
    2172:	ef 97       	sbiw	r28, 0x3f	; 63
    2174:	ef 96       	adiw	r28, 0x3f	; 63
    2176:	2c ad       	ldd	r18, Y+60	; 0x3c
    2178:	3d ad       	ldd	r19, Y+61	; 0x3d
    217a:	4e ad       	ldd	r20, Y+62	; 0x3e
    217c:	5f ad       	ldd	r21, Y+63	; 0x3f
    217e:	ef 97       	sbiw	r28, 0x3f	; 63
    2180:	29 a3       	std	Y+33, r18	; 0x21
    2182:	3a a3       	std	Y+34, r19	; 0x22
    2184:	4b a3       	std	Y+35, r20	; 0x23
    2186:	5c a3       	std	Y+36, r21	; 0x24
	if (__tmp < 1.0)
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	69 a1       	ldd	r22, Y+33	; 0x21
    2192:	7a a1       	ldd	r23, Y+34	; 0x22
    2194:	8b a1       	ldd	r24, Y+35	; 0x23
    2196:	9c a1       	ldd	r25, Y+36	; 0x24
    2198:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    219c:	88 23       	and	r24, r24
    219e:	2c f4       	brge	.+10     	; 0x21aa <main+0x3c4>
		__ticks = 1;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9e a3       	std	Y+38, r25	; 0x26
    21a6:	8d a3       	std	Y+37, r24	; 0x25
    21a8:	71 c0       	rjmp	.+226    	; 0x228c <main+0x4a6>
	else if (__tmp > 65535)
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	69 a1       	ldd	r22, Y+33	; 0x21
    21b4:	7a a1       	ldd	r23, Y+34	; 0x22
    21b6:	8b a1       	ldd	r24, Y+35	; 0x23
    21b8:	9c a1       	ldd	r25, Y+36	; 0x24
    21ba:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    21be:	18 16       	cp	r1, r24
    21c0:	0c f0       	brlt	.+2      	; 0x21c4 <main+0x3de>
    21c2:	4e c0       	rjmp	.+156    	; 0x2260 <main+0x47a>
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e2       	ldi	r20, 0x20	; 32
    21ca:	51 e4       	ldi	r21, 0x41	; 65
    21cc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    21ce:	7e 8d       	ldd	r23, Y+30	; 0x1e
    21d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d2:	98 a1       	ldd	r25, Y+32	; 0x20
    21d4:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    21d8:	c1 58       	subi	r28, 0x81	; 129
    21da:	df 4f       	sbci	r29, 0xFF	; 255
    21dc:	68 83       	st	Y, r22
    21de:	79 83       	std	Y+1, r23	; 0x01
    21e0:	8a 83       	std	Y+2, r24	; 0x02
    21e2:	9b 83       	std	Y+3, r25	; 0x03
    21e4:	cf 57       	subi	r28, 0x7F	; 127
    21e6:	d0 40       	sbci	r29, 0x00	; 0
    21e8:	c1 58       	subi	r28, 0x81	; 129
    21ea:	df 4f       	sbci	r29, 0xFF	; 255
    21ec:	88 81       	ld	r24, Y
    21ee:	99 81       	ldd	r25, Y+1	; 0x01
    21f0:	aa 81       	ldd	r26, Y+2	; 0x02
    21f2:	bb 81       	ldd	r27, Y+3	; 0x03
    21f4:	cf 57       	subi	r28, 0x7F	; 127
    21f6:	d0 40       	sbci	r29, 0x00	; 0
    21f8:	63 96       	adiw	r28, 0x13	; 19
    21fa:	8c af       	std	Y+60, r24	; 0x3c
    21fc:	9d af       	std	Y+61, r25	; 0x3d
    21fe:	ae af       	std	Y+62, r26	; 0x3e
    2200:	bf af       	std	Y+63, r27	; 0x3f
    2202:	63 97       	sbiw	r28, 0x13	; 19
    2204:	63 96       	adiw	r28, 0x13	; 19
    2206:	6c ad       	ldd	r22, Y+60	; 0x3c
    2208:	7d ad       	ldd	r23, Y+61	; 0x3d
    220a:	8e ad       	ldd	r24, Y+62	; 0x3e
    220c:	9f ad       	ldd	r25, Y+63	; 0x3f
    220e:	63 97       	sbiw	r28, 0x13	; 19
    2210:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    2214:	cd 57       	subi	r28, 0x7D	; 125
    2216:	df 4f       	sbci	r29, 0xFF	; 255
    2218:	68 83       	st	Y, r22
    221a:	79 83       	std	Y+1, r23	; 0x01
    221c:	8a 83       	std	Y+2, r24	; 0x02
    221e:	9b 83       	std	Y+3, r25	; 0x03
    2220:	c3 58       	subi	r28, 0x83	; 131
    2222:	d0 40       	sbci	r29, 0x00	; 0
    2224:	cd 57       	subi	r28, 0x7D	; 125
    2226:	df 4f       	sbci	r29, 0xFF	; 255
    2228:	a8 81       	ld	r26, Y
    222a:	b9 81       	ldd	r27, Y+1	; 0x01
    222c:	c3 58       	subi	r28, 0x83	; 131
    222e:	d0 40       	sbci	r29, 0x00	; 0
    2230:	be a3       	std	Y+38, r27	; 0x26
    2232:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
    2234:	10 c0       	rjmp	.+32     	; 0x2256 <main+0x470>
    2236:	84 ef       	ldi	r24, 0xF4	; 244
    2238:	91 e0       	ldi	r25, 0x01	; 1
    223a:	98 a7       	std	Y+40, r25	; 0x28
    223c:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
    223e:	8f a1       	ldd	r24, Y+39	; 0x27
    2240:	98 a5       	ldd	r25, Y+40	; 0x28
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <main+0x45c>
    2246:	98 a7       	std	Y+40, r25	; 0x28
    2248:	8f a3       	std	Y+39, r24	; 0x27
}
    224a:	00 00       	nop
			__ticks --;
    224c:	8d a1       	ldd	r24, Y+37	; 0x25
    224e:	9e a1       	ldd	r25, Y+38	; 0x26
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	9e a3       	std	Y+38, r25	; 0x26
    2254:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
    2256:	8d a1       	ldd	r24, Y+37	; 0x25
    2258:	9e a1       	ldd	r25, Y+38	; 0x26
    225a:	89 2b       	or	r24, r25
    225c:	61 f7       	brne	.-40     	; 0x2236 <main+0x450>
		return;
    225e:	21 c0       	rjmp	.+66     	; 0x22a2 <main+0x4bc>
		__ticks = (uint16_t)__tmp;
    2260:	69 a1       	ldd	r22, Y+33	; 0x21
    2262:	7a a1       	ldd	r23, Y+34	; 0x22
    2264:	8b a1       	ldd	r24, Y+35	; 0x23
    2266:	9c a1       	ldd	r25, Y+36	; 0x24
    2268:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    226c:	c9 57       	subi	r28, 0x79	; 121
    226e:	df 4f       	sbci	r29, 0xFF	; 255
    2270:	68 83       	st	Y, r22
    2272:	79 83       	std	Y+1, r23	; 0x01
    2274:	8a 83       	std	Y+2, r24	; 0x02
    2276:	9b 83       	std	Y+3, r25	; 0x03
    2278:	c7 58       	subi	r28, 0x87	; 135
    227a:	d0 40       	sbci	r29, 0x00	; 0
    227c:	c9 57       	subi	r28, 0x79	; 121
    227e:	df 4f       	sbci	r29, 0xFF	; 255
    2280:	e8 81       	ld	r30, Y
    2282:	f9 81       	ldd	r31, Y+1	; 0x01
    2284:	c7 58       	subi	r28, 0x87	; 135
    2286:	d0 40       	sbci	r29, 0x00	; 0
    2288:	fe a3       	std	Y+38, r31	; 0x26
    228a:	ed a3       	std	Y+37, r30	; 0x25
    228c:	8d a1       	ldd	r24, Y+37	; 0x25
    228e:	9e a1       	ldd	r25, Y+38	; 0x26
    2290:	9a a7       	std	Y+42, r25	; 0x2a
    2292:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
    2294:	89 a5       	ldd	r24, Y+41	; 0x29
    2296:	9a a5       	ldd	r25, Y+42	; 0x2a
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <main+0x4b2>
    229c:	9a a7       	std	Y+42, r25	; 0x2a
    229e:	89 a7       	std	Y+41, r24	; 0x29
}
    22a0:	00 00       	nop
				}
				_delay_ms(500);

		} while ((key_num <= 57) && (key_num >= 48));
    22a2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    22a6:	8a 33       	cpi	r24, 0x3A	; 58
    22a8:	28 f4       	brcc	.+10     	; 0x22b4 <main+0x4ce>
    22aa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    22ae:	80 33       	cpi	r24, 0x30	; 48
    22b0:	08 f0       	brcs	.+2      	; 0x22b4 <main+0x4ce>
    22b2:	09 cf       	rjmp	.-494    	; 0x20c6 <main+0x2e0>
		operator();
    22b4:	0e 94 86 13 	call	0x270c	; 0x270c <operator>
		LCD_displayCharacter(key_num);
    22b8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    22bc:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_displayCharacter>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	aa ef       	ldi	r26, 0xFA	; 250
    22c6:	b3 e4       	ldi	r27, 0x43	; 67
    22c8:	8b a7       	std	Y+43, r24	; 0x2b
    22ca:	9c a7       	std	Y+44, r25	; 0x2c
    22cc:	ad a7       	std	Y+45, r26	; 0x2d
    22ce:	be a7       	std	Y+46, r27	; 0x2e
	__tmp = ((F_CPU) / 4e3) * __ms;
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e4       	ldi	r19, 0x40	; 64
    22d4:	4c e9       	ldi	r20, 0x9C	; 156
    22d6:	55 e4       	ldi	r21, 0x45	; 69
    22d8:	6b a5       	ldd	r22, Y+43	; 0x2b
    22da:	7c a5       	ldd	r23, Y+44	; 0x2c
    22dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    22de:	9e a5       	ldd	r25, Y+46	; 0x2e
    22e0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    22e4:	c5 57       	subi	r28, 0x75	; 117
    22e6:	df 4f       	sbci	r29, 0xFF	; 255
    22e8:	68 83       	st	Y, r22
    22ea:	79 83       	std	Y+1, r23	; 0x01
    22ec:	8a 83       	std	Y+2, r24	; 0x02
    22ee:	9b 83       	std	Y+3, r25	; 0x03
    22f0:	cb 58       	subi	r28, 0x8B	; 139
    22f2:	d0 40       	sbci	r29, 0x00	; 0
    22f4:	c5 57       	subi	r28, 0x75	; 117
    22f6:	df 4f       	sbci	r29, 0xFF	; 255
    22f8:	28 81       	ld	r18, Y
    22fa:	39 81       	ldd	r19, Y+1	; 0x01
    22fc:	4a 81       	ldd	r20, Y+2	; 0x02
    22fe:	5b 81       	ldd	r21, Y+3	; 0x03
    2300:	cb 58       	subi	r28, 0x8B	; 139
    2302:	d0 40       	sbci	r29, 0x00	; 0
    2304:	2f a7       	std	Y+47, r18	; 0x2f
    2306:	38 ab       	std	Y+48, r19	; 0x30
    2308:	49 ab       	std	Y+49, r20	; 0x31
    230a:	5a ab       	std	Y+50, r21	; 0x32
	if (__tmp < 1.0)
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e8       	ldi	r20, 0x80	; 128
    2312:	5f e3       	ldi	r21, 0x3F	; 63
    2314:	6f a5       	ldd	r22, Y+47	; 0x2f
    2316:	78 a9       	ldd	r23, Y+48	; 0x30
    2318:	89 a9       	ldd	r24, Y+49	; 0x31
    231a:	9a a9       	ldd	r25, Y+50	; 0x32
    231c:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    2320:	88 23       	and	r24, r24
    2322:	2c f4       	brge	.+10     	; 0x232e <main+0x548>
		__ticks = 1;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	9c ab       	std	Y+52, r25	; 0x34
    232a:	8b ab       	std	Y+51, r24	; 0x33
    232c:	71 c0       	rjmp	.+226    	; 0x2410 <main+0x62a>
	else if (__tmp > 65535)
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	3f ef       	ldi	r19, 0xFF	; 255
    2332:	4f e7       	ldi	r20, 0x7F	; 127
    2334:	57 e4       	ldi	r21, 0x47	; 71
    2336:	6f a5       	ldd	r22, Y+47	; 0x2f
    2338:	78 a9       	ldd	r23, Y+48	; 0x30
    233a:	89 a9       	ldd	r24, Y+49	; 0x31
    233c:	9a a9       	ldd	r25, Y+50	; 0x32
    233e:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    2342:	18 16       	cp	r1, r24
    2344:	0c f0       	brlt	.+2      	; 0x2348 <main+0x562>
    2346:	4e c0       	rjmp	.+156    	; 0x23e4 <main+0x5fe>
		__ticks = (uint16_t) (__ms * 10.0);
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e2       	ldi	r20, 0x20	; 32
    234e:	51 e4       	ldi	r21, 0x41	; 65
    2350:	6b a5       	ldd	r22, Y+43	; 0x2b
    2352:	7c a5       	ldd	r23, Y+44	; 0x2c
    2354:	8d a5       	ldd	r24, Y+45	; 0x2d
    2356:	9e a5       	ldd	r25, Y+46	; 0x2e
    2358:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    235c:	c1 57       	subi	r28, 0x71	; 113
    235e:	df 4f       	sbci	r29, 0xFF	; 255
    2360:	68 83       	st	Y, r22
    2362:	79 83       	std	Y+1, r23	; 0x01
    2364:	8a 83       	std	Y+2, r24	; 0x02
    2366:	9b 83       	std	Y+3, r25	; 0x03
    2368:	cf 58       	subi	r28, 0x8F	; 143
    236a:	d0 40       	sbci	r29, 0x00	; 0
    236c:	c1 57       	subi	r28, 0x71	; 113
    236e:	df 4f       	sbci	r29, 0xFF	; 255
    2370:	88 81       	ld	r24, Y
    2372:	99 81       	ldd	r25, Y+1	; 0x01
    2374:	aa 81       	ldd	r26, Y+2	; 0x02
    2376:	bb 81       	ldd	r27, Y+3	; 0x03
    2378:	cf 58       	subi	r28, 0x8F	; 143
    237a:	d0 40       	sbci	r29, 0x00	; 0
    237c:	67 96       	adiw	r28, 0x17	; 23
    237e:	8c af       	std	Y+60, r24	; 0x3c
    2380:	9d af       	std	Y+61, r25	; 0x3d
    2382:	ae af       	std	Y+62, r26	; 0x3e
    2384:	bf af       	std	Y+63, r27	; 0x3f
    2386:	67 97       	sbiw	r28, 0x17	; 23
    2388:	67 96       	adiw	r28, 0x17	; 23
    238a:	6c ad       	ldd	r22, Y+60	; 0x3c
    238c:	7d ad       	ldd	r23, Y+61	; 0x3d
    238e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2390:	9f ad       	ldd	r25, Y+63	; 0x3f
    2392:	67 97       	sbiw	r28, 0x17	; 23
    2394:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    2398:	cd 56       	subi	r28, 0x6D	; 109
    239a:	df 4f       	sbci	r29, 0xFF	; 255
    239c:	68 83       	st	Y, r22
    239e:	79 83       	std	Y+1, r23	; 0x01
    23a0:	8a 83       	std	Y+2, r24	; 0x02
    23a2:	9b 83       	std	Y+3, r25	; 0x03
    23a4:	c3 59       	subi	r28, 0x93	; 147
    23a6:	d0 40       	sbci	r29, 0x00	; 0
    23a8:	cd 56       	subi	r28, 0x6D	; 109
    23aa:	df 4f       	sbci	r29, 0xFF	; 255
    23ac:	a8 81       	ld	r26, Y
    23ae:	b9 81       	ldd	r27, Y+1	; 0x01
    23b0:	c3 59       	subi	r28, 0x93	; 147
    23b2:	d0 40       	sbci	r29, 0x00	; 0
    23b4:	bc ab       	std	Y+52, r27	; 0x34
    23b6:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
    23b8:	10 c0       	rjmp	.+32     	; 0x23da <main+0x5f4>
    23ba:	84 ef       	ldi	r24, 0xF4	; 244
    23bc:	91 e0       	ldi	r25, 0x01	; 1
    23be:	9e ab       	std	Y+54, r25	; 0x36
    23c0:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
    23c2:	8d a9       	ldd	r24, Y+53	; 0x35
    23c4:	9e a9       	ldd	r25, Y+54	; 0x36
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <main+0x5e0>
    23ca:	9e ab       	std	Y+54, r25	; 0x36
    23cc:	8d ab       	std	Y+53, r24	; 0x35
}
    23ce:	00 00       	nop
			__ticks --;
    23d0:	8b a9       	ldd	r24, Y+51	; 0x33
    23d2:	9c a9       	ldd	r25, Y+52	; 0x34
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	9c ab       	std	Y+52, r25	; 0x34
    23d8:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
    23da:	8b a9       	ldd	r24, Y+51	; 0x33
    23dc:	9c a9       	ldd	r25, Y+52	; 0x34
    23de:	89 2b       	or	r24, r25
    23e0:	61 f7       	brne	.-40     	; 0x23ba <main+0x5d4>
		return;
    23e2:	21 c0       	rjmp	.+66     	; 0x2426 <main+0x640>
		__ticks = (uint16_t)__tmp;
    23e4:	6f a5       	ldd	r22, Y+47	; 0x2f
    23e6:	78 a9       	ldd	r23, Y+48	; 0x30
    23e8:	89 a9       	ldd	r24, Y+49	; 0x31
    23ea:	9a a9       	ldd	r25, Y+50	; 0x32
    23ec:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    23f0:	c9 56       	subi	r28, 0x69	; 105
    23f2:	df 4f       	sbci	r29, 0xFF	; 255
    23f4:	68 83       	st	Y, r22
    23f6:	79 83       	std	Y+1, r23	; 0x01
    23f8:	8a 83       	std	Y+2, r24	; 0x02
    23fa:	9b 83       	std	Y+3, r25	; 0x03
    23fc:	c7 59       	subi	r28, 0x97	; 151
    23fe:	d0 40       	sbci	r29, 0x00	; 0
    2400:	c9 56       	subi	r28, 0x69	; 105
    2402:	df 4f       	sbci	r29, 0xFF	; 255
    2404:	e8 81       	ld	r30, Y
    2406:	f9 81       	ldd	r31, Y+1	; 0x01
    2408:	c7 59       	subi	r28, 0x97	; 151
    240a:	d0 40       	sbci	r29, 0x00	; 0
    240c:	fc ab       	std	Y+52, r31	; 0x34
    240e:	eb ab       	std	Y+51, r30	; 0x33
    2410:	8b a9       	ldd	r24, Y+51	; 0x33
    2412:	9c a9       	ldd	r25, Y+52	; 0x34
    2414:	98 af       	std	Y+56, r25	; 0x38
    2416:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
    2418:	8f a9       	ldd	r24, Y+55	; 0x37
    241a:	98 ad       	ldd	r25, Y+56	; 0x38
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <main+0x636>
    2420:	98 af       	std	Y+56, r25	; 0x38
    2422:	8f ab       	std	Y+55, r24	; 0x37
}
    2424:	00 00       	nop
	_delay_ms(500);

	do {
			key_num = KeyPad_getPressedKey();
    2426:	0e 94 5d 00 	call	0xba	; 0xba <KeyPad_getPressedKey>
    242a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			if ((key_num <= 57) && (key_num >= 48)) {
    242e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    2432:	8a 33       	cpi	r24, 0x3A	; 58
    2434:	b8 f5       	brcc	.+110    	; 0x24a4 <main+0x6be>
    2436:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    243a:	80 33       	cpi	r24, 0x30	; 48
    243c:	98 f1       	brcs	.+102    	; 0x24a4 <main+0x6be>
				LCD_displayCharacter(key_num);
    243e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    2442:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_displayCharacter>
				num2 = (sint32) (key_num - 48) + (num2 * 10);
    2446:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    244a:	88 2f       	mov	r24, r24
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	c0 97       	sbiw	r24, 0x30	; 48
    2450:	8c 01       	movw	r16, r24
    2452:	99 0f       	add	r25, r25
    2454:	22 0b       	sbc	r18, r18
    2456:	33 0b       	sbc	r19, r19
    2458:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <num2>
    245c:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <num2+0x1>
    2460:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <num2+0x2>
    2464:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <num2+0x3>
    2468:	db 01       	movw	r26, r22
    246a:	ca 01       	movw	r24, r20
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	aa 1f       	adc	r26, r26
    2472:	bb 1f       	adc	r27, r27
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	aa 1f       	adc	r26, r26
    247a:	bb 1f       	adc	r27, r27
    247c:	84 0f       	add	r24, r20
    247e:	95 1f       	adc	r25, r21
    2480:	a6 1f       	adc	r26, r22
    2482:	b7 1f       	adc	r27, r23
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	aa 1f       	adc	r26, r26
    248a:	bb 1f       	adc	r27, r27
    248c:	80 0f       	add	r24, r16
    248e:	91 1f       	adc	r25, r17
    2490:	a2 1f       	adc	r26, r18
    2492:	b3 1f       	adc	r27, r19
    2494:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <num2>
    2498:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <num2+0x1>
    249c:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <num2+0x2>
    24a0:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <num2+0x3>
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	aa ef       	ldi	r26, 0xFA	; 250
    24aa:	b3 e4       	ldi	r27, 0x43	; 67
    24ac:	89 af       	std	Y+57, r24	; 0x39
    24ae:	9a af       	std	Y+58, r25	; 0x3a
    24b0:	ab af       	std	Y+59, r26	; 0x3b
    24b2:	bc af       	std	Y+60, r27	; 0x3c
	__tmp = ((F_CPU) / 4e3) * __ms;
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e4       	ldi	r19, 0x40	; 64
    24b8:	4c e9       	ldi	r20, 0x9C	; 156
    24ba:	55 e4       	ldi	r21, 0x45	; 69
    24bc:	69 ad       	ldd	r22, Y+57	; 0x39
    24be:	7a ad       	ldd	r23, Y+58	; 0x3a
    24c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    24c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    24c4:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    24c8:	c5 56       	subi	r28, 0x65	; 101
    24ca:	df 4f       	sbci	r29, 0xFF	; 255
    24cc:	68 83       	st	Y, r22
    24ce:	79 83       	std	Y+1, r23	; 0x01
    24d0:	8a 83       	std	Y+2, r24	; 0x02
    24d2:	9b 83       	std	Y+3, r25	; 0x03
    24d4:	cb 59       	subi	r28, 0x9B	; 155
    24d6:	d0 40       	sbci	r29, 0x00	; 0
    24d8:	ce 01       	movw	r24, r28
    24da:	cd 96       	adiw	r24, 0x3d	; 61
    24dc:	c5 56       	subi	r28, 0x65	; 101
    24de:	df 4f       	sbci	r29, 0xFF	; 255
    24e0:	28 81       	ld	r18, Y
    24e2:	39 81       	ldd	r19, Y+1	; 0x01
    24e4:	4a 81       	ldd	r20, Y+2	; 0x02
    24e6:	5b 81       	ldd	r21, Y+3	; 0x03
    24e8:	cb 59       	subi	r28, 0x9B	; 155
    24ea:	d0 40       	sbci	r29, 0x00	; 0
    24ec:	dc 01       	movw	r26, r24
    24ee:	2d 93       	st	X+, r18
    24f0:	3d 93       	st	X+, r19
    24f2:	4d 93       	st	X+, r20
    24f4:	5c 93       	st	X, r21
    24f6:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	ce 01       	movw	r24, r28
    2502:	cd 96       	adiw	r24, 0x3d	; 61
    2504:	fc 01       	movw	r30, r24
    2506:	60 81       	ld	r22, Z
    2508:	71 81       	ldd	r23, Z+1	; 0x01
    250a:	82 81       	ldd	r24, Z+2	; 0x02
    250c:	93 81       	ldd	r25, Z+3	; 0x03
    250e:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__cmpsf2>
    2512:	88 23       	and	r24, r24
    2514:	4c f4       	brge	.+18     	; 0x2528 <main+0x742>
		__ticks = 1;
    2516:	ce 01       	movw	r24, r28
    2518:	8f 5b       	subi	r24, 0xBF	; 191
    251a:	9f 4f       	sbci	r25, 0xFF	; 255
    251c:	21 e0       	ldi	r18, 0x01	; 1
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	dc 01       	movw	r26, r24
    2522:	2d 93       	st	X+, r18
    2524:	3c 93       	st	X, r19
    2526:	98 c0       	rjmp	.+304    	; 0x2658 <main+0x872>
	else if (__tmp > 65535)
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	3f ef       	ldi	r19, 0xFF	; 255
    252c:	4f e7       	ldi	r20, 0x7F	; 127
    252e:	57 e4       	ldi	r21, 0x47	; 71
    2530:	ce 01       	movw	r24, r28
    2532:	cd 96       	adiw	r24, 0x3d	; 61
    2534:	fc 01       	movw	r30, r24
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	82 81       	ldd	r24, Z+2	; 0x02
    253c:	93 81       	ldd	r25, Z+3	; 0x03
    253e:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__gesf2>
    2542:	18 16       	cp	r1, r24
    2544:	0c f0       	brlt	.+2      	; 0x2548 <main+0x762>
    2546:	6b c0       	rjmp	.+214    	; 0x261e <main+0x838>
		__ticks = (uint16_t) (__ms * 10.0);
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e2       	ldi	r20, 0x20	; 32
    254e:	51 e4       	ldi	r21, 0x41	; 65
    2550:	69 ad       	ldd	r22, Y+57	; 0x39
    2552:	7a ad       	ldd	r23, Y+58	; 0x3a
    2554:	8b ad       	ldd	r24, Y+59	; 0x3b
    2556:	9c ad       	ldd	r25, Y+60	; 0x3c
    2558:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__mulsf3>
    255c:	c1 56       	subi	r28, 0x61	; 97
    255e:	df 4f       	sbci	r29, 0xFF	; 255
    2560:	68 83       	st	Y, r22
    2562:	79 83       	std	Y+1, r23	; 0x01
    2564:	8a 83       	std	Y+2, r24	; 0x02
    2566:	9b 83       	std	Y+3, r25	; 0x03
    2568:	cf 59       	subi	r28, 0x9F	; 159
    256a:	d0 40       	sbci	r29, 0x00	; 0
    256c:	c1 56       	subi	r28, 0x61	; 97
    256e:	df 4f       	sbci	r29, 0xFF	; 255
    2570:	28 81       	ld	r18, Y
    2572:	39 81       	ldd	r19, Y+1	; 0x01
    2574:	4a 81       	ldd	r20, Y+2	; 0x02
    2576:	5b 81       	ldd	r21, Y+3	; 0x03
    2578:	cf 59       	subi	r28, 0x9F	; 159
    257a:	d0 40       	sbci	r29, 0x00	; 0
    257c:	6b 96       	adiw	r28, 0x1b	; 27
    257e:	2c af       	std	Y+60, r18	; 0x3c
    2580:	3d af       	std	Y+61, r19	; 0x3d
    2582:	4e af       	std	Y+62, r20	; 0x3e
    2584:	5f af       	std	Y+63, r21	; 0x3f
    2586:	6b 97       	sbiw	r28, 0x1b	; 27
    2588:	8e 01       	movw	r16, r28
    258a:	0f 5b       	subi	r16, 0xBF	; 191
    258c:	1f 4f       	sbci	r17, 0xFF	; 255
    258e:	6b 96       	adiw	r28, 0x1b	; 27
    2590:	6c ad       	ldd	r22, Y+60	; 0x3c
    2592:	7d ad       	ldd	r23, Y+61	; 0x3d
    2594:	8e ad       	ldd	r24, Y+62	; 0x3e
    2596:	9f ad       	ldd	r25, Y+63	; 0x3f
    2598:	6b 97       	sbiw	r28, 0x1b	; 27
    259a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    259e:	cd 55       	subi	r28, 0x5D	; 93
    25a0:	df 4f       	sbci	r29, 0xFF	; 255
    25a2:	68 83       	st	Y, r22
    25a4:	79 83       	std	Y+1, r23	; 0x01
    25a6:	8a 83       	std	Y+2, r24	; 0x02
    25a8:	9b 83       	std	Y+3, r25	; 0x03
    25aa:	c3 5a       	subi	r28, 0xA3	; 163
    25ac:	d0 40       	sbci	r29, 0x00	; 0
    25ae:	cd 55       	subi	r28, 0x5D	; 93
    25b0:	df 4f       	sbci	r29, 0xFF	; 255
    25b2:	e8 81       	ld	r30, Y
    25b4:	f9 81       	ldd	r31, Y+1	; 0x01
    25b6:	c3 5a       	subi	r28, 0xA3	; 163
    25b8:	d0 40       	sbci	r29, 0x00	; 0
    25ba:	d8 01       	movw	r26, r16
    25bc:	ed 93       	st	X+, r30
    25be:	fc 93       	st	X, r31
		while(__ticks)
    25c0:	25 c0       	rjmp	.+74     	; 0x260c <main+0x826>
    25c2:	ce 01       	movw	r24, r28
    25c4:	8d 5b       	subi	r24, 0xBD	; 189
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	24 ef       	ldi	r18, 0xF4	; 244
    25ca:	31 e0       	ldi	r19, 0x01	; 1
    25cc:	dc 01       	movw	r26, r24
    25ce:	2d 93       	st	X+, r18
    25d0:	3c 93       	st	X, r19
	__asm__ volatile (
    25d2:	ce 01       	movw	r24, r28
    25d4:	8d 5b       	subi	r24, 0xBD	; 189
    25d6:	9f 4f       	sbci	r25, 0xFF	; 255
    25d8:	fc 01       	movw	r30, r24
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <main+0x7f8>
    25e2:	9e 01       	movw	r18, r28
    25e4:	2d 5b       	subi	r18, 0xBD	; 189
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	d9 01       	movw	r26, r18
    25ea:	8d 93       	st	X+, r24
    25ec:	9c 93       	st	X, r25
}
    25ee:	00 00       	nop
			__ticks --;
    25f0:	ce 01       	movw	r24, r28
    25f2:	8f 5b       	subi	r24, 0xBF	; 191
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	9e 01       	movw	r18, r28
    25f8:	2f 5b       	subi	r18, 0xBF	; 191
    25fa:	3f 4f       	sbci	r19, 0xFF	; 255
    25fc:	f9 01       	movw	r30, r18
    25fe:	20 81       	ld	r18, Z
    2600:	31 81       	ldd	r19, Z+1	; 0x01
    2602:	21 50       	subi	r18, 0x01	; 1
    2604:	31 09       	sbc	r19, r1
    2606:	dc 01       	movw	r26, r24
    2608:	2d 93       	st	X+, r18
    260a:	3c 93       	st	X, r19
		while(__ticks)
    260c:	ce 01       	movw	r24, r28
    260e:	8f 5b       	subi	r24, 0xBF	; 191
    2610:	9f 4f       	sbci	r25, 0xFF	; 255
    2612:	fc 01       	movw	r30, r24
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	89 2b       	or	r24, r25
    261a:	99 f6       	brne	.-90     	; 0x25c2 <main+0x7dc>
		return;
    261c:	38 c0       	rjmp	.+112    	; 0x268e <main+0x8a8>
		__ticks = (uint16_t)__tmp;
    261e:	8e 01       	movw	r16, r28
    2620:	0f 5b       	subi	r16, 0xBF	; 191
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	ce 01       	movw	r24, r28
    2626:	cd 96       	adiw	r24, 0x3d	; 61
    2628:	dc 01       	movw	r26, r24
    262a:	6d 91       	ld	r22, X+
    262c:	7d 91       	ld	r23, X+
    262e:	8d 91       	ld	r24, X+
    2630:	9c 91       	ld	r25, X
    2632:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    2636:	c9 55       	subi	r28, 0x59	; 89
    2638:	df 4f       	sbci	r29, 0xFF	; 255
    263a:	68 83       	st	Y, r22
    263c:	79 83       	std	Y+1, r23	; 0x01
    263e:	8a 83       	std	Y+2, r24	; 0x02
    2640:	9b 83       	std	Y+3, r25	; 0x03
    2642:	c7 5a       	subi	r28, 0xA7	; 167
    2644:	d0 40       	sbci	r29, 0x00	; 0
    2646:	c9 55       	subi	r28, 0x59	; 89
    2648:	df 4f       	sbci	r29, 0xFF	; 255
    264a:	28 81       	ld	r18, Y
    264c:	39 81       	ldd	r19, Y+1	; 0x01
    264e:	c7 5a       	subi	r28, 0xA7	; 167
    2650:	d0 40       	sbci	r29, 0x00	; 0
    2652:	f8 01       	movw	r30, r16
    2654:	31 83       	std	Z+1, r19	; 0x01
    2656:	20 83       	st	Z, r18
    2658:	ce 01       	movw	r24, r28
    265a:	8b 5b       	subi	r24, 0xBB	; 187
    265c:	9f 4f       	sbci	r25, 0xFF	; 255
    265e:	9e 01       	movw	r18, r28
    2660:	2f 5b       	subi	r18, 0xBF	; 191
    2662:	3f 4f       	sbci	r19, 0xFF	; 255
    2664:	d9 01       	movw	r26, r18
    2666:	2d 91       	ld	r18, X+
    2668:	3c 91       	ld	r19, X
    266a:	fc 01       	movw	r30, r24
    266c:	31 83       	std	Z+1, r19	; 0x01
    266e:	20 83       	st	Z, r18
	__asm__ volatile (
    2670:	ce 01       	movw	r24, r28
    2672:	8b 5b       	subi	r24, 0xBB	; 187
    2674:	9f 4f       	sbci	r25, 0xFF	; 255
    2676:	dc 01       	movw	r26, r24
    2678:	8d 91       	ld	r24, X+
    267a:	9c 91       	ld	r25, X
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <main+0x896>
    2680:	9e 01       	movw	r18, r28
    2682:	2b 5b       	subi	r18, 0xBB	; 187
    2684:	3f 4f       	sbci	r19, 0xFF	; 255
    2686:	f9 01       	movw	r30, r18
    2688:	91 83       	std	Z+1, r25	; 0x01
    268a:	80 83       	st	Z, r24
}
    268c:	00 00       	nop
			}
			_delay_ms(500);

	} while ((key_num <= 57) && (key_num >= 48));
    268e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    2692:	8a 33       	cpi	r24, 0x3A	; 58
    2694:	28 f4       	brcc	.+10     	; 0x26a0 <main+0x8ba>
    2696:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    269a:	80 33       	cpi	r24, 0x30	; 48
    269c:	08 f0       	brcs	.+2      	; 0x26a0 <main+0x8ba>
    269e:	c3 ce       	rjmp	.-634    	; 0x2426 <main+0x640>
		LCD_displayCharacter(key_num);
    26a0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    26a4:	0e 94 16 06 	call	0xc2c	; 0xc2c <LCD_displayCharacter>
		resultfun();
    26a8:	0e 94 92 13 	call	0x2724	; 0x2724 <resultfun>
		LCD_intgerToString(result);
    26ac:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <result>
    26b0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <result+0x1>
    26b4:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <result+0x2>
    26b8:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <result+0x3>
    26bc:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_intgerToString>
		while (key_num != 27) {
    26c0:	04 c0       	rjmp	.+8      	; 0x26ca <main+0x8e4>
			key_num = KeyPad_getPressedKey();
    26c2:	0e 94 5d 00 	call	0xba	; 0xba <KeyPad_getPressedKey>
    26c6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
		while (key_num != 27) {
    26ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    26ce:	8b 31       	cpi	r24, 0x1B	; 27
    26d0:	c1 f7       	brne	.-16     	; 0x26c2 <main+0x8dc>
		}
		key_num = 0;
    26d2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		num1 = 0;
    26d6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <num1>
    26da:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <num1+0x1>
    26de:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <num1+0x2>
    26e2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <num1+0x3>
		num2 = 0;
    26e6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <num2>
    26ea:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <num2+0x1>
    26ee:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <num2+0x2>
    26f2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <num2+0x3>
		operand = 0;
    26f6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <operand>
		result = 0;
    26fa:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <result>
    26fe:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <result+0x1>
    2702:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <result+0x2>
    2706:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <result+0x3>
		LCD_clearScreen();
    270a:	2f cc       	rjmp	.-1954   	; 0x1f6a <main+0x184>

0000270c <operator>:
	}

	return 0;
}

void operator(void) {
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
	operand = key_num;
    2714:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    2718:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <operand>

	return;
    271c:	00 00       	nop
}
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	08 95       	ret

00002724 <resultfun>:

void resultfun(void) {
    2724:	0f 93       	push	r16
    2726:	1f 93       	push	r17
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    2730:	2c 97       	sbiw	r28, 0x0c	; 12
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	f8 94       	cli
    2736:	de bf       	out	0x3e, r29	; 62
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	cd bf       	out	0x3d, r28	; 61

	switch (operand) {
    273c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <operand>
    2740:	88 2f       	mov	r24, r24
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	8f 32       	cpi	r24, 0x2F	; 47
    2746:	91 05       	cpc	r25, r1
    2748:	09 f4       	brne	.+2      	; 0x274c <resultfun+0x28>
    274a:	7d c0       	rjmp	.+250    	; 0x2846 <resultfun+0x122>
    274c:	80 33       	cpi	r24, 0x30	; 48
    274e:	91 05       	cpc	r25, r1
    2750:	0c f0       	brlt	.+2      	; 0x2754 <resultfun+0x30>
    2752:	a0 c0       	rjmp	.+320    	; 0x2894 <resultfun+0x170>
    2754:	8d 32       	cpi	r24, 0x2D	; 45
    2756:	91 05       	cpc	r25, r1
    2758:	41 f1       	breq	.+80     	; 0x27aa <resultfun+0x86>
    275a:	8e 32       	cpi	r24, 0x2E	; 46
    275c:	91 05       	cpc	r25, r1
    275e:	0c f0       	brlt	.+2      	; 0x2762 <resultfun+0x3e>
    2760:	99 c0       	rjmp	.+306    	; 0x2894 <resultfun+0x170>
    2762:	8a 32       	cpi	r24, 0x2A	; 42
    2764:	91 05       	cpc	r25, r1
    2766:	09 f4       	brne	.+2      	; 0x276a <resultfun+0x46>
    2768:	41 c0       	rjmp	.+130    	; 0x27ec <resultfun+0xc8>
    276a:	8b 97       	sbiw	r24, 0x2b	; 43
    276c:	09 f0       	breq	.+2      	; 0x2770 <resultfun+0x4c>
    276e:	92 c0       	rjmp	.+292    	; 0x2894 <resultfun+0x170>
	case 43:
		result = num1 + num2;
    2770:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <num1>
    2774:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <num1+0x1>
    2778:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <num1+0x2>
    277c:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <num1+0x3>
    2780:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <num2>
    2784:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <num2+0x1>
    2788:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <num2+0x2>
    278c:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <num2+0x3>
    2790:	84 0f       	add	r24, r20
    2792:	95 1f       	adc	r25, r21
    2794:	a6 1f       	adc	r26, r22
    2796:	b7 1f       	adc	r27, r23
    2798:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <result>
    279c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <result+0x1>
    27a0:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <result+0x2>
    27a4:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <result+0x3>
		break;
    27a8:	7e c0       	rjmp	.+252    	; 0x28a6 <resultfun+0x182>
	case 45:
		result = num1 - num2;
    27aa:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <num1>
    27ae:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <num1+0x1>
    27b2:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <num1+0x2>
    27b6:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <num1+0x3>
    27ba:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <num2>
    27be:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <num2+0x1>
    27c2:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <num2+0x2>
    27c6:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <num2+0x3>
    27ca:	8a 01       	movw	r16, r20
    27cc:	9b 01       	movw	r18, r22
    27ce:	08 1b       	sub	r16, r24
    27d0:	19 0b       	sbc	r17, r25
    27d2:	2a 0b       	sbc	r18, r26
    27d4:	3b 0b       	sbc	r19, r27
    27d6:	d9 01       	movw	r26, r18
    27d8:	c8 01       	movw	r24, r16
    27da:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <result>
    27de:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <result+0x1>
    27e2:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <result+0x2>
    27e6:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <result+0x3>
		break;
    27ea:	5d c0       	rjmp	.+186    	; 0x28a6 <resultfun+0x182>
	case 42:
		result = num1 * num2;
    27ec:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <num1>
    27f0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <num1+0x1>
    27f4:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <num1+0x2>
    27f8:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <num1+0x3>
    27fc:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <num2>
    2800:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <num2+0x1>
    2804:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <num2+0x2>
    2808:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <num2+0x3>
    280c:	29 83       	std	Y+1, r18	; 0x01
    280e:	3a 83       	std	Y+2, r19	; 0x02
    2810:	4b 83       	std	Y+3, r20	; 0x03
    2812:	5c 83       	std	Y+4, r21	; 0x04
    2814:	9c 01       	movw	r18, r24
    2816:	ad 01       	movw	r20, r26
    2818:	69 81       	ldd	r22, Y+1	; 0x01
    281a:	7a 81       	ldd	r23, Y+2	; 0x02
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	9c 81       	ldd	r25, Y+4	; 0x04
    2820:	0e 94 5f 14 	call	0x28be	; 0x28be <__mulsi3>
    2824:	6d 83       	std	Y+5, r22	; 0x05
    2826:	7e 83       	std	Y+6, r23	; 0x06
    2828:	8f 83       	std	Y+7, r24	; 0x07
    282a:	98 87       	std	Y+8, r25	; 0x08
    282c:	8d 81       	ldd	r24, Y+5	; 0x05
    282e:	9e 81       	ldd	r25, Y+6	; 0x06
    2830:	af 81       	ldd	r26, Y+7	; 0x07
    2832:	b8 85       	ldd	r27, Y+8	; 0x08
    2834:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <result>
    2838:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <result+0x1>
    283c:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <result+0x2>
    2840:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <result+0x3>
		break;
    2844:	30 c0       	rjmp	.+96     	; 0x28a6 <resultfun+0x182>
	case 47:
		result = num1 / num2;
    2846:	00 91 0f 01 	lds	r16, 0x010F	; 0x80010f <num1>
    284a:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <num1+0x1>
    284e:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <num1+0x2>
    2852:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <num1+0x3>
    2856:	09 87       	std	Y+9, r16	; 0x09
    2858:	1a 87       	std	Y+10, r17	; 0x0a
    285a:	2b 87       	std	Y+11, r18	; 0x0b
    285c:	3c 87       	std	Y+12, r19	; 0x0c
    285e:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <num2>
    2862:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <num2+0x1>
    2866:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <num2+0x2>
    286a:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <num2+0x3>
    286e:	69 85       	ldd	r22, Y+9	; 0x09
    2870:	7a 85       	ldd	r23, Y+10	; 0x0a
    2872:	8b 85       	ldd	r24, Y+11	; 0x0b
    2874:	9c 85       	ldd	r25, Y+12	; 0x0c
    2876:	a9 01       	movw	r20, r18
    2878:	98 01       	movw	r18, r16
    287a:	0e 94 6f 14 	call	0x28de	; 0x28de <__divmodsi4>
    287e:	da 01       	movw	r26, r20
    2880:	c9 01       	movw	r24, r18
    2882:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <result>
    2886:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <result+0x1>
    288a:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <result+0x2>
    288e:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <result+0x3>
		break;
    2892:	09 c0       	rjmp	.+18     	; 0x28a6 <resultfun+0x182>
	default:
		result = 0;
    2894:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <result>
    2898:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <result+0x1>
    289c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <result+0x2>
    28a0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <result+0x3>
		break;
    28a4:	00 00       	nop
	}

	return;
    28a6:	00 00       	nop
}
    28a8:	2c 96       	adiw	r28, 0x0c	; 12
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	08 95       	ret

000028be <__mulsi3>:
    28be:	db 01       	movw	r26, r22
    28c0:	8f 93       	push	r24
    28c2:	9f 93       	push	r25
    28c4:	0e 94 94 14 	call	0x2928	; 0x2928 <__muluhisi3>
    28c8:	bf 91       	pop	r27
    28ca:	af 91       	pop	r26
    28cc:	a2 9f       	mul	r26, r18
    28ce:	80 0d       	add	r24, r0
    28d0:	91 1d       	adc	r25, r1
    28d2:	a3 9f       	mul	r26, r19
    28d4:	90 0d       	add	r25, r0
    28d6:	b2 9f       	mul	r27, r18
    28d8:	90 0d       	add	r25, r0
    28da:	11 24       	eor	r1, r1
    28dc:	08 95       	ret

000028de <__divmodsi4>:
    28de:	05 2e       	mov	r0, r21
    28e0:	97 fb       	bst	r25, 7
    28e2:	1e f4       	brtc	.+6      	; 0x28ea <__divmodsi4+0xc>
    28e4:	00 94       	com	r0
    28e6:	0e 94 86 14 	call	0x290c	; 0x290c <__negsi2>
    28ea:	57 fd       	sbrc	r21, 7
    28ec:	07 d0       	rcall	.+14     	; 0x28fc <__divmodsi4_neg2>
    28ee:	0e 94 9f 14 	call	0x293e	; 0x293e <__udivmodsi4>
    28f2:	07 fc       	sbrc	r0, 7
    28f4:	03 d0       	rcall	.+6      	; 0x28fc <__divmodsi4_neg2>
    28f6:	4e f4       	brtc	.+18     	; 0x290a <__divmodsi4_exit>
    28f8:	0c 94 86 14 	jmp	0x290c	; 0x290c <__negsi2>

000028fc <__divmodsi4_neg2>:
    28fc:	50 95       	com	r21
    28fe:	40 95       	com	r20
    2900:	30 95       	com	r19
    2902:	21 95       	neg	r18
    2904:	3f 4f       	sbci	r19, 0xFF	; 255
    2906:	4f 4f       	sbci	r20, 0xFF	; 255
    2908:	5f 4f       	sbci	r21, 0xFF	; 255

0000290a <__divmodsi4_exit>:
    290a:	08 95       	ret

0000290c <__negsi2>:
    290c:	90 95       	com	r25
    290e:	80 95       	com	r24
    2910:	70 95       	com	r23
    2912:	61 95       	neg	r22
    2914:	7f 4f       	sbci	r23, 0xFF	; 255
    2916:	8f 4f       	sbci	r24, 0xFF	; 255
    2918:	9f 4f       	sbci	r25, 0xFF	; 255
    291a:	08 95       	ret

0000291c <__tablejump2__>:
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	05 90       	lpm	r0, Z+
    2922:	f4 91       	lpm	r31, Z
    2924:	e0 2d       	mov	r30, r0
    2926:	09 94       	ijmp

00002928 <__muluhisi3>:
    2928:	0e 94 c1 14 	call	0x2982	; 0x2982 <__umulhisi3>
    292c:	a5 9f       	mul	r26, r21
    292e:	90 0d       	add	r25, r0
    2930:	b4 9f       	mul	r27, r20
    2932:	90 0d       	add	r25, r0
    2934:	a4 9f       	mul	r26, r20
    2936:	80 0d       	add	r24, r0
    2938:	91 1d       	adc	r25, r1
    293a:	11 24       	eor	r1, r1
    293c:	08 95       	ret

0000293e <__udivmodsi4>:
    293e:	a1 e2       	ldi	r26, 0x21	; 33
    2940:	1a 2e       	mov	r1, r26
    2942:	aa 1b       	sub	r26, r26
    2944:	bb 1b       	sub	r27, r27
    2946:	fd 01       	movw	r30, r26
    2948:	0d c0       	rjmp	.+26     	; 0x2964 <__udivmodsi4_ep>

0000294a <__udivmodsi4_loop>:
    294a:	aa 1f       	adc	r26, r26
    294c:	bb 1f       	adc	r27, r27
    294e:	ee 1f       	adc	r30, r30
    2950:	ff 1f       	adc	r31, r31
    2952:	a2 17       	cp	r26, r18
    2954:	b3 07       	cpc	r27, r19
    2956:	e4 07       	cpc	r30, r20
    2958:	f5 07       	cpc	r31, r21
    295a:	20 f0       	brcs	.+8      	; 0x2964 <__udivmodsi4_ep>
    295c:	a2 1b       	sub	r26, r18
    295e:	b3 0b       	sbc	r27, r19
    2960:	e4 0b       	sbc	r30, r20
    2962:	f5 0b       	sbc	r31, r21

00002964 <__udivmodsi4_ep>:
    2964:	66 1f       	adc	r22, r22
    2966:	77 1f       	adc	r23, r23
    2968:	88 1f       	adc	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	1a 94       	dec	r1
    296e:	69 f7       	brne	.-38     	; 0x294a <__udivmodsi4_loop>
    2970:	60 95       	com	r22
    2972:	70 95       	com	r23
    2974:	80 95       	com	r24
    2976:	90 95       	com	r25
    2978:	9b 01       	movw	r18, r22
    297a:	ac 01       	movw	r20, r24
    297c:	bd 01       	movw	r22, r26
    297e:	cf 01       	movw	r24, r30
    2980:	08 95       	ret

00002982 <__umulhisi3>:
    2982:	a2 9f       	mul	r26, r18
    2984:	b0 01       	movw	r22, r0
    2986:	b3 9f       	mul	r27, r19
    2988:	c0 01       	movw	r24, r0
    298a:	a3 9f       	mul	r26, r19
    298c:	70 0d       	add	r23, r0
    298e:	81 1d       	adc	r24, r1
    2990:	11 24       	eor	r1, r1
    2992:	91 1d       	adc	r25, r1
    2994:	b2 9f       	mul	r27, r18
    2996:	70 0d       	add	r23, r0
    2998:	81 1d       	adc	r24, r1
    299a:	11 24       	eor	r1, r1
    299c:	91 1d       	adc	r25, r1
    299e:	08 95       	ret

000029a0 <__cmpsf2>:
    29a0:	0e 94 76 15 	call	0x2aec	; 0x2aec <__fp_cmp>
    29a4:	08 f4       	brcc	.+2      	; 0x29a8 <__cmpsf2+0x8>
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	08 95       	ret

000029aa <__divsf3>:
    29aa:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__divsf3x>
    29ae:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__fp_round>
    29b2:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__fp_pscB>
    29b6:	58 f0       	brcs	.+22     	; 0x29ce <__divsf3+0x24>
    29b8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__fp_pscA>
    29bc:	40 f0       	brcs	.+16     	; 0x29ce <__divsf3+0x24>
    29be:	29 f4       	brne	.+10     	; 0x29ca <__divsf3+0x20>
    29c0:	5f 3f       	cpi	r21, 0xFF	; 255
    29c2:	29 f0       	breq	.+10     	; 0x29ce <__divsf3+0x24>
    29c4:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__fp_inf>
    29c8:	51 11       	cpse	r21, r1
    29ca:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__fp_szero>
    29ce:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__fp_nan>

000029d2 <__divsf3x>:
    29d2:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__fp_split3>
    29d6:	68 f3       	brcs	.-38     	; 0x29b2 <__divsf3+0x8>

000029d8 <__divsf3_pse>:
    29d8:	99 23       	and	r25, r25
    29da:	b1 f3       	breq	.-20     	; 0x29c8 <__divsf3+0x1e>
    29dc:	55 23       	and	r21, r21
    29de:	91 f3       	breq	.-28     	; 0x29c4 <__divsf3+0x1a>
    29e0:	95 1b       	sub	r25, r21
    29e2:	55 0b       	sbc	r21, r21
    29e4:	bb 27       	eor	r27, r27
    29e6:	aa 27       	eor	r26, r26
    29e8:	62 17       	cp	r22, r18
    29ea:	73 07       	cpc	r23, r19
    29ec:	84 07       	cpc	r24, r20
    29ee:	38 f0       	brcs	.+14     	; 0x29fe <__divsf3_pse+0x26>
    29f0:	9f 5f       	subi	r25, 0xFF	; 255
    29f2:	5f 4f       	sbci	r21, 0xFF	; 255
    29f4:	22 0f       	add	r18, r18
    29f6:	33 1f       	adc	r19, r19
    29f8:	44 1f       	adc	r20, r20
    29fa:	aa 1f       	adc	r26, r26
    29fc:	a9 f3       	breq	.-22     	; 0x29e8 <__divsf3_pse+0x10>
    29fe:	35 d0       	rcall	.+106    	; 0x2a6a <__divsf3_pse+0x92>
    2a00:	0e 2e       	mov	r0, r30
    2a02:	3a f0       	brmi	.+14     	; 0x2a12 <__divsf3_pse+0x3a>
    2a04:	e0 e8       	ldi	r30, 0x80	; 128
    2a06:	32 d0       	rcall	.+100    	; 0x2a6c <__divsf3_pse+0x94>
    2a08:	91 50       	subi	r25, 0x01	; 1
    2a0a:	50 40       	sbci	r21, 0x00	; 0
    2a0c:	e6 95       	lsr	r30
    2a0e:	00 1c       	adc	r0, r0
    2a10:	ca f7       	brpl	.-14     	; 0x2a04 <__divsf3_pse+0x2c>
    2a12:	2b d0       	rcall	.+86     	; 0x2a6a <__divsf3_pse+0x92>
    2a14:	fe 2f       	mov	r31, r30
    2a16:	29 d0       	rcall	.+82     	; 0x2a6a <__divsf3_pse+0x92>
    2a18:	66 0f       	add	r22, r22
    2a1a:	77 1f       	adc	r23, r23
    2a1c:	88 1f       	adc	r24, r24
    2a1e:	bb 1f       	adc	r27, r27
    2a20:	26 17       	cp	r18, r22
    2a22:	37 07       	cpc	r19, r23
    2a24:	48 07       	cpc	r20, r24
    2a26:	ab 07       	cpc	r26, r27
    2a28:	b0 e8       	ldi	r27, 0x80	; 128
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <__divsf3_pse+0x56>
    2a2c:	bb 0b       	sbc	r27, r27
    2a2e:	80 2d       	mov	r24, r0
    2a30:	bf 01       	movw	r22, r30
    2a32:	ff 27       	eor	r31, r31
    2a34:	93 58       	subi	r25, 0x83	; 131
    2a36:	5f 4f       	sbci	r21, 0xFF	; 255
    2a38:	3a f0       	brmi	.+14     	; 0x2a48 <__divsf3_pse+0x70>
    2a3a:	9e 3f       	cpi	r25, 0xFE	; 254
    2a3c:	51 05       	cpc	r21, r1
    2a3e:	78 f0       	brcs	.+30     	; 0x2a5e <__divsf3_pse+0x86>
    2a40:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__fp_inf>
    2a44:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__fp_szero>
    2a48:	5f 3f       	cpi	r21, 0xFF	; 255
    2a4a:	e4 f3       	brlt	.-8      	; 0x2a44 <__divsf3_pse+0x6c>
    2a4c:	98 3e       	cpi	r25, 0xE8	; 232
    2a4e:	d4 f3       	brlt	.-12     	; 0x2a44 <__divsf3_pse+0x6c>
    2a50:	86 95       	lsr	r24
    2a52:	77 95       	ror	r23
    2a54:	67 95       	ror	r22
    2a56:	b7 95       	ror	r27
    2a58:	f7 95       	ror	r31
    2a5a:	9f 5f       	subi	r25, 0xFF	; 255
    2a5c:	c9 f7       	brne	.-14     	; 0x2a50 <__divsf3_pse+0x78>
    2a5e:	88 0f       	add	r24, r24
    2a60:	91 1d       	adc	r25, r1
    2a62:	96 95       	lsr	r25
    2a64:	87 95       	ror	r24
    2a66:	97 f9       	bld	r25, 7
    2a68:	08 95       	ret
    2a6a:	e1 e0       	ldi	r30, 0x01	; 1
    2a6c:	66 0f       	add	r22, r22
    2a6e:	77 1f       	adc	r23, r23
    2a70:	88 1f       	adc	r24, r24
    2a72:	bb 1f       	adc	r27, r27
    2a74:	62 17       	cp	r22, r18
    2a76:	73 07       	cpc	r23, r19
    2a78:	84 07       	cpc	r24, r20
    2a7a:	ba 07       	cpc	r27, r26
    2a7c:	20 f0       	brcs	.+8      	; 0x2a86 <__divsf3_pse+0xae>
    2a7e:	62 1b       	sub	r22, r18
    2a80:	73 0b       	sbc	r23, r19
    2a82:	84 0b       	sbc	r24, r20
    2a84:	ba 0b       	sbc	r27, r26
    2a86:	ee 1f       	adc	r30, r30
    2a88:	88 f7       	brcc	.-30     	; 0x2a6c <__divsf3_pse+0x94>
    2a8a:	e0 95       	com	r30
    2a8c:	08 95       	ret

00002a8e <__fixunssfsi>:
    2a8e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__fp_splitA>
    2a92:	88 f0       	brcs	.+34     	; 0x2ab6 <__fixunssfsi+0x28>
    2a94:	9f 57       	subi	r25, 0x7F	; 127
    2a96:	98 f0       	brcs	.+38     	; 0x2abe <__fixunssfsi+0x30>
    2a98:	b9 2f       	mov	r27, r25
    2a9a:	99 27       	eor	r25, r25
    2a9c:	b7 51       	subi	r27, 0x17	; 23
    2a9e:	b0 f0       	brcs	.+44     	; 0x2acc <__fixunssfsi+0x3e>
    2aa0:	e1 f0       	breq	.+56     	; 0x2ada <__fixunssfsi+0x4c>
    2aa2:	66 0f       	add	r22, r22
    2aa4:	77 1f       	adc	r23, r23
    2aa6:	88 1f       	adc	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	1a f0       	brmi	.+6      	; 0x2ab2 <__fixunssfsi+0x24>
    2aac:	ba 95       	dec	r27
    2aae:	c9 f7       	brne	.-14     	; 0x2aa2 <__fixunssfsi+0x14>
    2ab0:	14 c0       	rjmp	.+40     	; 0x2ada <__fixunssfsi+0x4c>
    2ab2:	b1 30       	cpi	r27, 0x01	; 1
    2ab4:	91 f0       	breq	.+36     	; 0x2ada <__fixunssfsi+0x4c>
    2ab6:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__fp_zero>
    2aba:	b1 e0       	ldi	r27, 0x01	; 1
    2abc:	08 95       	ret
    2abe:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__fp_zero>
    2ac2:	67 2f       	mov	r22, r23
    2ac4:	78 2f       	mov	r23, r24
    2ac6:	88 27       	eor	r24, r24
    2ac8:	b8 5f       	subi	r27, 0xF8	; 248
    2aca:	39 f0       	breq	.+14     	; 0x2ada <__fixunssfsi+0x4c>
    2acc:	b9 3f       	cpi	r27, 0xF9	; 249
    2ace:	cc f3       	brlt	.-14     	; 0x2ac2 <__fixunssfsi+0x34>
    2ad0:	86 95       	lsr	r24
    2ad2:	77 95       	ror	r23
    2ad4:	67 95       	ror	r22
    2ad6:	b3 95       	inc	r27
    2ad8:	d9 f7       	brne	.-10     	; 0x2ad0 <__fixunssfsi+0x42>
    2ada:	3e f4       	brtc	.+14     	; 0x2aea <__fixunssfsi+0x5c>
    2adc:	90 95       	com	r25
    2ade:	80 95       	com	r24
    2ae0:	70 95       	com	r23
    2ae2:	61 95       	neg	r22
    2ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aea:	08 95       	ret

00002aec <__fp_cmp>:
    2aec:	99 0f       	add	r25, r25
    2aee:	00 08       	sbc	r0, r0
    2af0:	55 0f       	add	r21, r21
    2af2:	aa 0b       	sbc	r26, r26
    2af4:	e0 e8       	ldi	r30, 0x80	; 128
    2af6:	fe ef       	ldi	r31, 0xFE	; 254
    2af8:	16 16       	cp	r1, r22
    2afa:	17 06       	cpc	r1, r23
    2afc:	e8 07       	cpc	r30, r24
    2afe:	f9 07       	cpc	r31, r25
    2b00:	c0 f0       	brcs	.+48     	; 0x2b32 <__fp_cmp+0x46>
    2b02:	12 16       	cp	r1, r18
    2b04:	13 06       	cpc	r1, r19
    2b06:	e4 07       	cpc	r30, r20
    2b08:	f5 07       	cpc	r31, r21
    2b0a:	98 f0       	brcs	.+38     	; 0x2b32 <__fp_cmp+0x46>
    2b0c:	62 1b       	sub	r22, r18
    2b0e:	73 0b       	sbc	r23, r19
    2b10:	84 0b       	sbc	r24, r20
    2b12:	95 0b       	sbc	r25, r21
    2b14:	39 f4       	brne	.+14     	; 0x2b24 <__fp_cmp+0x38>
    2b16:	0a 26       	eor	r0, r26
    2b18:	61 f0       	breq	.+24     	; 0x2b32 <__fp_cmp+0x46>
    2b1a:	23 2b       	or	r18, r19
    2b1c:	24 2b       	or	r18, r20
    2b1e:	25 2b       	or	r18, r21
    2b20:	21 f4       	brne	.+8      	; 0x2b2a <__fp_cmp+0x3e>
    2b22:	08 95       	ret
    2b24:	0a 26       	eor	r0, r26
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <__fp_cmp+0x3e>
    2b28:	a1 40       	sbci	r26, 0x01	; 1
    2b2a:	a6 95       	lsr	r26
    2b2c:	8f ef       	ldi	r24, 0xFF	; 255
    2b2e:	81 1d       	adc	r24, r1
    2b30:	81 1d       	adc	r24, r1
    2b32:	08 95       	ret

00002b34 <__fp_inf>:
    2b34:	97 f9       	bld	r25, 7
    2b36:	9f 67       	ori	r25, 0x7F	; 127
    2b38:	80 e8       	ldi	r24, 0x80	; 128
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	08 95       	ret

00002b40 <__fp_nan>:
    2b40:	9f ef       	ldi	r25, 0xFF	; 255
    2b42:	80 ec       	ldi	r24, 0xC0	; 192
    2b44:	08 95       	ret

00002b46 <__fp_pscA>:
    2b46:	00 24       	eor	r0, r0
    2b48:	0a 94       	dec	r0
    2b4a:	16 16       	cp	r1, r22
    2b4c:	17 06       	cpc	r1, r23
    2b4e:	18 06       	cpc	r1, r24
    2b50:	09 06       	cpc	r0, r25
    2b52:	08 95       	ret

00002b54 <__fp_pscB>:
    2b54:	00 24       	eor	r0, r0
    2b56:	0a 94       	dec	r0
    2b58:	12 16       	cp	r1, r18
    2b5a:	13 06       	cpc	r1, r19
    2b5c:	14 06       	cpc	r1, r20
    2b5e:	05 06       	cpc	r0, r21
    2b60:	08 95       	ret

00002b62 <__fp_round>:
    2b62:	09 2e       	mov	r0, r25
    2b64:	03 94       	inc	r0
    2b66:	00 0c       	add	r0, r0
    2b68:	11 f4       	brne	.+4      	; 0x2b6e <__fp_round+0xc>
    2b6a:	88 23       	and	r24, r24
    2b6c:	52 f0       	brmi	.+20     	; 0x2b82 <__fp_round+0x20>
    2b6e:	bb 0f       	add	r27, r27
    2b70:	40 f4       	brcc	.+16     	; 0x2b82 <__fp_round+0x20>
    2b72:	bf 2b       	or	r27, r31
    2b74:	11 f4       	brne	.+4      	; 0x2b7a <__fp_round+0x18>
    2b76:	60 ff       	sbrs	r22, 0
    2b78:	04 c0       	rjmp	.+8      	; 0x2b82 <__fp_round+0x20>
    2b7a:	6f 5f       	subi	r22, 0xFF	; 255
    2b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b80:	9f 4f       	sbci	r25, 0xFF	; 255
    2b82:	08 95       	ret

00002b84 <__fp_split3>:
    2b84:	57 fd       	sbrc	r21, 7
    2b86:	90 58       	subi	r25, 0x80	; 128
    2b88:	44 0f       	add	r20, r20
    2b8a:	55 1f       	adc	r21, r21
    2b8c:	59 f0       	breq	.+22     	; 0x2ba4 <__fp_splitA+0x10>
    2b8e:	5f 3f       	cpi	r21, 0xFF	; 255
    2b90:	71 f0       	breq	.+28     	; 0x2bae <__fp_splitA+0x1a>
    2b92:	47 95       	ror	r20

00002b94 <__fp_splitA>:
    2b94:	88 0f       	add	r24, r24
    2b96:	97 fb       	bst	r25, 7
    2b98:	99 1f       	adc	r25, r25
    2b9a:	61 f0       	breq	.+24     	; 0x2bb4 <__fp_splitA+0x20>
    2b9c:	9f 3f       	cpi	r25, 0xFF	; 255
    2b9e:	79 f0       	breq	.+30     	; 0x2bbe <__fp_splitA+0x2a>
    2ba0:	87 95       	ror	r24
    2ba2:	08 95       	ret
    2ba4:	12 16       	cp	r1, r18
    2ba6:	13 06       	cpc	r1, r19
    2ba8:	14 06       	cpc	r1, r20
    2baa:	55 1f       	adc	r21, r21
    2bac:	f2 cf       	rjmp	.-28     	; 0x2b92 <__fp_split3+0xe>
    2bae:	46 95       	lsr	r20
    2bb0:	f1 df       	rcall	.-30     	; 0x2b94 <__fp_splitA>
    2bb2:	08 c0       	rjmp	.+16     	; 0x2bc4 <__fp_splitA+0x30>
    2bb4:	16 16       	cp	r1, r22
    2bb6:	17 06       	cpc	r1, r23
    2bb8:	18 06       	cpc	r1, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	f1 cf       	rjmp	.-30     	; 0x2ba0 <__fp_splitA+0xc>
    2bbe:	86 95       	lsr	r24
    2bc0:	71 05       	cpc	r23, r1
    2bc2:	61 05       	cpc	r22, r1
    2bc4:	08 94       	sec
    2bc6:	08 95       	ret

00002bc8 <__fp_zero>:
    2bc8:	e8 94       	clt

00002bca <__fp_szero>:
    2bca:	bb 27       	eor	r27, r27
    2bcc:	66 27       	eor	r22, r22
    2bce:	77 27       	eor	r23, r23
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	97 f9       	bld	r25, 7
    2bd4:	08 95       	ret

00002bd6 <__gesf2>:
    2bd6:	0e 94 76 15 	call	0x2aec	; 0x2aec <__fp_cmp>
    2bda:	08 f4       	brcc	.+2      	; 0x2bde <__gesf2+0x8>
    2bdc:	8f ef       	ldi	r24, 0xFF	; 255
    2bde:	08 95       	ret

00002be0 <__mulsf3>:
    2be0:	0e 94 03 16 	call	0x2c06	; 0x2c06 <__mulsf3x>
    2be4:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__fp_round>
    2be8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__fp_pscA>
    2bec:	38 f0       	brcs	.+14     	; 0x2bfc <__mulsf3+0x1c>
    2bee:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__fp_pscB>
    2bf2:	20 f0       	brcs	.+8      	; 0x2bfc <__mulsf3+0x1c>
    2bf4:	95 23       	and	r25, r21
    2bf6:	11 f0       	breq	.+4      	; 0x2bfc <__mulsf3+0x1c>
    2bf8:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__fp_inf>
    2bfc:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__fp_nan>
    2c00:	11 24       	eor	r1, r1
    2c02:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__fp_szero>

00002c06 <__mulsf3x>:
    2c06:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__fp_split3>
    2c0a:	70 f3       	brcs	.-36     	; 0x2be8 <__mulsf3+0x8>

00002c0c <__mulsf3_pse>:
    2c0c:	95 9f       	mul	r25, r21
    2c0e:	c1 f3       	breq	.-16     	; 0x2c00 <__mulsf3+0x20>
    2c10:	95 0f       	add	r25, r21
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	55 1f       	adc	r21, r21
    2c16:	62 9f       	mul	r22, r18
    2c18:	f0 01       	movw	r30, r0
    2c1a:	72 9f       	mul	r23, r18
    2c1c:	bb 27       	eor	r27, r27
    2c1e:	f0 0d       	add	r31, r0
    2c20:	b1 1d       	adc	r27, r1
    2c22:	63 9f       	mul	r22, r19
    2c24:	aa 27       	eor	r26, r26
    2c26:	f0 0d       	add	r31, r0
    2c28:	b1 1d       	adc	r27, r1
    2c2a:	aa 1f       	adc	r26, r26
    2c2c:	64 9f       	mul	r22, r20
    2c2e:	66 27       	eor	r22, r22
    2c30:	b0 0d       	add	r27, r0
    2c32:	a1 1d       	adc	r26, r1
    2c34:	66 1f       	adc	r22, r22
    2c36:	82 9f       	mul	r24, r18
    2c38:	22 27       	eor	r18, r18
    2c3a:	b0 0d       	add	r27, r0
    2c3c:	a1 1d       	adc	r26, r1
    2c3e:	62 1f       	adc	r22, r18
    2c40:	73 9f       	mul	r23, r19
    2c42:	b0 0d       	add	r27, r0
    2c44:	a1 1d       	adc	r26, r1
    2c46:	62 1f       	adc	r22, r18
    2c48:	83 9f       	mul	r24, r19
    2c4a:	a0 0d       	add	r26, r0
    2c4c:	61 1d       	adc	r22, r1
    2c4e:	22 1f       	adc	r18, r18
    2c50:	74 9f       	mul	r23, r20
    2c52:	33 27       	eor	r19, r19
    2c54:	a0 0d       	add	r26, r0
    2c56:	61 1d       	adc	r22, r1
    2c58:	23 1f       	adc	r18, r19
    2c5a:	84 9f       	mul	r24, r20
    2c5c:	60 0d       	add	r22, r0
    2c5e:	21 1d       	adc	r18, r1
    2c60:	82 2f       	mov	r24, r18
    2c62:	76 2f       	mov	r23, r22
    2c64:	6a 2f       	mov	r22, r26
    2c66:	11 24       	eor	r1, r1
    2c68:	9f 57       	subi	r25, 0x7F	; 127
    2c6a:	50 40       	sbci	r21, 0x00	; 0
    2c6c:	9a f0       	brmi	.+38     	; 0x2c94 <__mulsf3_pse+0x88>
    2c6e:	f1 f0       	breq	.+60     	; 0x2cac <__mulsf3_pse+0xa0>
    2c70:	88 23       	and	r24, r24
    2c72:	4a f0       	brmi	.+18     	; 0x2c86 <__mulsf3_pse+0x7a>
    2c74:	ee 0f       	add	r30, r30
    2c76:	ff 1f       	adc	r31, r31
    2c78:	bb 1f       	adc	r27, r27
    2c7a:	66 1f       	adc	r22, r22
    2c7c:	77 1f       	adc	r23, r23
    2c7e:	88 1f       	adc	r24, r24
    2c80:	91 50       	subi	r25, 0x01	; 1
    2c82:	50 40       	sbci	r21, 0x00	; 0
    2c84:	a9 f7       	brne	.-22     	; 0x2c70 <__mulsf3_pse+0x64>
    2c86:	9e 3f       	cpi	r25, 0xFE	; 254
    2c88:	51 05       	cpc	r21, r1
    2c8a:	80 f0       	brcs	.+32     	; 0x2cac <__mulsf3_pse+0xa0>
    2c8c:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__fp_inf>
    2c90:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__fp_szero>
    2c94:	5f 3f       	cpi	r21, 0xFF	; 255
    2c96:	e4 f3       	brlt	.-8      	; 0x2c90 <__mulsf3_pse+0x84>
    2c98:	98 3e       	cpi	r25, 0xE8	; 232
    2c9a:	d4 f3       	brlt	.-12     	; 0x2c90 <__mulsf3_pse+0x84>
    2c9c:	86 95       	lsr	r24
    2c9e:	77 95       	ror	r23
    2ca0:	67 95       	ror	r22
    2ca2:	b7 95       	ror	r27
    2ca4:	f7 95       	ror	r31
    2ca6:	e7 95       	ror	r30
    2ca8:	9f 5f       	subi	r25, 0xFF	; 255
    2caa:	c1 f7       	brne	.-16     	; 0x2c9c <__mulsf3_pse+0x90>
    2cac:	fe 2b       	or	r31, r30
    2cae:	88 0f       	add	r24, r24
    2cb0:	91 1d       	adc	r25, r1
    2cb2:	96 95       	lsr	r25
    2cb4:	87 95       	ror	r24
    2cb6:	97 f9       	bld	r25, 7
    2cb8:	08 95       	ret

00002cba <itoa>:
    2cba:	45 32       	cpi	r20, 0x25	; 37
    2cbc:	51 05       	cpc	r21, r1
    2cbe:	20 f4       	brcc	.+8      	; 0x2cc8 <itoa+0xe>
    2cc0:	42 30       	cpi	r20, 0x02	; 2
    2cc2:	10 f0       	brcs	.+4      	; 0x2cc8 <itoa+0xe>
    2cc4:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__itoa_ncheck>
    2cc8:	fb 01       	movw	r30, r22
    2cca:	10 82       	st	Z, r1
    2ccc:	cb 01       	movw	r24, r22
    2cce:	08 95       	ret

00002cd0 <__itoa_ncheck>:
    2cd0:	bb 27       	eor	r27, r27
    2cd2:	4a 30       	cpi	r20, 0x0A	; 10
    2cd4:	31 f4       	brne	.+12     	; 0x2ce2 <__itoa_ncheck+0x12>
    2cd6:	99 23       	and	r25, r25
    2cd8:	22 f4       	brpl	.+8      	; 0x2ce2 <__itoa_ncheck+0x12>
    2cda:	bd e2       	ldi	r27, 0x2D	; 45
    2cdc:	90 95       	com	r25
    2cde:	81 95       	neg	r24
    2ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce2:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__utoa_common>

00002ce6 <__utoa_ncheck>:
    2ce6:	bb 27       	eor	r27, r27

00002ce8 <__utoa_common>:
    2ce8:	fb 01       	movw	r30, r22
    2cea:	55 27       	eor	r21, r21
    2cec:	aa 27       	eor	r26, r26
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	aa 1f       	adc	r26, r26
    2cf4:	a4 17       	cp	r26, r20
    2cf6:	10 f0       	brcs	.+4      	; 0x2cfc <__utoa_common+0x14>
    2cf8:	a4 1b       	sub	r26, r20
    2cfa:	83 95       	inc	r24
    2cfc:	50 51       	subi	r21, 0x10	; 16
    2cfe:	b9 f7       	brne	.-18     	; 0x2cee <__utoa_common+0x6>
    2d00:	a0 5d       	subi	r26, 0xD0	; 208
    2d02:	aa 33       	cpi	r26, 0x3A	; 58
    2d04:	08 f0       	brcs	.+2      	; 0x2d08 <__utoa_common+0x20>
    2d06:	a9 5d       	subi	r26, 0xD9	; 217
    2d08:	a1 93       	st	Z+, r26
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	79 f7       	brne	.-34     	; 0x2cec <__utoa_common+0x4>
    2d0e:	b1 11       	cpse	r27, r1
    2d10:	b1 93       	st	Z+, r27
    2d12:	11 92       	st	Z+, r1
    2d14:	cb 01       	movw	r24, r22
    2d16:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <strrev>

00002d1a <strrev>:
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	67 2f       	mov	r22, r23
    2d20:	71 91       	ld	r23, Z+
    2d22:	77 23       	and	r23, r23
    2d24:	e1 f7       	brne	.-8      	; 0x2d1e <strrev+0x4>
    2d26:	32 97       	sbiw	r30, 0x02	; 2
    2d28:	04 c0       	rjmp	.+8      	; 0x2d32 <strrev+0x18>
    2d2a:	7c 91       	ld	r23, X
    2d2c:	6d 93       	st	X+, r22
    2d2e:	70 83       	st	Z, r23
    2d30:	62 91       	ld	r22, -Z
    2d32:	ae 17       	cp	r26, r30
    2d34:	bf 07       	cpc	r27, r31
    2d36:	c8 f3       	brcs	.-14     	; 0x2d2a <strrev+0x10>
    2d38:	08 95       	ret

00002d3a <_exit>:
    2d3a:	f8 94       	cli

00002d3c <__stop_program>:
    2d3c:	ff cf       	rjmp	.-2      	; 0x2d3c <__stop_program>
    2d3e:	cf 00       	.word	0x00cf	; ????
    2d40:	d1 00       	.word	0x00d1	; ????
    2d42:	d3 00       	.word	0x00d3	; ????
    2d44:	d5 00       	.word	0x00d5	; ????
    2d46:	d7 00       	.word	0x00d7	; ????
    2d48:	d9 00       	.word	0x00d9	; ????
    2d4a:	db 00       	.word	0x00db	; ????
    2d4c:	dd 00       	.word	0x00dd	; ????
    2d4e:	df 00       	.word	0x00df	; ????
    2d50:	e1 00       	.word	0x00e1	; ????
    2d52:	e3 00       	.word	0x00e3	; ????
    2d54:	e5 00       	.word	0x00e5	; ????
    2d56:	e7 00       	.word	0x00e7	; ????
    2d58:	e9 00       	.word	0x00e9	; ????
    2d5a:	eb 00       	.word	0x00eb	; ????
    2d5c:	ed 00       	.word	0x00ed	; ????
