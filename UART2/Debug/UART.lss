
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000624  000006b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000006b8  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eb4  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002270  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000040  00000000  00000000  000022b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000057a  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000050f  00000000  00000000  0000286a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000103  00000000  00000000  00002d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000020d  00000000  00000000  00002e7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  74:	0c 94 10 03 	jmp	0x620	; 0x620 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_init>:
 *      Author: Mohamed Elsayed
 */

#include "UART.h"

void UART_init(void) {
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA, U2X);
  84:	8b e2       	ldi	r24, 0x2B	; 43
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	fc 01       	movw	r30, r24
  8a:	20 81       	ld	r18, Z
  8c:	8b e2       	ldi	r24, 0x2B	; 43
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	22 60       	ori	r18, 0x02	; 2
  92:	fc 01       	movw	r30, r24
  94:	20 83       	st	Z, r18

	SET_BIT(UCSRB, TXEN);
  96:	8a e2       	ldi	r24, 0x2A	; 42
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	fc 01       	movw	r30, r24
  9c:	20 81       	ld	r18, Z
  9e:	8a e2       	ldi	r24, 0x2A	; 42
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	28 60       	ori	r18, 0x08	; 8
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	SET_BIT(UCSRB, RXEN);
  a8:	8a e2       	ldi	r24, 0x2A	; 42
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	fc 01       	movw	r30, r24
  ae:	20 81       	ld	r18, Z
  b0:	8a e2       	ldi	r24, 0x2A	; 42
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	20 61       	ori	r18, 0x10	; 16
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18

	SET_BIT(UCSRC, URSEL);
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	20 81       	ld	r18, Z
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	20 68       	ori	r18, 0x80	; 128
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC, UMSEL);
  cc:	80 e4       	ldi	r24, 0x40	; 64
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	fc 01       	movw	r30, r24
  d2:	20 81       	ld	r18, Z
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	2f 7b       	andi	r18, 0xBF	; 191
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
	SET_BIT(UCSRC, UPM1);
  de:	80 e4       	ldi	r24, 0x40	; 64
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	20 81       	ld	r18, Z
  e6:	80 e4       	ldi	r24, 0x40	; 64
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	20 62       	ori	r18, 0x20	; 32
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC, USBS);
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	20 81       	ld	r18, Z
  f8:	80 e4       	ldi	r24, 0x40	; 64
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	27 7f       	andi	r18, 0xF7	; 247
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
	SET_BIT(UCSRC, UCSZ1);
 102:	80 e4       	ldi	r24, 0x40	; 64
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	20 81       	ld	r18, Z
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	24 60       	ori	r18, 0x04	; 4
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
	SET_BIT(UCSRC, UCSZ0);
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	20 81       	ld	r18, Z
 11c:	80 e4       	ldi	r24, 0x40	; 64
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	22 60       	ori	r18, 0x02	; 2
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC, UCPOL);
 126:	80 e4       	ldi	r24, 0x40	; 64
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	20 81       	ld	r18, Z
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	2e 7f       	andi	r18, 0xFE	; 254
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18

	UBRRH = 12 >> 8;
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	10 82       	st	Z, r1
	UBRRL = 12;
 140:	89 e2       	ldi	r24, 0x29	; 41
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	2c e0       	ldi	r18, 0x0C	; 12
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18

}
 14a:	00 00       	nop
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <UART_sendByte>:

void UART_sendByte(const uint8 data) {
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	0f 92       	push	r0
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01

	while (BIT_IS_CLEAR(UCSRA, UDRE))
 15e:	00 00       	nop
 160:	8b e2       	ldi	r24, 0x2B	; 43
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	80 81       	ld	r24, Z
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	80 72       	andi	r24, 0x20	; 32
 16e:	99 27       	eor	r25, r25
 170:	89 2b       	or	r24, r25
 172:	b1 f3       	breq	.-20     	; 0x160 <UART_sendByte+0xe>
		;
	UDR = data;
 174:	8c e2       	ldi	r24, 0x2C	; 44
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	29 81       	ldd	r18, Y+1	; 0x01
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18

}
 17e:	00 00       	nop
 180:	0f 90       	pop	r0
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <UART_recieveByte>:

uint8 UART_recieveByte(void) {
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC))
 190:	00 00       	nop
 192:	8b e2       	ldi	r24, 0x2B	; 43
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	80 81       	ld	r24, Z
 19a:	88 23       	and	r24, r24
 19c:	d4 f7       	brge	.-12     	; 0x192 <UART_recieveByte+0xa>
		;
	if ((BIT_IS_CLEAR(UCSRA, FE)) && (BIT_IS_CLEAR(UCSRA, PE))) {
 19e:	8b e2       	ldi	r24, 0x2B	; 43
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	88 2f       	mov	r24, r24
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	80 71       	andi	r24, 0x10	; 16
 1ac:	99 27       	eor	r25, r25
 1ae:	89 2b       	or	r24, r25
 1b0:	79 f4       	brne	.+30     	; 0x1d0 <UART_recieveByte+0x48>
 1b2:	8b e2       	ldi	r24, 0x2B	; 43
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	fc 01       	movw	r30, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	88 2f       	mov	r24, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	84 70       	andi	r24, 0x04	; 4
 1c0:	99 27       	eor	r25, r25
 1c2:	89 2b       	or	r24, r25
 1c4:	29 f4       	brne	.+10     	; 0x1d0 <UART_recieveByte+0x48>
		return UDR;
 1c6:	8c e2       	ldi	r24, 0x2C	; 44
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <UART_recieveByte+0x4a>
	}
	return 0;
 1d0:	80 e0       	ldi	r24, 0x00	; 0

}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <UART_sendString>:

void UART_sendString(const uint8 *Str) {
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <UART_sendString+0x6>
 1de:	0f 92       	push	r0
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	9b 83       	std	Y+3, r25	; 0x03
 1e6:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
 1e8:	19 82       	std	Y+1, r1	; 0x01
	while (Str[i] != '\0') {
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <UART_sendString+0x26>
		UART_sendByte(*Str);
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	9b 81       	ldd	r25, Y+3	; 0x03
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendByte>
		i++;
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	89 83       	std	Y+1, r24	; 0x01
	while (Str[i] != '\0') {
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	88 2f       	mov	r24, r24
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	2a 81       	ldd	r18, Y+2	; 0x02
 206:	3b 81       	ldd	r19, Y+3	; 0x03
 208:	82 0f       	add	r24, r18
 20a:	93 1f       	adc	r25, r19
 20c:	fc 01       	movw	r30, r24
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	61 f7       	brne	.-40     	; 0x1ec <UART_sendString+0x14>
	}
	UART_sendByte('#');
 214:	83 e2       	ldi	r24, 0x23	; 35
 216:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendByte>

}
 21a:	00 00       	nop
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <UART_receiveString>:

void UART_receiveString(uint8 *Str) { // Receive until #
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	00 d0       	rcall	.+0      	; 0x232 <UART_receiveString+0xa>
 232:	0f 92       	push	r0
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	9b 83       	std	Y+3, r25	; 0x03
 23a:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
 23c:	19 82       	std	Y+1, r1	; 0x01
	do {
		Str[i] = UART_recieveByte();
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	88 2f       	mov	r24, r24
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	2a 81       	ldd	r18, Y+2	; 0x02
 246:	3b 81       	ldd	r19, Y+3	; 0x03
 248:	89 01       	movw	r16, r18
 24a:	08 0f       	add	r16, r24
 24c:	19 1f       	adc	r17, r25
 24e:	0e 94 c4 00 	call	0x188	; 0x188 <UART_recieveByte>
 252:	f8 01       	movw	r30, r16
 254:	80 83       	st	Z, r24
		i++;
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	89 83       	std	Y+1, r24	; 0x01
	} while (Str[i] != '#');
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	2a 81       	ldd	r18, Y+2	; 0x02
 264:	3b 81       	ldd	r19, Y+3	; 0x03
 266:	82 0f       	add	r24, r18
 268:	93 1f       	adc	r25, r19
 26a:	fc 01       	movw	r30, r24
 26c:	80 81       	ld	r24, Z
 26e:	83 32       	cpi	r24, 0x23	; 35
 270:	31 f7       	brne	.-52     	; 0x23e <UART_receiveString+0x16>
	Str[i] = '\0';
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	88 2f       	mov	r24, r24
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	2a 81       	ldd	r18, Y+2	; 0x02
 27a:	3b 81       	ldd	r19, Y+3	; 0x03
 27c:	82 0f       	add	r24, r18
 27e:	93 1f       	adc	r25, r19
 280:	fc 01       	movw	r30, r24
 282:	10 82       	st	Z, r1
}
 284:	00 00       	nop
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <main>:

#include  "UART.h"

uint8 sec =0;

int main(void){
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	a2 97       	sbiw	r28, 0x22	; 34
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
	UART_init();
 2aa:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_init>
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	aa e7       	ldi	r26, 0x7A	; 122
 2b4:	b4 e4       	ldi	r27, 0x44	; 68
 2b6:	89 83       	std	Y+1, r24	; 0x01
 2b8:	9a 83       	std	Y+2, r25	; 0x02
 2ba:	ab 83       	std	Y+3, r26	; 0x03
 2bc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	4a e7       	ldi	r20, 0x7A	; 122
 2c4:	53 e4       	ldi	r21, 0x43	; 67
 2c6:	69 81       	ldd	r22, Y+1	; 0x01
 2c8:	7a 81       	ldd	r23, Y+2	; 0x02
 2ca:	8b 81       	ldd	r24, Y+3	; 0x03
 2cc:	9c 81       	ldd	r25, Y+4	; 0x04
 2ce:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__mulsf3>
 2d2:	6b 8b       	std	Y+19, r22	; 0x13
 2d4:	7c 8b       	std	Y+20, r23	; 0x14
 2d6:	8d 8b       	std	Y+21, r24	; 0x15
 2d8:	9e 8b       	std	Y+22, r25	; 0x16
 2da:	8b 89       	ldd	r24, Y+19	; 0x13
 2dc:	9c 89       	ldd	r25, Y+20	; 0x14
 2de:	ad 89       	ldd	r26, Y+21	; 0x15
 2e0:	be 89       	ldd	r27, Y+22	; 0x16
 2e2:	8d 83       	std	Y+5, r24	; 0x05
 2e4:	9e 83       	std	Y+6, r25	; 0x06
 2e6:	af 83       	std	Y+7, r26	; 0x07
 2e8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	40 e8       	ldi	r20, 0x80	; 128
 2f0:	5f e3       	ldi	r21, 0x3F	; 63
 2f2:	6d 81       	ldd	r22, Y+5	; 0x05
 2f4:	7e 81       	ldd	r23, Y+6	; 0x06
 2f6:	8f 81       	ldd	r24, Y+7	; 0x07
 2f8:	98 85       	ldd	r25, Y+8	; 0x08
 2fa:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__cmpsf2>
 2fe:	88 23       	and	r24, r24
 300:	2c f4       	brge	.+10     	; 0x30c <main+0x76>
		__ticks = 1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	9a 87       	std	Y+10, r25	; 0x0a
 308:	89 87       	std	Y+9, r24	; 0x09
 30a:	54 c0       	rjmp	.+168    	; 0x3b4 <main+0x11e>
	else if (__tmp > 65535)
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	3f ef       	ldi	r19, 0xFF	; 255
 310:	4f e7       	ldi	r20, 0x7F	; 127
 312:	57 e4       	ldi	r21, 0x47	; 71
 314:	6d 81       	ldd	r22, Y+5	; 0x05
 316:	7e 81       	ldd	r23, Y+6	; 0x06
 318:	8f 81       	ldd	r24, Y+7	; 0x07
 31a:	98 85       	ldd	r25, Y+8	; 0x08
 31c:	0e 94 76 02 	call	0x4ec	; 0x4ec <__gesf2>
 320:	18 16       	cp	r1, r24
 322:	d4 f5       	brge	.+116    	; 0x398 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 e2       	ldi	r20, 0x20	; 32
 32a:	51 e4       	ldi	r21, 0x41	; 65
 32c:	69 81       	ldd	r22, Y+1	; 0x01
 32e:	7a 81       	ldd	r23, Y+2	; 0x02
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	9c 81       	ldd	r25, Y+4	; 0x04
 334:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__mulsf3>
 338:	6f 8b       	std	Y+23, r22	; 0x17
 33a:	78 8f       	std	Y+24, r23	; 0x18
 33c:	89 8f       	std	Y+25, r24	; 0x19
 33e:	9a 8f       	std	Y+26, r25	; 0x1a
 340:	8f 89       	ldd	r24, Y+23	; 0x17
 342:	98 8d       	ldd	r25, Y+24	; 0x18
 344:	a9 8d       	ldd	r26, Y+25	; 0x19
 346:	ba 8d       	ldd	r27, Y+26	; 0x1a
 348:	8f 87       	std	Y+15, r24	; 0x0f
 34a:	98 8b       	std	Y+16, r25	; 0x10
 34c:	a9 8b       	std	Y+17, r26	; 0x11
 34e:	ba 8b       	std	Y+18, r27	; 0x12
 350:	6f 85       	ldd	r22, Y+15	; 0x0f
 352:	78 89       	ldd	r23, Y+16	; 0x10
 354:	89 89       	ldd	r24, Y+17	; 0x11
 356:	9a 89       	ldd	r25, Y+18	; 0x12
 358:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__fixunssfsi>
 35c:	6b 8f       	std	Y+27, r22	; 0x1b
 35e:	7c 8f       	std	Y+28, r23	; 0x1c
 360:	8d 8f       	std	Y+29, r24	; 0x1d
 362:	9e 8f       	std	Y+30, r25	; 0x1e
 364:	ab 8d       	ldd	r26, Y+27	; 0x1b
 366:	bc 8d       	ldd	r27, Y+28	; 0x1c
 368:	ba 87       	std	Y+10, r27	; 0x0a
 36a:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 36c:	10 c0       	rjmp	.+32     	; 0x38e <main+0xf8>
 36e:	89 e1       	ldi	r24, 0x19	; 25
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	9c 87       	std	Y+12, r25	; 0x0c
 374:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 376:	8b 85       	ldd	r24, Y+11	; 0x0b
 378:	9c 85       	ldd	r25, Y+12	; 0x0c
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <main+0xe4>
 37e:	9c 87       	std	Y+12, r25	; 0x0c
 380:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 382:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 384:	89 85       	ldd	r24, Y+9	; 0x09
 386:	9a 85       	ldd	r25, Y+10	; 0x0a
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	9a 87       	std	Y+10, r25	; 0x0a
 38c:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
 38e:	89 85       	ldd	r24, Y+9	; 0x09
 390:	9a 85       	ldd	r25, Y+10	; 0x0a
 392:	89 2b       	or	r24, r25
 394:	61 f7       	brne	.-40     	; 0x36e <main+0xd8>
		}
		return;
 396:	19 c0       	rjmp	.+50     	; 0x3ca <main+0x134>
	}
	else
		__ticks = (uint16_t)__tmp;
 398:	6d 81       	ldd	r22, Y+5	; 0x05
 39a:	7e 81       	ldd	r23, Y+6	; 0x06
 39c:	8f 81       	ldd	r24, Y+7	; 0x07
 39e:	98 85       	ldd	r25, Y+8	; 0x08
 3a0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__fixunssfsi>
 3a4:	6f 8f       	std	Y+31, r22	; 0x1f
 3a6:	78 a3       	std	Y+32, r23	; 0x20
 3a8:	89 a3       	std	Y+33, r24	; 0x21
 3aa:	9a a3       	std	Y+34, r25	; 0x22
 3ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
 3ae:	98 a1       	ldd	r25, Y+32	; 0x20
 3b0:	9a 87       	std	Y+10, r25	; 0x0a
 3b2:	89 87       	std	Y+9, r24	; 0x09
 3b4:	89 85       	ldd	r24, Y+9	; 0x09
 3b6:	9a 85       	ldd	r25, Y+10	; 0x0a
 3b8:	9e 87       	std	Y+14, r25	; 0x0e
 3ba:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
 3bc:	8d 85       	ldd	r24, Y+13	; 0x0d
 3be:	9e 85       	ldd	r25, Y+14	; 0x0e
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <main+0x12a>
 3c4:	9e 87       	std	Y+14, r25	; 0x0e
 3c6:	8d 87       	std	Y+13, r24	; 0x0d
}
 3c8:	00 00       	nop
	while(1){
		_delay_ms(1000);
		sec++;
 3ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 3ce:	8f 5f       	subi	r24, 0xFF	; 255
 3d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		if(sec >= 60){
 3d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 3d8:	8c 33       	cpi	r24, 0x3C	; 60
 3da:	10 f0       	brcs	.+4      	; 0x3e0 <main+0x14a>
			sec=0;
 3dc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		}
		UART_sendByte(sec);
 3e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 3e4:	0e 94 a9 00 	call	0x152	; 0x152 <UART_sendByte>
		_delay_ms(1000);
 3e8:	62 cf       	rjmp	.-316    	; 0x2ae <main+0x18>

000003ea <__cmpsf2>:
 3ea:	0e 94 29 02 	call	0x452	; 0x452 <__fp_cmp>
 3ee:	08 f4       	brcc	.+2      	; 0x3f2 <__cmpsf2+0x8>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret

000003f4 <__fixunssfsi>:
 3f4:	0e 94 55 02 	call	0x4aa	; 0x4aa <__fp_splitA>
 3f8:	88 f0       	brcs	.+34     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 3fa:	9f 57       	subi	r25, 0x7F	; 127
 3fc:	98 f0       	brcs	.+38     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
 3fe:	b9 2f       	mov	r27, r25
 400:	99 27       	eor	r25, r25
 402:	b7 51       	subi	r27, 0x17	; 23
 404:	b0 f0       	brcs	.+44     	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
 406:	e1 f0       	breq	.+56     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	1a f0       	brmi	.+6      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 412:	ba 95       	dec	r27
 414:	c9 f7       	brne	.-14     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 416:	14 c0       	rjmp	.+40     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
 418:	b1 30       	cpi	r27, 0x01	; 1
 41a:	91 f0       	breq	.+36     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
 41c:	0e 94 6f 02 	call	0x4de	; 0x4de <__fp_zero>
 420:	b1 e0       	ldi	r27, 0x01	; 1
 422:	08 95       	ret
 424:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_zero>
 428:	67 2f       	mov	r22, r23
 42a:	78 2f       	mov	r23, r24
 42c:	88 27       	eor	r24, r24
 42e:	b8 5f       	subi	r27, 0xF8	; 248
 430:	39 f0       	breq	.+14     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
 432:	b9 3f       	cpi	r27, 0xF9	; 249
 434:	cc f3       	brlt	.-14     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
 436:	86 95       	lsr	r24
 438:	77 95       	ror	r23
 43a:	67 95       	ror	r22
 43c:	b3 95       	inc	r27
 43e:	d9 f7       	brne	.-10     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 440:	3e f4       	brtc	.+14     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
 442:	90 95       	com	r25
 444:	80 95       	com	r24
 446:	70 95       	com	r23
 448:	61 95       	neg	r22
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	8f 4f       	sbci	r24, 0xFF	; 255
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	08 95       	ret

00000452 <__fp_cmp>:
 452:	99 0f       	add	r25, r25
 454:	00 08       	sbc	r0, r0
 456:	55 0f       	add	r21, r21
 458:	aa 0b       	sbc	r26, r26
 45a:	e0 e8       	ldi	r30, 0x80	; 128
 45c:	fe ef       	ldi	r31, 0xFE	; 254
 45e:	16 16       	cp	r1, r22
 460:	17 06       	cpc	r1, r23
 462:	e8 07       	cpc	r30, r24
 464:	f9 07       	cpc	r31, r25
 466:	c0 f0       	brcs	.+48     	; 0x498 <__stack+0x39>
 468:	12 16       	cp	r1, r18
 46a:	13 06       	cpc	r1, r19
 46c:	e4 07       	cpc	r30, r20
 46e:	f5 07       	cpc	r31, r21
 470:	98 f0       	brcs	.+38     	; 0x498 <__stack+0x39>
 472:	62 1b       	sub	r22, r18
 474:	73 0b       	sbc	r23, r19
 476:	84 0b       	sbc	r24, r20
 478:	95 0b       	sbc	r25, r21
 47a:	39 f4       	brne	.+14     	; 0x48a <__stack+0x2b>
 47c:	0a 26       	eor	r0, r26
 47e:	61 f0       	breq	.+24     	; 0x498 <__stack+0x39>
 480:	23 2b       	or	r18, r19
 482:	24 2b       	or	r18, r20
 484:	25 2b       	or	r18, r21
 486:	21 f4       	brne	.+8      	; 0x490 <__stack+0x31>
 488:	08 95       	ret
 48a:	0a 26       	eor	r0, r26
 48c:	09 f4       	brne	.+2      	; 0x490 <__stack+0x31>
 48e:	a1 40       	sbci	r26, 0x01	; 1
 490:	a6 95       	lsr	r26
 492:	8f ef       	ldi	r24, 0xFF	; 255
 494:	81 1d       	adc	r24, r1
 496:	81 1d       	adc	r24, r1
 498:	08 95       	ret

0000049a <__fp_split3>:
 49a:	57 fd       	sbrc	r21, 7
 49c:	90 58       	subi	r25, 0x80	; 128
 49e:	44 0f       	add	r20, r20
 4a0:	55 1f       	adc	r21, r21
 4a2:	59 f0       	breq	.+22     	; 0x4ba <__fp_splitA+0x10>
 4a4:	5f 3f       	cpi	r21, 0xFF	; 255
 4a6:	71 f0       	breq	.+28     	; 0x4c4 <__fp_splitA+0x1a>
 4a8:	47 95       	ror	r20

000004aa <__fp_splitA>:
 4aa:	88 0f       	add	r24, r24
 4ac:	97 fb       	bst	r25, 7
 4ae:	99 1f       	adc	r25, r25
 4b0:	61 f0       	breq	.+24     	; 0x4ca <__fp_splitA+0x20>
 4b2:	9f 3f       	cpi	r25, 0xFF	; 255
 4b4:	79 f0       	breq	.+30     	; 0x4d4 <__fp_splitA+0x2a>
 4b6:	87 95       	ror	r24
 4b8:	08 95       	ret
 4ba:	12 16       	cp	r1, r18
 4bc:	13 06       	cpc	r1, r19
 4be:	14 06       	cpc	r1, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	f2 cf       	rjmp	.-28     	; 0x4a8 <__fp_split3+0xe>
 4c4:	46 95       	lsr	r20
 4c6:	f1 df       	rcall	.-30     	; 0x4aa <__fp_splitA>
 4c8:	08 c0       	rjmp	.+16     	; 0x4da <__fp_splitA+0x30>
 4ca:	16 16       	cp	r1, r22
 4cc:	17 06       	cpc	r1, r23
 4ce:	18 06       	cpc	r1, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	f1 cf       	rjmp	.-30     	; 0x4b6 <__fp_splitA+0xc>
 4d4:	86 95       	lsr	r24
 4d6:	71 05       	cpc	r23, r1
 4d8:	61 05       	cpc	r22, r1
 4da:	08 94       	sec
 4dc:	08 95       	ret

000004de <__fp_zero>:
 4de:	e8 94       	clt

000004e0 <__fp_szero>:
 4e0:	bb 27       	eor	r27, r27
 4e2:	66 27       	eor	r22, r22
 4e4:	77 27       	eor	r23, r23
 4e6:	cb 01       	movw	r24, r22
 4e8:	97 f9       	bld	r25, 7
 4ea:	08 95       	ret

000004ec <__gesf2>:
 4ec:	0e 94 29 02 	call	0x452	; 0x452 <__fp_cmp>
 4f0:	08 f4       	brcc	.+2      	; 0x4f4 <__gesf2+0x8>
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	08 95       	ret

000004f6 <__mulsf3>:
 4f6:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3x>
 4fa:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__fp_round>
 4fe:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__fp_pscA>
 502:	38 f0       	brcs	.+14     	; 0x512 <__mulsf3+0x1c>
 504:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_pscB>
 508:	20 f0       	brcs	.+8      	; 0x512 <__mulsf3+0x1c>
 50a:	95 23       	and	r25, r21
 50c:	11 f0       	breq	.+4      	; 0x512 <__mulsf3+0x1c>
 50e:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_inf>
 512:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_nan>
 516:	11 24       	eor	r1, r1
 518:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_szero>

0000051c <__mulsf3x>:
 51c:	0e 94 4d 02 	call	0x49a	; 0x49a <__fp_split3>
 520:	70 f3       	brcs	.-36     	; 0x4fe <__mulsf3+0x8>

00000522 <__mulsf3_pse>:
 522:	95 9f       	mul	r25, r21
 524:	c1 f3       	breq	.-16     	; 0x516 <__mulsf3+0x20>
 526:	95 0f       	add	r25, r21
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	55 1f       	adc	r21, r21
 52c:	62 9f       	mul	r22, r18
 52e:	f0 01       	movw	r30, r0
 530:	72 9f       	mul	r23, r18
 532:	bb 27       	eor	r27, r27
 534:	f0 0d       	add	r31, r0
 536:	b1 1d       	adc	r27, r1
 538:	63 9f       	mul	r22, r19
 53a:	aa 27       	eor	r26, r26
 53c:	f0 0d       	add	r31, r0
 53e:	b1 1d       	adc	r27, r1
 540:	aa 1f       	adc	r26, r26
 542:	64 9f       	mul	r22, r20
 544:	66 27       	eor	r22, r22
 546:	b0 0d       	add	r27, r0
 548:	a1 1d       	adc	r26, r1
 54a:	66 1f       	adc	r22, r22
 54c:	82 9f       	mul	r24, r18
 54e:	22 27       	eor	r18, r18
 550:	b0 0d       	add	r27, r0
 552:	a1 1d       	adc	r26, r1
 554:	62 1f       	adc	r22, r18
 556:	73 9f       	mul	r23, r19
 558:	b0 0d       	add	r27, r0
 55a:	a1 1d       	adc	r26, r1
 55c:	62 1f       	adc	r22, r18
 55e:	83 9f       	mul	r24, r19
 560:	a0 0d       	add	r26, r0
 562:	61 1d       	adc	r22, r1
 564:	22 1f       	adc	r18, r18
 566:	74 9f       	mul	r23, r20
 568:	33 27       	eor	r19, r19
 56a:	a0 0d       	add	r26, r0
 56c:	61 1d       	adc	r22, r1
 56e:	23 1f       	adc	r18, r19
 570:	84 9f       	mul	r24, r20
 572:	60 0d       	add	r22, r0
 574:	21 1d       	adc	r18, r1
 576:	82 2f       	mov	r24, r18
 578:	76 2f       	mov	r23, r22
 57a:	6a 2f       	mov	r22, r26
 57c:	11 24       	eor	r1, r1
 57e:	9f 57       	subi	r25, 0x7F	; 127
 580:	50 40       	sbci	r21, 0x00	; 0
 582:	9a f0       	brmi	.+38     	; 0x5aa <__mulsf3_pse+0x88>
 584:	f1 f0       	breq	.+60     	; 0x5c2 <__mulsf3_pse+0xa0>
 586:	88 23       	and	r24, r24
 588:	4a f0       	brmi	.+18     	; 0x59c <__mulsf3_pse+0x7a>
 58a:	ee 0f       	add	r30, r30
 58c:	ff 1f       	adc	r31, r31
 58e:	bb 1f       	adc	r27, r27
 590:	66 1f       	adc	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	88 1f       	adc	r24, r24
 596:	91 50       	subi	r25, 0x01	; 1
 598:	50 40       	sbci	r21, 0x00	; 0
 59a:	a9 f7       	brne	.-22     	; 0x586 <__mulsf3_pse+0x64>
 59c:	9e 3f       	cpi	r25, 0xFE	; 254
 59e:	51 05       	cpc	r21, r1
 5a0:	80 f0       	brcs	.+32     	; 0x5c2 <__mulsf3_pse+0xa0>
 5a2:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_inf>
 5a6:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_szero>
 5aa:	5f 3f       	cpi	r21, 0xFF	; 255
 5ac:	e4 f3       	brlt	.-8      	; 0x5a6 <__mulsf3_pse+0x84>
 5ae:	98 3e       	cpi	r25, 0xE8	; 232
 5b0:	d4 f3       	brlt	.-12     	; 0x5a6 <__mulsf3_pse+0x84>
 5b2:	86 95       	lsr	r24
 5b4:	77 95       	ror	r23
 5b6:	67 95       	ror	r22
 5b8:	b7 95       	ror	r27
 5ba:	f7 95       	ror	r31
 5bc:	e7 95       	ror	r30
 5be:	9f 5f       	subi	r25, 0xFF	; 255
 5c0:	c1 f7       	brne	.-16     	; 0x5b2 <__mulsf3_pse+0x90>
 5c2:	fe 2b       	or	r31, r30
 5c4:	88 0f       	add	r24, r24
 5c6:	91 1d       	adc	r25, r1
 5c8:	96 95       	lsr	r25
 5ca:	87 95       	ror	r24
 5cc:	97 f9       	bld	r25, 7
 5ce:	08 95       	ret

000005d0 <__fp_inf>:
 5d0:	97 f9       	bld	r25, 7
 5d2:	9f 67       	ori	r25, 0x7F	; 127
 5d4:	80 e8       	ldi	r24, 0x80	; 128
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	08 95       	ret

000005dc <__fp_nan>:
 5dc:	9f ef       	ldi	r25, 0xFF	; 255
 5de:	80 ec       	ldi	r24, 0xC0	; 192
 5e0:	08 95       	ret

000005e2 <__fp_pscA>:
 5e2:	00 24       	eor	r0, r0
 5e4:	0a 94       	dec	r0
 5e6:	16 16       	cp	r1, r22
 5e8:	17 06       	cpc	r1, r23
 5ea:	18 06       	cpc	r1, r24
 5ec:	09 06       	cpc	r0, r25
 5ee:	08 95       	ret

000005f0 <__fp_pscB>:
 5f0:	00 24       	eor	r0, r0
 5f2:	0a 94       	dec	r0
 5f4:	12 16       	cp	r1, r18
 5f6:	13 06       	cpc	r1, r19
 5f8:	14 06       	cpc	r1, r20
 5fa:	05 06       	cpc	r0, r21
 5fc:	08 95       	ret

000005fe <__fp_round>:
 5fe:	09 2e       	mov	r0, r25
 600:	03 94       	inc	r0
 602:	00 0c       	add	r0, r0
 604:	11 f4       	brne	.+4      	; 0x60a <__fp_round+0xc>
 606:	88 23       	and	r24, r24
 608:	52 f0       	brmi	.+20     	; 0x61e <__fp_round+0x20>
 60a:	bb 0f       	add	r27, r27
 60c:	40 f4       	brcc	.+16     	; 0x61e <__fp_round+0x20>
 60e:	bf 2b       	or	r27, r31
 610:	11 f4       	brne	.+4      	; 0x616 <__fp_round+0x18>
 612:	60 ff       	sbrs	r22, 0
 614:	04 c0       	rjmp	.+8      	; 0x61e <__fp_round+0x20>
 616:	6f 5f       	subi	r22, 0xFF	; 255
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	08 95       	ret

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
